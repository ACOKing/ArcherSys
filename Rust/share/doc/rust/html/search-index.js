var searchIndex = {};
searchIndex['rustc_lint'] = {"items":[[0,"","rustc_lint","Lints in the Rust compiler."],[0,"lint","","Lints, aka compiler warnings."],[11,"name_lower","rustc::lint","Get the lint's name, with ASCII letters converted to lowercase.",0],[11,"open","rustc_back::archive","Opens an existing static archive",1],[11,"remove_file","","Removes a file from this archive",1],[11,"files","","Lists all files in an archive",1],[11,"extend","","Creates an `ArchiveBuilder` for adding files to this archive.",1],[11,"create","","Create a new static archive, ready for adding files.",2],[11,"add_native_library","","Adds all of the contents of a native library to this archive. This will\nsearch in the relevant locations for a library named `name`.",2],[11,"add_rlib","","Adds all of the contents of the rlib at the specified path to this\narchive.",2],[11,"add_file","","Adds an arbitrary file to this archive",2],[11,"update_symbols","","Indicate that the next call to `build` should updates all symbols in\nthe archive (run 'ar s' over it).",2],[11,"build","","Combine the provided files, rlibs, and native libraries into a single\n`Archive`.",2],[11,"fmt","rustc_back::svh","",3],[11,"eq","","",3],[11,"ne","","",3],[11,"clone","","",3],[11,"new","","",3],[11,"as_str","","",3],[11,"calculate","","",3],[11,"fmt","","",3],[11,"hash","rustc_back::svh::svh_visitor","",4],[11,"hash","","",5],[11,"hash","","",6],[11,"get_content","syntax::ast","",7],[11,"get_content","","",8],[11,"visit_mac","rustc_back::svh::svh_visitor","",9],[11,"visit_struct_def","","",9],[11,"visit_variant","","",9],[11,"visit_opt_lifetime_ref","","",9],[11,"visit_ident","","",9],[11,"visit_lifetime_ref","","",9],[11,"visit_lifetime_def","","",9],[11,"visit_expr","","",9],[11,"visit_stmt","","",9],[11,"visit_foreign_item","","",9],[11,"visit_item","","",9],[11,"visit_mod","","",9],[11,"visit_decl","","",9],[11,"visit_ty","","",9],[11,"visit_generics","","",9],[11,"visit_fn","","",9],[11,"visit_ty_method","","",9],[11,"visit_trait_item","","",9],[11,"visit_struct_field","","",9],[11,"visit_explicit_self","","",9],[11,"visit_path","","",9],[11,"visit_block","","",9],[11,"visit_pat","","",9],[11,"visit_local","","",9],[11,"visit_arm","","",9],[11,"tr_id","rustc::middle::astencode","Translates an internal id, meaning a node id that is known to refer to some part of the\nitem currently being inlined, such as a local variable or argument.  All naked node-ids\nthat appear in types have this property, since if something might refer to an external item\nwe would use a def-id to allow for the possibility that the item resides in another crate.",10],[11,"tr_def_id","","Translates an EXTERNAL def-id, converting the crate number from the one used in the encoded\ndata to the current crate numbers..  By external, I mean that it be translated to a\nreference to the item in its original crate, as opposed to being translated to a reference\nto the inlined version of the item.  This is typically, but not always, what you want,\nbecause most def-ids refer to external things like types or other fns that may or may not\nbe inlined.  Note that even when the inlined function is referencing itself recursively, we\nwould want `tr_def_id` for that reference--- conceptually the function calls the original,\nnon-inlined version, and trans deals with linking that recursive call to the inlined copy.",10],[11,"tr_intern_def_id","","Translates an INTERNAL def-id, meaning a def-id that is\nknown to refer to some part of the item currently being\ninlined.  In that case, we want to convert the def-id to\nrefer to the current crate and to the new, inlined node-id.",10],[11,"tr_span","","Translates a `Span` from an extern crate to the corresponding `Span`\nwithin the local crate's codemap. `creader::import_codemap()` will\nalready have allocated any additionally needed FileMaps in the local\ncodemap as a side-effect of creating the crate_metadata's\n`codemap_import_info`.",10],[11,"tr_intern","syntax::ast","",11],[11,"tr","","",11],[11,"tr","core::option","",12],[11,"tr","syntax::codemap","",13],[11,"fold_block","rustc::middle::astencode","",14],[11,"tr","rustc::middle::def","",15],[11,"tr","rustc::middle::ty","",16],[11,"tr","","",17],[11,"tr","rustc::middle::region","",18],[11,"tr","","",19],[11,"tr","rustc::middle::ty","",20],[11,"read_freevar_entry","rbml::reader","",21],[11,"read_capture_mode","","",21],[11,"tr","rustc::middle::ty","",22],[11,"tr","","",23],[11,"tr","","",24],[11,"read_method_callee","rbml::reader","",21],[11,"tr","rustc::middle::ty","",25],[11,"read_vec_per_param_space","rbml::reader","",21],[11,"read_vtable_res_with_key","","",21],[11,"read_vtable_res","","",21],[11,"read_vtable_param_res","","",21],[11,"read_vtable_origin","","",21],[11,"ty_str_ctxt","rustc::metadata::encoder","",26],[11,"emit_closure_type","rbml::writer","",27],[11,"emit_method_origin","","",27],[11,"emit_ty","","",27],[11,"emit_tys","","",27],[11,"emit_trait_ref","","",27],[11,"emit_type_param_def","","",27],[11,"emit_predicate","","",27],[11,"emit_type_scheme","","",27],[11,"emit_existential_bounds","","",27],[11,"emit_builtin_bounds","","",27],[11,"emit_substs","","",27],[11,"emit_auto_adjustment","","",27],[11,"emit_autoref","","",27],[11,"emit_auto_deref_ref","","",27],[11,"emit_unsize_kind","","",27],[11,"tag","","",27],[11,"id","","",27],[11,"visit_id","rustc::middle::astencode","",28],[11,"as_int","rbml","",29],[11,"opt_child","","",29],[11,"read_ty_nodcx","rbml::reader","",21],[11,"read_tys_nodcx","","",21],[11,"read_substs_nodcx","","",21],[11,"read_method_origin","","",21],[11,"read_ty","","",21],[11,"read_tys","","",21],[11,"read_trait_ref","","",21],[11,"read_poly_trait_ref","","",21],[11,"read_type_param_def","","",21],[11,"read_predicate","","",21],[11,"read_type_scheme","","",21],[11,"read_existential_bounds","","",21],[11,"read_substs","","",21],[11,"read_auto_adjustment","","",21],[11,"read_auto_deref_ref","","",21],[11,"read_autoref","","",21],[11,"read_unsize_kind","","",21],[11,"read_closure_kind","","",21],[11,"read_closure_ty","","",21],[11,"convert_def_id","","Converts a def-id that appears in a type.  The correct\ntranslation will depend on what kind of def-id this is.\nThis is a subtle point: type definitions are not\ninlined into the current crate, so if the def-id names\na nominal type or type alias, then it should be\ntranslated to refer to the source crate.",21],[11,"graph_id","rustc::middle::cfg::graphviz","",30],[11,"node_id","","",30],[11,"node_label","","",30],[11,"edge_label","","",30],[11,"nodes","","",30],[11,"edges","","",30],[11,"source","","",30],[11,"target","","",30],[11,"eq","rustc::middle::cfg","",31],[11,"ne","","",31],[11,"id","","",31],[11,"new","","",32],[11,"node_is_reachable","","",32],[11,"hash","rustc::middle::check_const","",33],[11,"cmp","","",33],[11,"partial_cmp","","",33],[11,"lt","","",33],[11,"le","","",33],[11,"gt","","",33],[11,"ge","","",33],[11,"clone","","",33],[11,"eq","","",33],[11,"ne","","",33],[11,"decode","","",33],[11,"encode","","",33],[11,"empty","","Returns an empty set of flags.",33],[11,"all","","Returns the set containing all flags.",33],[11,"bits","","Returns the raw value of the flags currently stored.",33],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",33],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",33],[11,"is_empty","","Returns `true` if no flags are currently stored.",33],[11,"is_all","","Returns `true` if all flags are currently set.",33],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",33],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",33],[11,"insert","","Inserts the specified flags in-place.",33],[11,"remove","","Removes the specified flags in-place.",33],[11,"toggle","","Toggles the specified flags in-place.",33],[6,"Output","rustc_lint::lint",""],[11,"bitor","rustc::middle::check_const","Returns the union of the two sets of flags.",33],[6,"Output","rustc_lint::lint",""],[11,"bitxor","rustc::middle::check_const","Returns the left flags, but with all the right flags toggled.",33],[6,"Output","rustc_lint::lint",""],[11,"bitand","rustc::middle::check_const","Returns the intersection between the two sets of flags.",33],[6,"Output","rustc_lint::lint",""],[11,"sub","rustc::middle::check_const","Returns the set difference of the two sets of flags.",33],[6,"Output","rustc_lint::lint",""],[11,"not","rustc::middle::check_const","Returns the complement of this set of flags.",33],[11,"eq","","",34],[11,"ne","","",34],[11,"visit_item","","",35],[11,"visit_fn","","",35],[11,"visit_pat","","",35],[11,"visit_expr","","",35],[11,"consume","","",35],[11,"borrow","","",35],[11,"decl_without_init","","",35],[11,"mutate","","",35],[11,"matched_pat","","",35],[11,"consume_pat","","",35],[11,"visit_item","rustc::middle::check_static_recursion","",36],[11,"visit_item","","",37],[11,"visit_expr","","",37],[11,"eq","rustc::middle::check_loop","",38],[11,"ne","","",38],[11,"clone","","",38],[11,"visit_item","","",39],[11,"visit_expr","","",39],[11,"fmt","rustc::middle::check_match","",40],[11,"from_iter","","",40],[11,"eq","","",41],[11,"ne","","",41],[11,"clone","","",41],[11,"eq","","",42],[11,"ne","","",42],[11,"clone","","",42],[11,"visit_expr","","",43],[11,"visit_local","","",43],[11,"visit_fn","","",43],[11,"new","","",44],[11,"visit_id","","",45],[11,"fold_pat","","",44],[11,"matched_pat","","",46],[11,"consume","","",46],[11,"consume_pat","","",46],[11,"borrow","","",46],[11,"decl_without_init","","",46],[11,"mutate","","",46],[11,"visit_pat","","",47],[11,"visit_fn","rustc::middle::check_rvalues","",48],[11,"consume","","",49],[11,"matched_pat","","",49],[11,"consume_pat","","",49],[11,"borrow","","",49],[11,"decl_without_init","","",49],[11,"mutate","","",49],[11,"eq","rustc::middle::const_eval","",50],[11,"ne","","",50],[11,"clone","","",50],[11,"clone","","",51],[11,"clone","","",52],[11,"description","","",51],[11,"fmt","rustc::middle::dataflow","",53],[11,"clone","","",54],[11,"pre","","",54],[11,"new","","",54],[11,"add_gen","","Indicates that `id` generates `bit`",54],[11,"add_kill","","Indicates that `id` kills `bit`",54],[11,"each_bit_on_entry","","Iterates through each bit that is set on entry to `id`.\nOnly useful after `propagate()` has been called.",54],[11,"each_bit_for_node","","Iterates through each bit that is set on entry/exit to `cfgidx`.\nOnly useful after `propagate()` has been called.",54],[11,"each_gen_bit","","Iterates through each bit in the gen set for `id`.",54],[11,"add_kills_from_flow_exits","","Whenever you have a `break` or `continue` statement, flow\nexits through any number of enclosing scopes on its way to\nthe new destination. This function infers the kill bits of\nthose control operators based on the kill bits associated\nwith those scopes.",54],[11,"propagate","","Performs the data flow analysis.",54],[11,"join","","",55],[11,"join","","",56],[11,"visit_struct_def","rustc::middle::dead","",57],[11,"visit_expr","","",57],[11,"visit_pat","","",57],[11,"visit_path","","",57],[11,"visit_item","","",57],[11,"visit_item","","",58],[11,"visit_fn","","",58],[11,"visit_item","","",59],[11,"visit_foreign_item","","",59],[11,"visit_fn","","",59],[11,"visit_struct_field","","",59],[11,"visit_trait_item","","",59],[11,"fmt","rustc::middle::def","",15],[11,"hash","","",15],[11,"decode","","",15],[11,"encode","","",15],[11,"eq","","",15],[11,"ne","","",15],[11,"clone","","",15],[11,"fmt","","",60],[11,"full_def","","Get the definition, if fully resolved, otherwise panic.",60],[11,"def_id","","Get the DefId, if fully resolved, otherwise panic.",60],[11,"fmt","","",61],[11,"hash","","",61],[11,"decode","","",61],[11,"encode","","",61],[11,"eq","","",61],[11,"ne","","",61],[11,"clone","","",61],[11,"map","","",61],[11,"local_node_id","","",15],[11,"def_id","","",15],[11,"variant_def_ids","","",15],[11,"eq","rustc::middle::effect","",62],[11,"ne","","",62],[11,"visit_fn","","",63],[11,"visit_block","","",63],[11,"visit_expr","","",63],[11,"visit_item","rustc::middle::entry","",64],[11,"fmt","rustc::middle::expr_use_visitor","",65],[11,"eq","","",65],[11,"ne","","",65],[11,"fmt","","",66],[11,"eq","","",66],[11,"ne","","",66],[11,"fmt","","",67],[11,"eq","","",67],[11,"ne","","",67],[11,"fmt","","",68],[11,"eq","","",68],[11,"ne","","",68],[11,"fmt","","",69],[11,"eq","","",69],[11,"ne","","",69],[11,"fmt","","",70],[11,"eq","","",70],[11,"ne","","",70],[11,"new","","",71],[11,"walk_fn","","",71],[11,"consume_expr","","",71],[11,"walk_expr","","",71],[11,"hash","rustc::middle::fast_reject","",72],[11,"eq","","",72],[11,"ne","","",72],[11,"clone","","",72],[11,"fmt","rustc::middle::graph","",73],[11,"fmt","","",74],[11,"eq","","",74],[11,"ne","","",74],[11,"clone","","",74],[11,"fmt","","",75],[11,"eq","","",75],[11,"ne","","",75],[11,"fmt","","",76],[11,"node_id","","Returns unique id (unique with respect to the graph holding associated node).",74],[11,"edge_id","","Returns unique id (unique with respect to the graph holding associated edge).",75],[11,"new","","",77],[11,"with_capacity","","",77],[11,"all_nodes","","",77],[11,"all_edges","","",77],[11,"next_node_index","","",77],[11,"add_node","","",77],[11,"mut_node_data","","",77],[11,"node_data","","",77],[11,"node","","",77],[11,"next_edge_index","","",77],[11,"add_edge","","",77],[11,"mut_edge_data","","",77],[11,"edge_data","","",77],[11,"edge","","",77],[11,"first_adjacent","","Accesses the index of the first edge adjacent to `node`.\nThis is useful if you wish to modify the graph while walking\nthe linked list of edges.",77],[11,"next_adjacent","","Accesses the next edge in a given direction.\nThis is useful if you wish to modify the graph while walking\nthe linked list of edges.",77],[11,"each_node","","Iterates over all edges defined in the graph.",77],[11,"each_edge","","Iterates over all edges defined in the graph",77],[11,"each_outgoing_edge","","Iterates over all outgoing edges from the node `from`",77],[11,"each_incoming_edge","","Iterates over all incoming edges to the node `target`",77],[11,"each_adjacent_edge","","Iterates over all edges adjacent to the node `node`\nin the direction `dir` (either `Outgoing` or `Incoming)",77],[11,"iterate_until_fixed_point","","",77],[11,"depth_traverse","","",77],[6,"Item","rustc_lint::lint",""],[11,"next","rustc::middle::graph","",78],[11,"source","","",73],[11,"target","","",73],[11,"visit_fn","rustc::middle::intrinsicck","",79],[11,"visit_expr","","",79],[11,"repr","rustc::middle::ty","",80],[11,"tag","rustc::middle::infer::bivariate","",81],[11,"fields","","",81],[11,"tys_with_variance","","",81],[11,"regions_with_variance","","",81],[11,"regions","","",81],[11,"mts","","",81],[11,"unsafeties","","",81],[11,"builtin_bounds","","",81],[11,"tys","","",81],[11,"binders","","",81],[11,"combine","alloc::rc","",82],[11,"combine","rustc::middle::ty","",83],[11,"combine","","",84],[11,"combine","","",85],[11,"clone","rustc::middle::infer::combine","",86],[11,"switch_expected","","",86],[11,"instantiate","","",86],[11,"tcx","","",87],[11,"fold_ty","","",87],[11,"fold_region","","",87],[11,"tag","rustc::middle::infer::equate","",88],[11,"fields","","",88],[11,"tys_with_variance","","",88],[11,"regions_with_variance","","",88],[11,"regions","","",88],[11,"mts","","",88],[11,"unsafeties","","",88],[11,"builtin_bounds","","",88],[11,"tys","","",88],[11,"binders","","",88],[11,"report_region_errors","rustc::middle::infer","",89],[11,"process_errors","","",89],[11,"report_type_error","","",89],[11,"report_and_explain_type_error","","",89],[11,"values_str","","Returns a string of the form \"expected `{}`, found `{}`\", or None if this is a derived\nerror.",89],[11,"expected_found_str","","",89],[11,"report_generic_bound_failure","","",89],[11,"report_concrete_failure","","",89],[11,"report_sub_sup_conflict","","",89],[11,"report_sup_sup_conflict","","",89],[11,"report_processed_errors","","",89],[11,"give_suggestion","","",89],[11,"give_expl_lifetime_param","","",89],[11,"report_inference_failure","","",89],[11,"note_region_origin","","",89],[11,"resolve","alloc::rc","",82],[11,"contains_error","","",82],[11,"resolve","rustc::middle::ty","",90],[11,"contains_error","","",90],[11,"tag","rustc::middle::infer::glb","",91],[11,"fields","","",91],[11,"tys_with_variance","","",91],[11,"regions_with_variance","","",91],[11,"mts","","",91],[11,"unsafeties","","",91],[11,"builtin_bounds","","",91],[11,"regions","","",91],[11,"tys","","",91],[11,"binders","","",91],[11,"tainted_regions","rustc::middle::infer","",89],[11,"region_vars_confined_to_snapshot","","Returns the set of region variables that do not affect any\ntypes/regions which existed before `snapshot` was\nstarted. This is used in the sub/lub/glb computations. The\nidea here is that when we are computing lub/glb of two\nregions, we sometimes create intermediate region variables.\nThose region variables may touch some of the skolemized or\nother \"forbidden\" regions we created to replace bound\nregions, but they don't really represent an \"external\"\nconstraint.",89],[11,"relate_bound","rustc::middle::infer::lub","",92],[11,"relate_bound","rustc::middle::infer::glb","",91],[11,"tag","rustc::middle::infer::lub","",92],[11,"fields","","",92],[11,"tys_with_variance","","",92],[11,"regions_with_variance","","",92],[11,"mts","","",92],[11,"unsafeties","","",92],[11,"builtin_bounds","","",92],[11,"regions","","",92],[11,"tys","","",92],[11,"binders","","",92],[11,"fmt","rustc::middle::infer::region_inference::graphviz","",93],[11,"eq","","",93],[11,"ne","","",93],[11,"hash","","",93],[11,"clone","","",93],[11,"fmt","","",94],[11,"eq","","",94],[11,"ne","","",94],[11,"clone","","",94],[11,"graph_id","","",95],[11,"node_id","","",95],[11,"node_label","","",95],[11,"edge_label","","",95],[11,"nodes","","",95],[11,"edges","","",95],[11,"source","","",95],[11,"target","","",95],[11,"fmt","rustc::middle::infer::region_inference","",96],[11,"hash","","",96],[11,"eq","","",96],[11,"ne","","",96],[11,"clone","","",96],[11,"eq","","",97],[11,"ne","","",97],[11,"fmt","","",97],[11,"clone","","",97],[11,"hash","","",98],[11,"eq","","",98],[11,"ne","","",98],[11,"eq","","",99],[11,"ne","","",99],[11,"eq","","",100],[11,"ne","","",100],[11,"fmt","","",101],[11,"clone","","",101],[11,"fmt","","",102],[11,"clone","","",102],[11,"contains","","",102],[11,"push","","",102],[11,"fmt","","",103],[11,"new","","",104],[11,"start_snapshot","","",104],[11,"commit","","",104],[11,"rollback_to","","",104],[11,"num_vars","","",104],[11,"new_region_var","","",104],[11,"new_skolemized","","Creates a new skolemized region. Skolemized regions are fresh\nregions used when performing higher-ranked computations. They\nmust be used in a very particular way and are never supposed\nto \"escape\" out into error messages or the code at large.",104],[11,"new_bound","","",104],[11,"add_given","","",104],[11,"make_eqregion","","",104],[11,"make_subregion","","",104],[11,"verify_generic_bound","","See `Verify::VerifyGenericBound`",104],[11,"lub_regions","","",104],[11,"glb_regions","","",104],[11,"resolve_var","","",104],[11,"combine_vars","","",104],[11,"vars_created_since_snapshot","","",104],[11,"tainted","","Computes all regions that have been related to `r0` in any way since the mark `mark` was\nmade---`r0` itself will be the first entry. This is used when checking whether skolemized\nregions are being improperly related to other regions.",104],[11,"resolve_regions","","This function performs the actual region resolution.  It must be\ncalled after all constraints have been added.  It performs a\nfixed-point iteration to find region values which satisfy all\nconstraints, assuming such values can be found; if they cannot,\nerrors are reported.",104],[11,"fmt","","",105],[11,"eq","","",105],[11,"ne","","",105],[11,"repr","","",96],[11,"repr","","",106],[11,"repr","","",107],[11,"repr","","",108],[11,"repr","","",97],[11,"user_string","","",97],[11,"to_ty","","",97],[11,"new","rustc::middle::infer::resolve","",109],[11,"tcx","","",109],[11,"fold_ty","","",109],[11,"tcx","","",110],[11,"fold_ty","","",110],[11,"fold_region","","",110],[11,"new","rustc::middle::infer::freshen","",111],[11,"tcx","","",111],[11,"fold_region","","",111],[11,"fold_ty","","",111],[11,"tag","rustc::middle::infer::sub","",112],[11,"fields","","",112],[11,"tys_with_variance","","",112],[11,"regions_with_variance","","",112],[11,"regions","","",112],[11,"mts","","",112],[11,"unsafeties","","",112],[11,"builtin_bounds","","",112],[11,"tys","","",112],[11,"binders","","",112],[11,"fmt","rustc::middle::infer::type_variable","",113],[11,"eq","","",113],[11,"ne","","",113],[11,"new","","",114],[11,"var_diverges","","",114],[11,"relate_vars","","Records that `a <: b`, `a :> b`, or `a == b`, depending on `dir`.",114],[11,"instantiate_and_push","","Instantiates `vid` with the type `ty` and then pushes an entry onto `stack` for each of the\nrelations of `vid` to other variables. The relations will have the form `(ty, dir, vid1)`\nwhere `vid1` is some other variable id.",114],[11,"new_var","","",114],[11,"probe","","",114],[11,"replace_if_possible","","",114],[11,"snapshot","","",114],[11,"rollback_to","","",114],[11,"commit","","",114],[11,"types_escaping_snapshot","","Find the set of type variables that existed *before* `s`\nbut which have only been unified since `s` started, and\nreturn the types with which they were unified. So if we had\na type variable `V0`, then we started the snapshot, then we\ncreated a type variable `V1`, unifed `V0` with `T0`, and\nunified `V1` with `T1`, this function would return `{T0}`.",114],[6,"Value","rustc_lint::lint",""],[6,"Undo","",""],[11,"reverse","rustc::middle::infer::type_variable","",115],[11,"fmt","rustc::middle::infer::unify","",116],[11,"clone","","",116],[11,"eq","","",116],[11,"ne","","",116],[11,"new","","",117],[11,"snapshot","","Starts a new snapshot. Each snapshot must be either\nrolled back or committed in a \"LIFO\" (stack) order.",117],[11,"rollback_to","","Reverses all changes since the last snapshot. Also\nremoves any keys that have been created since then.",117],[11,"commit","","Commits all changes since the last snapshot. Of course, they\ncan still be undone if there is a snapshot further out.",117],[11,"new_key","","",117],[11,"get","","Find the root node for `vid`. This uses the standard union-find algorithm with path\ncompression: http://en.wikipedia.org/wiki/Disjoint-set_data_structure",117],[11,"set","","Sets the value for `vid` to `new_value`. `vid` MUST be a root node! Also, we must be in the\nmiddle of a snapshot.",117],[11,"unify","","Either redirects node_a to node_b or vice versa, depending on the relative rank. Returns\nthe new root and rank. You should then update the value of the new root to something\nsuitable.",117],[6,"Value","rustc_lint::lint",""],[6,"Undo","",""],[11,"reverse","rustc::middle::infer::unify","",118],[11,"simple_vars","rustc::middle::infer","Unifies two simple keys. Because simple keys do not have any subtyping relationships, if\nboth keys have already been associated with a value, then those two values must be the\nsame.",89],[11,"simple_var_t","","Sets the value of the key `a_id` to `b`. Because simple keys do not have any subtyping\nrelationships, if `a_id` already has a value, it must be the same as `b`.",89],[11,"probe_var","","",89],[6,"Value","rustc_lint::lint",""],[11,"index","rustc::middle::ty","",119],[11,"from_index","","",119],[11,"unification_table","","",119],[11,"tag","","",119],[11,"to_type","","",120],[11,"to_type_err","","",120],[6,"Value","rustc_lint::lint",""],[11,"index","rustc::middle::ty","",121],[11,"from_index","","",121],[11,"unification_table","","",121],[11,"tag","","",121],[11,"to_type","syntax::ast","",122],[11,"to_type_err","","",122],[11,"fmt","rustc::middle::infer","",123],[11,"clone","","",123],[11,"fmt","","",124],[11,"clone","","",124],[11,"fmt","","",125],[11,"clone","","",125],[11,"fmt","","",126],[11,"clone","","",126],[11,"fmt","","",127],[11,"clone","","",127],[11,"fmt","","",128],[11,"clone","","",128],[11,"fmt","","",129],[11,"then","core::result","",130],[11,"to_ures","","",130],[11,"compare","","",130],[11,"freshen","rustc::middle::infer","",89],[11,"type_var_diverges","","",89],[11,"freshener","","",89],[11,"type_is_unconstrained_numeric","","",89],[11,"combine_fields","","",89],[11,"equate","","",89],[11,"sub","","",89],[11,"lub","","",89],[11,"commit_unconditionally","","Execute `f` and commit the bindings",89],[11,"commit_if_ok","","Execute `f` and commit the bindings if successful",89],[11,"commit_regions_if_ok","","Execute `f` and commit only the region bindings if successful.\nThe function f must be very careful not to leak any non-region\nvariables that get created.",89],[11,"try","","Execute `f`, unroll bindings on panic",89],[11,"probe","","Execute `f` then unroll any bindings it creates",89],[11,"add_given","","",89],[11,"sub_types","","",89],[11,"eq_types","","",89],[11,"sub_trait_refs","","",89],[11,"sub_poly_trait_refs","","",89],[11,"skolemize_late_bound_regions","","See `higher_ranked::skolemize_late_bound_regions`",89],[11,"leak_check","","See `higher_ranked::leak_check`",89],[11,"plug_leaks","","See `higher_ranked::plug_leaks`",89],[11,"equality_predicate","","",89],[11,"region_outlives_predicate","","",89],[11,"next_ty_var_id","","",89],[11,"next_ty_var","","",89],[11,"next_diverging_ty_var","","",89],[11,"next_ty_vars","","",89],[11,"next_int_var_id","","",89],[11,"next_float_var_id","","",89],[11,"next_region_var","","",89],[11,"region_vars_for_defs","","",89],[11,"fresh_substs_for_generics","","Given a set of generics defined on a type or impl, returns a substitution mapping each\ntype/region parameter to a fresh inference variable.",89],[11,"fresh_substs_for_trait","","Given a set of generics defined on a trait, returns a substitution mapping each output\ntype/region parameter to a fresh inference variable, and mapping the self type to\n`self_ty`.",89],[11,"fresh_bound_region","","",89],[11,"resolve_regions_and_report_errors","","",89],[11,"ty_to_string","","",89],[11,"tys_to_string","","",89],[11,"trait_ref_to_string","","",89],[11,"shallow_resolve","","",89],[11,"resolve_type_vars_if_possible","","Where possible, replaces type/int/float variables in\n`value` with their final value. Note that region variables\nare unaffected. If a type variable has not been unified, it\nis left as is.  This is an idempotent operation that does\nnot affect inference state in any way and so you can do it\nat will.",89],[11,"fully_resolve","","Attempts to resolve all type/region variables in\n`value`. Region inference must have been run already (e.g.,\nby calling `resolve_regions_and_report_errors`).  If some\nvariable was never unified, an `Err` results.",89],[11,"type_error_message_str","","",89],[11,"type_error_message_str_with_expected","","",89],[11,"type_error_message","","",89],[11,"report_mismatched_types","","",89],[11,"replace_late_bound_regions_with_fresh_var","","",89],[11,"verify_generic_bound","","See `verify_generic_bound` method in `region_inference`",89],[11,"can_equate","","",89],[11,"span","","",125],[11,"types","","",125],[11,"dummy","","",125],[11,"repr","","",125],[11,"span","","",123],[11,"repr","","",123],[11,"span","","",126],[11,"repr","","",126],[11,"span","","",128],[11,"repr","","",128],[11,"hash","rustc::middle::lang_items","",131],[11,"eq","","",131],[11,"ne","","",131],[11,"from_i64","","",131],[11,"from_u64","","",131],[11,"new","","",132],[11,"items","","",132],[11,"item_name","","",132],[11,"require","","",132],[11,"from_builtin_kind","","",132],[11,"to_builtin_kind","","",132],[11,"fn_trait_kind","","",132],[11,"send_trait","","",132],[11,"sized_trait","","",132],[11,"copy_trait","","",132],[11,"sync_trait","","",132],[11,"drop_trait","","",132],[11,"add_trait","","",132],[11,"sub_trait","","",132],[11,"mul_trait","","",132],[11,"div_trait","","",132],[11,"rem_trait","","",132],[11,"neg_trait","","",132],[11,"not_trait","","",132],[11,"bitxor_trait","","",132],[11,"bitand_trait","","",132],[11,"bitor_trait","","",132],[11,"shl_trait","","",132],[11,"shr_trait","","",132],[11,"index_trait","","",132],[11,"index_mut_trait","","",132],[11,"range_struct","","",132],[11,"range_from_struct","","",132],[11,"range_to_struct","","",132],[11,"range_full_struct","","",132],[11,"unsafe_cell_type","","",132],[11,"deref_trait","","",132],[11,"deref_mut_trait","","",132],[11,"fn_trait","","",132],[11,"fn_mut_trait","","",132],[11,"fn_once_trait","","",132],[11,"eq_trait","","",132],[11,"ord_trait","","",132],[11,"str_eq_fn","","",132],[11,"panic_fn","","",132],[11,"panic_bounds_check_fn","","",132],[11,"panic_fmt","","",132],[11,"exchange_malloc_fn","","",132],[11,"exchange_free_fn","","",132],[11,"strdup_uniq_fn","","",132],[11,"start_fn","","",132],[11,"ty_desc","","",132],[11,"opaque","","",132],[11,"eh_personality","","",132],[11,"exchange_heap","","",132],[11,"owned_box","","",132],[11,"phantom_fn","","",132],[11,"phantom_data","","",132],[11,"covariant_type","","",132],[11,"contravariant_type","","",132],[11,"invariant_type","","",132],[11,"covariant_lifetime","","",132],[11,"contravariant_lifetime","","",132],[11,"invariant_lifetime","","",132],[11,"no_copy_bound","","",132],[11,"managed_bound","","",132],[11,"non_zero","","",132],[11,"stack_exhausted","","",132],[11,"debug_trait","","",132],[11,"visit_item","","",133],[11,"new","","",133],[11,"collect_item","","",133],[11,"collect_local_language_items","","",133],[11,"collect_external_language_items","","",133],[11,"collect","","",133],[11,"eq","rustc::middle::liveness","",134],[11,"ne","","",134],[11,"eq","","",135],[11,"ne","","",135],[11,"clone","","",135],[11,"fmt","","",136],[11,"eq","","",136],[11,"ne","","",136],[11,"visit_fn","","",137],[11,"visit_local","","",137],[11,"visit_expr","","",137],[11,"visit_arm","","",137],[11,"fmt","","",135],[11,"fmt","","",134],[11,"fmt","","",138],[11,"fmt","","",139],[11,"visit_fn","","",140],[11,"visit_local","","",140],[11,"visit_expr","","",140],[11,"visit_arm","","",140],[11,"clone","","",141],[11,"fmt","rustc::middle::mem_categorization","",142],[11,"eq","","",142],[11,"ne","","",142],[11,"clone","","",142],[11,"fmt","","",143],[11,"eq","","",143],[11,"ne","","",143],[11,"clone","","",143],[11,"fmt","","",144],[11,"hash","","",144],[11,"eq","","",144],[11,"ne","","",144],[11,"clone","","",144],[11,"fmt","","",145],[11,"hash","","",145],[11,"eq","","",145],[11,"ne","","",145],[11,"clone","","",145],[11,"fmt","","",146],[11,"hash","","",146],[11,"eq","","",146],[11,"ne","","",146],[11,"clone","","",146],[11,"fmt","","",147],[11,"hash","","",147],[11,"eq","","",147],[11,"ne","","",147],[11,"clone","","",147],[11,"fmt","","",148],[11,"hash","","",148],[11,"eq","","",148],[11,"ne","","",148],[11,"clone","","",148],[11,"fmt","","",149],[11,"hash","","",149],[11,"eq","","",149],[11,"ne","","",149],[11,"clone","","",149],[11,"fmt","","",150],[11,"eq","","",150],[11,"ne","","",150],[11,"clone","","",150],[11,"fmt","","",151],[11,"eq","","",151],[11,"ne","","",151],[11,"clone","","",151],[11,"id","syntax::ast","",152],[11,"span","","",152],[11,"id","","",153],[11,"span","","",153],[11,"from_mutbl","rustc::middle::mem_categorization","",149],[11,"from_borrow_kind","","",149],[11,"from_pointer_kind","","",149],[11,"inherit","","",149],[11,"is_mutable","","",149],[11,"is_immutable","","",149],[11,"to_user_str","","",149],[11,"new","","",154],[11,"cat_expr","","",154],[11,"cat_expr_autoderefd","","",154],[11,"cat_expr_unadjusted","","",154],[11,"cat_def","","",154],[11,"cat_rvalue_node","","",154],[11,"cat_rvalue","","",154],[11,"cat_field","","",154],[11,"cat_tup_field","","",154],[11,"cat_index","","Creates a cmt for an indexing operation (`[]`).",154],[11,"cat_slice_pattern","","Given a pattern P like: `[_, ..Q, _]`, where `vec_cmt` is the cmt for `P`, `slice_pat` is\nthe pattern `Q`, returns:",154],[11,"cat_imm_interior","","",154],[11,"cat_downcast","","",154],[11,"cat_pattern","","",154],[11,"guarantor","","Returns `self` after stripping away any owned pointer derefs or\ninterior content. The return value is basically the `cmt` which\ndetermines how long the value in `self` remains live.",151],[11,"freely_aliasable","","Returns `Some(_)` if this lvalue represents a freely aliasable pointer type.",151],[11,"upvar","","",151],[11,"descriptive_string","","",151],[11,"repr","","",151],[11,"repr","","",142],[11,"repr","","",144],[11,"repr","","",145],[11,"repr","rustc::middle::ty","",155],[11,"repr","rustc::middle::mem_categorization","",143],[11,"user_string","","",143],[11,"fmt","rustc::middle::privacy","",156],[11,"fmt","","",157],[11,"fmt","","",158],[11,"eq","","",158],[11,"ne","","",158],[11,"or","","",156],[11,"visit_expr","rustc::middle::reachable","",159],[11,"visit_item","","",159],[11,"fmt","rustc::middle::region","",18],[11,"decode","","",18],[11,"encode","","",18],[11,"hash","","",18],[11,"cmp","","",18],[11,"partial_cmp","","",18],[11,"lt","","",18],[11,"le","","",18],[11,"gt","","",18],[11,"ge","","",18],[11,"eq","","",18],[11,"ne","","",18],[11,"clone","","",18],[11,"fmt","","",19],[11,"decode","","",19],[11,"encode","","",19],[11,"hash","","",19],[11,"cmp","","",19],[11,"partial_cmp","","",19],[11,"lt","","",19],[11,"le","","",19],[11,"gt","","",19],[11,"ge","","",19],[11,"eq","","",19],[11,"ne","","",19],[11,"clone","","",19],[11,"new","","",19],[11,"to_code_extent","","",19],[11,"fmt","","",160],[11,"decode","","",160],[11,"encode","","",160],[11,"hash","","",160],[11,"cmp","","",160],[11,"partial_cmp","","",160],[11,"lt","","",160],[11,"le","","",160],[11,"gt","","",160],[11,"ge","","",160],[11,"eq","","",160],[11,"ne","","",160],[11,"clone","","",160],[11,"from_node_id","","Creates a scope that represents the dynamic extent associated\nwith `node_id`.",18],[11,"node_id","","Returns a node id associated with this scope.",18],[11,"map_id","","Maps this scope to a potentially new one according to the\nNodeId transformer `f_id`.",18],[11,"span","","Returns the span of this CodeExtent.  Note that in general the\nreturned span may not correspond to the span of any node id in\nthe AST.",18],[11,"fmt","","",161],[11,"eq","","",161],[11,"ne","","",161],[11,"fmt","","",162],[11,"eq","","",162],[11,"ne","","",162],[11,"fmt","","",163],[11,"eq","","",163],[11,"ne","","",163],[11,"fmt","","",164],[11,"each_encl_scope","","",165],[11,"each_var_scope","","",165],[11,"each_encl_free_region","","",165],[11,"each_rvalue_scope","","",165],[11,"each_terminating_scope","","",165],[11,"relate_free_regions","","",165],[11,"record_encl_scope","","",165],[11,"record_var_scope","","",165],[11,"record_rvalue_scope","","",165],[11,"mark_as_terminating_scope","","Records that a scope is a TERMINATING SCOPE. Whenever we create automatic temporaries --\ne.g. by an expression like `a().f` -- they will be freed within the innermost terminating\nscope.",165],[11,"opt_encl_scope","","Returns the narrowest scope that encloses `id`, if any.",165],[11,"encl_scope","","Returns the narrowest scope that encloses `id`, if any.",165],[11,"var_scope","","Returns the lifetime of the local variable `var_id`",165],[11,"temporary_scope","","Returns the scope when temp created by expr_id will be cleaned up",165],[11,"var_region","","Returns the lifetime of the variable `id`.",165],[11,"scopes_intersect","","",165],[11,"is_subscope_of","","Returns true if `subscope` is equal to or is lexically nested inside `superscope` and false\notherwise.",165],[11,"sub_free_region","","Determines whether two free regions have a subregion relationship\nby walking the graph encoded in `free_region_map`.  Note that\nit is possible that `sub != sup` and `sub <= sup` and `sup <= sub`\n(that is, the user can give two different names to the same lifetime).",165],[11,"is_subregion_of","","Determines whether one region is a subregion of another.  This is intended to run *after\ninference* and sadly the logic is somewhat duplicated with the code in infer.rs.",165],[11,"nearest_common_ancestor","","Finds the nearest common ancestor (if any) of two scopes.  That is, finds the smallest\nscope which is greater than or equal to both `scope_a` and `scope_b`.",165],[11,"visit_block","","",166],[11,"visit_item","","",166],[11,"visit_fn","","",166],[11,"visit_arm","","",166],[11,"visit_pat","","",166],[11,"visit_stmt","","",166],[11,"visit_expr","","",166],[11,"visit_local","","",166],[11,"fmt","rustc::middle::resolve_lifetime","",167],[11,"decode","","",167],[11,"encode","","",167],[11,"hash","","",167],[11,"eq","","",167],[11,"ne","","",167],[11,"clone","","",167],[11,"visit_item","","",168],[11,"visit_fn","","",168],[11,"visit_ty","","",168],[11,"visit_ty_method","","",168],[11,"visit_block","","",168],[11,"visit_lifetime_ref","","",168],[11,"visit_generics","","",168],[11,"visit_poly_trait_ref","","",168],[11,"fmt","","",169],[11,"visit_item","rustc::middle::stability","",170],[11,"visit_fn","","",170],[11,"visit_trait_item","","",170],[11,"visit_variant","","",170],[11,"visit_struct_field","","",170],[11,"visit_foreign_item","","",170],[11,"build","","Construct the stability index for a crate being compiled.",171],[11,"new","","",171],[11,"visit_item","","",172],[11,"visit_expr","","",172],[11,"visit_path","","",172],[11,"visit_pat","","",172],[11,"fmt","rustc::middle::subst","",173],[11,"hash","","",173],[11,"eq","","",173],[11,"ne","","",173],[11,"clone","","",173],[11,"fmt","","",174],[11,"hash","","",174],[11,"eq","","",174],[11,"ne","","",174],[11,"clone","","",174],[11,"new","","",173],[11,"new_type","","",173],[11,"new_trait","","",173],[11,"erased","","",173],[11,"empty","","",173],[11,"trans_empty","","",173],[11,"is_noop","","",173],[11,"type_for_def","","",173],[11,"has_regions_escaping_depth","","",173],[11,"self_ty","","",173],[11,"with_self_ty","","",173],[11,"erase_regions","","",173],[11,"regions","","Since ErasedRegions are only to be used in trans, most of the compiler can use this method\nto easily access the set of region substitutions.",173],[11,"mut_regions","","Since ErasedRegions are only to be used in trans, most of the compiler can use this method\nto easily access the set of region substitutions.",173],[11,"with_method","","",173],[11,"is_erased","","",174],[11,"fmt","","",175],[11,"decode","","",175],[11,"encode","","",175],[11,"hash","","",175],[11,"clone","","",175],[11,"eq","","",175],[11,"ne","","",175],[11,"cmp","","",175],[11,"partial_cmp","","",175],[11,"lt","","",175],[11,"le","","",175],[11,"gt","","",175],[11,"ge","","",175],[11,"all","","",175],[11,"to_uint","","",175],[11,"from_uint","","",175],[11,"decode","","",176],[11,"encode","","",176],[11,"hash","","",176],[11,"clone","","",176],[11,"eq","","",176],[11,"ne","","",176],[11,"fmt","","",176],[11,"empty","","",176],[11,"params_from_type","","",176],[11,"new","","`t` is the type space.\n`s` is the self space.\n`a` is the assoc space.\n`f` is the fn space.",176],[11,"push","","Appends `value` to the vector associated with `space`.",176],[11,"extend","","Appends `values` to the vector associated with `space`.",176],[11,"pop","","",176],[11,"truncate","","",176],[11,"replace","","",176],[11,"get_self","","",176],[11,"len","","",176],[11,"is_empty_in","","",176],[11,"get_slice","","",176],[11,"get_mut_slice","","",176],[11,"opt_get","","",176],[11,"get","","",176],[11,"iter","","",176],[11,"into_iter","","",176],[11,"iter_enumerated","","",176],[11,"as_slice","","",176],[11,"into_vec","","",176],[11,"all_vecs","","",176],[11,"all","","",176],[11,"any","","",176],[11,"is_empty","","",176],[11,"map","","",176],[11,"map_enumerated","","",176],[11,"map_move","","",176],[11,"split","","",176],[11,"with_vec","","",176],[11,"clone","","",177],[6,"Item","rustc_lint::lint",""],[11,"next","rustc::middle::subst","",177],[6,"Item","rustc_lint::lint",""],[6,"IntoIter","",""],[11,"into_iter","rustc::middle::subst","",176],[6,"Item","rustc_lint::lint",""],[6,"IntoIter","",""],[11,"tcx","rustc::middle::subst","",178],[11,"enter_region_binder","","",178],[11,"exit_region_binder","","",178],[11,"fold_region","","",178],[11,"fold_ty","","",178],[11,"clone","rustc::middle::traits::fulfill","",179],[11,"new","","",180],[11,"normalize_projection_type","","\"Normalize\" a projection type `<SomeType as SomeTrait>::X` by\ncreating a fresh type variable `$0` as well as a projection\npredicate `<SomeType as SomeTrait>::X == $0`. When the\ninference engine runs, it will attempt to find an impl of\n`SomeTrait` or a where clause that lets us unify `$0` with\nsomething concrete. If this fails, we'll unify `$0` with\n`projection_ty` again.",180],[11,"register_builtin_bound","","",180],[11,"register_region_obligation","","",180],[11,"register_predicate_obligation","","",180],[11,"region_obligations","","",180],[11,"select_all_or_error","","",180],[11,"select_new_obligations","","Attempts to select obligations that were registered since the call to a selection routine.\nThis is used by the type checker to eagerly attempt to resolve obligations in hopes of\ngaining type information. It'd be equally valid to use `select_where_possible` but it\nresults in `O(n^2)` performance (#18208).",180],[11,"select_where_possible","","",180],[11,"pending_obligations","","",180],[11,"repr","","",179],[11,"clone","rustc::middle::traits::project","",181],[11,"eq","","",182],[11,"ne","","",182],[11,"tcx","","",183],[11,"fold_ty","","",183],[11,"with","","",184],[11,"repr","","",185],[11,"repr","","",182],[11,"fold_with","","",184],[11,"repr","","",184],[11,"fmt","rustc::middle::traits::object_safety","",186],[11,"clone","","",186],[11,"repr","","",187],[11,"clone","rustc::middle::traits::select","",188],[11,"fmt","","",189],[11,"clone","","",190],[11,"fmt","","",190],[11,"eq","","",190],[11,"ne","","",190],[11,"fmt","","",191],[11,"new","","",192],[11,"intercrate","","",192],[11,"infcx","","",192],[11,"tcx","","",192],[11,"param_env","","",192],[11,"closure_typer","","",192],[11,"select","","Attempts to satisfy the obligation. If successful, this will affect the surrounding\ntype environment by performing unification.",192],[11,"evaluate_obligation","","Evaluates whether the obligation `obligation` can be satisfied (by any means).",192],[11,"evaluate_impl","","Evaluates whether the impl with id `impl_def_id` could be applied to the self type\n`obligation_self_ty`. This can be used either for trait or inherent impls.",192],[11,"repr","","",190],[11,"new","","",188],[6,"Item","rustc_lint::lint",""],[11,"next","core::option","",12],[11,"repr","rustc::middle::traits::select","",193],[11,"may_apply","","",194],[11,"filter_to_traits","rustc::middle::traits::util","",195],[6,"Item","rustc_lint::lint",""],[11,"next","rustc::middle::traits::util","",195],[6,"Item","rustc_lint::lint",""],[11,"next","rustc::middle::traits::util","",196],[11,"fmt","rustc::middle::traits","",197],[11,"fmt","","",198],[11,"repr","","",199],[11,"repr","","",200],[11,"repr","","",197],[11,"repr","","",201],[11,"repr","","",202],[11,"repr","","",198],[11,"repr","","",203],[11,"repr","","",204],[11,"repr","","",205],[11,"fmt","","",205],[11,"repr","rustc::middle::traits::project","",181],[11,"fmt","","",181],[11,"eq","rustc::middle::traits","",199],[11,"ne","","",199],[11,"clone","","",199],[11,"eq","","",206],[11,"ne","","",206],[11,"clone","","",206],[11,"eq","","",207],[11,"ne","","",207],[11,"clone","","",207],[11,"eq","","",208],[11,"ne","","",208],[11,"clone","","",208],[11,"fmt","","",203],[11,"clone","","",203],[11,"clone","","",205],[11,"clone","","",200],[11,"fmt","","",200],[11,"eq","","",197],[11,"ne","","",197],[11,"clone","","",197],[11,"clone","","",202],[11,"fmt","","",202],[11,"clone","","",201],[11,"fmt","","",201],[11,"clone","","",198],[11,"eq","","",198],[11,"ne","","",198],[11,"new","","",199],[11,"misc","","",199],[11,"with","","",199],[11,"new","","",206],[11,"misc","","",206],[11,"dummy","","",206],[11,"iter_nested","","",200],[11,"map_nested","","",200],[11,"map_move_nested","","",200],[11,"iter_nested","","",197],[11,"map_nested","","",197],[11,"map_move_nested","","",197],[11,"iter_nested","","",202],[11,"map_nested","","",202],[11,"map_move_nested","","",202],[11,"iter_nested","","",201],[11,"map_nested","","",201],[11,"map_move_nested","","",201],[11,"is_overflow","","",204],[11,"hash","rustc::middle::ty","",209],[11,"eq","","",209],[11,"ne","","",209],[11,"clone","","",209],[11,"fmt","","",210],[11,"clone","","",210],[11,"id","","",210],[11,"fmt","","",211],[11,"clone","","",211],[11,"def_id","","",211],[11,"name","","",211],[11,"container","","",211],[11,"as_opt_method","","",211],[11,"fmt","","",212],[11,"clone","","",212],[11,"def_id","","",212],[11,"fmt","","",213],[11,"clone","","",213],[11,"new","","",213],[11,"container_id","","",213],[11,"fmt","","",214],[11,"clone","","",214],[11,"fmt","","",215],[11,"hash","","",215],[11,"eq","","",215],[11,"ne","","",215],[11,"clone","","",215],[11,"fmt","","",216],[11,"clone","","",216],[11,"hash","","",217],[11,"eq","","",217],[11,"ne","","",217],[11,"encode","","",218],[11,"decode","","",218],[11,"eq","","",218],[11,"ne","","",218],[11,"clone","","",218],[11,"fmt","","",219],[11,"encode","","",219],[11,"decode","","",219],[11,"eq","","",219],[11,"ne","","",219],[11,"clone","","",219],[11,"fmt","","",220],[11,"clone","","",220],[11,"fmt","","",221],[11,"eq","","",221],[11,"ne","","",221],[11,"clone","","",221],[11,"fmt","","",222],[11,"clone","","",222],[11,"fmt","","",223],[11,"eq","","",223],[11,"ne","","",223],[11,"clone","","",223],[11,"fmt","","",224],[11,"partial_cmp","","",224],[11,"lt","","",224],[11,"le","","",224],[11,"gt","","",224],[11,"ge","","",224],[11,"eq","","",224],[11,"ne","","",224],[11,"decode","","",224],[11,"encode","","",224],[11,"clone","","",224],[11,"fmt","","",25],[11,"clone","","",25],[11,"fmt","","",225],[11,"clone","","",225],[11,"fmt","","",226],[11,"clone","","",226],[11,"clone","","",227],[11,"fmt","","",228],[11,"hash","","",228],[11,"eq","","",228],[11,"ne","","",228],[11,"clone","","",228],[11,"decode","","",229],[11,"encode","","",229],[11,"fmt","","",229],[11,"hash","","",229],[11,"eq","","",229],[11,"ne","","",229],[11,"clone","","",229],[11,"expr","","",228],[11,"autoobject","","",228],[11,"autoderef","","",228],[11,"clone","","",230],[11,"new","","",231],[11,"hash","","",232],[11,"cmp","","",232],[11,"partial_cmp","","",232],[11,"lt","","",232],[11,"le","","",232],[11,"gt","","",232],[11,"ge","","",232],[11,"clone","","",232],[11,"eq","","",232],[11,"ne","","",232],[11,"empty","","Returns an empty set of flags.",232],[11,"all","","Returns the set containing all flags.",232],[11,"bits","","Returns the raw value of the flags currently stored.",232],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",232],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",232],[11,"is_empty","","Returns `true` if no flags are currently stored.",232],[11,"is_all","","Returns `true` if all flags are currently set.",232],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",232],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",232],[11,"insert","","Inserts the specified flags in-place.",232],[11,"remove","","Removes the specified flags in-place.",232],[11,"toggle","","Toggles the specified flags in-place.",232],[6,"Output","rustc_lint::lint",""],[11,"bitor","rustc::middle::ty","Returns the union of the two sets of flags.",232],[6,"Output","rustc_lint::lint",""],[11,"bitxor","rustc::middle::ty","Returns the left flags, but with all the right flags toggled.",232],[6,"Output","rustc_lint::lint",""],[11,"bitand","rustc::middle::ty","Returns the intersection between the two sets of flags.",232],[6,"Output","rustc_lint::lint",""],[11,"sub","rustc::middle::ty","Returns the set difference of the two sets of flags.",232],[6,"Output","rustc_lint::lint",""],[11,"not","rustc::middle::ty","Returns the complement of this set of flags.",232],[11,"print_debug_stats","","",233],[11,"fmt","","",234],[11,"fmt","","",232],[11,"eq","","",234],[11,"hash","","",234],[11,"eq","","",235],[11,"hash","","",235],[11,"borrow","","",235],[11,"fmt","","",236],[11,"hash","","",236],[11,"eq","","",236],[11,"ne","","",236],[11,"clone","","",236],[11,"fmt","","",237],[11,"hash","","",237],[11,"eq","","",237],[11,"ne","","",237],[11,"clone","","",237],[11,"fmt","","",238],[11,"hash","","",238],[11,"eq","","",238],[11,"ne","","",238],[11,"clone","","",238],[11,"diverges","","",238],[11,"unwrap","","",238],[11,"diverges","","",90],[11,"hash","","",85],[11,"eq","","",85],[11,"ne","","",85],[11,"clone","","",85],[11,"inputs","","",90],[11,"input","","",90],[11,"output","","",90],[11,"variadic","","",90],[11,"fmt","","",239],[11,"hash","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"clone","","",239],[11,"fmt","","",240],[11,"decode","","",240],[11,"encode","","",240],[11,"hash","","",240],[11,"eq","","",240],[11,"ne","","",240],[11,"clone","","",240],[11,"fmt","","",16],[11,"decode","","",16],[11,"encode","","",16],[11,"hash","","",16],[11,"eq","","",16],[11,"ne","","",16],[11,"clone","","",16],[11,"fmt","","",241],[11,"hash","","",241],[11,"eq","","",241],[11,"ne","","",241],[11,"clone","","",241],[11,"decode","","",242],[11,"encode","","",242],[11,"fmt","","",242],[11,"hash","","",242],[11,"eq","","",242],[11,"ne","","",242],[11,"clone","","",242],[11,"fmt","","",24],[11,"decode","","",24],[11,"encode","","",24],[11,"clone","","",24],[11,"eq","","",24],[11,"ne","","",24],[11,"fmt","","",23],[11,"decode","","",23],[11,"encode","","",23],[11,"clone","","",23],[11,"eq","","",23],[11,"ne","","",23],[11,"is_bound","","",16],[11,"escapes_depth","","",16],[11,"fmt","","",17],[11,"decode","","",17],[11,"encode","","",17],[11,"hash","","",17],[11,"cmp","","",17],[11,"partial_cmp","","",17],[11,"lt","","",17],[11,"le","","",17],[11,"gt","","",17],[11,"ge","","",17],[11,"eq","","",17],[11,"ne","","",17],[11,"clone","","",17],[11,"fmt","","",20],[11,"decode","","",20],[11,"encode","","",20],[11,"hash","","",20],[11,"cmp","","",20],[11,"partial_cmp","","",20],[11,"lt","","",20],[11,"le","","",20],[11,"gt","","",20],[11,"ge","","",20],[11,"eq","","",20],[11,"ne","","",20],[11,"clone","","",20],[11,"fmt","","",243],[11,"hash","","",243],[11,"eq","","",243],[11,"ne","","",243],[11,"clone","","",243],[11,"fmt","","",244],[11,"hash","","",244],[11,"eq","","",244],[11,"ne","","",244],[11,"clone","","",244],[11,"principal_def_id","","",244],[11,"principal_trait_ref_with_self_ty","","Object types don't have a self-type specified. Therefore, when\nwe convert the principal trait-ref into a normal trait-ref,\nyou must give *some* self-type. A common choice is `mk_err()`\nor some skolemized type.",244],[11,"projection_bounds_with_self_ty","","",244],[11,"fmt","","",83],[11,"hash","","",83],[11,"eq","","",83],[11,"ne","","",83],[11,"clone","","",83],[11,"self_ty","","",90],[11,"def_id","","",90],[11,"substs","","",90],[11,"input_types","","",90],[11,"to_poly_trait_predicate","","",90],[11,"fmt","","",90],[11,"hash","","",90],[11,"eq","","",90],[11,"ne","","",90],[11,"clone","","",90],[11,"skip_binder","","Skips the binder and returns the \"bound\" value. This is a\nrisky thing to do because it's easy to get confused about\ndebruijn indices and the like. It is usually better to\ndischarge the binder using `no_late_bound_regions` or\n`replace_late_bound_regions` or something like\nthat. `skip_binder` is only valid when you are either\nextracting data that has nothing to do with bound regions, you\nare doing some sort of test that does not involve bound\nregions, or you are being very careful about your depth\naccounting.",90],[11,"eq","","",120],[11,"ne","","",120],[11,"clone","","",120],[11,"fmt","","",245],[11,"clone","","",245],[11,"fmt","","",246],[11,"clone","","",246],[11,"fmt","","",247],[11,"clone","","",247],[11,"fmt","","",248],[11,"clone","","",248],[11,"hash","","",248],[11,"eq","","",248],[11,"ne","","",248],[11,"fmt","","",249],[11,"clone","","",249],[11,"hash","","",249],[11,"eq","","",249],[11,"ne","","",249],[11,"fmt","","",250],[11,"hash","","",250],[11,"decode","","",250],[11,"eq","","",250],[11,"ne","","",250],[11,"encode","","",250],[11,"clone","","",250],[11,"to_usize","","",250],[11,"from_usize","","",250],[11,"hash","","",251],[11,"eq","","",251],[11,"ne","","",251],[11,"clone","","",251],[11,"hash","","",119],[11,"eq","","",119],[11,"ne","","",119],[11,"clone","","",119],[11,"hash","","",121],[11,"eq","","",121],[11,"ne","","",121],[11,"clone","","",121],[11,"hash","","",252],[11,"decode","","",252],[11,"encode","","",252],[11,"eq","","",252],[11,"ne","","",252],[11,"clone","","",252],[11,"hash","","",253],[11,"eq","","",253],[11,"ne","","",253],[11,"clone","","",253],[11,"fmt","","",254],[11,"hash","","",254],[11,"eq","","",254],[11,"ne","","",254],[11,"decode","","",254],[11,"encode","","",254],[11,"clone","","",254],[11,"fmt","","",255],[11,"hash","","",255],[11,"decode","","",255],[11,"encode","","",255],[11,"clone","","",255],[11,"eq","","",255],[11,"ne","","",255],[11,"fmt","","",251],[11,"fmt","","",119],[11,"fmt","","",121],[11,"fmt","","",252],[11,"fmt","","",85],[11,"fmt","","",253],[11,"fmt","","",120],[11,"fmt","","",256],[11,"clone","","",256],[11,"fmt","","",257],[11,"clone","","",257],[11,"fmt","","",258],[11,"clone","","",258],[11,"decode","","",258],[11,"encode","","",258],[11,"to_early_bound_region","","",258],[11,"fmt","","",259],[11,"clone","","",259],[11,"empty","","",259],[11,"is_empty","","",259],[11,"has_type_params","","",259],[11,"has_region_params","","",259],[11,"fmt","","",260],[11,"clone","","",260],[11,"empty","","",260],[11,"instantiate","","",260],[11,"instantiate_supertrait","","",260],[11,"fmt","","",261],[11,"hash","","",261],[11,"eq","","",261],[11,"ne","","",261],[11,"clone","","",261],[11,"subst_supertrait","","Performs a substituion suitable for going from a\npoly-trait-ref to supertraits that must hold if that\npoly-trait-ref holds. This is slightly different from a normal\nsubstitution in terms of what happens with bound regions.  See\nlengthy comment below for details.",261],[11,"fmt","","",262],[11,"hash","","",262],[11,"eq","","",262],[11,"ne","","",262],[11,"clone","","",262],[11,"def_id","","",262],[11,"input_types","","",262],[11,"self_ty","","",262],[11,"def_id","","",90],[11,"fmt","","",263],[11,"hash","","",263],[11,"eq","","",263],[11,"ne","","",263],[11,"clone","","",263],[11,"fmt","","",264],[11,"hash","","",264],[11,"eq","","",264],[11,"ne","","",264],[11,"clone","","",264],[11,"fmt","","",84],[11,"hash","","",84],[11,"eq","","",84],[11,"ne","","",84],[11,"clone","","",84],[11,"item_name","","",90],[11,"sort_key","","",90],[11,"fmt","","",265],[11,"hash","","",265],[11,"eq","","",265],[11,"ne","","",265],[11,"clone","","",265],[11,"sort_key","","",265],[11,"to_poly_trait_ref","alloc::rc","",82],[11,"to_poly_trait_ref","rustc::middle::ty","",90],[11,"to_poly_trait_ref","","",90],[11,"as_predicate","alloc::rc","",82],[11,"as_predicate","rustc::middle::ty","",90],[11,"as_predicate","","",90],[11,"as_predicate","","",90],[11,"as_predicate","","",90],[11,"as_predicate","","",90],[11,"walk_tys","","Iterates over the types in this predicate. Note that in all\ncases this is skipping over a binder, so late-bound regions\nwith depth 0 are bound by the predicate.",261],[11,"has_escaping_regions","","",261],[11,"to_opt_poly_trait_ref","","",261],[11,"fmt","","",266],[11,"clone","","",266],[11,"empty","","",266],[11,"has_escaping_regions","","",266],[11,"is_empty","","",266],[11,"new","","",83],[11,"self_ty","","",83],[11,"input_types","","",83],[11,"clone","","",267],[11,"with_caller_bounds","","",267],[11,"for_item","","",267],[11,"fmt","","",268],[11,"clone","","",268],[11,"clone","","",269],[11,"decode","","",155],[11,"encode","","",155],[11,"fmt","","",155],[11,"eq","","",155],[11,"ne","","",155],[11,"clone","","",155],[11,"trait_did","","",155],[11,"mk_substs","","",233],[11,"mk_bare_fn","","",233],[11,"mk_region","","",233],[11,"closure_kind","","",233],[11,"closure_type","","",233],[11,"type_parameter_def","","",233],[11,"walk","","Iterator that walks `self` and any types reachable from\n`self`, in depth-first order. Note that just walks the types\nthat appear in `self`, it does not descend into the fields of\nstructs or variants. For example:",234],[11,"walk_children","","Iterator that walks types reachable from `self`, in\ndepth-first order. Note that this is a shallow walk. For\nexample:",234],[11,"as_opt_param_ty","","",234],[11,"is_param","","",234],[11,"new","","",239],[11,"for_self","","",239],[11,"for_def","","",239],[11,"to_ty","","",239],[11,"is_self","","",239],[11,"empty","","",269],[11,"is_noop","","",269],[11,"empty","","",248],[11,"clone","","",270],[11,"when","","",270],[11,"intersects","","",270],[11,"owns_managed","","",270],[11,"owns_owned","","",270],[11,"is_sized","","",270],[11,"interior_param","","",270],[11,"interior_unsafe","","",270],[11,"interior_unsized","","",270],[11,"needs_drop","","",270],[11,"owned_pointer","","Includes only those bits that still apply when indirected through a `Box` pointer",270],[11,"reference","","Includes only those bits that still apply when indirected through a reference (`&`)",270],[11,"managed_pointer","","Includes only those bits that still apply when indirected through a managed pointer (`@`)",270],[11,"unsafe_pointer","","Includes only those bits that still apply when indirected through an unsafe pointer (`*`)",270],[11,"union","","",270],[11,"has_dtor","","",270],[6,"Output","rustc_lint::lint",""],[11,"bitor","rustc::middle::ty","",270],[6,"Output","rustc_lint::lint",""],[11,"bitand","rustc::middle::ty","",270],[6,"Output","rustc_lint::lint",""],[11,"sub","rustc::middle::ty","",270],[11,"fmt","","",270],[11,"fmt","","",271],[11,"eq","","",271],[11,"ne","","",271],[11,"cmp","","",271],[11,"partial_cmp","","",271],[11,"lt","","",271],[11,"le","","",271],[11,"gt","","",271],[11,"ge","","",271],[11,"repr","","",247],[11,"clone","","",272],[11,"from_ast_variant","","Creates a new VariantInfo from the corresponding ast representation.",272],[11,"is_present","","",273],[11,"has_drop_flag","","",273],[11,"clone","","",274],[11,"to_string","","",219],[11,"from_mutbl","","",242],[11,"to_mutbl_lossy","","Returns a mutability `m` such that an `&m T` pointer could be used to obtain this borrow\nkind. Because borrow kinds are richer than mutabilities, we sometimes have to pick a\nmutability that is stronger than necessary so that it at least *would permit* the borrow in\nquestion.",242],[11,"to_user_str","","",242],[11,"is_method_call","","",233],[11,"upvar_capture","","",233],[11,"node_ty","","",267],[11,"expr_ty_adjusted","","",267],[11,"node_method_ty","","",267],[11,"node_method_origin","","",267],[11,"adjustments","","",267],[11,"is_method_call","","",267],[11,"temporary_scope","","",267],[11,"upvar_capture","","",267],[11,"type_moves_by_default","","",267],[11,"param_env","","",267],[11,"closure_kind","","",267],[11,"closure_type","","",267],[11,"closure_upvars","","",267],[11,"fmt","","",275],[11,"eq","","",275],[11,"ne","","",275],[11,"clone","","",275],[11,"decode","","",22],[11,"encode","","",22],[11,"clone","","",22],[11,"is_identity","","",220],[11,"is_identity","","",222],[11,"new","","",240],[11,"shifted","","",240],[11,"repr","","",220],[11,"repr","","",221],[11,"repr","","",222],[11,"repr","","",223],[11,"repr","","",244],[11,"repr","","",261],[11,"repr","","",230],[11,"has_regions_escaping_depth","rustc::middle::subst","",173],[11,"has_regions_escaping_depth","","",176],[11,"has_regions_escaping_depth","rustc::middle::ty","",268],[11,"has_regions_escaping_depth","","",16],[11,"has_regions_escaping_depth","","",260],[11,"has_regions_escaping_depth","","",261],[11,"has_regions_escaping_depth","","",83],[11,"has_regions_escaping_depth","rustc::middle::subst","",174],[11,"has_regions_escaping_depth","rustc::middle::ty","",90],[11,"has_regions_escaping_depth","","",263],[11,"has_regions_escaping_depth","","",262],[11,"has_regions_escaping_depth","","",264],[11,"has_regions_escaping_depth","","",84],[11,"has_regions_escaping_depth","","",265],[11,"repr","","",84],[11,"has_projection_types","collections::vec","",276],[11,"has_projection_types","rustc::middle::subst","",176],[11,"has_projection_types","rustc::middle::ty","",237],[11,"has_projection_types","","",274],[11,"has_projection_types","","",266],[11,"has_projection_types","","",261],[11,"has_projection_types","","",262],[11,"has_projection_types","","",263],[11,"has_projection_types","","",16],[11,"has_projection_types","","",264],[11,"has_projection_types","","",84],[11,"has_projection_types","","",265],[11,"has_projection_types","","",83],[11,"has_projection_types","rustc::middle::subst","",173],[11,"has_projection_types","core::option","",12],[11,"has_projection_types","alloc::rc","",82],[11,"has_projection_types","alloc::boxed","",277],[11,"has_projection_types","rustc::middle::ty","",90],[11,"has_projection_types","","",238],[11,"has_projection_types","","",85],[11,"has_projection_types","","",209],[11,"has_projection_types","","",236],[11,"references_error","","",90],[11,"references_error","alloc::rc","",82],[11,"references_error","rustc::middle::ty","",262],[11,"references_error","","",84],[11,"references_error","","",83],[11,"references_error","","",261],[11,"references_error","","",264],[11,"references_error","","",263],[11,"references_error","","",16],[11,"repr","","",237],[11,"repr","","",274],[11,"repr","","",209],[11,"repr","","",267],[11,"repr","","",256],[11,"fold_with","core::option","",12],[11,"fold_with","alloc::rc","",82],[11,"fold_with","alloc::boxed","",277],[11,"fold_with","collections::vec","",276],[11,"fold_with","rustc::middle::ty","",90],[11,"fold_with","syntax::owned_slice","",278],[11,"fold_with","rustc::middle::subst","",176],[11,"fold_with","rustc::middle::ty","",236],[11,"fold_with","","",237],[11,"fold_with","","",215],[11,"fold_with","","",238],[11,"fold_with","","",85],[11,"fold_with","","",83],[11,"fold_with","","",209],[11,"fold_with","","",16],[11,"fold_with","rustc::middle::subst","",173],[11,"fold_with","rustc::middle::ty","",269],[11,"fold_with","","",223],[11,"fold_with","","",25],[11,"fold_with","","",230],[11,"fold_with","collections::enum_set","",279],[11,"fold_with","rustc::middle::ty","",249],[11,"fold_with","","",248],[11,"fold_with","","",257],[11,"fold_with","","",256],[11,"fold_with","","",258],[11,"fold_with","","",259],[11,"fold_with","","",260],[11,"fold_with","","",261],[11,"fold_with","","",84],[11,"fold_with","","",265],[11,"fold_with","","",266],[11,"fold_with","","",221],[11,"fold_with","rustc::middle::traits","",199],[11,"fold_with","","",197],[11,"fold_with","","",202],[11,"fold_with","","",201],[11,"fold_with","","",200],[11,"fold_with","","",198],[11,"fold_with","rustc::middle::ty","",263],[11,"fold_with","","",262],[11,"fold_with","","",264],[11,"fold_with","","",274],[11,"fold_with","","",267],[11,"tcx","rustc::middle::ty_fold","",280],[11,"fold_ty","","",280],[11,"new","","",281],[11,"tcx","","",281],[11,"enter_region_binder","","",281],[11,"exit_region_binder","","",281],[11,"fold_region","","",281],[11,"tcx","","",282],[11,"fold_region","","",282],[11,"new","rustc::middle::ty_walk","",283],[11,"skip_current_subtree","","Skips the subtree of types corresponding to the last type\nreturned by `next()`.",283],[6,"Item","rustc_lint::lint",""],[11,"next","rustc::middle::ty_walk","",283],[11,"visit_foreign_item","rustc::middle::weak_lang_items","",284],[11,"from_i64","rustc::metadata::common","",285],[11,"from_u64","","",285],[11,"eq","","",285],[11,"ne","","",285],[11,"fmt","","",286],[11,"clone","","",286],[11,"fmt","rustc::metadata::tydecode","",287],[11,"clone","rustc::metadata::encoder","",288],[11,"visit_expr","","",289],[11,"visit_item","","",289],[11,"visit_foreign_item","","",289],[11,"visit_item","","",290],[11,"eq","rustc::metadata::decoder","",291],[11,"ne","","",291],[11,"fmt","","",292],[11,"clone","","",292],[11,"clone","","",293],[11,"visit_item","rustc::metadata::creader","",294],[11,"as_slice","","",295],[11,"new","","",294],[11,"read_crates","","",294],[11,"read_exported_macros","","Read exported macros.",294],[11,"find_plugin_registrar","","Look for a plugin registrar. Returns library path and symbol name.",294],[11,"clone","rustc::metadata::cstore","",296],[11,"eq","","",296],[11,"ne","","",296],[11,"fmt","","",296],[11,"from_i64","","",297],[11,"from_u64","","",297],[11,"eq","","",297],[11,"ne","","",297],[11,"clone","","",297],[11,"clone","","",298],[11,"eq","","",298],[11,"ne","","",298],[11,"new","","",299],[11,"next_crate_num","","",299],[11,"get_crate_data","","",299],[11,"get_crate_hash","","",299],[11,"set_crate_data","","",299],[11,"iter_crate_data","","",299],[11,"iter_crate_data_origins","","Like `iter_crate_data`, but passes source paths (if available) as well.",299],[11,"add_used_crate_source","","",299],[11,"get_used_crate_source","","",299],[11,"reset","","",299],[11,"get_used_crates","","",299],[11,"add_used_library","","",299],[11,"get_used_libraries","","",299],[11,"add_used_link_args","","",299],[11,"get_used_link_args","","",299],[11,"add_extern_mod_stmt_cnum","","",299],[11,"find_extern_mod_stmt_cnum","","",299],[11,"data","","",300],[11,"name","","",300],[11,"hash","","",300],[11,"as_slice","","",301],[11,"maybe_load_library_crate","rustc::metadata::loader","",302],[11,"load_library_crate","","",302],[11,"report_load_errs","","",302],[11,"as_slice","","",303],[11,"for_each_lib_search_path","rustc::metadata::filesearch","",304],[11,"get_lib_path","","",304],[11,"search","","",304],[11,"new","","",304],[11,"get_dylib_search_paths","","",304],[11,"get_tools_search_paths","","",304],[11,"visit_item","rustc::metadata::macro_import","",305],[11,"visit_mac","","",305],[11,"eq","rustc::session::config","",306],[11,"ne","","",306],[11,"clone","","",306],[11,"eq","","",307],[11,"ne","","",307],[11,"clone","","",307],[11,"cmp","","",308],[11,"partial_cmp","","",308],[11,"lt","","",308],[11,"le","","",308],[11,"gt","","",308],[11,"ge","","",308],[11,"eq","","",308],[11,"ne","","",308],[11,"clone","","",308],[11,"clone","","",309],[11,"clone","","",310],[11,"eq","","",311],[11,"ne","","",311],[11,"clone","","",311],[11,"filestem","","",312],[11,"clone","","",313],[11,"path","","",313],[11,"temp_path","","",313],[11,"with_extension","","",313],[11,"filestem","","",313],[11,"eq","","",314],[11,"ne","","",314],[11,"fmt","","",315],[11,"hash","","",315],[11,"cmp","","",315],[11,"clone","","",315],[11,"partial_cmp","","",315],[11,"lt","","",315],[11,"le","","",315],[11,"gt","","",315],[11,"ge","","",315],[11,"eq","","",315],[11,"ne","","",315],[11,"clone","","",316],[11,"is_empty","","",316],[11,"clone","","",317],[11,"clone","","",318],[11,"fmt","","",319],[11,"eq","","",319],[11,"ne","","",319],[11,"clone","","",319],[11,"eq","","",320],[11,"ne","","",320],[11,"clone","","",320],[11,"is_stable","","",320],[11,"fmt","","",315],[11,"fmt","rustc::session::search_paths","",321],[11,"clone","","",321],[11,"fmt","","",322],[11,"clone","","",322],[11,"eq","","",322],[11,"ne","","",322],[11,"new","","",321],[11,"add_path","","",321],[11,"iter","","",321],[6,"Item","rustc_lint::lint",""],[11,"next","rustc::session::search_paths","",323],[11,"span_fatal","rustc::session","",324],[11,"span_fatal_with_code","","",324],[11,"fatal","","",324],[11,"span_err","","",324],[11,"span_err_with_code","","",324],[11,"err","","",324],[11,"err_count","","",324],[11,"has_errors","","",324],[11,"abort_if_errors","","",324],[11,"span_warn","","",324],[11,"span_warn_with_code","","",324],[11,"warn","","",324],[11,"opt_span_warn","","",324],[11,"span_note","","",324],[11,"span_end_note","","",324],[11,"span_help","","",324],[11,"fileline_note","","",324],[11,"fileline_help","","",324],[11,"note","","",324],[11,"help","","",324],[11,"opt_span_bug","","",324],[11,"span_bug","","",324],[11,"bug","","",324],[11,"span_unimpl","","",324],[11,"unimpl","","",324],[11,"add_lint","","",324],[11,"next_node_id","","",324],[11,"reserve_node_ids","","",324],[11,"diagnostic","","",324],[11,"codemap","","",324],[11,"impossible_case","","",324],[11,"verbose","","",324],[11,"time_passes","","",324],[11,"count_llvm_insns","","",324],[11,"count_type_sizes","","",324],[11,"time_llvm_passes","","",324],[11,"trans_stats","","",324],[11,"meta_stats","","",324],[11,"asm_comments","","",324],[11,"no_verify","","",324],[11,"borrowck_stats","","",324],[11,"print_llvm_passes","","",324],[11,"lto","","",324],[11,"no_landing_pads","","",324],[11,"unstable_options","","",324],[11,"print_enum_sizes","","",324],[11,"sysroot","","",324],[11,"target_filesearch","","",324],[11,"host_filesearch","","",324],[11,"args","rustc::plugin::registry","Get the plugin's arguments, if any.",325],[11,"register_syntax_extension","","Register a syntax extension of any kind.",325],[11,"register_macro","","Register a macro of the usual kind.",325],[11,"register_lint_pass","","Register a compiler lint pass.",325],[11,"register_lint_group","","Register a lint group.",325],[11,"visit_item","rustc::plugin::build","",326],[11,"fmt","rustc::lint","",0],[11,"clone","","",327],[11,"eq","","",327],[11,"hash","","",327],[11,"of","","Get the `LintId` for a `Lint`.",327],[11,"as_str","","Get the name of the lint.",327],[11,"fmt","","",328],[11,"cmp","","",328],[11,"partial_cmp","","",328],[11,"lt","","",328],[11,"le","","",328],[11,"gt","","",328],[11,"ge","","",328],[11,"eq","","",328],[11,"ne","","",328],[11,"clone","","",328],[11,"as_str","","Convert a level to a lower-case string.",328],[11,"from_str","","Convert a lower-case string to a level.",328],[11,"eq","","",329],[11,"ne","","",329],[11,"clone","","",329],[11,"get_lints","rustc::lint::builtin","",330],[11,"new","rustc::lint::context","",331],[11,"get_lints","","",331],[11,"get_lint_groups","","",331],[11,"register_pass","","",331],[11,"register_group","","",331],[11,"register_renamed","","",331],[11,"process_command_line","","",331],[11,"sess","","Get the overall compiler `Session` object.",332],[11,"current_level","","Get the level of `lint` at the current position of the lint\ntraversal.",332],[11,"lint","","Emit a lint at the appropriate level, with no associated span.",332],[11,"span_lint","","Emit a lint at the appropriate level, for a particular span.",332],[11,"visit_item","","",332],[11,"visit_foreign_item","","",332],[11,"visit_pat","","",332],[11,"visit_expr","","",332],[11,"visit_stmt","","",332],[11,"visit_fn","","",332],[11,"visit_ty_method","","",332],[11,"visit_struct_def","","",332],[11,"visit_struct_field","","",332],[11,"visit_variant","","",332],[11,"visit_ty","","",332],[11,"visit_ident","","",332],[11,"visit_mod","","",332],[11,"visit_local","","",332],[11,"visit_block","","",332],[11,"visit_arm","","",332],[11,"visit_decl","","",332],[11,"visit_expr_post","","",332],[11,"visit_generics","","",332],[11,"visit_trait_item","","",332],[11,"visit_opt_lifetime_ref","","",332],[11,"visit_lifetime_ref","","",332],[11,"visit_lifetime_def","","",332],[11,"visit_explicit_self","","",332],[11,"visit_mac","","",332],[11,"visit_path","","",332],[11,"visit_attribute","","",332],[11,"visit_id","","",332],[11,"get_lints","","",333],[11,"check_item","","",333],[11,"fmt","rustc::util::common","",334],[11,"clone","","",334],[11,"drop","","",335],[11,"visit_expr","","",336],[11,"visit_expr","","",337],[11,"repr","core::option","",12],[11,"repr","syntax::ptr","",338],[11,"repr","core::result","",130],[11,"repr","alloc::rc","",82],[11,"repr","alloc::boxed","",277],[11,"repr","syntax::owned_slice","",278],[11,"repr","collections::vec","",276],[11,"user_string","","",276],[11,"repr","rustc::middle::def","",15],[11,"user_string","rustc::middle::ty","",244],[11,"repr","","",257],[11,"repr","","",258],[11,"repr","","",234],[11,"repr","","",215],[11,"repr","rustc::middle::subst","",173],[11,"repr","","",176],[11,"repr","rustc::middle::ty","",269],[11,"repr","rustc::middle::subst","",174],[11,"repr","collections::enum_set","",279],[11,"repr","rustc::middle::ty","",248],[11,"repr","","",83],[11,"repr","","",339],[11,"repr","syntax::ast","",340],[11,"repr","","",152],[11,"repr","","",341],[11,"user_string","","",341],[11,"repr","","",342],[11,"repr","","",343],[11,"repr","","",344],[11,"repr","syntax::codemap","",345],[11,"repr","syntax::ast","",153],[11,"repr","rustc::middle::ty","",20],[11,"repr","","",16],[11,"user_string","","",16],[11,"repr","","",17],[11,"repr","rustc::middle::region","",18],[11,"repr","","",19],[11,"repr","syntax::ast","",11],[11,"repr","rustc::middle::ty","",268],[11,"repr","","",259],[11,"repr","","",260],[11,"repr","","",266],[11,"repr","","",218],[11,"repr","","",219],[11,"repr","","",213],[11,"repr","syntax::ast","",8],[11,"user_string","","",8],[11,"repr","","",7],[11,"repr","","",346],[11,"repr","","",347],[11,"repr","rustc::middle::ty","",236],[11,"repr","","",85],[11,"repr","","",238],[11,"repr","","",227],[11,"repr","","",25],[11,"repr","","",225],[11,"repr","","",226],[11,"repr","","",250],[11,"user_string","","",250],[11,"repr","syntax::codemap","",13],[11,"user_string","alloc::rc","",82],[11,"user_string","rustc::middle::ty","",248],[11,"repr","","",249],[11,"user_string","collections::enum_set","",279],[11,"user_string","rustc::middle::ty","",90],[11,"user_string","","",83],[11,"user_string","syntax::ast","",7],[11,"repr","syntax::abi","",348],[11,"user_string","","",348],[11,"repr","rustc::middle::ty","",241],[11,"repr","syntax::ast","",349],[11,"repr","rustc::middle::ty","",242],[11,"repr","","",23],[11,"repr","","",24],[11,"repr","","",119],[11,"repr","","",121],[11,"repr","","",252],[11,"repr","","",251],[11,"repr","","",120],[11,"repr","syntax::ast","",350],[11,"repr","","",351],[11,"repr","","",122],[11,"repr","rustc::middle::ty","",275],[11,"user_string","","",239],[11,"repr","","",239],[11,"repr","","",90],[11,"repr","std::collections::hash::map","",352],[11,"repr","rustc::middle::ty","",264],[11,"user_string","","",264],[11,"repr","","",263],[11,"user_string","","",263],[11,"repr","","",262],[11,"user_string","","",262],[11,"user_string","","",84],[11,"repr","","",265],[11,"user_string","","",265],[11,"user_string","","",261],[11,"default","rustc::util::nodemap","",353],[11,"write","","",353],[11,"finish","","",353],[11,"new","rustc::util::snapshot_vec","",354],[11,"record","","",354],[11,"push","","",354],[11,"get","","",354],[11,"get_mut","","Returns a mutable pointer into the vec; whatever changes you make here cannot be undone\nautomatically, so you should be sure call `record()` with some sort of suitable undo\naction.",354],[11,"set","","Updates the element at the given index. The old value will saved (and perhaps restored) if\na snapshot is active.",354],[11,"start_snapshot","","",354],[11,"actions_since_snapshot","","",354],[11,"rollback_to","","",354],[11,"commit","","Commits all changes since the last snapshot. Of course, they\ncan still be undone if there is a snapshot further out.",354],[11,"input","rustc_back::sha2","",355],[11,"reset","","",355],[11,"zero_until","","",355],[11,"next","","",355],[11,"full_buffer","","",355],[11,"position","","",355],[11,"remaining","","",355],[11,"size","","",355],[11,"new","","Construct a new instance of a SHA-256 digest.",356],[11,"input","","",356],[11,"result","","",356],[11,"reset","","",356],[11,"output_bits","","",356],[11,"open","rustc_llvm::archive_ro","Opens a static archive for read-only purposes. This is more optimized\nthan the `open` method because it uses LLVM's internal `Archive` class\nrather than shelling out to `ar` for everything.",357],[11,"read","","Reads a file in the archive",357],[11,"drop","","",357],[11,"describe","rustc_llvm::diagnostic","",358],[11,"unpack","","",359],[11,"eq","rustc_llvm","",360],[11,"ne","","",360],[11,"fmt","","",361],[11,"hash","","",362],[11,"cmp","","",362],[11,"partial_cmp","","",362],[11,"lt","","",362],[11,"le","","",362],[11,"gt","","",362],[11,"ge","","",362],[11,"clone","","",362],[11,"eq","","",362],[11,"ne","","",362],[11,"empty","","Returns an empty set of flags.",362],[11,"all","","Returns the set containing all flags.",362],[11,"bits","","Returns the raw value of the flags currently stored.",362],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",362],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",362],[11,"is_empty","","Returns `true` if no flags are currently stored.",362],[11,"is_all","","Returns `true` if all flags are currently set.",362],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",362],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",362],[11,"insert","","Inserts the specified flags in-place.",362],[11,"remove","","Removes the specified flags in-place.",362],[11,"toggle","","Toggles the specified flags in-place.",362],[6,"Output","rustc_lint::lint",""],[11,"bitor","rustc_llvm","Returns the union of the two sets of flags.",362],[6,"Output","rustc_lint::lint",""],[11,"bitxor","rustc_llvm","Returns the left flags, but with all the right flags toggled.",362],[6,"Output","rustc_lint::lint",""],[11,"bitand","rustc_llvm","Returns the intersection between the two sets of flags.",362],[6,"Output","rustc_lint::lint",""],[11,"sub","rustc_llvm","Returns the set difference of the two sets of flags.",362],[6,"Output","rustc_lint::lint",""],[11,"not","rustc_llvm","Returns the complement of this set of flags.",362],[11,"apply_llfn","","",362],[11,"apply_callsite","","",362],[11,"apply_llfn","","",363],[11,"apply_callsite","","",363],[11,"apply_llfn","","",364],[11,"apply_callsite","","",364],[11,"new","","",365],[11,"arg","","",365],[11,"ret","","",365],[11,"apply_llfn","","",365],[11,"apply_callsite","","",365],[11,"fmt","","",366],[11,"eq","","",366],[11,"ne","","",366],[11,"clone","","",367],[11,"eq","","",367],[11,"ne","","",367],[11,"eq","","",368],[11,"ne","","",368],[11,"drop","","",369],[11,"new","","",370],[11,"drop","","",370],[11,"drop","","",371],[3,"Lint","rustc_lint::lint","Specification of a single lint."],[12,"name","","A string identifier for the lint.",0],[12,"default_level","","Default level for the lint.",0],[12,"desc","","Description of the lint or the issue it detects.",0],[6,"LintArray","",""],[8,"LintPass","","Trait for types providing lint checks."],[10,"get_lints","","Get descriptions of the lints this `LintPass` object can emit.",372],[10,"check_crate","","",372],[10,"check_ident","","",372],[10,"check_mod","","",372],[10,"check_foreign_item","","",372],[10,"check_item","","",372],[10,"check_local","","",372],[10,"check_block","","",372],[10,"check_stmt","","",372],[10,"check_arm","","",372],[10,"check_pat","","",372],[10,"check_decl","","",372],[10,"check_expr","","",372],[10,"check_expr_post","","",372],[10,"check_ty","","",372],[10,"check_generics","","",372],[10,"check_fn","","",372],[10,"check_ty_method","","",372],[10,"check_trait_item","","",372],[10,"check_struct_def","","",372],[10,"check_struct_def_post","","",372],[10,"check_struct_field","","",372],[10,"check_variant","","",372],[10,"check_variant_post","","",372],[10,"check_opt_lifetime_ref","","",372],[10,"check_lifetime_ref","","",372],[10,"check_lifetime_def","","",372],[10,"check_explicit_self","","",372],[10,"check_mac","","",372],[10,"check_path","","",372],[10,"check_attribute","","",372],[10,"enter_lint_attrs","","Called when entering a syntax node that can have lint attributes such\nas `#[allow(...)]`. Called with *all* the attributes of that node.",372],[10,"exit_lint_attrs","","Counterpart to `enter_lint_attrs`.",372],[6,"LintPassObject","",""],[3,"LintId","","Identifies a lint known to the compiler."],[4,"Level","","Setting for how to handle a lint."],[13,"Allow","","",328],[13,"Warn","","",328],[13,"Deny","","",328],[13,"Forbid","","",328],[4,"LintSource","","How a lint level was set."],[13,"Default","","Lint is at the default level as declared\nin rustc or a plugin.",329],[13,"Node","","Lint level was set by an attribute.",329],[13,"CommandLine","","Lint level was set by a command-line flag.",329],[13,"ReleaseChannel","","Lint level was set by the release channel.",329],[6,"LevelSource","",""],[0,"builtin","","Some lints that are built in to the compiler."],[7,"UNUSED_IMPORTS","rustc_lint::lint::builtin",""],[7,"UNUSED_EXTERN_CRATES","",""],[7,"UNUSED_QUALIFICATIONS","",""],[7,"UNKNOWN_LINTS","",""],[7,"UNUSED_VARIABLES","",""],[7,"UNUSED_ASSIGNMENTS","",""],[7,"DEAD_CODE","",""],[7,"UNREACHABLE_CODE","",""],[7,"WARNINGS","",""],[7,"UNUSED_FEATURES","",""],[7,"STABLE_FEATURES","",""],[7,"UNKNOWN_CRATE_TYPES","",""],[7,"VARIANT_SIZE_DIFFERENCES","",""],[7,"FAT_PTR_TRANSMUTES","",""],[3,"HardwiredLints","","Does nothing as a lint pass, but registers some `Lint`s\nwhich are used by other parts of the compiler."],[3,"GatherNodeLevels","rustc_lint::lint",""],[3,"Context","","Context for lint checking."],[12,"tcx","","Type context we're checking in.",332],[12,"krate","","The crate being checked.",332],[12,"exported_items","","Items exported from the crate being checked.",332],[3,"LintStore","","Information about the registered lints."],[5,"check_crate","","Perform lint checking on a crate."],[5,"raw_emit_lint","","Emit a lint as a warning or an error (or not at all)\naccording to `level`."],[5,"gather_attrs","","Parse the lint attributes into a vector, with `Err`s for malformed lint\nattributes. Writing this as an iterator is an enormous mess."],[0,"metadata","rustc_lint",""],[0,"common","rustc_lint::metadata",""],[17,"tag_items","rustc_lint::metadata::common",""],[17,"tag_paths_data_name","",""],[17,"tag_def_id","",""],[17,"tag_items_data","",""],[17,"tag_items_data_item","",""],[17,"tag_items_data_item_family","",""],[17,"tag_items_data_item_type","",""],[17,"tag_items_data_item_symbol","",""],[17,"tag_items_data_item_variant","",""],[17,"tag_items_data_parent_item","",""],[17,"tag_items_data_item_is_tuple_struct_ctor","",""],[17,"tag_index","",""],[17,"tag_index_buckets","",""],[17,"tag_index_buckets_bucket","",""],[17,"tag_index_buckets_bucket_elt","",""],[17,"tag_index_table","",""],[17,"tag_meta_item_name_value","",""],[17,"tag_meta_item_name","",""],[17,"tag_meta_item_value","",""],[17,"tag_attributes","",""],[17,"tag_attribute","",""],[17,"tag_meta_item_word","",""],[17,"tag_meta_item_list","",""],[17,"tag_crate_deps","",""],[17,"tag_crate_dep","",""],[17,"tag_crate_hash","",""],[17,"tag_crate_crate_name","",""],[17,"tag_crate_dep_crate_name","",""],[17,"tag_crate_dep_hash","",""],[17,"tag_mod_impl","",""],[17,"tag_item_trait_item","",""],[17,"tag_item_trait_ref","",""],[17,"tag_disr_val","",""],[17,"tag_path","",""],[17,"tag_path_len","",""],[17,"tag_path_elem_mod","",""],[17,"tag_path_elem_name","",""],[17,"tag_item_field","",""],[17,"tag_item_field_origin","",""],[17,"tag_item_variances","",""],[17,"tag_item_impl_item","",""],[17,"tag_item_trait_method_explicit_self","",""],[17,"tag_items_data_item_reexport","",""],[17,"tag_items_data_item_reexport_def_id","",""],[17,"tag_items_data_item_reexport_name","",""],[4,"astencode_tag","",""],[13,"tag_ast","","",285],[13,"tag_tree","","",285],[13,"tag_id_range","","",285],[13,"tag_table","","",285],[13,"tag_table_def","","",285],[13,"tag_table_node_type","","",285],[13,"tag_table_item_subst","","",285],[13,"tag_table_freevars","","",285],[13,"tag_table_tcache","","",285],[13,"tag_table_param_defs","","",285],[13,"tag_table_mutbl","","",285],[13,"tag_table_last_use","","",285],[13,"tag_table_spill","","",285],[13,"tag_table_method_map","","",285],[13,"tag_table_vtable_map","","",285],[13,"tag_table_adjustments","","",285],[13,"tag_table_moves_map","","",285],[13,"tag_table_capture_map","","",285],[13,"tag_table_closure_tys","","",285],[13,"tag_table_closure_kinds","","",285],[13,"tag_table_upvar_capture_map","","",285],[13,"tag_table_capture_modes","","",285],[13,"tag_table_object_cast_map","","",285],[13,"tag_table_const_qualif","","",285],[17,"tag_item_trait_item_sort","",""],[17,"tag_item_trait_parent_sort","",""],[17,"tag_item_impl_type_basename","",""],[17,"tag_crate_triple","",""],[17,"tag_dylib_dependency_formats","",""],[17,"tag_lang_items","",""],[17,"tag_lang_items_item","",""],[17,"tag_lang_items_item_id","",""],[17,"tag_lang_items_item_node_id","",""],[17,"tag_lang_items_missing","",""],[17,"tag_item_unnamed_field","",""],[17,"tag_items_data_item_visibility","",""],[17,"tag_item_method_tps","",""],[17,"tag_item_method_fty","",""],[17,"tag_mod_child","",""],[17,"tag_misc_info","",""],[17,"tag_misc_info_crate_items","",""],[17,"tag_item_method_provided_source","",""],[17,"tag_item_impl_vtables","",""],[17,"tag_impls","",""],[17,"tag_impls_impl","",""],[17,"tag_items_data_item_inherent_impl","",""],[17,"tag_items_data_item_extension_impl","",""],[17,"tag_native_libraries","",""],[17,"tag_native_libraries_lib","",""],[17,"tag_native_libraries_name","",""],[17,"tag_native_libraries_kind","",""],[17,"tag_plugin_registrar_fn","",""],[17,"tag_method_argument_names","",""],[17,"tag_method_argument_name","",""],[17,"tag_reachable_extern_fns","",""],[17,"tag_reachable_extern_fn_id","",""],[17,"tag_items_data_item_stability","",""],[17,"tag_items_data_item_repr","",""],[3,"LinkMeta","",""],[12,"crate_name","","",286],[12,"crate_hash","","",286],[17,"tag_struct_fields","",""],[17,"tag_struct_field","",""],[17,"tag_struct_field_id","",""],[17,"tag_attribute_is_sugared_doc","",""],[17,"tag_items_data_region","",""],[17,"tag_region_param_def","",""],[17,"tag_region_param_def_ident","",""],[17,"tag_region_param_def_def_id","",""],[17,"tag_region_param_def_space","",""],[17,"tag_region_param_def_index","",""],[17,"tag_type_param_def","",""],[17,"tag_item_generics","",""],[17,"tag_method_ty_generics","",""],[17,"tag_predicate","",""],[17,"tag_predicate_space","",""],[17,"tag_predicate_data","",""],[17,"tag_unsafety","",""],[17,"tag_associated_type_names","",""],[17,"tag_associated_type_name","",""],[17,"tag_polarity","",""],[17,"tag_macro_defs","",""],[17,"tag_macro_def","",""],[17,"tag_macro_def_body","",""],[17,"tag_paren_sugar","",""],[17,"tag_codemap","",""],[17,"tag_codemap_filemap","",""],[17,"tag_item_super_predicates","",""],[17,"tag_defaulted_trait","",""],[0,"tyencode","rustc_lint::metadata",""],[3,"ctxt","rustc_lint::metadata::tyencode",""],[12,"diag","","",373],[12,"ds","","",373],[12,"tcx","","",373],[12,"abbrevs","","",373],[3,"ty_abbrev","",""],[6,"abbrev_map","",""],[5,"enc_ty","",""],[5,"enc_substs","",""],[5,"enc_region","",""],[5,"enc_trait_ref","",""],[5,"enc_bare_fn_ty","",""],[5,"enc_closure_ty","",""],[5,"enc_builtin_bounds","",""],[5,"enc_existential_bounds","",""],[5,"enc_bounds","",""],[5,"enc_region_bounds","",""],[5,"enc_type_param_def","",""],[5,"enc_predicate","",""],[0,"tydecode","rustc_lint::metadata",""],[4,"DefIdSource","rustc_lint::metadata::tydecode",""],[13,"NominalType","","",287],[13,"TypeWithId","","",287],[13,"TypeParameter","","",287],[13,"RegionParameter","","",287],[13,"ClosureSource","","",287],[3,"PState","",""],[5,"parse_ident","",""],[5,"parse_name","",""],[5,"parse_state_from_data","",""],[5,"parse_ty_closure_data","",""],[5,"parse_ty_data","",""],[5,"parse_region_data","",""],[5,"parse_bare_fn_ty_data","",""],[5,"parse_trait_ref_data","",""],[5,"parse_substs_data","",""],[5,"parse_bounds_data","",""],[5,"parse_existential_bounds_data","",""],[5,"parse_builtin_bounds_data","",""],[5,"parse_def_id","",""],[5,"parse_predicate_data","",""],[5,"parse_predicate","",""],[5,"parse_type_param_def_data","",""],[0,"encoder","rustc_lint::metadata",""],[4,"InlinedItemRef","rustc_lint::metadata::encoder","A borrowed version of `ast::InlinedItem`."],[13,"IIItemRef","","",374],[13,"IITraitItemRef","","",374],[13,"IIImplItemRef","","",374],[13,"IIForeignRef","","",374],[6,"EncodeInlinedItem","",""],[3,"EncodeParams","",""],[12,"diag","","",375],[12,"tcx","","",375],[12,"reexports","","",375],[12,"item_symbols","","",375],[12,"link_meta","","",375],[12,"cstore","","",375],[12,"encode_inlined_item","","",375],[12,"reachable","","",375],[3,"EncodeContext","",""],[12,"diag","","",26],[12,"tcx","","",26],[12,"reexports","","",26],[12,"item_symbols","","",26],[12,"link_meta","","",26],[12,"cstore","","",26],[12,"encode_inlined_item","","",26],[12,"type_abbrevs","","",26],[12,"reachable","","",26],[5,"encode_def_id","",""],[5,"def_to_string","",""],[5,"write_closure_type","",""],[5,"write_type","",""],[5,"write_trait_ref","",""],[5,"write_region","",""],[17,"metadata_encoding_version","",""],[5,"encode_metadata","",""],[5,"encoded_ty","",""],[0,"decoder","rustc_lint::metadata",""],[6,"Cmd","rustc_lint::metadata::decoder",""],[5,"maybe_find_item","",""],[5,"item_type","",""],[5,"get_trait_def","",""],[5,"get_predicates","",""],[5,"get_super_predicates","",""],[5,"get_type","",""],[5,"get_stability","",""],[5,"get_repr_attrs","",""],[5,"get_impl_polarity","",""],[5,"get_impl_trait","",""],[5,"get_impl_vtables","",""],[5,"get_symbol","",""],[4,"DefLike","",""],[13,"DlDef","","",292],[13,"DlImpl","","",292],[13,"DlField","","",292],[5,"each_lang_item","","Iterates over the language items in the given crate."],[5,"each_child_of_item","","Iterates over each child of the given item."],[5,"each_top_level_item_of_crate","","Iterates over all the top-level crate items."],[5,"get_item_path","",""],[6,"DecodeInlinedItem","",""],[5,"maybe_get_item_ast","",""],[5,"get_enum_variant_defs","",""],[5,"get_enum_variants","",""],[5,"get_impl_items","","Returns the def IDs of all the items in the given implementation."],[5,"get_trait_name","",""],[5,"is_static_method","",""],[5,"get_impl_or_trait_item","",""],[5,"get_trait_item_def_ids","",""],[5,"get_item_variances","",""],[5,"get_provided_trait_methods","",""],[5,"get_type_name_if_impl","",""],[5,"get_methods_if_impl","",""],[5,"get_tuple_struct_definition_if_ctor","","If node_id is the constructor of a tuple struct, retrieve the NodeId of\nthe actual type definition, otherwise, return None"],[5,"get_item_attrs","",""],[5,"get_struct_field_attrs","",""],[5,"get_struct_fields","",""],[5,"get_crate_attributes","",""],[3,"CrateDep","",""],[12,"cnum","","",293],[12,"name","","",293],[12,"hash","","",293],[5,"get_crate_deps","",""],[5,"maybe_get_crate_hash","",""],[5,"get_crate_hash","",""],[5,"maybe_get_crate_name","",""],[5,"get_crate_triple","",""],[5,"get_crate_name","",""],[5,"list_crate_metadata","",""],[5,"translate_def_id","",""],[5,"each_impl","",""],[5,"each_implementation_for_type","",""],[5,"each_implementation_for_trait","",""],[5,"get_trait_of_item","",""],[5,"get_native_libraries","",""],[5,"get_plugin_registrar_fn","",""],[5,"each_exported_macro","",""],[5,"get_dylib_dependency_formats","",""],[5,"get_missing_lang_items","",""],[5,"get_method_arg_names","",""],[5,"get_reachable_extern_fns","",""],[5,"is_typedef","",""],[5,"is_associated_type","",""],[5,"is_defaulted_trait","",""],[5,"get_imported_filemaps","",""],[0,"creader","rustc_lint::metadata","Validates all used crates and extern libraries and loads their metadata"],[3,"CrateReader","rustc_lint::metadata::creader",""],[5,"validate_crate_name","",""],[0,"cstore","rustc_lint::metadata",""],[6,"cnum_map","rustc_lint::metadata::cstore",""],[4,"MetadataBlob","",""],[13,"MetadataVec","","",301],[13,"MetadataArchive","","",301],[3,"ImportedFileMap","","Holds information about a codemap::FileMap imported from another crate.\nSee creader::import_codemap() for more information."],[12,"original_start_pos","","This FileMap's byte-offset within the codemap of its original crate",376],[12,"original_end_pos","","The end of this FileMap within the codemap of its original crate",376],[12,"translated_filemap","","The imported FileMap's representation within the local codemap",376],[3,"crate_metadata","",""],[12,"name","","",300],[12,"data","","",300],[12,"cnum_map","","",300],[12,"cnum","","",300],[12,"codemap_import_info","","",300],[12,"span","","",300],[4,"LinkagePreference","",""],[13,"RequireDynamic","","",296],[13,"RequireStatic","","",296],[4,"NativeLibraryKind","",""],[13,"NativeStatic","","",297],[13,"NativeFramework","","",297],[13,"NativeUnknown","","",297],[3,"CrateSource","",""],[12,"dylib","","",298],[12,"rlib","","",298],[12,"cnum","","",298],[3,"CStore","",""],[12,"intr","","",299],[0,"csearch","rustc_lint::metadata",""],[3,"MethodInfo","rustc_lint::metadata::csearch",""],[12,"name","","",377],[12,"def_id","","",377],[12,"vis","","",377],[5,"get_symbol","",""],[5,"each_lang_item","","Iterates over all the language items in the given crate."],[5,"each_child_of_item","","Iterates over each child of the given item."],[5,"each_top_level_item_of_crate","","Iterates over each top-level crate item."],[5,"get_item_path","",""],[4,"FoundAst","",""],[13,"Found","","",378],[13,"FoundParent","","",378],[13,"NotFound","","",378],[5,"maybe_get_item_ast","",""],[5,"get_enum_variant_defs","",""],[5,"get_enum_variants","",""],[5,"get_impl_items","","Returns information about the given implementation."],[5,"get_impl_or_trait_item","",""],[5,"get_trait_name","",""],[5,"is_static_method","",""],[5,"get_trait_item_def_ids","",""],[5,"get_item_variances","",""],[5,"get_provided_trait_methods","",""],[5,"get_type_name_if_impl","",""],[5,"get_methods_if_impl","",""],[5,"get_item_attrs","",""],[5,"get_struct_fields","",""],[5,"get_struct_field_attrs","",""],[5,"get_type","",""],[5,"get_trait_def","",""],[5,"get_predicates","",""],[5,"get_super_predicates","",""],[5,"get_field_type","",""],[5,"get_impl_polarity","",""],[5,"get_impl_trait","",""],[5,"get_impl_vtables","",""],[5,"get_native_libraries","",""],[5,"each_impl","",""],[5,"each_implementation_for_type","",""],[5,"each_implementation_for_trait","",""],[5,"get_trait_of_item","","If the given def ID describes an item belonging to a trait (either a\ndefault method or an implementation of a trait method), returns the ID of\nthe trait that the method belongs to. Otherwise, returns `None`."],[5,"get_tuple_struct_definition_if_ctor","",""],[5,"get_dylib_dependency_formats","",""],[5,"get_missing_lang_items","",""],[5,"get_method_arg_names","",""],[5,"get_reachable_extern_fns","",""],[5,"is_typedef","",""],[5,"get_stability","",""],[5,"is_staged_api","",""],[5,"get_repr_attrs","",""],[5,"is_associated_type","",""],[5,"is_defaulted_trait","",""],[0,"loader","rustc_lint::metadata","Finds crate binaries and loads their metadata"],[3,"CrateMismatch","rustc_lint::metadata::loader",""],[3,"Context","",""],[12,"sess","","",302],[12,"span","","",302],[12,"ident","","",302],[12,"crate_name","","",302],[12,"hash","","",302],[12,"target","","",302],[12,"triple","","",302],[12,"filesearch","","",302],[12,"root","","",302],[12,"rejected_via_hash","","",302],[12,"rejected_via_triple","","",302],[12,"rejected_via_kind","","",302],[12,"should_match_name","","",302],[3,"Library","",""],[12,"dylib","","",379],[12,"rlib","","",379],[12,"metadata","","",379],[3,"ArchiveMetadata","",""],[3,"CratePaths","",""],[12,"ident","","",380],[12,"dylib","","",380],[12,"rlib","","",380],[5,"note_crate_name","",""],[5,"meta_section_name","",""],[5,"read_meta_section_name","",""],[5,"list_file_metadata","",""],[0,"filesearch","rustc_lint::metadata",""],[4,"FileMatch","rustc_lint::metadata::filesearch",""],[13,"FileMatches","","",381],[13,"FileDoesntMatch","","",381],[3,"FileSearch","",""],[12,"sysroot","","",304],[12,"search_paths","","",304],[12,"triple","","",304],[12,"kind","","",304],[5,"relative_target_lib_path","",""],[5,"get_or_default_sysroot","",""],[5,"get_rust_path","","Returns RUST_PATH as a string, without default paths added"],[5,"rust_path","","Returns the value of RUST_PATH, as a list\nof Paths. Includes default entries for, if they exist:\n$HOME/.rust\nDIR/.rust for any DIR that's the current working directory\nor an ancestor of it"],[5,"rustlibdir","",""],[0,"macro_import","rustc_lint::metadata","Used by `rustc` when loading a crate with exported macros."],[5,"read_macro_defs","rustc_lint::metadata::macro_import","Read exported macros."],[6,"MacroSelection","",""],[0,"middle","rustc_lint",""],[0,"astconv_util","rustc_lint::middle","This module contains a simple utility routine\nused by both `typeck` and `const_eval`.\nAlmost certainly this could (and should) be refactored out of existence."],[17,"NO_REGIONS","rustc_lint::middle::astconv_util",""],[17,"NO_TPS","",""],[5,"check_path_args","",""],[5,"prim_ty_to_ty","",""],[5,"ast_ty_to_prim_ty","",""],[0,"astencode","rustc_lint::middle",""],[5,"encode_inlined_item","rustc_lint::middle::astencode",""],[5,"decode_inlined_item","","Decodes an item from its AST in the cdata's metadata and adds it to the\nast-map."],[5,"encode_closure_kind","",""],[8,"vtable_decoder_helpers","",""],[10,"read_vec_per_param_space","","",382],[10,"read_vtable_res_with_key","","",382],[10,"read_vtable_res","","",382],[10,"read_vtable_param_res","","",382],[10,"read_vtable_origin","","",382],[0,"cfg","rustc_lint::middle","Module that constructs a control-flow graph representing an item.\nUses `Graph` as the underlying representation."],[0,"graphviz","rustc_lint::middle::cfg",""],[6,"Node","rustc_lint::middle::cfg::graphviz",""],[6,"Edge","",""],[3,"LabelledCFG","",""],[12,"ast_map","","",30],[12,"cfg","","",30],[12,"name","","",30],[12,"labelled_edges","","`labelled_edges` controls whether we emit labels on the edges",30],[3,"CFG","rustc_lint::middle::cfg",""],[12,"graph","","",32],[12,"entry","","",32],[12,"exit","","",32],[4,"CFGNodeData","",""],[13,"AST","","",31],[13,"Entry","","",31],[13,"Exit","","",31],[13,"Dummy","","",31],[13,"Unreachable","","",31],[3,"CFGEdgeData","",""],[12,"exiting_scopes","","",383],[6,"CFGIndex","",""],[6,"CFGGraph","",""],[6,"CFGNode","",""],[6,"CFGEdge","",""],[0,"check_const","rustc_lint::middle",""],[3,"ConstQualif","rustc_lint::middle::check_const",""],[17,"PURE_CONST","",""],[17,"MUTABLE_MEM","",""],[17,"NEEDS_DROP","",""],[17,"PREFER_IN_PLACE","",""],[17,"NON_ZERO_SIZED","",""],[17,"HAS_STATIC_BORROWS","",""],[17,"NOT_CONST","",""],[17,"NON_STATIC_BORROWS","",""],[5,"check_crate","",""],[0,"check_static_recursion","rustc_lint::middle",""],[5,"check_crate","rustc_lint::middle::check_static_recursion",""],[5,"check_item_recursion","",""],[0,"check_loop","rustc_lint::middle",""],[5,"check_crate","rustc_lint::middle::check_loop",""],[0,"check_match","rustc_lint::middle",""],[17,"DUMMY_WILD_PAT","rustc_lint::middle::check_match",""],[3,"MatchCheckCtxt","",""],[12,"tcx","","",43],[12,"param_env","","",43],[4,"Constructor","",""],[13,"Single","","The constructor of all patterns that don't vary by constructor,\ne.g. struct patterns and fixed-length arrays.",41],[13,"Variant","","Enum variants.",41],[13,"ConstantValue","","Literal values.",41],[13,"ConstantRange","","Ranges of literal values (2..5).",41],[13,"Slice","","Array patterns of length n.",41],[13,"SliceWithSubslice","","Array patterns with a subslice.",41],[5,"check_crate","",""],[3,"StaticInliner","",""],[12,"tcx","","",44],[12,"failed","","",44],[12,"renaming_map","","",44],[5,"constructor_arity","","This computes the arity of a constructor. The arity of a constructor\nis how many subpattern patterns of that constructor should be expanded to."],[5,"specialize","","This is the main specialization step. It expands the first pattern in the given row\ninto `arity` patterns based on the constructor. For most patterns, the step is trivial,\nfor instance tuple patterns are flattened and box patterns expand into their inner pattern."],[0,"check_rvalues","rustc_lint::middle",""],[5,"check_crate","rustc_lint::middle::check_rvalues",""],[0,"const_eval","rustc_lint::middle",""],[5,"lookup_const_by_id","rustc_lint::middle::const_eval",""],[4,"const_val","",""],[13,"const_float","","",50],[13,"const_int","","",50],[13,"const_uint","","",50],[13,"const_str","","",50],[13,"const_binary","","",50],[13,"const_bool","","",50],[5,"const_expr_to_pat","",""],[5,"eval_const_expr","",""],[3,"ConstEvalErr","",""],[12,"span","","",51],[12,"kind","","",51],[4,"ErrKind","",""],[13,"CannotCast","","",52],[13,"CannotCastTo","","",52],[13,"InvalidOpForBools","","",52],[13,"InvalidOpForFloats","","",52],[13,"InvalidOpForIntUint","","",52],[13,"InvalidOpForUintInt","","",52],[13,"NegateOnString","","",52],[13,"NegateOnBoolean","","",52],[13,"NegateOnBinary","","",52],[13,"NotOnFloat","","",52],[13,"NotOnString","","",52],[13,"NotOnBinary","","",52],[13,"AddiWithOverflow","","",52],[13,"SubiWithOverflow","","",52],[13,"MuliWithOverflow","","",52],[13,"AdduWithOverflow","","",52],[13,"SubuWithOverflow","","",52],[13,"MuluWithOverflow","","",52],[13,"DivideByZero","","",52],[13,"DivideWithOverflow","","",52],[13,"ModuloByZero","","",52],[13,"ModuloWithOverflow","","",52],[13,"MissingStructField","","",52],[13,"NonConstPath","","",52],[13,"NonConstStruct","","",52],[13,"TupleIndexOutOfBounds","","",52],[13,"MiscBinaryOp","","",52],[13,"MiscCatchAll","","",52],[5,"eval_const_expr_partial","",""],[5,"compare_const_vals","",""],[5,"compare_lit_exprs","",""],[0,"dataflow","rustc_lint::middle","A module for propagating forward dataflow information. The analysis\nassumes that the items to be propagated can be represented as bits\nand thus uses bitvectors. Your job is simply to specify the so-called\nGEN and KILL bits for each expression."],[4,"EntryOrExit","rustc_lint::middle::dataflow",""],[13,"Entry","","",53],[13,"Exit","","",53],[3,"DataFlowContext","",""],[8,"BitwiseOperator","",""],[10,"join","","Joins two predecessor bits together, typically either `|` or `&`",384],[8,"DataFlowOperator","","Parameterization for the precise form of data flow that is used."],[10,"initial_value","","Specifies the initial value for each bit in the `on_entry` set",385],[0,"dead","rustc_lint::middle",""],[5,"check_crate","rustc_lint::middle::dead",""],[0,"def","rustc_lint::middle",""],[4,"Def","rustc_lint::middle::def",""],[13,"DefFn","","",15],[13,"DefSelfTy","","",15],[13,"DefMod","","",15],[13,"DefForeignMod","","",15],[13,"DefStatic","","",15],[13,"DefConst","","",15],[13,"DefLocal","","",15],[13,"DefVariant","","",15],[13,"DefTy","","",15],[13,"DefAssociatedTy","","",15],[13,"DefTrait","","",15],[13,"DefPrimTy","","",15],[13,"DefTyParam","","",15],[13,"DefUse","","",15],[13,"DefUpvar","","",15],[13,"DefStruct","","Note that if it's a tuple struct's definition, the node id of the ast::DefId\nmay either refer to the item definition's id or the StructDef.ctor_id.",15],[13,"DefRegion","","",15],[13,"DefLabel","","",15],[13,"DefMethod","","",15],[3,"PathResolution","","The result of resolving a path.\nBefore type checking completes, `depth` represents the number of\ntrailing segments which are yet unresolved. Afterwards, if there\nwere no errors, all paths should be fully resolved, with `depth`\nset to `0` and `base_def` representing the final resolution."],[12,"base_def","","",60],[12,"last_private","","",60],[12,"depth","","",60],[6,"DefMap","",""],[6,"ExportMap","",""],[3,"Export","",""],[12,"name","","",386],[12,"def_id","","",386],[4,"MethodProvenance","",""],[13,"FromTrait","","",61],[13,"FromImpl","","",61],[0,"dependency_format","rustc_lint::middle","Resolution of mixing rlibs and dylibs"],[6,"DependencyList","rustc_lint::middle::dependency_format",""],[6,"Dependencies","",""],[5,"calculate","",""],[0,"effect","rustc_lint::middle","Enforces the Rust effect system. Currently there is just one effect,\n`unsafe`."],[5,"check_crate","rustc_lint::middle::effect",""],[0,"entry","rustc_lint::middle",""],[5,"find_entry_point","rustc_lint::middle::entry",""],[0,"expr_use_visitor","rustc_lint::middle","A different sort of visitor for walking fn bodies.  Unlike the\nnormal visitor, which just walks the entire body in one shot, the\n`ExprUseVisitor` determines how expressions are being used."],[8,"Delegate","rustc_lint::middle::expr_use_visitor","This trait defines the callbacks you can expect to receive when\nemploying the ExprUseVisitor."],[10,"consume","","",387],[10,"matched_pat","","",387],[10,"consume_pat","","",387],[10,"borrow","","",387],[10,"decl_without_init","","",387],[10,"mutate","","",387],[4,"LoanCause","",""],[13,"ClosureCapture","","",65],[13,"AddrOf","","",65],[13,"AutoRef","","",65],[13,"RefBinding","","",65],[13,"OverloadedOperator","","",65],[13,"ClosureInvocation","","",65],[13,"ForLoop","","",65],[13,"MatchDiscriminant","","",65],[4,"ConsumeMode","",""],[13,"Copy","","",66],[13,"Move","","",66],[4,"MoveReason","",""],[13,"DirectRefMove","","",67],[13,"PatBindingMove","","",67],[13,"CaptureMove","","",67],[4,"MatchMode","",""],[13,"NonBindingMatch","","",68],[13,"BorrowingMatch","","",68],[13,"CopyingMatch","","",68],[13,"MovingMatch","","",68],[4,"MutateMode","",""],[13,"Init","","",70],[13,"JustWrite","","",70],[13,"WriteAndRead","","",70],[3,"ExprUseVisitor","",""],[0,"fast_reject","rustc_lint::middle",""],[4,"SimplifiedType","rustc_lint::middle::fast_reject","See `simplify_type"],[13,"BoolSimplifiedType","","",72],[13,"CharSimplifiedType","","",72],[13,"IntSimplifiedType","","",72],[13,"UintSimplifiedType","","",72],[13,"FloatSimplifiedType","","",72],[13,"EnumSimplifiedType","","",72],[13,"StrSimplifiedType","","",72],[13,"VecSimplifiedType","","",72],[13,"PtrSimplifiedType","","",72],[13,"TupleSimplifiedType","","",72],[13,"TraitSimplifiedType","","",72],[13,"StructSimplifiedType","","",72],[13,"ClosureSimplifiedType","","",72],[13,"FunctionSimplifiedType","","",72],[13,"ParameterSimplifiedType","","",72],[5,"simplify_type","","Tries to simplify a type by dropping type parameters, deref'ing away any reference types, etc.\nThe idea is to get something simple that we can use to quickly decide if two types could unify\nduring method lookup."],[0,"graph","rustc_lint::middle","A graph module for use in dataflow, region resolution, and elsewhere."],[3,"Graph","rustc_lint::middle::graph",""],[3,"Node","",""],[12,"data","","",388],[3,"Edge","",""],[12,"data","","",73],[3,"NodeIndex","",""],[17,"InvalidNodeIndex","",""],[3,"EdgeIndex","",""],[17,"InvalidEdgeIndex","",""],[3,"Direction","",""],[17,"Outgoing","",""],[17,"Incoming","",""],[3,"DepthFirstTraversal","",""],[5,"each_edge_index","",""],[0,"intrinsicck","rustc_lint::middle",""],[5,"check_crate","rustc_lint::middle::intrinsicck",""],[0,"infer","rustc_lint::middle","See the Book for more information."],[0,"bivariate","rustc_lint::middle::infer","Applies the \"bivariance relationship\" to two types and/or regions.\nIf (A,B) are bivariant then either A <: B or B <: A. It occurs\nwhen type/lifetime parameters are unconstrained. Usually this is\nan error, but we permit it in the specific case where a type\nparameter is constrained in a where-clause via an associated type."],[3,"Bivariate","rustc_lint::middle::infer::bivariate",""],[5,"Bivariate","",""],[0,"combine","rustc_lint::middle::infer",""],[8,"Combine","rustc_lint::middle::infer::combine",""],[10,"tcx","","",389],[10,"tag","","",389],[10,"fields","","",389],[10,"infcx","","",389],[10,"a_is_expected","","",389],[10,"trace","","",389],[10,"equate","","",389],[10,"bivariate","","",389],[10,"sub","","",389],[10,"lub","","",389],[10,"glb","","",389],[10,"mts","","",389],[10,"tys_with_variance","","",389],[10,"tys","","",389],[10,"regions_with_variance","","",389],[10,"regions","","",389],[10,"substs","","",389],[10,"substs_variances","","",389],[10,"bare_fn_tys","","",389],[10,"fn_sigs","","",389],[10,"args","","",389],[10,"unsafeties","","",389],[10,"abi","","",389],[10,"projection_tys","","",389],[10,"projection_predicates","","",389],[10,"projection_bounds","","",389],[10,"existential_bounds","","",389],[10,"builtin_bounds","","",389],[10,"trait_refs","","",389],[10,"binders","","",389],[8,"Combineable","",""],[10,"combine","","",390],[3,"CombineFields","",""],[12,"infcx","","",86],[12,"a_is_expected","","",86],[12,"trace","","",86],[5,"expected_found","",""],[5,"super_tys","",""],[0,"equate","rustc_lint::middle::infer",""],[3,"Equate","rustc_lint::middle::infer::equate",""],[5,"Equate","",""],[0,"error_reporting","rustc_lint::middle::infer","Error Reporting Code for the inference engine"],[8,"ErrorReporting","rustc_lint::middle::infer::error_reporting",""],[10,"report_region_errors","","",391],[10,"process_errors","","",391],[10,"report_type_error","","",391],[10,"report_and_explain_type_error","","",391],[10,"values_str","","",391],[10,"expected_found_str","","",391],[10,"report_concrete_failure","","",391],[10,"report_generic_bound_failure","","",391],[10,"report_sub_sup_conflict","","",391],[10,"report_sup_sup_conflict","","",391],[10,"report_processed_errors","","",391],[10,"give_suggestion","","",391],[8,"Resolvable","",""],[10,"resolve","","",392],[10,"contains_error","","",392],[0,"glb","rustc_lint::middle::infer",""],[3,"Glb","rustc_lint::middle::infer::glb","\"Greatest lower bound\" (common subtype)"],[5,"Glb","",""],[0,"lattice","rustc_lint::middle::infer","# Lattice Variables"],[8,"LatticeDir","rustc_lint::middle::infer::lattice",""],[10,"relate_bound","","",393],[5,"super_lattice_tys","",""],[0,"lub","rustc_lint::middle::infer",""],[3,"Lub","rustc_lint::middle::infer::lub","\"Least upper bound\" (common supertype)"],[5,"Lub","",""],[0,"region_inference","rustc_lint::middle::infer","See README.md"],[4,"Constraint","rustc_lint::middle::infer::region_inference",""],[13,"ConstrainVarSubVar","","",96],[13,"ConstrainRegSubVar","","",96],[13,"ConstrainVarSubReg","","",96],[4,"Verify","",""],[13,"VerifyRegSubReg","","",106],[13,"VerifyGenericBound","","",106],[4,"GenericKind","",""],[13,"Param","","",97],[13,"Projection","","",97],[3,"TwoRegions","",""],[4,"UndoLogEntry","",""],[13,"OpenSnapshot","","",99],[13,"CommitedSnapshot","","",99],[13,"AddVar","","",99],[13,"AddConstraint","","",99],[13,"AddVerify","","",99],[13,"AddGiven","","",99],[13,"AddCombination","","",99],[4,"CombineMapType","",""],[13,"Lub","","",100],[13,"Glb","","",100],[4,"RegionResolutionError","",""],[13,"ConcreteFailure","","`ConcreteFailure(o, a, b)`:",101],[13,"GenericBoundFailure","","`GenericBoundFailure(p, s, a, bs)",101],[13,"SubSupConflict","","`SubSupConflict(v, sub_origin, sub_r, sup_origin, sup_r)`:",101],[13,"SupSupConflict","","`SupSupConflict(v, origin1, r1, origin2, r2)`:",101],[13,"ProcessedErrors","","For subsets of `ConcreteFailure` and `SubSupConflict`, we can derive\nmore specific errors message by suggesting to the user where they\nshould put a lifetime. In those cases we process and put those errors\ninto `ProcessedErrors` before we do any reporting.",101],[3,"SameRegions","","SameRegions is used to group regions that we think are the same and would\nlike to indicate so to the user.\nFor example, the following function\n```\nstruct Foo { bar: int }\nfn foo2<'a, 'b>(x: &'a Foo) -> &'b int {\n   &x.bar\n}\n```\nwould report an error because we expect 'a and 'b to match, and so we group\n'a and 'b together inside a SameRegions struct"],[12,"scope_id","","",102],[12,"regions","","",102],[6,"CombineMap","",""],[3,"RegionVarBindings","",""],[3,"RegionSnapshot","",""],[4,"VarValue","",""],[13,"NoValue","","",107],[13,"Value","","",107],[13,"ErrorValue","","",107],[0,"resolve","rustc_lint::middle::infer",""],[3,"OpportunisticTypeResolver","rustc_lint::middle::infer::resolve","The opportunistic type resolver can be used at any time. It simply replaces\ntype variables that have been unified with the things they have\nbeen unified with (similar to `shallow_resolve`, but deep). This is\nuseful for printing messages etc but also required at various\npoints for correctness."],[5,"fully_resolve","","Full type resolution replaces all type and region variables with\ntheir concrete results. If any variable cannot be replaced (never unified, etc)\nthen an `Err` result is returned."],[0,"sub","rustc_lint::middle::infer",""],[3,"Sub","rustc_lint::middle::infer::sub","\"Greatest lower bound\" (common subtype)"],[5,"Sub","",""],[0,"type_variable","rustc_lint::middle::infer",""],[3,"TypeVariableTable","rustc_lint::middle::infer::type_variable",""],[3,"Snapshot","",""],[4,"RelationDir","",""],[13,"SubtypeOf","","",113],[13,"SupertypeOf","","",113],[13,"EqTo","","",113],[13,"BiTo","","",113],[0,"unify","rustc_lint::middle::infer",""],[8,"UnifyKey","rustc_lint::middle::infer::unify","This trait is implemented by any type that can serve as a type\nvariable. We call such variables *unification keys*. For example,\nthis trait is implemented by `IntVid`, which represents integral\nvariables."],[16,"Value","rustc_lint::middle::infer::unify::UnifyKey",""],[10,"index","rustc_lint::middle::infer::unify","",394],[10,"from_index","","",394],[10,"unification_table","","",394],[10,"tag","","",394],[8,"UnifyValue","","Trait for valid types that a type variable can be set to. Note that\nthis is typically not the end type that the value will take on, but\nrather an `Option` wrapper (where `None` represents a variable\nwhose value is not yet set)."],[4,"VarValue","","Value of a unification key. We implement Tarjan's union-find\nalgorithm: when two keys are unified, one of them is converted\ninto a \"redirect\" pointing at the other. These redirects form a\nDAG: the roots of the DAG (nodes that are not redirected) are each\nassociated with a value of type `V` and a rank. The rank is used\nto keep the DAG relatively balanced, which helps keep the running\ntime of the algorithm under control. For more information, see\n<http://en.wikipedia.org/wiki/Disjoint-set_data_structure>."],[13,"Redirect","","",116],[13,"Root","","",116],[3,"UnificationTable","","Table of unification keys and their values."],[3,"Snapshot","","At any time, users may snapshot a unification table.  The changes\nmade during the snapshot may either be *committed* or *rolled back*."],[3,"Node","","Internal type used to represent the result of a `get()` operation.\nConveys the current root and value of the key."],[12,"key","","",395],[12,"value","","",395],[12,"rank","","",395],[3,"Delegate","",""],[8,"SimplyUnifiable","","Indicates a type that does not have any kind of subtyping\nrelationship."],[10,"to_type","","",396],[10,"to_type_err","","",396],[5,"err","",""],[8,"InferCtxtMethodsForSimplyUnifiableTypes","",""],[10,"simple_vars","","",397],[10,"simple_var_t","","",397],[10,"probe_var","","",397],[6,"Bound","rustc_lint::middle::infer",""],[6,"cres","",""],[6,"ures","",""],[6,"fres","",""],[3,"InferCtxt","",""],[12,"tcx","","",89],[6,"SkolemizationMap","",""],[4,"TypeOrigin","","Why did we require that the two types be related?"],[13,"Misc","","",123],[13,"MethodCompatCheck","","",123],[13,"ExprAssignable","","",123],[13,"RelateTraitRefs","","",123],[13,"RelateSelfType","","",123],[13,"RelateOutputImplTypes","","",123],[13,"MatchExpressionArm","","",123],[13,"IfExpression","","",123],[13,"IfExpressionWithNoElse","","",123],[13,"RangeExpression","","",123],[13,"EquatePredicate","","",123],[4,"ValuePairs","","See `error_reporting.rs` for more details"],[13,"Types","","",124],[13,"TraitRefs","","",124],[13,"PolyTraitRefs","","",124],[3,"TypeTrace","","The trace designates the path through inference that we took to\nencounter an error or subtyping constraint."],[4,"SubregionOrigin","","The origin of a `r1 <= r2` constraint."],[13,"Subtype","","",126],[13,"InfStackClosure","","",126],[13,"InvokeClosure","","",126],[13,"DerefPointer","","",126],[13,"FreeVariable","","",126],[13,"IndexSlice","","",126],[13,"RelateObjectBound","","",126],[13,"RelateParamBound","","",126],[13,"RelateRegionParamBound","","",126],[13,"RelateDefaultParamBound","","",126],[13,"Reborrow","","",126],[13,"ReborrowUpvar","","",126],[13,"ReferenceOutlivesReferent","","",126],[13,"ExprTypeIsNotInScope","","",126],[13,"BindingTypeIsNotValidAtDecl","","",126],[13,"CallRcvr","","",126],[13,"CallArg","","",126],[13,"CallReturn","","",126],[13,"Operand","","",126],[13,"AddrOf","","",126],[13,"AutoBorrow","","",126],[13,"SafeDestructor","","",126],[4,"LateBoundRegionConversionTime","","Times when we replace late-bound regions with variables:"],[13,"FnCall","","when a fn is called",127],[13,"HigherRankedType","","when two higher-ranked types are compared",127],[13,"AssocTypeProjection","","when projecting an associated type",127],[4,"RegionVariableOrigin","","Reasons to create a region inference variable"],[13,"MiscVariable","","",128],[13,"PatternRegion","","",128],[13,"AddrOfRegion","","",128],[13,"Autoref","","",128],[13,"Coercion","","",128],[13,"EarlyBoundRegion","","",128],[13,"LateBoundRegion","","",128],[13,"UpvarRegion","","",128],[13,"BoundRegionInCoherence","","",128],[4,"fixup_err","",""],[13,"unresolved_int_ty","","",129],[13,"unresolved_float_ty","","",129],[13,"unresolved_ty","","",129],[5,"fixup_err_to_string","",""],[5,"new_infer_ctxt","",""],[5,"common_supertype","","Computes the least upper-bound of `a` and `b`. If this is not possible, reports an error and\nreturns ty::err."],[5,"mk_subty","",""],[5,"can_mk_subty","",""],[5,"can_mk_eqty","",""],[5,"mk_subr","",""],[5,"mk_eqty","",""],[5,"mk_sub_poly_trait_refs","",""],[5,"uok","",""],[3,"CombinedSnapshot","",""],[4,"IntVarValue","",""],[13,"IntType","","",120],[13,"UintType","","",120],[4,"GenericKind","",""],[13,"Param","","",97],[13,"Projection","","",97],[3,"TypeFreshener","",""],[0,"lang_items","rustc_lint::middle",""],[4,"LangItem","rustc_lint::middle::lang_items",""],[13,"SendTraitLangItem","","",131],[13,"SizedTraitLangItem","","",131],[13,"CopyTraitLangItem","","",131],[13,"SyncTraitLangItem","","",131],[13,"DropTraitLangItem","","",131],[13,"AddTraitLangItem","","",131],[13,"SubTraitLangItem","","",131],[13,"MulTraitLangItem","","",131],[13,"DivTraitLangItem","","",131],[13,"RemTraitLangItem","","",131],[13,"NegTraitLangItem","","",131],[13,"NotTraitLangItem","","",131],[13,"BitXorTraitLangItem","","",131],[13,"BitAndTraitLangItem","","",131],[13,"BitOrTraitLangItem","","",131],[13,"ShlTraitLangItem","","",131],[13,"ShrTraitLangItem","","",131],[13,"IndexTraitLangItem","","",131],[13,"IndexMutTraitLangItem","","",131],[13,"RangeStructLangItem","","",131],[13,"RangeFromStructLangItem","","",131],[13,"RangeToStructLangItem","","",131],[13,"RangeFullStructLangItem","","",131],[13,"UnsafeCellTypeLangItem","","",131],[13,"DerefTraitLangItem","","",131],[13,"DerefMutTraitLangItem","","",131],[13,"FnTraitLangItem","","",131],[13,"FnMutTraitLangItem","","",131],[13,"FnOnceTraitLangItem","","",131],[13,"EqTraitLangItem","","",131],[13,"OrdTraitLangItem","","",131],[13,"StrEqFnLangItem","","",131],[13,"PanicFnLangItem","","",131],[13,"PanicBoundsCheckFnLangItem","","",131],[13,"PanicFmtLangItem","","",131],[13,"ExchangeMallocFnLangItem","","",131],[13,"ExchangeFreeFnLangItem","","",131],[13,"StrDupUniqFnLangItem","","",131],[13,"StartFnLangItem","","",131],[13,"TyDescStructLangItem","","",131],[13,"OpaqueStructLangItem","","",131],[13,"EhPersonalityLangItem","","",131],[13,"ExchangeHeapLangItem","","",131],[13,"OwnedBoxLangItem","","",131],[13,"PhantomFnItem","","",131],[13,"PhantomDataItem","","",131],[13,"CovariantTypeItem","","",131],[13,"ContravariantTypeItem","","",131],[13,"InvariantTypeItem","","",131],[13,"CovariantLifetimeItem","","",131],[13,"ContravariantLifetimeItem","","",131],[13,"InvariantLifetimeItem","","",131],[13,"NoCopyItem","","",131],[13,"ManagedItem","","",131],[13,"NonZeroItem","","",131],[13,"StackExhaustedLangItem","","",131],[13,"DebugTraitLangItem","","",131],[3,"LanguageItems","",""],[12,"items","","",132],[12,"missing","","",132],[5,"extract","",""],[5,"collect_language_items","",""],[0,"liveness","rustc_lint::middle","A classic liveness analysis based on dataflow over the AST.  Computes,\nfor each local variable in a function, whether that variable is live\nat a given point.  Program execution points are identified by their\nid."],[5,"check_crate","rustc_lint::middle::liveness",""],[0,"mem_categorization","rustc_lint::middle","# Categorization"],[4,"categorization","rustc_lint::middle::mem_categorization",""],[13,"cat_rvalue","","",142],[13,"cat_static_item","","",142],[13,"cat_upvar","","",142],[13,"cat_local","","",142],[13,"cat_deref","","",142],[13,"cat_interior","","",142],[13,"cat_downcast","","",142],[3,"Upvar","",""],[12,"id","","",143],[12,"kind","","",143],[4,"PointerKind","",""],[13,"Unique","","`Box<T>`",144],[13,"BorrowedPtr","","`&T`",144],[13,"UnsafePtr","","`*T`",144],[13,"Implicit","","Implicit deref of the `&T` that results from an overloaded index `[]`.",144],[4,"InteriorKind","",""],[13,"InteriorField","","",145],[13,"InteriorElement","","",145],[4,"FieldName","",""],[13,"NamedField","","",146],[13,"PositionalField","","",146],[4,"InteriorOffsetKind","",""],[13,"Index","","",147],[13,"Pattern","","",147],[4,"ElementKind","",""],[13,"VecElement","","",148],[13,"OtherElement","","",148],[4,"MutabilityCategory","",""],[13,"McImmutable","","",149],[13,"McDeclared","","",149],[13,"McInherited","","",149],[4,"Note","",""],[13,"NoteClosureEnv","","",150],[13,"NoteUpvarRef","","",150],[13,"NoteNone","","",150],[3,"cmt_","",""],[12,"id","","",151],[12,"span","","",151],[12,"cat","","",151],[12,"mutbl","","",151],[12,"ty","","",151],[12,"note","","",151],[6,"cmt","",""],[4,"deref_kind","",""],[13,"deref_ptr","","",398],[13,"deref_interior","","",398],[8,"ast_node","",""],[10,"id","","",399],[10,"span","","",399],[3,"MemCategorizationContext","",""],[6,"McResult","",""],[8,"Typer","","The `Typer` trait provides the interface for the mem-categorization\nmodule to the results of the type check. It can be used to query\nthe type assigned to an expression node, to inquire after adjustments,\nand so on."],[10,"node_ty","","",400],[10,"expr_ty_adjusted","","",400],[10,"type_moves_by_default","","",400],[10,"node_method_ty","","",400],[10,"node_method_origin","","",400],[10,"adjustments","","",400],[10,"is_method_call","","",400],[10,"temporary_scope","","",400],[10,"upvar_capture","","",400],[4,"InteriorSafety","",""],[13,"InteriorUnsafe","","",401],[13,"InteriorSafe","","",401],[4,"AliasableReason","",""],[13,"AliasableBorrowed","","",402],[13,"AliasableClosure","","",402],[13,"AliasableOther","","",402],[13,"AliasableStatic","","",402],[13,"AliasableStaticMut","","",402],[5,"ptr_sigil","",""],[0,"pat_util","rustc_lint::middle",""],[6,"PatIdMap","rustc_lint::middle::pat_util",""],[5,"pat_id_map","",""],[5,"pat_is_refutable","",""],[5,"pat_is_variant_or_struct","",""],[5,"pat_is_const","",""],[5,"pat_is_binding","",""],[5,"pat_is_binding_or_wild","",""],[5,"pat_bindings","","Call `it` on every \"binding\" in a pattern, e.g., on `a` in\n`match foo() { Some(a) => (), None => () }`"],[5,"pat_contains_bindings","","Checks if the pattern contains any patterns that bind something to\nan ident, e.g. `foo`, or `Foo(foo)` or `foo @ Bar(..)`."],[5,"pat_contains_bindings_or_wild","","Checks if the pattern contains any patterns that bind something to\nan ident or wildcard, e.g. `foo`, or `Foo(_)`, `foo @ Bar(..)`,"],[5,"simple_identifier","",""],[5,"def_to_path","",""],[0,"privacy","rustc_lint::middle","A pass that checks to make sure private fields and methods aren't used\noutside their scopes. This pass will also generate a set of exported items\nwhich are available for use externally when compiled as a library."],[6,"ExportedItems","rustc_lint::middle::privacy",""],[6,"ExternalExports","",""],[6,"PublicItems","",""],[4,"LastPrivate","",""],[13,"LastMod","","",156],[13,"LastImport","","",156],[12,"value_priv","rustc_lint::middle::privacy::LastPrivate","",156],[12,"value_used","","",156],[12,"type_priv","","",156],[12,"type_used","","",156],[4,"PrivateDep","rustc_lint::middle::privacy",""],[13,"AllPublic","","",157],[13,"DependsOn","","",157],[4,"ImportUse","",""],[13,"Unused","","",158],[13,"Used","","",158],[0,"reachable","rustc_lint::middle",""],[5,"find_reachable","rustc_lint::middle::reachable",""],[0,"region","rustc_lint::middle","This file actually contains two passes related to regions.  The first\npass builds up the `scope_map`, which describes the parent links in\nthe region hierarchy.  The second pass infers which types must be\nregion parameterized."],[4,"CodeExtent","rustc_lint::middle::region","CodeExtent represents a statically-describable extent that can be\nused to bound the lifetime/region for values."],[13,"Misc","","",18],[13,"DestructionScope","","",18],[13,"Remainder","","",18],[3,"DestructionScopeData","","extent of destructors for temporaries of node-id"],[12,"node_id","","",19],[3,"BlockRemainder","","Represents a subscope of `block` for a binding that is introduced\nby `block.stmts[first_statement_index]`. Such subscopes represent\na suffix of the block. Note that each subscope does not include\nthe initializer expression, if any, for the statement indexed by\n`first_statement_index`."],[12,"block","","",160],[12,"first_statement_index","","",160],[3,"RegionMaps","","The region maps encode information about region relationships."],[3,"Context","",""],[5,"resolve_crate","",""],[5,"resolve_inlined_item","",""],[0,"recursion_limit","rustc_lint::middle",""],[5,"update_recursion_limit","rustc_lint::middle::recursion_limit",""],[0,"resolve_lifetime","rustc_lint::middle","Name resolution for lifetimes."],[4,"DefRegion","rustc_lint::middle::resolve_lifetime",""],[13,"DefStaticRegion","","",167],[13,"DefEarlyBoundRegion","","",167],[13,"DefLateBoundRegion","","",167],[13,"DefFreeRegion","","",167],[6,"NamedRegionMap","",""],[5,"krate","",""],[5,"early_bound_lifetimes","",""],[0,"stability","rustc_lint::middle","A pass that annotates every item and method with its stability level,\npropagating default levels lexically from parent to children ast nodes."],[3,"Index","rustc_lint::middle::stability","A stability index, giving the stability level for items and methods."],[5,"check_unstable_api_usage","","Cross-references the feature names of unstable APIs with enabled\nfeatures and possibly prints errors. Returns a list of all\nfeatures used."],[5,"check_item","","Helper for discovering nodes to check for stability"],[5,"check_expr","","Helper for discovering nodes to check for stability"],[5,"check_path","",""],[5,"check_pat","",""],[5,"lookup","","Lookup the stability for a node, loading external crate\nmetadata as necessary."],[5,"check_unused_or_stable_features","","Given the list of enabled features that were not language features (i.e. that\nwere expected to be library features), and the list of features used from\nlibraries, identify activated features that don't exist and error about them."],[0,"subst","rustc_lint::middle",""],[3,"Substs","rustc_lint::middle::subst","A substitution mapping type/region parameters to new values. We\nidentify each in-scope parameter by an *index* and a *parameter\nspace* (which indices where the parameter is defined; see\n`ParamSpace`)."],[12,"types","","",173],[12,"regions","","",173],[4,"RegionSubsts","","Represents the values to use when substituting lifetime parameters.\nIf the value is `ErasedRegions`, then this subst is occurring during\ntrans, and all region parameters will be replaced with `ty::ReStatic`."],[13,"ErasedRegions","","",174],[13,"NonerasedRegions","","",174],[4,"ParamSpace","",""],[13,"TypeSpace","","",175],[13,"SelfSpace","","",175],[13,"FnSpace","","",175],[3,"VecPerParamSpace","","Vector of things sorted by param space. Used to keep\nthe set of things declared on the type, self, or method\ndistinct."],[3,"SeparateVecsPerParamSpace","","The `split` function converts one `VecPerParamSpace` into this\n`SeparateVecsPerParamSpace` structure."],[12,"types","","",403],[12,"selfs","","",403],[12,"fns","","",403],[3,"EnumeratedItems","",""],[8,"Subst","",""],[10,"subst","","",404],[10,"subst_spanned","","",404],[0,"traits","rustc_lint::middle","Trait Resolution. See the Book for more."],[3,"Obligation","rustc_lint::middle::traits","An `Obligation` represents some trait reference (e.g. `int:Eq`) for\nwhich the vtable must be found.  The process of finding a vtable is\ncalled \"resolving\" the `Obligation`. This process consists of\neither identifying an `impl` (e.g., `impl Eq for int`) that\nprovides the required vtable, or else finding a bound that is in\nscope. The eventual result is usually a `Selection` (defined below)."],[12,"cause","","",199],[12,"recursion_depth","","",199],[12,"predicate","","",199],[6,"PredicateObligation","",""],[6,"TraitObligation","",""],[3,"ObligationCause","","Why did we incur this obligation? Used for error reporting."],[12,"span","","",206],[12,"body_id","","",206],[12,"code","","",206],[4,"ObligationCauseCode","",""],[13,"MiscObligation","","Not well classified or should be obvious from span.",207],[13,"ItemObligation","","In an impl of trait X for type Y, type Y must\nalso implement all supertraits of X.",207],[13,"ObjectCastObligation","","Obligation incurred due to an object cast.",207],[13,"AssignmentLhsSized","","Various cases where expressions must be sized/copy/etc:",207],[13,"StructInitializerSized","","",207],[13,"VariableType","","",207],[13,"ReturnType","","",207],[13,"RepeatVec","","",207],[13,"ClosureCapture","","",207],[13,"FieldSized","","",207],[13,"ObjectSized","","",207],[13,"SharedStatic","","",207],[13,"BuiltinDerivedObligation","","",207],[13,"ImplDerivedObligation","","",207],[13,"CompareImplMethodObligation","","",207],[3,"DerivedObligationCause","",""],[6,"Obligations","",""],[6,"PredicateObligations","",""],[6,"TraitObligations","",""],[6,"Selection","",""],[4,"SelectionError","",""],[13,"Unimplemented","","",203],[13,"Overflow","","",203],[13,"OutputTypeParameterMismatch","","",203],[3,"FulfillmentError","",""],[12,"obligation","","",204],[12,"code","","",204],[4,"FulfillmentErrorCode","",""],[13,"CodeSelectionError","","",205],[13,"CodeProjectionError","","",205],[13,"CodeAmbiguity","","",205],[6,"SelectionResult","",""],[4,"Vtable","","Given the successful resolution of an obligation, the `Vtable`\nindicates where the vtable comes from. Note that while we call this\na \"vtable\", it does not necessarily indicate dynamic dispatch at\nruntime. `Vtable` instances just tell the compiler where to find\nmethods, but in generic code those methods are typically statically\ndispatched -- only when an object is constructed is a `Vtable`\ninstance reified into an actual vtable."],[13,"VtableImpl","","Vtable identifying a particular impl.",200],[13,"VtableDefaultImpl","","Vtable for default trait implementations\nThis carries the information and nested obligations with regards\nto a default implementation for a trait `Trait`. The nested obligations\nensure the trait implementation holds for all the constituent types.",200],[13,"VtableParam","","Successful resolution to an obligation provided by the caller\nfor some type parameter. The `Vec<N>` represents the\nobligations incurred from normalizing the where-clause (if\nany).",200],[13,"VtableObject","","Virtual calls through an object",200],[13,"VtableBuiltin","","Successful resolution for a builtin trait.",200],[13,"VtableClosure","","Vtable automatically generated for a closure. The def ID is the ID\nof the closure expression. This is a `VtableImpl` in spirit, but the\nimpl is generated by the compiler and does not appear in the source.",200],[13,"VtableFnPointer","","Same as above, but for a fn pointer type with the given signature.",200],[3,"VtableImplData","","Identifies a particular impl in the source, along with a set of\nsubstitutions from the impl's type/lifetime parameters. The\n`nested` vector corresponds to the nested obligations attached to\nthe impl's type parameters."],[12,"impl_def_id","","",197],[12,"substs","","",197],[12,"nested","","",197],[3,"VtableDefaultImplData","",""],[12,"trait_def_id","","",202],[12,"nested","","",202],[3,"VtableBuiltinData","",""],[12,"nested","","",201],[3,"VtableObjectData","","A vtable for some object-safe trait `Foo` automatically derived\nfor the object type `Foo`."],[12,"object_ty","","the object type `Foo`.",198],[12,"upcast_trait_ref","","`Foo` upcast to the obligation trait. This will be some supertrait of `Foo`.",198],[5,"predicates_for_generics","","Creates predicate obligations from the generic bounds."],[5,"evaluate_builtin_bound","","Determines whether the type `ty` is known to meet `bound` and\nreturns true if so. Returns false if `ty` either does not meet\n`bound` or is not known to meet bound (note that this is\nconservative towards *no impl*, which is the opposite of the\n`evaluate` methods)."],[5,"type_known_to_meet_builtin_bound","",""],[5,"normalize_param_env_or_error","","Normalizes the parameter environment, reporting errors if they occur."],[5,"fully_normalize","",""],[5,"orphan_check","","Checks the coherence orphan rules. `impl_def_id` should be the\ndef-id of a trait impl. To pass, either the trait must be local, or else\ntwo conditions must be satisfied:"],[5,"is_object_safe","",""],[5,"report_fulfillment_errors","",""],[5,"object_safety_violations","",""],[4,"MethodViolationCode","","Reasons a method might not be object-safe."],[13,"StaticMethod","","e.g., `fn foo()`",186],[13,"ReferencesSelf","","e.g., `fn foo(&self, x: Self)` or `fn foo(&self) -> Self`",186],[13,"Generic","","e.g., `fn foo<A>()`",186],[5,"normalize","","Normalizes any associated type projections in `value`, replacing\nthem with a fully resolved type where possible. The return value\ncombines the normalized result and any additional obligations that\nwere incurred as result."],[3,"SelectionCache","",""],[3,"Normalized","",""],[12,"value","","",184],[12,"obligations","","",184],[3,"MismatchedProjectionTypes","",""],[12,"err","","",181],[5,"get_vtable_index_of_object_method","","Given an object of type `object_trait_ref`, returns the index of\nthe method `n_method` found in the trait `trait_def_id` (which\nshould be a supertrait of `object_trait_ref`) within the vtable\nfor `object_trait_ref`."],[4,"OrphanCheckErr","",""],[13,"NoLocalInputType","","",405],[13,"UncoveredTy","","",405],[4,"ObjectSafetyViolation","",""],[13,"SizedSelf","","Self : Sized declared on the trait",187],[13,"SupertraitSelf","","Supertrait reference references `Self` an in illegal location\n(e.g. `trait Foo : Bar<Self>`)",187],[13,"Method","","Method has something illegal",187],[3,"RegionObligation","",""],[12,"sub_region","","",179],[12,"sup_type","","",179],[12,"cause","","",179],[3,"SelectionContext","",""],[5,"transitive_bounds","",""],[5,"upcast","","Cast a trait reference into a reference to one of its super\ntraits; returns `None` if `target_trait_def_id` is not a\nsupertrait."],[5,"overlapping_impls","","True if there exist types that satisfy both of the two given impls."],[5,"trait_ref_for_builtin_bound","",""],[5,"suggest_new_overflow_limit","",""],[5,"elaborate_predicates","",""],[3,"FulfillmentContext","","The fulfillment context is used to drive trait resolution.  It\nconsists of a list of obligations that must be (eventually)\nsatisfied. The job is to track which are satisfied, which yielded\nerrors, and which are still pending. At any point, users can call\n`select_where_possible`, and the fulfilment context will try to do\nselection, retaining only those obligations that remain\nambiguous. This may be helpful in pushing type inference\nalong. Once all type inference constraints have been generated, the\nmethod `select_all_or_error` can be used to report any remaining\nambiguous cases as errors."],[5,"supertraits","",""],[6,"Supertraits","",""],[4,"MethodMatchResult","",""],[13,"MethodMatched","","",194],[13,"MethodAmbiguous","","",194],[13,"MethodDidNotMatch","","",194],[4,"MethodMatchedData","",""],[13,"PreciseMethodMatch","","",189],[13,"CoerciveMethodMatch","","",189],[0,"ty","rustc_lint::middle",""],[6,"Disr","rustc_lint::middle::ty",""],[17,"INITIAL_DISCRIMINANT_VALUE","",""],[3,"CrateAnalysis","","The complete set of all analyses described in this module. This is\nproduced by the driver and fed to trans and later passes."],[12,"export_map","","",406],[12,"exported_items","","",406],[12,"public_items","","",406],[12,"ty_cx","","",406],[12,"reachable","","",406],[12,"name","","",406],[12,"glob_map","","",406],[3,"field","",""],[12,"name","","",209],[12,"mt","","",209],[4,"ImplOrTraitItemContainer","",""],[13,"TraitContainer","","",210],[13,"ImplContainer","","",210],[4,"ImplOrTraitItem","",""],[13,"MethodTraitItem","","",211],[13,"TypeTraitItem","","",211],[4,"ImplOrTraitItemId","",""],[13,"MethodTraitItemId","","",212],[13,"TypeTraitItemId","","",212],[3,"Method","",""],[12,"name","","",213],[12,"generics","","",213],[12,"predicates","","",213],[12,"fty","","",213],[12,"explicit_self","","",213],[12,"vis","","",213],[12,"def_id","","",213],[12,"container","","",213],[12,"provided_source","","",213],[3,"AssociatedType","",""],[12,"name","","",214],[12,"vis","","",214],[12,"def_id","","",214],[12,"container","","",214],[3,"mt","",""],[12,"ty","","",215],[12,"mutbl","","",215],[3,"field_ty","",""],[12,"name","","",216],[12,"id","","",216],[12,"vis","","",216],[12,"origin","","",216],[3,"creader_cache_key","",""],[12,"cnum","","",217],[12,"pos","","",217],[12,"len","","",217],[3,"ItemVariances","",""],[12,"types","","",218],[12,"regions","","",218],[4,"Variance","",""],[13,"Covariant","","",219],[13,"Invariant","","",219],[13,"Contravariant","","",219],[13,"Bivariant","","",219],[4,"AutoAdjustment","",""],[13,"AdjustReifyFnPointer","","",220],[13,"AdjustDerefRef","","",220],[4,"UnsizeKind","",""],[13,"UnsizeLength","","",221],[13,"UnsizeStruct","","",221],[13,"UnsizeVtable","","",221],[3,"AutoDerefRef","",""],[12,"autoderefs","","",222],[12,"autoref","","",222],[4,"AutoRef","",""],[13,"AutoPtr","","Convert from T to &T\nThe third field allows us to wrap other AutoRef adjustments.",223],[13,"AutoUnsize","","Convert [T, ..n] to [T] (or similar, depending on the kind)",223],[13,"AutoUnsizeUniq","","Convert Box<[T, ..n]> to Box<[T]> or something similar in a Box.\nWith DST and Box a library type, this should be replaced by UnsizeStruct.",223],[13,"AutoUnsafe","","Convert from T to *T\nValue to thin pointer\nThe second field allows us to wrap other AutoRef adjustments.",223],[5,"adjusted_object_region","",""],[5,"adjust_is_object","",""],[5,"type_of_adjust","",""],[3,"param_index","",""],[12,"space","","",224],[12,"index","","",224],[4,"MethodOrigin","",""],[13,"MethodStatic","","",25],[13,"MethodStaticClosure","","",25],[13,"MethodTypeParam","","",25],[13,"MethodTraitObject","","",25],[3,"MethodParam","",""],[12,"trait_ref","","",225],[12,"method_num","","",225],[12,"impl_def_id","","The impl for the trait from which the method comes. This\nshould only be used for certain linting/heuristic purposes\nsince there is no guarantee that this is Some in every\nsituation that it could/should be.",225],[3,"MethodObject","",""],[12,"trait_ref","","",226],[12,"object_trait_id","","",226],[12,"method_num","","",226],[12,"vtable_index","","",226],[3,"MethodCallee","",""],[12,"origin","","",227],[12,"ty","","",227],[12,"substs","","",227],[3,"MethodCall","","With method calls, we store some extra information in\nside tables (i.e method_map). We use\nMethodCall as a key to index into these tables instead of\njust directly using the expression's NodeId. The reason\nfor this being that we may apply adjustments (coercions)\nwith the resulting expression also needing to use the\nside tables. The problem with this is that we don't\nassign a separate NodeId to this new expression\nand so it would clash with the base expression if both\nneeded to add to the side tables. Thus to disambiguate\nwe also keep track of whether there's an adjustment in\nour key."],[12,"expr_id","","",228],[12,"adjustment","","",228],[4,"ExprAdjustment","",""],[13,"NoAdjustment","","",229],[13,"AutoDeref","","",229],[13,"AutoObject","","",229],[6,"MethodMap","",""],[6,"vtable_param_res","",""],[6,"vtable_res","",""],[4,"vtable_origin","",""],[13,"vtable_static","","",230],[13,"vtable_param","","",230],[13,"vtable_closure","","",230],[13,"vtable_error","","",230],[6,"ObjectCastMap","",""],[3,"TransmuteRestriction","","A restriction that certain types must be the same size. The use of\n`transmute` gives rise to these restrictions. These generally\ncannot be checked until trans; therefore, each call to `transmute`\nwill push one or more such restriction into the\n`transmute_restrictions` vector during `intrinsicck`. They are\nthen checked during `trans` by the fn `check_intrinsics`."],[12,"span","","The span whence the restriction comes.",80],[12,"original_from","","The type being transmuted from.",80],[12,"original_to","","The type being transmuted to.",80],[12,"substituted_from","","The type being transmuted from, with all type parameters\nsubstituted for an arbitrary representative. Not to be shown\nto the end user.",80],[12,"substituted_to","","The type being transmuted to, with all type parameters\nsubstituted for an arbitrary representative. Not to be shown\nto the end user.",80],[12,"id","","NodeId of the transmute intrinsic.",80],[3,"CtxtArenas","","Internal storage"],[3,"CommonTypes","",""],[12,"bool","","",407],[12,"char","","",407],[12,"int","","",407],[12,"i8","","",407],[12,"i16","","",407],[12,"i32","","",407],[12,"i64","","",407],[12,"uint","","",407],[12,"u8","","",407],[12,"u16","","",407],[12,"u32","","",407],[12,"u64","","",407],[12,"f32","","",407],[12,"f64","","",407],[12,"err","","",407],[3,"ctxt","","The data structure to keep track of all the information that typechecker\ngenerates so that so that it can be reused and doesn't have to be redone\nlater on."],[12,"types","","Common types, pre-interned for your convenience.",233],[12,"sess","","",233],[12,"def_map","","",233],[12,"named_region_map","","",233],[12,"region_maps","","",233],[12,"node_types","","Stores the types for various nodes in the AST.  Note that this table\nis not guaranteed to be populated until after typeck.  See\ntypeck::check::fn_ctxt for details.",233],[12,"item_substs","","Stores the type parameters which were substituted to obtain the type\nof this node.  This only applies to nodes that refer to entities\nparameterized by type parameters, such as generic fns, types, or\nother items.",233],[12,"impl_or_trait_items","","Maps from a trait item to the trait item \"descriptor\"",233],[12,"trait_item_def_ids","","Maps from a trait def-id to a list of the def-ids of its trait items",233],[12,"trait_items_cache","","A cache for the trait_items() routine",233],[12,"impl_trait_cache","","",233],[12,"impl_trait_refs","","",233],[12,"trait_defs","","",233],[12,"predicates","","Maps from the def-id of an item (trait/struct/enum/fn) to its\nassociated predicates.",233],[12,"super_predicates","","Maps from the def-id of a trait to the list of\nsuper-predicates. This is a subset of the full list of\npredicates. We store these in a separate map because we must\nevaluate them even during type conversion, often before the\nfull predicates are available (note that supertraits have\nadditional acyclicity requirements).",233],[12,"object_cast_map","","Maps from node-id of a trait object cast (like `foo as\nBox<Trait>`) to the trait reference.",233],[12,"map","","",233],[12,"intrinsic_defs","","",233],[12,"freevars","","",233],[12,"tcache","","",233],[12,"rcache","","",233],[12,"short_names_cache","","",233],[12,"tc_cache","","",233],[12,"ast_ty_to_ty_cache","","",233],[12,"enum_var_cache","","",233],[12,"ty_param_defs","","",233],[12,"adjustments","","",233],[12,"normalized_cache","","",233],[12,"lang_items","","",233],[12,"provided_method_sources","","A mapping of fake provided method def_ids to the default implementation",233],[12,"struct_fields","","",233],[12,"item_variance_map","","Maps from def-id of a type or region parameter to its\n(inferred) variance.",233],[12,"variance_computed","","True if the variance has been computed yet; false otherwise.",233],[12,"destructor_for_type","","A mapping from the def ID of an enum or struct type to the def ID\nof the method that implements its destructor. If the type is not\npresent in this map, it does not have a destructor. This map is\npopulated during the coherence phase of typechecking.",233],[12,"destructors","","A method will be in this list if and only if it is a destructor.",233],[12,"trait_impls","","Maps a trait onto a list of impls of that trait.",233],[12,"inherent_impls","","Maps a DefId of a type to a list of its inherent impls.\nContains implementations of methods that are inherent to a type.\nMethods in these implementations don't need to be exported.",233],[12,"impl_items","","Maps a DefId of an impl to a list of its items.\nNote that this contains all of the impls that we know about,\nincluding ones in other crates. It's not clear that this is the best\nway to do it.",233],[12,"used_unsafe","","Set of used unsafe nodes (functions or blocks). Unsafe nodes not\npresent in this set can be warned about.",233],[12,"used_mut_nodes","","Set of nodes which mark locals as mutable which end up getting used at\nsome point. Local variable definitions not in this set can be warned\nabout.",233],[12,"populated_external_types","","The set of external nominal types whose implementations have been read.\nThis is used for lazy resolution of methods.",233],[12,"populated_external_traits","","The set of external traits whose implementations have been read. This\nis used for lazy resolution of traits.",233],[12,"upvar_capture_map","","Borrows",233],[12,"extern_const_statics","","These two caches are used by const_eval when decoding external statics\nand variants that are found.",233],[12,"extern_const_variants","","",233],[12,"method_map","","",233],[12,"dependency_formats","","",233],[12,"closure_kinds","","Records the type of each closure. The def ID is the ID of the\nexpression defining the closure.",233],[12,"closure_tys","","Records the type of each closure. The def ID is the ID of the\nexpression defining the closure.",233],[12,"node_lint_levels","","",233],[12,"transmute_restrictions","","The types that must be asserted to be the same size for `transmute`\nto be valid. We gather up these restrictions in the intrinsicck pass\nand check them in trans.",233],[12,"stability","","Maps any item's def-id to its stability index.",233],[12,"associated_types","","Maps def IDs to true if and only if they're associated types.",233],[12,"selection_cache","","Caches the results of trait selection. This cache is used\nfor things that do not have to do with the parameters in scope.",233],[12,"repr_hint_cache","","Caches the representation hints for struct definitions.",233],[12,"type_impls_copy_cache","","Caches whether types are known to impl Copy. Note that type\nparameters are never placed into this cache, because their\nresults are dependent on the parameter environment.",233],[12,"type_impls_sized_cache","","Caches whether types are known to impl Sized. Note that type\nparameters are never placed into this cache, because their\nresults are dependent on the parameter environment.",233],[12,"object_safety_cache","","Caches whether traits are object safe",233],[12,"const_qualif_map","","Maps Expr NodeId's to their constant qualification.",233],[3,"TypeFlags","",""],[17,"NO_TYPE_FLAGS","",""],[17,"HAS_PARAMS","",""],[17,"HAS_SELF","",""],[17,"HAS_TY_INFER","",""],[17,"HAS_RE_INFER","",""],[17,"HAS_RE_LATE_BOUND","",""],[17,"HAS_REGIONS","",""],[17,"HAS_TY_ERR","",""],[17,"HAS_PROJECTION","",""],[17,"NEEDS_SUBST","",""],[3,"TyS","",""],[12,"sty","","",234],[12,"flags","","",234],[6,"Ty","",""],[3,"InternedTy","","An entry in the type interner."],[5,"type_has_params","",""],[5,"type_has_self","",""],[5,"type_has_ty_infer","",""],[5,"type_needs_infer","",""],[5,"type_has_projection","",""],[5,"type_has_late_bound_regions","",""],[5,"type_has_escaping_regions","","An \"escaping region\" is a bound region whose binder is not part of `t`."],[5,"type_escapes_depth","",""],[3,"BareFnTy","",""],[12,"unsafety","","",236],[12,"abi","","",236],[12,"sig","","",236],[3,"ClosureTy","",""],[12,"unsafety","","",237],[12,"abi","","",237],[12,"sig","","",237],[4,"FnOutput","",""],[13,"FnConverging","","",238],[13,"FnDiverging","","",238],[6,"PolyFnOutput","",""],[3,"FnSig","","Signature of a function type, which I have arbitrarily\ndecided to use to refer to the input/output types."],[12,"inputs","","",85],[12,"output","","",85],[12,"variadic","","",85],[6,"PolyFnSig","",""],[3,"ParamTy","",""],[12,"space","","",239],[12,"idx","","",239],[12,"name","","",239],[3,"DebruijnIndex","","A [De Bruijn index][dbi] is a standard means of representing\nregions (and perhaps later types) in a higher-ranked setting. In\nparticular, imagine a type like this:"],[12,"depth","","",240],[4,"Region","","Representation of regions:"],[13,"ReEarlyBound","","",16],[13,"ReLateBound","","",16],[13,"ReFree","","When checking a function body, the types of all arguments and so forth\nthat refer to bound region parameters are modified to refer to free\nregion parameters.",16],[13,"ReScope","","A concrete region naming some statically determined extent\n(e.g. an expression or sequence of statements) within the\ncurrent function.",16],[13,"ReStatic","","Static data that has an \"infinite\" lifetime. Top in the region lattice.",16],[13,"ReInfer","","A region variable.  Should not exist after typeck.",16],[13,"ReEmpty","","Empty lifetime is for data that is never accessed.\nBottom in the region lattice. We treat ReEmpty somewhat\nspecially; at least right now, we do not generate instances of\nit during the GLB computations, but rather\ngenerate an error instead. This is to improve error messages.\nThe only way to get an instance of ReEmpty is to have a region\nvariable with no constraints.",16],[3,"UpvarId","","Upvars do not get their own node-id. Instead, we use the pair of\nthe original var id (that is, the root variable that is referenced\nby the upvar) and the id of the closure expression."],[12,"var_id","","",241],[12,"closure_expr_id","","",241],[4,"BorrowKind","",""],[13,"ImmBorrow","","Data must be immutable and is aliasable.",242],[13,"UniqueImmBorrow","","Data must be immutable but not aliasable.  This kind of borrow\ncannot currently be expressed by the user and is used only in\nimplicit closure bindings. It is needed when you the closure\nis borrowing or mutating a mutable referent, e.g.:",242],[13,"MutBorrow","","Data is mutable and not aliasable.",242],[4,"UpvarCapture","","Information describing the capture of an upvar. This is computed\nduring `typeck`, specifically by `regionck`."],[13,"ByValue","","Upvar is captured by value. This is always true when the\nclosure is labeled `move`, but can also be true in other cases\ndepending on inference.",24],[13,"ByRef","","Upvar is captured by reference.",24],[3,"UpvarBorrow","",""],[12,"kind","","The kind of borrow: by-ref upvars have access to shared\nimmutable borrows, which are not part of the normal language\nsyntax.",23],[12,"region","","Region of the resulting reference.",23],[6,"UpvarCaptureMap","",""],[3,"FreeRegion","","A \"free\" region `fr` can be interpreted as \"some region\nat least as big as the scope `fr.scope`\"."],[12,"scope","","",17],[12,"bound_region","","",17],[4,"BoundRegion","",""],[13,"BrAnon","","An anonymous region parameter for a given fn (&T)",20],[13,"BrNamed","","Named region parameters for functions (a in &'a T)",20],[13,"BrFresh","","Fresh bound identifiers created during GLB computations.",20],[13,"BrEnv","","",20],[4,"sty","",""],[13,"ty_bool","","",243],[13,"ty_char","","",243],[13,"ty_int","","",243],[13,"ty_uint","","",243],[13,"ty_float","","",243],[13,"ty_enum","","Substs here, possibly against intuition, *may* contain `ty_param`s.\nThat is, even after substitution it is possible that there are type\nvariables. This happens when the `ty_enum` corresponds to an enum\ndefinition and not a concrete use of it. To get the correct `ty_enum`\nfrom the tcx, use the `NodeId` from the `ast::Ty` and look it up in\nthe `ast_ty_to_ty_cache`. This is probably true for `ty_struct` as\nwell.",243],[13,"ty_uniq","","",243],[13,"ty_str","","",243],[13,"ty_vec","","",243],[13,"ty_ptr","","",243],[13,"ty_rptr","","",243],[13,"ty_bare_fn","","",243],[13,"ty_trait","","",243],[13,"ty_struct","","",243],[13,"ty_closure","","",243],[13,"ty_tup","","",243],[13,"ty_projection","","",243],[13,"ty_param","","",243],[13,"ty_infer","","",243],[13,"ty_err","","",243],[3,"TyTrait","",""],[12,"principal","","",244],[12,"bounds","","",244],[3,"TraitRef","","A complete reference to a trait. These take numerous guises in syntax,\nbut perhaps the most recognizable form is in a where clause:"],[12,"def_id","","",83],[12,"substs","","",83],[6,"PolyTraitRef","",""],[3,"Binder","","Binder is a binder for higher-ranked lifetimes. It is part of the\ncompiler's representation for things like `for<'a> Fn(&'a int)`\n(which would be represented by the type `PolyTraitRef ==\nBinder<TraitRef>`). Note that when we skolemize, instantiate,\nerase, or otherwise \"discharge\" these bound regions, we change the\ntype from `Binder<T>` to just `T` (see\ne.g. `liberate_late_bound_regions`)."],[4,"IntVarValue","",""],[13,"IntType","","",120],[13,"UintType","","",120],[4,"terr_vstore_kind","",""],[13,"terr_vec","","",245],[13,"terr_str","","",245],[13,"terr_fn","","",245],[13,"terr_trait","","",245],[3,"expected_found","",""],[12,"expected","","",246],[12,"found","","",246],[4,"type_err","",""],[13,"terr_mismatch","","",247],[13,"terr_unsafety_mismatch","","",247],[13,"terr_abi_mismatch","","",247],[13,"terr_mutability","","",247],[13,"terr_box_mutability","","",247],[13,"terr_ptr_mutability","","",247],[13,"terr_ref_mutability","","",247],[13,"terr_vec_mutability","","",247],[13,"terr_tuple_size","","",247],[13,"terr_fixed_array_size","","",247],[13,"terr_ty_param_size","","",247],[13,"terr_arg_count","","",247],[13,"terr_regions_does_not_outlive","","",247],[13,"terr_regions_not_same","","",247],[13,"terr_regions_no_overlap","","",247],[13,"terr_regions_insufficiently_polymorphic","","",247],[13,"terr_regions_overly_polymorphic","","",247],[13,"terr_sorts","","",247],[13,"terr_integer_as_char","","",247],[13,"terr_int_mismatch","","",247],[13,"terr_float_mismatch","","",247],[13,"terr_traits","","",247],[13,"terr_builtin_bounds","","",247],[13,"terr_variadic_mismatch","","",247],[13,"terr_cyclic_ty","","",247],[13,"terr_convergence_mismatch","","",247],[13,"terr_projection_name_mismatched","","",247],[13,"terr_projection_bounds_length","","",247],[3,"ParamBounds","","Bounds suitable for a named type parameter like `A` in `fn foo<A>`\nas well as the existential type parameter in an object type."],[12,"region_bounds","","",248],[12,"builtin_bounds","","",248],[12,"trait_bounds","","",248],[12,"projection_bounds","","",248],[3,"ExistentialBounds","","Bounds suitable for an existentially quantified type parameter\nsuch as those that appear in object types or closure types. The\nmajor difference between this case and `ParamBounds` is that\ngeneral purpose trait bounds are omitted and there must be\n*exactly one* region."],[12,"region_bound","","",249],[12,"builtin_bounds","","",249],[12,"projection_bounds","","",249],[6,"BuiltinBounds","",""],[4,"BuiltinBound","",""],[13,"BoundSend","","",250],[13,"BoundSized","","",250],[13,"BoundCopy","","",250],[13,"BoundSync","","",250],[5,"empty_builtin_bounds","",""],[5,"all_builtin_bounds","",""],[5,"region_existential_bound","","An existential bound that does not implement any traits."],[3,"TyVid","",""],[12,"index","","",251],[3,"IntVid","",""],[12,"index","","",119],[3,"FloatVid","",""],[12,"index","","",121],[3,"RegionVid","",""],[12,"index","","",252],[4,"InferTy","",""],[13,"TyVar","","",253],[13,"IntVar","","",253],[13,"FloatVar","","",253],[13,"FreshTy","","A `FreshTy` is one that is generated as a replacement for an\nunbound type variable. This is convenient for caching etc. See\n`middle::infer::freshen` for more details.",253],[13,"FreshIntTy","","",253],[4,"UnconstrainedNumeric","",""],[13,"UnconstrainedFloat","","",254],[13,"UnconstrainedInt","","",254],[13,"Neither","","",254],[4,"InferRegion","",""],[13,"ReVar","","",255],[13,"ReSkolemized","","",255],[4,"ObjectLifetimeDefault","","Default region to use for the bound of objects that are\nsupplied as the value for this type parameter. This is derived\nfrom `T:'a` annotations appearing in the type definition.  If\nthis is `None`, then the default is inherited from the\nsurrounding context. See RFC #599 for details."],[13,"Ambiguous","","Require an explicit annotation. Occurs when multiple\n`T:'a` constraints are found.",256],[13,"Specific","","Use the given region as the default.",256],[3,"TypeParameterDef","",""],[12,"name","","",257],[12,"def_id","","",257],[12,"space","","",257],[12,"index","","",257],[12,"default","","",257],[12,"object_lifetime_default","","",257],[3,"RegionParameterDef","",""],[12,"name","","",258],[12,"def_id","","",258],[12,"space","","",258],[12,"index","","",258],[12,"bounds","","",258],[3,"Generics","","Information about the formal type/lifetime parameters associated\nwith an item or method. Analogous to ast::Generics."],[12,"types","","",259],[12,"regions","","",259],[3,"GenericPredicates","","Bounds on generics."],[12,"predicates","","",260],[4,"Predicate","",""],[13,"Trait","","Corresponds to `where Foo : Bar<A,B,C>`. `Foo` here would be\nthe `Self` type of the trait reference and `A`, `B`, and `C`\nwould be the parameters in the `TypeSpace`.",261],[13,"Equate","","where `T1 == T2`.",261],[13,"RegionOutlives","","where 'a : 'b",261],[13,"TypeOutlives","","where T : 'a",261],[13,"Projection","","where <T as TraitRef>::Name == X, approximately.\nSee `ProjectionPredicate` struct for details.",261],[3,"TraitPredicate","",""],[12,"trait_ref","","",262],[6,"PolyTraitPredicate","",""],[3,"EquatePredicate","",""],[6,"PolyEquatePredicate","",""],[3,"OutlivesPredicate","",""],[6,"PolyOutlivesPredicate","",""],[6,"PolyRegionOutlivesPredicate","",""],[6,"PolyTypeOutlivesPredicate","",""],[3,"ProjectionPredicate","","This kind of predicate has no *direct* correspondent in the\nsyntax, but it roughly corresponds to the syntactic forms:"],[12,"projection_ty","","",84],[12,"ty","","",84],[6,"PolyProjectionPredicate","",""],[3,"ProjectionTy","","Represents the projection of an associated type. In explicit UFCS\nform this would be written `<T as Trait<..>>::N`."],[12,"trait_ref","","The trait reference `T as Trait<..>`.",265],[12,"item_name","","The name `N` of the associated type.",265],[8,"ToPolyTraitRef","",""],[10,"to_poly_trait_ref","","",408],[8,"AsPredicate","",""],[10,"as_predicate","","",409],[3,"InstantiatedPredicates","","Represents the bounds declared on a particular set of type\nparameters.  Should eventually be generalized into a flag list of\nwhere clauses.  You can obtain a `InstantiatedPredicates` list from a\n`GenericPredicates` by using the `instantiate` method. Note that this method\nreflects an important semantic invariant of `InstantiatedPredicates`: while\nthe `GenericPredicates` are expressed in terms of the bound type\nparameters of the impl/trait/whatever, an `InstantiatedPredicates` instance\nrepresented a set of bounds for some particular instantiation,\nmeaning that the generic parameters have been substituted with\ntheir values."],[12,"predicates","","",266],[3,"ParameterEnvironment","","When type checking, we use the `ParameterEnvironment` to track\ndetails about the type/lifetime parameters that are in scope.\nIt primarily stores the bounds information."],[12,"tcx","","",267],[12,"free_substs","","See `construct_free_substs` for details.",267],[12,"implicit_region_bound","","Each type parameter has an implicit region bound that\nindicates it must outlive at least the function body (the user\nmay specify stronger requirements). This field indicates the\nregion of the callee.",267],[12,"caller_bounds","","Obligations that the caller must satisfy. This is basically\nthe set of bounds on the in-scope type parameters, translated\ninto Obligations.",267],[12,"selection_cache","","Caches the results of trait selection. This cache is used\nfor things that have to do with the parameters in scope.",267],[3,"TypeScheme","","A \"type scheme\", in ML terminology, is a type combined with some\nset of generic types that the type is, well, generic over. In Rust\nterms, it is the \"type\" of a fn item or struct -- this type will\ninclude various generic parameters that must be substituted when\nthe item/struct is referenced. That is called converting the type\nscheme to a monotype."],[12,"generics","","",268],[12,"ty","","",268],[3,"TraitDef","","As `TypeScheme` but for a trait ref."],[12,"unsafety","","",339],[12,"paren_sugar","","If `true`, then this trait had the `#[rustc_paren_sugar]`\nattribute, indicating that it should be used with `Foo()`\nsugar. This is a temporary thing -- eventually any trait wil\nbe usable with the sugar (or without it).",339],[12,"generics","","Generic type definitions. Note that `Self` is listed in here\nas having a single bound, the trait itself (e.g., in the trait\n`Eq`, there is a single bound `Self : Eq`). This is so that\ndefault methods get to assume that the `Self` parameters\nimplements the trait.",339],[12,"trait_ref","","",339],[12,"associated_type_names","","A list of the associated types defined in this trait. Useful\nfor resolving `X::Foo` type markers.",339],[3,"ItemSubsts","","Records the substitutions used to translate the polytype for an\nitem into the monotype of an item reference."],[12,"substs","","",269],[4,"ClosureKind","",""],[13,"FnClosureKind","","",155],[13,"FnMutClosureKind","","",155],[13,"FnOnceClosureKind","","",155],[8,"ClosureTyper","",""],[10,"tcx","","",410],[10,"param_env","","",410],[10,"closure_kind","","Is this a `Fn`, `FnMut` or `FnOnce` closure? During typeck,\nreturns `None` if the kind of this closure has not yet been\ninferred.",410],[10,"closure_type","","Returns the argument/return types of this closure.",410],[10,"closure_upvars","","Returns the set of all upvars and their transformed\ntypes. During typeck, maybe return `None` if the upvar types\nhave not yet been inferred.",410],[5,"mk_ctxt","",""],[5,"mk_t","",""],[5,"mk_mach_int","",""],[5,"mk_mach_uint","",""],[5,"mk_mach_float","",""],[5,"mk_str","",""],[5,"mk_str_slice","",""],[5,"mk_enum","",""],[5,"mk_uniq","",""],[5,"mk_ptr","",""],[5,"mk_rptr","",""],[5,"mk_mut_rptr","",""],[5,"mk_imm_rptr","",""],[5,"mk_mut_ptr","",""],[5,"mk_imm_ptr","",""],[5,"mk_nil_ptr","",""],[5,"mk_vec","",""],[5,"mk_slice","",""],[5,"mk_tup","",""],[5,"mk_nil","",""],[5,"mk_bare_fn","",""],[5,"mk_ctor_fn","",""],[5,"mk_trait","",""],[5,"sort_bounds_list","",""],[5,"mk_projection","",""],[5,"mk_struct","",""],[5,"mk_closure","",""],[5,"mk_var","",""],[5,"mk_int_var","",""],[5,"mk_float_var","",""],[5,"mk_infer","",""],[5,"mk_param","",""],[5,"mk_self_type","",""],[5,"mk_param_from_def","",""],[5,"walk_ty","",""],[5,"maybe_walk_ty","","Walks `ty` and any types appearing within `ty`, invoking the\ncallback `f` on each type. If the callback returns false, then the\nchildren of the current type are ignored."],[5,"fold_ty","",""],[5,"type_is_nil","",""],[5,"type_is_error","",""],[5,"type_needs_subst","",""],[5,"trait_ref_contains_error","",""],[5,"type_is_ty_var","",""],[5,"type_is_bool","",""],[5,"type_is_self","",""],[5,"type_is_vec","",""],[5,"type_is_structural","",""],[5,"type_is_simd","",""],[5,"sequence_element_type","",""],[5,"simd_type","",""],[5,"simd_size","",""],[5,"type_is_region_ptr","",""],[5,"type_is_unsafe_ptr","",""],[5,"type_is_unique","",""],[5,"type_is_scalar","",""],[5,"type_is_floating_point","","Returns true if this type is a floating point type and false otherwise."],[3,"TypeContents","","Type contents is how the type checker reasons about kinds.\nThey track what kinds of things are found within a type.  You can\nthink of them as kind of an \"anti-kind\".  They track the kinds of values\nand thinks that are contained in types.  Having a larger contents for\na type tends to rule that type *out* from various kinds.  For example,\na type that contains a reference is not sendable."],[12,"bits","","",270],[5,"type_interior_is_unsafe","",""],[5,"type_contents","",""],[5,"type_moves_by_default","",""],[5,"type_is_sized","",""],[5,"is_ffi_safe","",""],[5,"is_instantiable","",""],[4,"Representability","","Describes whether a type is representable. For types that are not\nrepresentable, 'SelfRecursive' and 'ContainsRecursive' are used to\ndistinguish between types that are recursive with themselves and types that\ncontain a different recursive type. These cases can therefore be treated\ndifferently when reporting errors."],[13,"Representable","","",271],[13,"ContainsRecursive","","",271],[13,"SelfRecursive","","",271],[5,"is_type_representable","","Check whether a type is representable. This means it cannot contain unboxed\nstructural recursion. This check is needed for structs and enums."],[5,"type_is_trait","",""],[5,"type_trait_info","",""],[5,"type_is_integral","",""],[5,"type_is_fresh","",""],[5,"type_is_uint","",""],[5,"type_is_char","",""],[5,"type_is_bare_fn","",""],[5,"type_is_bare_fn_item","",""],[5,"type_is_fp","",""],[5,"type_is_numeric","",""],[5,"type_is_signed","",""],[5,"type_is_machine","",""],[5,"type_is_c_like_enum","",""],[5,"deref","",""],[5,"type_content","",""],[5,"index","",""],[5,"array_element_ty","",""],[5,"positional_element_ty","","Returns the type of element at index `i` in tuple or tuple-like type `t`.\nFor an enum `t`, `variant` is None only if `t` is a univariant enum."],[5,"named_element_ty","","Returns the type of element at field `n` in struct or struct-like type `t`.\nFor an enum `t`, `variant` must be some def id."],[5,"impl_id_to_trait_ref","",""],[5,"node_id_to_type","",""],[5,"node_id_to_type_opt","",""],[5,"node_id_item_substs","",""],[5,"fn_is_variadic","",""],[5,"ty_fn_sig","",""],[5,"ty_fn_abi","","Returns the ABI of the given function."],[5,"ty_fn_args","",""],[5,"ty_fn_ret","",""],[5,"is_fn_ty","",""],[5,"ty_region","",""],[5,"free_region_from_def","",""],[5,"pat_ty","",""],[5,"pat_ty_opt","",""],[5,"expr_ty","",""],[5,"expr_ty_opt","",""],[5,"expr_ty_adjusted","","Returns the type of `expr`, considering any `AutoAdjustment`\nentry recorded for that expression."],[5,"expr_span","",""],[5,"local_var_name_str","",""],[5,"adjust_ty","","See `expr_ty_adjusted`"],[5,"adjust_ty_for_autoref","",""],[5,"unsize_ty","",""],[5,"resolve_expr","",""],[5,"expr_is_lval","",""],[4,"ExprKind","","We categorize expressions into three kinds.  The distinction between\nlvalue/rvalue is fundamental to the language.  The distinction between the\ntwo kinds of rvalues is an artifact of trans which reflects how we will\ngenerate code for that kind of expression.  See trans/expr.rs for more\ninformation."],[13,"LvalueExpr","","",411],[13,"RvalueDpsExpr","","",411],[13,"RvalueDatumExpr","","",411],[13,"RvalueStmtExpr","","",411],[5,"expr_kind","",""],[5,"stmt_node_id","",""],[5,"field_idx_strict","",""],[5,"impl_or_trait_item_idx","",""],[5,"ty_sort_string","",""],[5,"type_err_to_str","","Explains the source of a type err in a short, human readable way. This is meant to be placed\nin parentheses after some larger message. You should also invoke `note_and_explain_type_err()`\nafterwards to present additional details, particularly when it comes to lifetime-related\nerrors."],[5,"note_and_explain_type_err","",""],[5,"provided_source","",""],[5,"provided_trait_methods","",""],[5,"trait_item","",""],[5,"trait_items","",""],[5,"trait_impl_polarity","",""],[5,"impl_or_trait_item","",""],[5,"is_associated_type","","Returns true if the given ID refers to an associated type and false if it\nrefers to anything else."],[5,"associated_type_parameter_index","","Returns the parameter index that the given associated type corresponds to."],[5,"trait_item_def_ids","",""],[5,"impl_trait_ref","",""],[5,"trait_ref_to_def_id","",""],[5,"try_add_builtin_trait","","Checks whether `trait_ref` refers to one of the builtin\ntraits, like `Send`, and adds the corresponding\nbound to the set `builtin_bounds` if so. Returns true if `trait_ref`\nis a builtin trait."],[5,"ty_to_def_id","",""],[3,"VariantInfo","",""],[12,"args","","",272],[12,"arg_names","","",272],[12,"ctor_ty","","",272],[12,"name","","",272],[12,"id","","",272],[12,"disr_val","","",272],[12,"vis","","",272],[5,"substd_enum_variants","",""],[5,"item_path_str","",""],[4,"DtorKind","",""],[13,"NoDtor","","",273],[13,"TraitDtor","","",273],[5,"ty_dtor","",""],[5,"has_dtor","",""],[5,"with_path","",""],[5,"enum_is_univariant","",""],[5,"type_is_empty","",""],[5,"enum_variants","",""],[5,"enum_variant_with_id","",""],[5,"lookup_item_type","",""],[5,"lookup_trait_def","","Given the did of a trait, returns its canonical trait ref."],[5,"lookup_predicates","","Given the did of an item, returns its full set of predicates."],[5,"lookup_super_predicates","","Given the did of a trait, returns its superpredicates."],[5,"predicates","",""],[5,"get_attrs","","Get the attributes of a definition."],[5,"has_attr","","Determine whether an item is annotated with an attribute"],[5,"lookup_packed","","Determine whether an item is annotated with `#[repr(packed)]`"],[5,"lookup_simd","","Determine whether an item is annotated with `#[simd]`"],[5,"lookup_repr_hints","","Obtain the representation annotation for a struct definition."],[5,"lookup_field_type","",""],[5,"lookup_struct_fields","",""],[5,"is_tuple_struct","",""],[5,"struct_fields","",""],[5,"tup_fields","",""],[3,"ClosureUpvar","",""],[12,"def","","",274],[12,"span","","",274],[12,"ty","","",274],[5,"closure_upvars","",""],[5,"is_binopable","",""],[5,"eval_repeat_count","",""],[5,"each_bound_trait_and_supertraits","",""],[5,"required_region_bounds","","Given a set of predicates that apply to an object type, returns\nthe region bounds that the (erased) `Self` type must\noutlive. Precisely *because* the `Self` type is erased, the\nparameter `erased_self_ty` must be supplied to indicate what type\nhas been used to represent `Self` in the predicates\nthemselves. This should really be a unique type; `FreshTy(0)` is a\npopular choice."],[5,"get_tydesc_ty","",""],[5,"item_variances","",""],[5,"trait_has_default_impl","",""],[5,"record_trait_has_default_impl","","Records a trait-to-implementation mapping."],[5,"record_trait_implementation","","Records a trait-to-implementation mapping."],[5,"populate_implementations_for_type_if_necessary","","Populates the type context with all the implementations for the given type\nif necessary."],[5,"populate_implementations_for_trait_if_necessary","","Populates the type context with all the implementations for the given\ntrait if necessary."],[5,"trait_id_of_impl","","Given the def_id of an impl, return the def_id of the trait it implements.\nIf it implements no trait, return `None`."],[5,"impl_of_method","","If the given def ID describes a method belonging to an impl, return the\nID of the impl that the method belongs to. Otherwise, return `None`."],[5,"trait_of_item","","If the given def ID describes an item belonging to a trait (either a\ndefault method or an implementation of a trait method), return the ID of\nthe trait that the method belongs to. Otherwise, return `None`."],[5,"trait_item_of_item","","If the given def ID describes an item belonging to a trait, (either a\ndefault method or an implementation of a trait method), return the ID of\nthe method inside trait definition (this means that if the given def ID\nis already that of the original trait method, then the return value is\nthe same).\nOtherwise, return `None`."],[5,"hash_crate_independent","","Creates a hash of the type `Ty` which will be the same no matter what crate\ncontext it's calculated within. This is used by the `type_id` intrinsic."],[5,"empty_parameter_environment","","Construct a parameter environment suitable for static contexts or other contexts where there\nare no free type/lifetime parameters in scope."],[5,"construct_free_substs","","Constructs and returns a substitution that can be applied to move from\nthe \"outer\" view of a type or method to the \"inner\" view.\nIn general, this means converting from bound parameters to\nfree parameters. Since we currently represent bound/free type\nparameters in the same way, this only has an effect on regions."],[5,"construct_parameter_environment","","See `ParameterEnvironment` struct def'n for details"],[4,"ExplicitSelfCategory","","The category of explicit self."],[13,"StaticExplicitSelfCategory","","",275],[13,"ByValueExplicitSelfCategory","","",275],[13,"ByReferenceExplicitSelfCategory","","",275],[13,"ByBoxExplicitSelfCategory","","",275],[5,"accumulate_lifetimes_in_type","","Pushes all the lifetimes in the given type onto the given list. A\n\"lifetime in a type\" is a lifetime specified by a reference or a lifetime\nin a list of type substitutions. This does *not* traverse into nominal\ntypes, nor does it resolve fictitious types."],[3,"Freevar","","A free variable referred to in a function."],[12,"def","","The variable being accessed free.",22],[12,"span","","",22],[6,"FreevarMap","",""],[6,"CaptureModeMap","",""],[6,"TraitMap","",""],[6,"GlobMap","",""],[5,"with_freevars","",""],[5,"liberate_late_bound_regions","","Replace any late-bound regions bound in `value` with free variants attached to scope-id\n`scope_id`."],[5,"count_late_bound_regions","",""],[5,"binds_late_bound_regions","",""],[5,"no_late_bound_regions","",""],[5,"erase_late_bound_regions","","Replace any late-bound regions bound in `value` with `'static`. Useful in trans but also\nmethod lookup and a few other places where precise region relationships are not required."],[5,"anonymize_late_bound_regions","","Rewrite any late-bound regions so that they are anonymous.  Region numbers are\nassigned starting at 1 and increasing monotonically in the order traversed\nby the fold operation."],[5,"replace_late_bound_regions","","Replaces the late-bound-regions in `value` that are bound by `value`."],[5,"make_substs_for_receiver_types","","Substitutes the values for the receiver's type parameters\nthat are found in method, leaving the method's type parameters\nintact."],[4,"CopyImplementationError","",""],[13,"FieldDoesNotImplementCopy","","",412],[13,"VariantDoesNotImplementCopy","","",412],[13,"TypeIsStructural","","",412],[13,"TypeHasDestructor","","",412],[5,"can_type_implement_copy","",""],[8,"RegionEscape","",""],[10,"has_escaping_regions","","",413],[10,"has_regions_escaping_depth","","",413],[8,"HasProjectionTypes","",""],[10,"has_projection_types","","",414],[8,"ReferencesError","",""],[10,"references_error","","",415],[0,"ty_fold","rustc_lint::middle","Generalized type folding mechanism. The setup is a bit convoluted\nbut allows for convenient usage. Let T be an instance of some\n\"foldable type\" (one which implements `TypeFoldable`) and F be an\ninstance of a \"folder\" (a type which implements `TypeFolder`). Then\nthe setup is intended to be:"],[8,"TypeFoldable","rustc_lint::middle::ty_fold","The TypeFoldable trait is implemented for every type that can be folded.\nBasically, every type that has a corresponding method in TypeFolder."],[10,"fold_with","","",416],[8,"TypeFolder","","The TypeFolder trait defines the actual *folding*. There is a\nmethod defined for every foldable type. Each of these has a\ndefault implementation that does an \"identity\" fold. Within each\nidentity fold, it should invoke `foo.fold_with(self)` to fold each\nsub-item."],[10,"tcx","","",417],[10,"enter_region_binder","","Invoked by the `super_*` routines when we enter a region\nbinding level (for example, when entering a function\nsignature). This is used by clients that want to track the\nDebruijn index nesting level.",417],[10,"exit_region_binder","","Invoked by the `super_*` routines when we exit a region\nbinding level. This is used by clients that want to\ntrack the Debruijn index nesting level.",417],[10,"fold_binder","","",417],[10,"fold_ty","","",417],[10,"fold_mt","","",417],[10,"fold_trait_ref","","",417],[10,"fold_substs","","",417],[10,"fold_fn_sig","","",417],[10,"fold_output","","",417],[10,"fold_bare_fn_ty","","",417],[10,"fold_closure_ty","","",417],[10,"fold_region","","",417],[10,"fold_existential_bounds","","",417],[10,"fold_autoref","","",417],[10,"fold_item_substs","","",417],[5,"super_fold_binder","",""],[5,"super_fold_ty","",""],[5,"super_fold_substs","",""],[5,"super_fold_fn_sig","",""],[5,"super_fold_output","",""],[5,"super_fold_bare_fn_ty","",""],[5,"super_fold_closure_ty","",""],[5,"super_fold_trait_ref","",""],[5,"super_fold_mt","",""],[5,"super_fold_existential_bounds","",""],[5,"super_fold_autoref","",""],[5,"super_fold_item_substs","",""],[3,"BottomUpFolder","",""],[12,"tcx","","",280],[12,"fldop","","",280],[3,"RegionFolder","","Folds over the substructure of a type, visiting its component\ntypes and all regions that occur *free* within it."],[5,"collect_regions","",""],[5,"fold_regions","",""],[3,"RegionEraser","",""],[5,"erase_regions","",""],[5,"shift_region","",""],[5,"shift_regions","",""],[0,"ty_walk","rustc_lint::middle","An iterator over the type substructure."],[3,"TypeWalker","rustc_lint::middle::ty_walk",""],[0,"weak_lang_items","rustc_lint::middle","Validity checking for weak lang items"],[5,"check_crate","rustc_lint::middle::weak_lang_items","Checks the crate for usage of weak lang items, returning a vector of all the\nlanguage items required by this crate, but not defined yet."],[5,"link_name","",""],[0,"session","rustc_lint",""],[0,"config","rustc_lint::session","Contains infrastructure for configuring the compiler, including parsing\ncommand line options."],[3,"Config","rustc_lint::session::config",""],[12,"target","","",418],[12,"int_type","","",418],[12,"uint_type","","",418],[4,"OptLevel","",""],[13,"No","","",306],[13,"Less","","",306],[13,"Default","","",306],[13,"Aggressive","","",306],[4,"DebugInfoLevel","",""],[13,"NoDebugInfo","","",307],[13,"LimitedDebugInfo","","",307],[13,"FullDebugInfo","","",307],[4,"OutputType","",""],[13,"OutputTypeBitcode","","",308],[13,"OutputTypeAssembly","","",308],[13,"OutputTypeLlvmAssembly","","",308],[13,"OutputTypeObject","","",308],[13,"OutputTypeExe","","",308],[13,"OutputTypeDepInfo","","",308],[3,"Options","",""],[12,"crate_types","","",309],[12,"gc","","",309],[12,"optimize","","",309],[12,"debug_assertions","","",309],[12,"debuginfo","","",309],[12,"lint_opts","","",309],[12,"describe_lints","","",309],[12,"output_types","","",309],[12,"search_paths","","",309],[12,"libs","","",309],[12,"maybe_sysroot","","",309],[12,"target_triple","","",309],[12,"cfg","","",309],[12,"test","","",309],[12,"parse_only","","",309],[12,"no_trans","","",309],[12,"treat_err_as_bug","","",309],[12,"no_analysis","","",309],[12,"debugging_opts","","",309],[12,"write_dependency_info","","Whether to write dependency files. It's (enabled, optional filename).",309],[12,"prints","","",309],[12,"cg","","",309],[12,"color","","",309],[12,"show_span","","",309],[12,"externs","","",309],[12,"crate_name","","",309],[12,"alt_std_name","","An optional name to use as the crate for std during std injection,\nwritten `extern crate std = \"name\"`. Default to \"std\". Used by\nout-of-tree drivers.",309],[12,"unstable_features","","Indicates how the compiler should treat unstable features",309],[4,"UnstableFeatures","",""],[13,"Disallow","","Hard errors for unstable features are active, as on\nbeta/stable channels.",310],[13,"Default","","Use the default lint levels",310],[13,"Cheat","","Errors are bypassed for bootstrapping. This is required any time\nduring the build that feature-related lints are set to warn or above\nbecause the build turns on warnings-as-errors and uses lots of unstable\nfeatures. As a result, this this is always required for building Rust\nitself.",310],[4,"PrintRequest","",""],[13,"FileNames","","",311],[13,"Sysroot","","",311],[13,"CrateName","","",311],[4,"Input","",""],[13,"File","","Load source from file",312],[13,"Str","","The string is the source",312],[3,"OutputFilenames","",""],[12,"out_directory","","",313],[12,"out_filestem","","",313],[12,"single_output_file","","",313],[12,"extra","","",313],[5,"host_triple","",""],[5,"basic_options","","Some reasonable defaults"],[4,"EntryFnType","",""],[13,"EntryMain","","",314],[13,"EntryStart","","",314],[13,"EntryNone","","",314],[4,"CrateType","",""],[13,"CrateTypeExecutable","","",315],[13,"CrateTypeDylib","","",315],[13,"CrateTypeRlib","","",315],[13,"CrateTypeStaticlib","","",315],[4,"Passes","",""],[13,"SomePasses","","",316],[13,"AllPasses","","",316],[3,"CodegenOptions","",""],[12,"ar","","",317],[12,"linker","","",317],[12,"link_args","","",317],[12,"lto","","",317],[12,"target_cpu","","",317],[12,"target_feature","","",317],[12,"passes","","",317],[12,"llvm_args","","",317],[12,"save_temps","","",317],[12,"rpath","","",317],[12,"no_prepopulate_passes","","",317],[12,"no_vectorize_loops","","",317],[12,"no_vectorize_slp","","",317],[12,"soft_float","","",317],[12,"prefer_dynamic","","",317],[12,"no_integrated_as","","",317],[12,"no_redzone","","",317],[12,"relocation_model","","",317],[12,"code_model","","",317],[12,"metadata","","",317],[12,"extra_filename","","",317],[12,"codegen_units","","",317],[12,"remark","","",317],[12,"no_stack_check","","",317],[12,"debuginfo","","",317],[12,"opt_level","","",317],[12,"debug_assertions","","",317],[5,"basic_codegen_options","",""],[5,"build_codegen_options","",""],[6,"CodegenSetter","",""],[17,"CG_OPTIONS","",""],[3,"DebuggingOptions","",""],[12,"verbose","","",318],[12,"time_passes","","",318],[12,"count_llvm_insns","","",318],[12,"time_llvm_passes","","",318],[12,"trans_stats","","",318],[12,"asm_comments","","",318],[12,"no_verify","","",318],[12,"borrowck_stats","","",318],[12,"no_landing_pads","","",318],[12,"debug_llvm","","",318],[12,"count_type_sizes","","",318],[12,"meta_stats","","",318],[12,"print_link_args","","",318],[12,"gc","","",318],[12,"print_llvm_passes","","",318],[12,"ast_json","","",318],[12,"ast_json_noexpand","","",318],[12,"ls","","",318],[12,"save_analysis","","",318],[12,"print_move_fragments","","",318],[12,"flowgraph_print_loans","","",318],[12,"flowgraph_print_moves","","",318],[12,"flowgraph_print_assigns","","",318],[12,"flowgraph_print_all","","",318],[12,"print_region_graph","","",318],[12,"parse_only","","",318],[12,"no_trans","","",318],[12,"treat_err_as_bug","","",318],[12,"no_analysis","","",318],[12,"extra_plugins","","",318],[12,"unstable_options","","",318],[12,"print_enum_sizes","","",318],[12,"force_overflow_checks","","",318],[5,"basic_debugging_options","",""],[5,"build_debugging_options","",""],[6,"DebuggingSetter","",""],[17,"DB_OPTIONS","",""],[5,"default_lib_output","",""],[5,"default_configuration","",""],[5,"append_configuration","",""],[5,"build_configuration","",""],[5,"build_target_config","",""],[5,"short_optgroups","","Returns the \"short\" subset of the stable rustc command line options."],[5,"optgroups","","Returns all of the stable rustc command line options."],[4,"OptionStability","",""],[13,"Stable","","",319],[13,"Unstable","","",319],[3,"RustcOptGroup","",""],[12,"opt_group","","",320],[12,"stability","","",320],[5,"rustc_short_optgroups","","Returns the \"short\" subset of the rustc command line options,\nincluding metadata for each option, such as whether the option is\npart of the stable long-term interface for rustc."],[5,"rustc_optgroups","","Returns all rustc command line options, including metadata for\neach option, such as whether the option is part of the stable\nlong-term interface for rustc."],[5,"parse_cfgspecs","",""],[5,"build_session_options","",""],[5,"get_unstable_features_setting","",""],[5,"parse_crate_types_from_list","",""],[0,"search_paths","rustc_lint::session",""],[3,"SearchPaths","rustc_lint::session::search_paths",""],[3,"Iter","",""],[4,"PathKind","",""],[13,"Native","","",322],[13,"Crate","","",322],[13,"Dependency","","",322],[13,"Framework","","",322],[13,"ExternFlag","","",322],[13,"All","","",322],[3,"Session","rustc_lint::session",""],[12,"target","","",324],[12,"host","","",324],[12,"opts","","",324],[12,"cstore","","",324],[12,"parse_sess","","",324],[12,"entry_fn","","",324],[12,"entry_type","","",324],[12,"plugin_registrar_fn","","",324],[12,"default_sysroot","","",324],[12,"local_crate_source_file","","",324],[12,"working_dir","","",324],[12,"lint_store","","",324],[12,"lints","","",324],[12,"crate_types","","",324],[12,"crate_metadata","","",324],[12,"features","","",324],[12,"recursion_limit","","The maximum recursion limit for potentially infinitely recursive\noperations such as auto-dereference and monomorphization.",324],[12,"can_print_warnings","","",324],[5,"build_session","",""],[5,"build_session_","",""],[5,"expect","",""],[5,"early_error","",""],[5,"early_warn","",""],[0,"util","rustc_lint",""],[0,"common","rustc_lint::util",""],[17,"FN_OUTPUT_NAME","rustc_lint::util::common",""],[3,"ErrorReported","",""],[5,"time","",""],[5,"indent","",""],[3,"Indenter","",""],[5,"indenter","",""],[5,"loop_query","",""],[5,"block_query","",""],[5,"can_reach","","K: Eq + Hash<S>, V, S, H: Hasher<S>"],[5,"memoized","","Memoizes a one-argument closure using the given RefCell containing\na type implementing MutableMap to serve as a cache."],[5,"path2cstr","",""],[0,"ppaux","rustc_lint::util",""],[8,"Repr","rustc_lint::util::ppaux","Produces a string suitable for debugging output."],[10,"repr","","",419],[8,"UserString","","Produces a string suitable for showing to the user."],[10,"user_string","","",420],[5,"note_and_explain_region","",""],[5,"explain_region_and_span","",""],[5,"bound_region_ptr_to_string","",""],[5,"bound_region_to_string","",""],[5,"region_ptr_to_string","",""],[5,"region_to_string","",""],[5,"mutability_to_string","",""],[5,"mt_to_string","",""],[5,"vec_map_to_string","",""],[5,"ty_to_string","",""],[5,"explicit_self_category_to_str","",""],[5,"parameterized","",""],[5,"ty_to_short_str","",""],[0,"nodemap","rustc_lint::util","An efficient hash map for node IDs"],[6,"FnvHashMap","rustc_lint::util::nodemap",""],[6,"FnvHashSet","",""],[6,"NodeMap","",""],[6,"DefIdMap","",""],[6,"NodeSet","",""],[6,"DefIdSet","",""],[5,"FnvHashMap","",""],[5,"FnvHashSet","",""],[5,"NodeMap","",""],[5,"DefIdMap","",""],[5,"NodeSet","",""],[5,"DefIdSet","",""],[3,"FnvHasher","","A speedy hash algorithm for node ids and def ids. The hashmap in\nlibcollections by default uses SipHash which isn't quite as speedy as we\nwant. In the compiler we're not really worried about DOS attempts, so we\njust default to a non-cryptographic hash."],[0,"snapshot_vec","rustc_lint::util","A utility class for implementing \"snapshottable\" things; a snapshottable data structure permits\nyou to take a snapshot (via `start_snapshot`) and then, after making some changes, elect either\nto rollback to the start of the snapshot or commit those changes."],[4,"UndoLog","rustc_lint::util::snapshot_vec",""],[13,"OpenSnapshot","","Indicates where a snapshot started.",421],[13,"CommittedSnapshot","","Indicates a snapshot that has been committed.",421],[13,"NewElem","","New variable with given index was created.",421],[13,"SetElem","","Variable with given index was changed *from* the given value.",421],[13,"Other","","Extensible set of actions",421],[3,"SnapshotVec","",""],[3,"Snapshot","",""],[8,"SnapshotVecDelegate","",""],[16,"Value","rustc_lint::util::snapshot_vec::SnapshotVecDelegate",""],[16,"Undo","",""],[10,"reverse","rustc_lint::util::snapshot_vec","",422],[0,"lev_distance","rustc_lint::util",""],[5,"lev_distance","rustc_lint::util::lev_distance",""],[0,"fs","rustc_lint::util",""],[5,"realpath","rustc_lint::util::fs","Returns an absolute path in the filesystem that `path` points to. The\nreturned path does not contain any symlinks in its hierarchy."],[0,"sha2","rustc_lint::util","This module implements only the Sha256 function since that is all that is needed for internal\nuse. This implementation is not intended for external use or for any use where security is\nimportant."],[8,"Digest","rustc_lint::util::sha2","The Digest trait specifies an interface common to digest functions, such as SHA-1 and the SHA-2\nfamily of digest functions."],[10,"input","","Provide message data.",423],[10,"result","","Retrieve the digest result. This method may be called multiple times.",423],[10,"reset","","Reset the digest. This method must be called after result() and before supplying more\ndata.",423],[10,"output_bits","","Get the output size in bits.",423],[10,"input_str","","Convenience function that feeds a string into a digest.",423],[10,"result_bytes","","Convenience function that retrieves the result of a digest as a\nnewly allocated vec of bytes.",423],[10,"result_str","","Convenience function that retrieves the result of a digest as a\nString in hexadecimal format.",423],[11,"new_in","rustc_back::tempdir","Attempts to make a temporary directory inside of `tmpdir` whose name\nwill have the prefix `prefix`. The directory will be automatically\ndeleted once the returned wrapper is destroyed.",424],[11,"new","","Attempts to make a temporary directory inside of `env::temp_dir()` whose\nname will have the prefix `prefix`. The directory will be automatically\ndeleted once the returned wrapper is destroyed.",424],[11,"into_path","","Unwrap the wrapped `std::path::Path` from the `TempDir` wrapper.\nThis discards the wrapper so that the automatic deletion of the\ntemporary directory is prevented.",424],[11,"path","","Access the wrapped `std::path::Path` to the temporary directory.",424],[11,"close","","Close and remove the temporary directory",424],[11,"drop","","",424],[11,"to_string","rustc_back::target::apple_ios_base","",425],[11,"fmt","rustc_back::target","",426],[11,"clone","","",426],[11,"fmt","","",427],[11,"clone","","",427],[11,"default","","Create a set of \"sane defaults\" for any target. This is still incomplete, and if used for\ncompilation, will certainly not work.",427],[11,"adjust_abi","","Given a function ABI, turn \"System\" into the correct ABI for this target.",426],[11,"from_json","","Load a target descriptor from a JSON object.",426],[11,"search","","Search RUST_TARGET_PATH for a JSON file specifying the given target\ntriple. Note that it could also just be a bare filename already, so also\ncheck for that. If one of the hardcoded targets we know about, just\nreturn it directly.",426],[3,"Sha256","rustc_lint::util::sha2","The SHA-256 hash algorithm"],[5,"register_builtins","rustc_lint","Tell the `LintStore` about all the built-in lints (the ones\ndefined in this crate and the ones defined in\n`rustc::lint::builtin`)."]],"paths":[[3,"Lint"],[3,"Archive"],[3,"ArchiveBuilder"],[3,"Svh"],[4,"SawAbiComponent"],[4,"SawExprComponent"],[4,"SawStmtComponent"],[3,"Ident"],[3,"Name"],[3,"StrictVersionHashVisitor"],[3,"DecodeContext"],[3,"DefId"],[4,"Option"],[3,"Span"],[3,"NestedItemsDropper"],[4,"Def"],[4,"Region"],[3,"FreeRegion"],[4,"CodeExtent"],[3,"DestructionScopeData"],[4,"BoundRegion"],[3,"Decoder"],[3,"Freevar"],[3,"UpvarBorrow"],[4,"UpvarCapture"],[4,"MethodOrigin"],[3,"EncodeContext"],[3,"Encoder"],[3,"SideTableEncodingIdVisitor"],[3,"Doc"],[3,"LabelledCFG"],[4,"CFGNodeData"],[3,"CFG"],[3,"ConstQualif"],[4,"Mode"],[3,"CheckCrateVisitor"],[3,"CheckCrateVisitor"],[3,"CheckItemRecursionVisitor"],[4,"Context"],[3,"CheckLoopVisitor"],[3,"Matrix"],[4,"Constructor"],[4,"Usefulness"],[3,"MatchCheckCtxt"],[3,"StaticInliner"],[3,"RenamingRecorder"],[3,"MutationChecker"],[3,"AtBindingPatternVisitor"],[3,"RvalueContext"],[3,"RvalueContextDelegate"],[4,"const_val"],[3,"ConstEvalErr"],[4,"ErrKind"],[4,"EntryOrExit"],[3,"DataFlowContext"],[3,"Union"],[3,"Subtract"],[3,"MarkSymbolVisitor"],[3,"LifeSeeder"],[3,"DeadVisitor"],[3,"PathResolution"],[4,"MethodProvenance"],[4,"UnsafeContext"],[3,"EffectCheckVisitor"],[3,"EntryContext"],[4,"LoanCause"],[4,"ConsumeMode"],[4,"MoveReason"],[4,"MatchMode"],[4,"TrackMatchMode"],[4,"MutateMode"],[3,"ExprUseVisitor"],[4,"SimplifiedType"],[3,"Edge"],[3,"NodeIndex"],[3,"EdgeIndex"],[3,"Direction"],[3,"Graph"],[3,"DepthFirstTraversal"],[3,"IntrinsicCheckingVisitor"],[3,"TransmuteRestriction"],[3,"Bivariate"],[3,"Rc"],[3,"TraitRef"],[3,"ProjectionPredicate"],[3,"FnSig"],[3,"CombineFields"],[3,"Generalizer"],[3,"Equate"],[3,"InferCtxt"],[3,"Binder"],[3,"Glb"],[3,"Lub"],[4,"Node"],[4,"Edge"],[3,"ConstraintGraph"],[4,"Constraint"],[4,"GenericKind"],[3,"TwoRegions"],[4,"UndoLogEntry"],[4,"CombineMapType"],[4,"RegionResolutionError"],[3,"SameRegions"],[3,"RegionSnapshot"],[3,"RegionVarBindings"],[4,"Classification"],[4,"Verify"],[4,"VarValue"],[3,"RegionAndOrigin"],[3,"OpportunisticTypeResolver"],[3,"FullTypeResolver"],[3,"TypeFreshener"],[3,"Sub"],[4,"RelationDir"],[3,"TypeVariableTable"],[3,"Delegate"],[4,"VarValue"],[3,"UnificationTable"],[3,"Delegate"],[3,"IntVid"],[4,"IntVarValue"],[3,"FloatVid"],[4,"FloatTy"],[4,"TypeOrigin"],[4,"ValuePairs"],[3,"TypeTrace"],[4,"SubregionOrigin"],[4,"LateBoundRegionConversionTime"],[4,"RegionVariableOrigin"],[4,"fixup_err"],[4,"Result"],[4,"LangItem"],[3,"LanguageItems"],[3,"LanguageItemCollector"],[3,"Variable"],[3,"LiveNode"],[4,"LiveNodeKind"],[3,"IrMaps"],[3,"LocalInfo"],[4,"VarKind"],[3,"Liveness"],[3,"Users"],[4,"categorization"],[3,"Upvar"],[4,"PointerKind"],[4,"InteriorKind"],[4,"FieldName"],[4,"InteriorOffsetKind"],[4,"ElementKind"],[4,"MutabilityCategory"],[4,"Note"],[3,"cmt_"],[3,"Expr"],[3,"Pat"],[3,"MemCategorizationContext"],[4,"ClosureKind"],[4,"LastPrivate"],[4,"PrivateDep"],[4,"ImportUse"],[3,"ReachableContext"],[3,"BlockRemainder"],[4,"InnermostDeclaringBlock"],[3,"DeclaringStatementContext"],[4,"InnermostEnclosingExpr"],[3,"Context"],[3,"RegionMaps"],[3,"RegionResolutionVisitor"],[4,"DefRegion"],[3,"LifetimeContext"],[4,"ScopeChain"],[3,"Annotator"],[3,"Index"],[3,"Checker"],[3,"Substs"],[4,"RegionSubsts"],[4,"ParamSpace"],[3,"VecPerParamSpace"],[3,"EnumeratedItems"],[3,"SubstFolder"],[3,"RegionObligation"],[3,"FulfillmentContext"],[3,"MismatchedProjectionTypes"],[4,"ProjectionTyCandidate"],[3,"AssociatedTypeNormalizer"],[3,"Normalized"],[4,"ProjectionTyError"],[4,"MethodViolationCode"],[4,"ObjectSafetyViolation"],[3,"SelectionCache"],[4,"MethodMatchedData"],[4,"SelectionCandidate"],[4,"EvaluationResult"],[3,"SelectionContext"],[3,"TraitObligationStack"],[4,"MethodMatchResult"],[3,"Elaborator"],[3,"FilterToTraits"],[3,"VtableImplData"],[3,"VtableObjectData"],[3,"Obligation"],[4,"Vtable"],[3,"VtableBuiltinData"],[3,"VtableDefaultImplData"],[4,"SelectionError"],[3,"FulfillmentError"],[4,"FulfillmentErrorCode"],[3,"ObligationCause"],[4,"ObligationCauseCode"],[3,"DerivedObligationCause"],[3,"field"],[4,"ImplOrTraitItemContainer"],[4,"ImplOrTraitItem"],[4,"ImplOrTraitItemId"],[3,"Method"],[3,"AssociatedType"],[3,"mt"],[3,"field_ty"],[3,"creader_cache_key"],[3,"ItemVariances"],[4,"Variance"],[4,"AutoAdjustment"],[4,"UnsizeKind"],[3,"AutoDerefRef"],[4,"AutoRef"],[3,"param_index"],[3,"MethodParam"],[3,"MethodObject"],[3,"MethodCallee"],[3,"MethodCall"],[4,"ExprAdjustment"],[4,"vtable_origin"],[3,"CtxtArenas"],[3,"TypeFlags"],[3,"ctxt"],[3,"TyS"],[3,"InternedTy"],[3,"BareFnTy"],[3,"ClosureTy"],[4,"FnOutput"],[3,"ParamTy"],[3,"DebruijnIndex"],[3,"UpvarId"],[4,"BorrowKind"],[4,"sty"],[3,"TyTrait"],[4,"terr_vstore_kind"],[3,"expected_found"],[4,"type_err"],[3,"ParamBounds"],[3,"ExistentialBounds"],[4,"BuiltinBound"],[3,"TyVid"],[3,"RegionVid"],[4,"InferTy"],[4,"UnconstrainedNumeric"],[4,"InferRegion"],[4,"ObjectLifetimeDefault"],[3,"TypeParameterDef"],[3,"RegionParameterDef"],[3,"Generics"],[3,"GenericPredicates"],[4,"Predicate"],[3,"TraitPredicate"],[3,"EquatePredicate"],[3,"OutlivesPredicate"],[3,"ProjectionTy"],[3,"InstantiatedPredicates"],[3,"ParameterEnvironment"],[3,"TypeScheme"],[3,"ItemSubsts"],[3,"TypeContents"],[4,"Representability"],[3,"VariantInfo"],[4,"DtorKind"],[3,"ClosureUpvar"],[4,"ExplicitSelfCategory"],[3,"Vec"],[3,"Box"],[3,"OwnedSlice"],[3,"EnumSet"],[3,"BottomUpFolder"],[3,"RegionFolder"],[3,"RegionEraser"],[3,"TypeWalker"],[3,"Context"],[4,"astencode_tag"],[3,"LinkMeta"],[4,"DefIdSource"],[3,"entry"],[3,"EncodeVisitor"],[3,"ImplVisitor"],[4,"Family"],[4,"DefLike"],[3,"CrateDep"],[3,"CrateReader"],[4,"PMDSource"],[4,"LinkagePreference"],[4,"NativeLibraryKind"],[3,"CrateSource"],[3,"CStore"],[3,"crate_metadata"],[4,"MetadataBlob"],[3,"Context"],[3,"ArchiveMetadata"],[3,"FileSearch"],[3,"MacroLoader"],[4,"OptLevel"],[4,"DebugInfoLevel"],[4,"OutputType"],[3,"Options"],[4,"UnstableFeatures"],[4,"PrintRequest"],[4,"Input"],[3,"OutputFilenames"],[4,"EntryFnType"],[4,"CrateType"],[4,"Passes"],[3,"CodegenOptions"],[3,"DebuggingOptions"],[4,"OptionStability"],[3,"RustcOptGroup"],[3,"SearchPaths"],[4,"PathKind"],[3,"Iter"],[3,"Session"],[3,"Registry"],[3,"RegistrarFinder"],[3,"LintId"],[4,"Level"],[4,"LintSource"],[3,"HardwiredLints"],[3,"LintStore"],[3,"Context"],[3,"GatherNodeLevels"],[3,"ErrorReported"],[3,"Indenter"],[3,"LoopQueryVisitor"],[3,"BlockQueryVisitor"],[3,"P"],[3,"TraitDef"],[4,"TraitItem"],[3,"Path"],[3,"Ty"],[3,"Item"],[3,"Lifetime"],[3,"Spanned"],[4,"ExplicitSelf_"],[4,"Visibility"],[4,"Abi"],[4,"Mutability"],[4,"IntTy"],[4,"UintTy"],[3,"HashMap"],[3,"FnvHasher"],[3,"SnapshotVec"],[3,"FixedBuffer64"],[3,"Sha256"],[3,"ArchiveRO"],[4,"OptimizationDiagnosticKind"],[4,"Diagnostic"],[4,"CallConv"],[4,"DiagnosticSeverity"],[3,"Attribute"],[4,"OtherAttribute"],[4,"SpecialAttribute"],[3,"AttrBuilder"],[4,"TypeKind"],[4,"CodeGenOptLevel"],[4,"RelocMode"],[3,"TargetData"],[3,"ObjectFile"],[3,"SectionIter"],[8,"LintPass"],[3,"ctxt"],[4,"InlinedItemRef"],[3,"EncodeParams"],[3,"ImportedFileMap"],[3,"MethodInfo"],[4,"FoundAst"],[3,"Library"],[3,"CratePaths"],[4,"FileMatch"],[8,"vtable_decoder_helpers"],[3,"CFGEdgeData"],[8,"BitwiseOperator"],[8,"DataFlowOperator"],[3,"Export"],[8,"Delegate"],[3,"Node"],[8,"Combine"],[8,"Combineable"],[8,"ErrorReporting"],[8,"Resolvable"],[8,"LatticeDir"],[8,"UnifyKey"],[3,"Node"],[8,"SimplyUnifiable"],[8,"InferCtxtMethodsForSimplyUnifiableTypes"],[4,"deref_kind"],[8,"ast_node"],[8,"Typer"],[4,"InteriorSafety"],[4,"AliasableReason"],[3,"SeparateVecsPerParamSpace"],[8,"Subst"],[4,"OrphanCheckErr"],[3,"CrateAnalysis"],[3,"CommonTypes"],[8,"ToPolyTraitRef"],[8,"AsPredicate"],[8,"ClosureTyper"],[4,"ExprKind"],[4,"CopyImplementationError"],[8,"RegionEscape"],[8,"HasProjectionTypes"],[8,"ReferencesError"],[8,"TypeFoldable"],[8,"TypeFolder"],[3,"Config"],[8,"Repr"],[8,"UserString"],[4,"UndoLog"],[8,"SnapshotVecDelegate"],[8,"Digest"],[3,"TempDir"],[4,"Arch"],[3,"Target"],[3,"TargetOptions"]]};
searchIndex['rustc_privacy'] = {"items":[[0,"","rustc_privacy",""],[5,"check_crate","",""]],"paths":[]};
searchIndex['syntax'] = {"items":[[0,"","syntax","The Rust parser and macro expander."],[0,"util","",""],[0,"interner","syntax::util","An \"interner\" is a data structure that associates values with usize tags and\nallows bidirectional lookup; i.e. given a value, one can easily find the\ntype, and vice versa."],[3,"Interner","syntax::util::interner",""],[3,"RcStr","",""],[3,"StrInterner","","A StrInterner differs from Interner<String> in that it accepts\n&str rather than RcStr, resulting in less allocation."],[11,"new","","",0],[11,"prefill","","",0],[11,"intern","","",0],[11,"gensym","","",0],[11,"get","","",0],[11,"len","","",0],[11,"find","","",0],[11,"clear","","",0],[11,"partial_cmp","","",1],[11,"lt","","",1],[11,"le","","",1],[11,"gt","","",1],[11,"ge","","",1],[11,"hash","","",1],[11,"eq","","",1],[11,"ne","","",1],[11,"clone","","",1],[11,"new","","",1],[11,"cmp","","",1],[11,"fmt","","",1],[11,"fmt","","",1],[11,"borrow","","",1],[6,"Target","",""],[11,"deref","","",1],[11,"new","","",2],[11,"prefill","","",2],[11,"intern","","",2],[11,"gensym","","",2],[11,"gensym_copy","","Create a gensym with the same name as an existing\nentry.",2],[11,"get","","",2],[11,"len","","",2],[11,"find","","",2],[11,"clear","","",2],[11,"reset","","",2],[0,"small_vector","syntax::util",""],[3,"SmallVector","syntax::util::small_vector","A vector type optimized for cases where the size is almost always 0 or 1"],[3,"IntoIter","",""],[11,"from_iter","","",3],[11,"extend","","",3],[11,"zero","","",3],[11,"one","","",3],[11,"many","","",3],[11,"as_slice","","",3],[11,"push","","",3],[11,"push_all","","",3],[11,"get","","",3],[11,"expect_one","","",3],[11,"move_iter","","Deprecated: use `into_iter`.",3],[11,"into_iter","","",3],[11,"len","","",3],[11,"is_empty","","",3],[6,"Item","",""],[11,"next","","",4],[11,"size_hint","","",4],[11,"move_map","","",3],[0,"diagnostics","syntax",""],[0,"plugin","syntax::diagnostics",""],[5,"expand_diagnostic_used","syntax::diagnostics::plugin",""],[5,"expand_register_diagnostic","",""],[5,"expand_build_diagnostic_array","",""],[0,"registry","syntax::diagnostics",""],[3,"Registry","syntax::diagnostics::registry",""],[11,"clone","","",5],[11,"new","","",5],[11,"find_description","","",5],[0,"syntax","syntax",""],[0,"abi","",""],[3,"AbiData","syntax::abi",""],[4,"Os","",""],[13,"OsWindows","","",6],[13,"OsMacos","","",6],[13,"OsLinux","","",6],[13,"OsAndroid","","",6],[13,"OsFreebsd","","",6],[13,"OsiOS","","",6],[13,"OsDragonfly","","",6],[13,"OsBitrig","","",6],[13,"OsOpenbsd","","",6],[4,"Abi","",""],[13,"Cdecl","","",7],[13,"Stdcall","","",7],[13,"Fastcall","","",7],[13,"Aapcs","","",7],[13,"Win64","","",7],[13,"Rust","","",7],[13,"C","","",7],[13,"System","","",7],[13,"RustIntrinsic","","",7],[13,"RustCall","","",7],[4,"Architecture","",""],[13,"X86","","",8],[13,"X86_64","","",8],[13,"Arm","","",8],[13,"Mips","","",8],[13,"Mipsel","","",8],[4,"AbiArchitecture","",""],[13,"RustArch","","Not a real ABI (e.g., intrinsic)",9],[13,"AllArch","","An ABI that specifies cross-platform defaults (e.g., \"C\")",9],[13,"Archs","","Multiple architectures (bitset)",9],[5,"lookup","","Returns the ABI with the given name (if any)."],[5,"all_names","",""],[11,"fmt","","",6],[11,"eq","","",6],[11,"ne","","",6],[11,"fmt","","",7],[11,"clone","","",7],[11,"decode","","",7],[11,"encode","","",7],[11,"hash","","",7],[11,"eq","","",7],[11,"ne","","",7],[11,"fmt","","",8],[11,"eq","","",8],[11,"ne","","",8],[11,"index","","",7],[11,"data","","",7],[11,"name","","",7],[11,"fmt","","",7],[11,"fmt","","",6],[0,"ast","syntax",""],[3,"Ident","syntax::ast","An identifier contains a Name (index into the interner\ntable) and a SyntaxContext to track renaming and\nmacro expansion per Flatt et al., \"Macros\nThat Work Together\""],[12,"name","","",10],[12,"ctxt","","",10],[3,"Name","","A name is a part of an identifier, representing a string or gensym. It's\nthe result of interning."],[3,"Lifetime","",""],[12,"id","","",11],[12,"span","","",11],[12,"name","","",11],[3,"LifetimeDef","",""],[12,"lifetime","","",12],[12,"bounds","","",12],[3,"Path","","A \"Path\" is essentially Rust's notion of a name; for instance:\nstd::cmp::PartialEq  .  It's represented as a sequence of identifiers,\nalong with a bunch of supporting information."],[12,"span","","",13],[12,"global","","A `::foo` path, is relative to the crate root rather than current\nmodule (like paths in an import).",13],[12,"segments","","The segments in the path: the things separated by `::`.",13],[3,"PathSegment","","A segment of a path: an identifier, an optional lifetime, and a set of\ntypes."],[12,"identifier","","The identifier portion of this path segment.",14],[12,"parameters","","Type/lifetime parameters attached to this path. They come in\ntwo flavors: `Path<A,B,C>` and `Path(A,B) -> C`. Note that\nthis is more than just simple syntactic sugar; the use of\nparens affects the region binding rules, so we preserve the\ndistinction.",14],[3,"AngleBracketedParameterData","","A path like `Foo<'a, T>`"],[12,"lifetimes","","The lifetime parameters for this path segment.",15],[12,"types","","The type parameters for this path segment, if present.",15],[12,"bindings","","Bindings (equality constraints) on associated types, if present.\nE.g., `Foo<A=Bar>`.",15],[3,"ParenthesizedParameterData","","A path like `Foo(A,B) -> C`"],[12,"span","","Overall span",16],[12,"inputs","","`(A,B)`",16],[12,"output","","`C`",16],[3,"DefId","",""],[12,"krate","","",17],[12,"node","","",17],[3,"TyParam","",""],[12,"ident","","",18],[12,"id","","",18],[12,"bounds","","",18],[12,"default","","",18],[12,"span","","",18],[3,"Generics","","Represents lifetimes and type parameters attached to a declaration\nof a function, enum, trait, etc."],[12,"lifetimes","","",19],[12,"ty_params","","",19],[12,"where_clause","","",19],[3,"WhereClause","",""],[12,"id","","",20],[12,"predicates","","",20],[3,"WhereBoundPredicate","",""],[12,"span","","",21],[12,"bound_lifetimes","","",21],[12,"bounded_ty","","",21],[12,"bounds","","",21],[3,"WhereRegionPredicate","",""],[12,"span","","",22],[12,"lifetime","","",22],[12,"bounds","","",22],[3,"WhereEqPredicate","",""],[12,"id","","",23],[12,"span","","",23],[12,"path","","",23],[12,"ty","","",23],[3,"Crate","",""],[12,"module","","",24],[12,"attrs","","",24],[12,"config","","",24],[12,"span","","",24],[12,"exported_macros","","",24],[3,"Block","",""],[12,"stmts","","",25],[12,"expr","","",25],[12,"id","","",25],[12,"rules","","",25],[12,"span","","",25],[3,"Pat","",""],[12,"id","","",26],[12,"node","","",26],[12,"span","","",26],[3,"FieldPat","",""],[12,"ident","","",27],[12,"pat","","",27],[12,"is_shorthand","","",27],[3,"Local","","Local represents a `let` statement, e.g., `let <pat>:<ty> = <expr>;`"],[12,"pat","","",28],[12,"ty","","",28],[12,"init","","",28],[12,"id","","",28],[12,"span","","",28],[12,"source","","",28],[3,"Arm","","represents one arm of a 'match'"],[12,"attrs","","",29],[12,"pats","","",29],[12,"guard","","",29],[12,"body","","",29],[3,"Field","",""],[12,"ident","","",30],[12,"expr","","",30],[12,"span","","",30],[3,"Expr","",""],[12,"id","","",31],[12,"node","","",31],[12,"span","","",31],[3,"QSelf","","The explicit Self type in a \"qualified path\". The actual\npath, including the trait and the associated item, is stored\nsepparately. `position` represents the index of the associated\nitem qualified with this Self type."],[12,"ty","","",32],[12,"position","","",32],[3,"Delimited","","A delimited sequence of token trees"],[12,"delim","","The type of delimiter",33],[12,"open_span","","The span covering the opening delimiter",33],[12,"tts","","The delimited sequence of token trees",33],[12,"close_span","","The span covering the closing delimiter",33],[3,"SequenceRepetition","","A sequence of token treesee"],[12,"tts","","The sequence of token trees",34],[12,"separator","","The optional separator",34],[12,"op","","Whether the sequence can be repeated zero (*), or one or more times (+)",34],[12,"num_captures","","The number of `MatchNt`s that appear in the sequence (and subsequences)",34],[3,"MutTy","",""],[12,"ty","","",35],[12,"mutbl","","",35],[3,"TypeField","",""],[12,"ident","","",36],[12,"mt","","",36],[12,"span","","",36],[3,"TypeMethod","","Represents a required method in a trait declaration,\none without a default implementation"],[12,"ident","","",37],[12,"attrs","","",37],[12,"unsafety","","",37],[12,"abi","","",37],[12,"decl","","",37],[12,"generics","","",37],[12,"explicit_self","","",37],[12,"id","","",37],[12,"span","","",37],[12,"vis","","",37],[3,"AssociatedType","",""],[12,"attrs","","",38],[12,"ty_param","","",38],[3,"Typedef","",""],[12,"id","","",39],[12,"span","","",39],[12,"ident","","",39],[12,"vis","","",39],[12,"attrs","","",39],[12,"typ","","",39],[3,"TypeBinding","",""],[12,"id","","",40],[12,"ident","","",40],[12,"ty","","",40],[12,"span","","",40],[3,"Ty","",""],[12,"id","","",41],[12,"node","","",41],[12,"span","","",41],[3,"BareFnTy","",""],[12,"unsafety","","",42],[12,"abi","","",42],[12,"lifetimes","","",42],[12,"decl","","",42],[3,"InlineAsm","",""],[12,"asm","","",43],[12,"asm_str_style","","",43],[12,"outputs","","",43],[12,"inputs","","",43],[12,"clobbers","","",43],[12,"volatile","","",43],[12,"alignstack","","",43],[12,"dialect","","",43],[12,"expn_id","","",43],[3,"Arg","","represents an argument in a function header"],[12,"ty","","",44],[12,"pat","","",44],[12,"id","","",44],[3,"FnDecl","","represents the header (not the body) of a function declaration"],[12,"inputs","","",45],[12,"output","","",45],[12,"variadic","","",45],[3,"Method","",""],[12,"attrs","","",46],[12,"id","","",46],[12,"span","","",46],[12,"node","","",46],[3,"Mod","",""],[12,"inner","","A span from the first token past `{` to the last token until `}`.\nFor `mod foo;`, the inner span ranges from the first token\nto the last token in the external file.",47],[12,"items","","",47],[3,"ForeignMod","",""],[12,"abi","","",48],[12,"items","","",48],[3,"VariantArg","",""],[12,"ty","","",49],[12,"id","","",49],[3,"EnumDef","",""],[12,"variants","","",50],[3,"Variant_","",""],[12,"name","","",51],[12,"attrs","","",51],[12,"kind","","",51],[12,"id","","",51],[12,"disr_expr","","",51],[12,"vis","","",51],[3,"AttrId","",""],[3,"Attribute_","","Doc-comments are promoted to attributes that have is_sugared_doc = true"],[12,"id","","",52],[12,"style","","",52],[12,"value","","",52],[12,"is_sugared_doc","","",52],[3,"TraitRef","","TraitRef's appear in impls.\nresolve maps each TraitRef's ref_id to its defining trait; that's all\nthat the ref_id is for. The impl_id maps to the \"self type\" of this impl.\nIf this impl is an ItemImpl, the impl_id is redundant (it could be the\nsame as the impl's node id)."],[12,"path","","",53],[12,"ref_id","","",53],[3,"PolyTraitRef","",""],[12,"bound_lifetimes","","The `'a` in `<'a> Foo<&'a T>`",54],[12,"trait_ref","","The `Foo<&'a T>` in `<'a> Foo<&'a T>`",54],[12,"span","","",54],[3,"StructField_","",""],[12,"kind","","",55],[12,"id","","",55],[12,"ty","","",55],[12,"attrs","","",55],[3,"StructDef","",""],[12,"fields","","Fields, not including ctor",56],[12,"ctor_id","","ID of the constructor. This is only used for tuple- or enum-like\nstructs.",56],[3,"Item","",""],[12,"ident","","",57],[12,"attrs","","",57],[12,"id","","",57],[12,"node","","",57],[12,"vis","","",57],[12,"span","","",57],[3,"ForeignItem","",""],[12,"ident","","",58],[12,"attrs","","",58],[12,"node","","",58],[12,"id","","",58],[12,"span","","",58],[12,"vis","","",58],[3,"MacroDef","","A macro definition, in this crate or imported from another."],[12,"ident","","",59],[12,"attrs","","",59],[12,"id","","",59],[12,"span","","",59],[12,"imported_from","","",59],[12,"export","","",59],[12,"use_locally","","",59],[12,"allow_internal_unstable","","",59],[12,"body","","",59],[4,"PathParameters","",""],[13,"AngleBracketedParameters","","",60],[13,"ParenthesizedParameters","","",60],[4,"TyParamBound","","The AST represents all type param bounds as types.\ntypeck::collect::compute_bounds matches these against\nthe \"special\" built-in traits (see middle::lang_items) and\ndetects Copy, Send and Sync."],[13,"TraitTyParamBound","","",61],[13,"RegionTyParamBound","","",61],[4,"TraitBoundModifier","","A modifier on a bound, currently this is only used for `?Sized`, where the\nmodifier is `Maybe`. Negative bounds should also be handled here."],[13,"None","","",62],[13,"Maybe","","",62],[4,"WherePredicate","",""],[13,"BoundPredicate","","",63],[13,"RegionPredicate","","",63],[13,"EqPredicate","","",63],[4,"MetaItem_","",""],[13,"MetaWord","","",64],[13,"MetaList","","",64],[13,"MetaNameValue","","",64],[4,"BindingMode","",""],[13,"BindByRef","","",65],[13,"BindByValue","","",65],[4,"PatWildKind","",""],[13,"PatWildSingle","","Represents the wildcard pattern `_`",66],[13,"PatWildMulti","","Represents the wildcard pattern `..`",66],[4,"Pat_","",""],[13,"PatWild","","Represents a wildcard pattern (either `_` or `..`)",67],[13,"PatIdent","","A PatIdent may either be a new bound variable,\nor a nullary enum (in which case the third field\nis None).\nIn the nullary enum case, the parser can't determine\nwhich it is. The resolver determines this, and\nrecords this pattern's NodeId in an auxiliary\nset (of \"PatIdents that refer to nullary enums\")",67],[13,"PatEnum","","\"None\" means a * pattern where we don't bind the fields to names.",67],[13,"PatStruct","","",67],[13,"PatTup","","",67],[13,"PatBox","","",67],[13,"PatRegion","","",67],[13,"PatLit","","",67],[13,"PatRange","","",67],[13,"PatVec","","[a, b, ..i, y, z] is represented as:\nPatVec(box [a, b], Some(i), box [y, z])",67],[13,"PatMac","","",67],[4,"Mutability","",""],[13,"MutMutable","","",68],[13,"MutImmutable","","",68],[4,"BinOp_","",""],[13,"BiAdd","","",69],[13,"BiSub","","",69],[13,"BiMul","","",69],[13,"BiDiv","","",69],[13,"BiRem","","",69],[13,"BiAnd","","",69],[13,"BiOr","","",69],[13,"BiBitXor","","",69],[13,"BiBitAnd","","",69],[13,"BiBitOr","","",69],[13,"BiShl","","",69],[13,"BiShr","","",69],[13,"BiEq","","",69],[13,"BiLt","","",69],[13,"BiLe","","",69],[13,"BiNe","","",69],[13,"BiGe","","",69],[13,"BiGt","","",69],[4,"UnOp","",""],[13,"UnUniq","","",70],[13,"UnDeref","","",70],[13,"UnNot","","",70],[13,"UnNeg","","",70],[4,"Stmt_","",""],[13,"StmtDecl","","Could be an item or a local (let) binding:",71],[13,"StmtExpr","","Expr without trailing semi-colon (must have unit type):",71],[13,"StmtSemi","","Expr with trailing semi-colon (may have any type):",71],[13,"StmtMac","","",71],[4,"MacStmtStyle","",""],[13,"MacStmtWithSemicolon","","The macro statement had a trailing semicolon, e.g. `foo! { ... };`\n`foo!(...);`, `foo![...];`",72],[13,"MacStmtWithBraces","","The macro statement had braces; e.g. foo! { ... }",72],[13,"MacStmtWithoutBraces","","The macro statement had parentheses or brackets and no semicolon; e.g.\n`foo!(...)`. All of these will end up being converted into macro\nexpressions.",72],[4,"LocalSource","","Where a local declaration came from: either a true `let ... =\n...;`, or one desugared from the pattern of a for loop."],[13,"LocalLet","","",73],[13,"LocalFor","","",73],[4,"Decl_","",""],[13,"DeclLocal","","A local (let) binding:",74],[13,"DeclItem","","An item binding:",74],[4,"BlockCheckMode","",""],[13,"DefaultBlock","","",75],[13,"UnsafeBlock","","",75],[4,"UnsafeSource","",""],[13,"CompilerGenerated","","",76],[13,"UserProvided","","",76],[4,"Expr_","",""],[13,"ExprBox","","First expr is the place; second expr is the value.",77],[13,"ExprVec","","",77],[13,"ExprCall","","",77],[13,"ExprMethodCall","","",77],[13,"ExprTup","","",77],[13,"ExprBinary","","",77],[13,"ExprUnary","","",77],[13,"ExprLit","","",77],[13,"ExprCast","","",77],[13,"ExprIf","","",77],[13,"ExprIfLet","","",77],[13,"ExprWhile","","",77],[13,"ExprWhileLet","","",77],[13,"ExprForLoop","","",77],[13,"ExprLoop","","",77],[13,"ExprMatch","","",77],[13,"ExprClosure","","",77],[13,"ExprBlock","","",77],[13,"ExprAssign","","",77],[13,"ExprAssignOp","","",77],[13,"ExprField","","",77],[13,"ExprTupField","","",77],[13,"ExprIndex","","",77],[13,"ExprRange","","",77],[13,"ExprPath","","Variable reference, possibly containing `::` and/or type\nparameters, e.g. foo::bar::<baz>. Optionally \"qualified\",\ne.g. `<Vec<T> as SomeTrait>::SomeType`.",77],[13,"ExprAddrOf","","",77],[13,"ExprBreak","","",77],[13,"ExprAgain","","",77],[13,"ExprRet","","",77],[13,"ExprInlineAsm","","",77],[13,"ExprMac","","",77],[13,"ExprStruct","","A struct literal expression.",77],[13,"ExprRepeat","","A vector literal constructed from one repeated element.",77],[13,"ExprParen","","No-op: used solely so we can pretty-print faithfully",77],[4,"MatchSource","",""],[13,"Normal","","",78],[13,"IfLetDesugar","","",78],[12,"contains_else_clause","syntax::ast::MatchSource","",78],[13,"WhileLetDesugar","syntax::ast","",78],[13,"ForLoopDesugar","","",78],[4,"CaptureClause","",""],[13,"CaptureByValue","","",79],[13,"CaptureByRef","","",79],[4,"KleeneOp","","A Kleene-style [repetition operator](http://en.wikipedia.org/wiki/Kleene_star)\nfor token sequences."],[13,"ZeroOrMore","","",80],[13,"OneOrMore","","",80],[4,"TokenTree","","When the main rust parser encounters a syntax-extension invocation, it\n parses the arguments to the invocation as a token-tree. This is a very\n loose structure, such that all sorts of different AST-fragments can\n be passed to syntax extensions using a uniform type."],[13,"TtToken","","A single token",81],[13,"TtDelimited","","A delimited sequence of token trees",81],[13,"TtSequence","","A kleene-style repetition sequence with a span",81],[4,"Mac_","","Represents a macro invocation. The Path indicates which macro\nis being invoked, and the vector of token-trees contains the source\nof the macro invocation.\nThere's only one flavor, now, so this could presumably be simplified."],[13,"MacInvocTT","","",82],[4,"StrStyle","",""],[13,"CookedStr","","",83],[13,"RawStr","","",83],[4,"Sign","",""],[13,"Minus","","",84],[13,"Plus","","",84],[4,"LitIntType","",""],[13,"SignedIntLit","","",85],[13,"UnsignedIntLit","","",85],[13,"UnsuffixedIntLit","","",85],[4,"Lit_","",""],[13,"LitStr","","",86],[13,"LitBinary","","",86],[13,"LitByte","","",86],[13,"LitChar","","",86],[13,"LitInt","","",86],[13,"LitFloat","","",86],[13,"LitFloatUnsuffixed","","",86],[13,"LitBool","","",86],[4,"TraitItem","","Represents a method declaration in a trait declaration, possibly including\na default implementation A trait method is either required (meaning it\ndoesn't have an implementation, just a signature) or provided (meaning it\nhas a default implementation)."],[13,"RequiredMethod","","",87],[13,"ProvidedMethod","","",87],[13,"TypeTraitItem","","",87],[4,"ImplItem","",""],[13,"MethodImplItem","","",88],[13,"TypeImplItem","","",88],[4,"IntTy","",""],[13,"TyIs","","",89],[13,"TyI8","","",89],[13,"TyI16","","",89],[13,"TyI32","","",89],[13,"TyI64","","",89],[4,"UintTy","",""],[13,"TyUs","","",90],[13,"TyU8","","",90],[13,"TyU16","","",90],[13,"TyU32","","",90],[13,"TyU64","","",90],[4,"FloatTy","",""],[13,"TyF32","","",91],[13,"TyF64","","",91],[4,"PrimTy","","Not represented directly in the AST, referred to by name through a ty_path."],[13,"TyInt","","",92],[13,"TyUint","","",92],[13,"TyFloat","","",92],[13,"TyStr","","",92],[13,"TyBool","","",92],[13,"TyChar","","",92],[4,"Ty_","","The different kinds of types recognized by the compiler"],[13,"TyVec","","",93],[13,"TyFixedLengthVec","","A fixed length array (`[T; n]`)",93],[13,"TyPtr","","A raw pointer (`*const T` or `*mut T`)",93],[13,"TyRptr","","A reference (`&'a T` or `&'a mut T`)",93],[13,"TyBareFn","","A bare function (e.g. `fn(usize) -> bool`)",93],[13,"TyTup","","A tuple (`(A, B, C, D,...)`)",93],[13,"TyPath","","A path (`module::module::...::Type`), optionally\n\"qualified\", e.g. `<Vec<T> as SomeTrait>::SomeType`.",93],[13,"TyObjectSum","","Something like `A+B`. Note that `B` must always be a path.",93],[13,"TyPolyTraitRef","","A type like `for<'a> Foo<&'a Bar>`",93],[13,"TyParen","","No-op; kept solely so that we can pretty-print faithfully",93],[13,"TyTypeof","","Unused for now",93],[13,"TyInfer","","TyInfer means the type should be inferred instead of it having been\nspecified. This can appear anywhere in a type.",93],[4,"AsmDialect","",""],[13,"AsmAtt","","",94],[13,"AsmIntel","","",94],[4,"Unsafety","",""],[13,"Unsafe","","",95],[13,"Normal","","",95],[4,"ImplPolarity","",""],[13,"Positive","","impl Trait for Type",96],[13,"Negative","","impl !Trait for Type",96],[4,"FunctionRetTy","",""],[13,"NoReturn","","Functions with return type ! that always\nraise an error or exit (i.e. never return to the caller)",97],[13,"DefaultReturn","","Return type is not specified. Functions default to () and\nclosures default to inference. Span points to where return\ntype would be inserted.",97],[13,"Return","","Everything else",97],[4,"ExplicitSelf_","","Represents the kind of 'self' associated with a method"],[13,"SelfStatic","","No self",98],[13,"SelfValue","","`self`",98],[13,"SelfRegion","","`&'lt self`, `&'lt mut self`",98],[13,"SelfExplicit","","`self: TYPE`",98],[4,"Method_","",""],[13,"MethDecl","","Represents a method declaration",99],[13,"MethMac","","Represents a macro in method position",99],[4,"VariantKind","",""],[13,"TupleVariantKind","","",100],[13,"StructVariantKind","","",100],[4,"PathListItem_","",""],[13,"PathListIdent","","",101],[12,"name","syntax::ast::PathListItem_","",101],[12,"id","","",101],[13,"PathListMod","syntax::ast","",101],[12,"id","syntax::ast::PathListItem_","",101],[4,"ViewPath_","syntax::ast",""],[13,"ViewPathSimple","","`foo::bar::baz as quux`",102],[13,"ViewPathGlob","","`foo::bar::*`",102],[13,"ViewPathList","","`foo::bar::{a,b,c}`",102],[4,"AttrStyle","","Distinguishes between Attributes that decorate items and Attributes that\nare contained as statements within items. These two cases need to be\ndistinguished for pretty-printing."],[13,"AttrOuter","","",103],[13,"AttrInner","","",103],[4,"Visibility","",""],[13,"Public","","",104],[13,"Inherited","","",104],[4,"StructFieldKind","",""],[13,"NamedField","","",105],[13,"UnnamedField","","Element of a tuple-like struct",105],[4,"Item_","",""],[13,"ItemExternCrate","","",106],[13,"ItemUse","","",106],[13,"ItemStatic","","",106],[13,"ItemConst","","",106],[13,"ItemFn","","",106],[13,"ItemMod","","",106],[13,"ItemForeignMod","","",106],[13,"ItemTy","","",106],[13,"ItemEnum","","",106],[13,"ItemStruct","","",106],[13,"ItemTrait","","Represents a Trait Declaration",106],[13,"ItemDefaultImpl","","",106],[13,"ItemImpl","","",106],[13,"ItemMac","","A macro invocation (which includes macro definition)",106],[4,"ForeignItem_","",""],[13,"ForeignItemFn","","",107],[13,"ForeignItemStatic","","",107],[4,"InlinedItem","","The data we save and restore about an inlined item or method.  This is not\npart of the AST that we parse from a file, but it becomes part of the tree\nthat we trans."],[13,"IIItem","","",108],[13,"IITraitItem","","",108],[13,"IIImplItem","","",108],[13,"IIForeign","","",108],[6,"SyntaxContext","","A SyntaxContext represents a chain of macro-expandings\nand renamings. Each macro expansion corresponds to\na fresh usize"],[6,"Mrk","","A mark represents a unique id associated with a macro expansion"],[6,"FnIdent","","Function name (not all functions have names)"],[6,"CrateNum","",""],[6,"NodeId","",""],[6,"TyParamBounds","",""],[6,"CrateConfig","","The set of MetaItems that define the compilation environment of the crate,\nused to drive conditional compilation"],[6,"MetaItem","",""],[6,"BinOp","",""],[6,"Stmt","",""],[6,"Decl","",""],[6,"SpannedIdent","",""],[6,"Mac","",""],[6,"Lit","",""],[6,"ExplicitSelf","",""],[6,"Variant","",""],[6,"PathListItem","",""],[6,"ViewPath","",""],[6,"Attribute","","Meta-data associated with an item"],[6,"StructField","",""],[17,"EMPTY_CTXT","",""],[17,"ILLEGAL_CTXT","",""],[17,"LOCAL_CRATE","","Item definitions in the currently-compiled crate would have the CrateNum\nLOCAL_CRATE in their DefId."],[17,"CRATE_NODE_ID","",""],[17,"DUMMY_NODE_ID","","When parsing and doing expansions, we initially give all AST nodes this AST\nnode value. Then later, in the renumber pass, we renumber them to have\nsmall, positive ids."],[11,"cmp","","",10],[11,"partial_cmp","","",10],[11,"lt","","",10],[11,"le","","",10],[11,"gt","","",10],[11,"ge","","",10],[11,"hash","","",10],[11,"clone","","",10],[11,"new","","Construct an identifier with the given name and an empty context:",10],[11,"as_str","","",10],[11,"encode_with_hygiene","","",10],[11,"fmt","","",10],[11,"fmt","","",10],[11,"fmt","","",109],[11,"fmt","","",109],[11,"eq","","",10],[11,"ne","","",10],[11,"clone","","",109],[11,"decode","","",109],[11,"encode","","",109],[11,"hash","","",109],[11,"partial_cmp","","",109],[11,"lt","","",109],[11,"le","","",109],[11,"gt","","",109],[11,"ge","","",109],[11,"eq","","",109],[11,"ne","","",109],[11,"cmp","","",109],[11,"as_str","","",109],[11,"usize","","",109],[11,"ident","","",109],[11,"encode","","",10],[11,"decode","","",10],[11,"fmt","","",11],[11,"hash","","",11],[11,"decode","","",11],[11,"encode","","",11],[11,"eq","","",11],[11,"ne","","",11],[11,"clone","","",11],[11,"fmt","","",12],[11,"hash","","",12],[11,"decode","","",12],[11,"encode","","",12],[11,"eq","","",12],[11,"ne","","",12],[11,"clone","","",12],[11,"fmt","","",13],[11,"hash","","",13],[11,"decode","","",13],[11,"encode","","",13],[11,"eq","","",13],[11,"ne","","",13],[11,"clone","","",13],[11,"fmt","","",14],[11,"hash","","",14],[11,"decode","","",14],[11,"encode","","",14],[11,"eq","","",14],[11,"ne","","",14],[11,"clone","","",14],[11,"fmt","","",60],[11,"hash","","",60],[11,"decode","","",60],[11,"encode","","",60],[11,"eq","","",60],[11,"ne","","",60],[11,"clone","","",60],[11,"none","","",60],[11,"is_empty","","",60],[11,"has_lifetimes","","",60],[11,"has_types","","",60],[11,"types","","Returns the types that the user wrote. Note that these do not necessarily map to the type\nparameters in the parenthesized case.",60],[11,"lifetimes","","",60],[11,"bindings","","",60],[11,"fmt","","",15],[11,"hash","","",15],[11,"decode","","",15],[11,"encode","","",15],[11,"eq","","",15],[11,"ne","","",15],[11,"clone","","",15],[11,"fmt","","",16],[11,"hash","","",16],[11,"decode","","",16],[11,"encode","","",16],[11,"eq","","",16],[11,"ne","","",16],[11,"clone","","",16],[11,"fmt","","",17],[11,"hash","","",17],[11,"decode","","",17],[11,"encode","","",17],[11,"eq","","",17],[11,"ne","","",17],[11,"partial_cmp","","",17],[11,"lt","","",17],[11,"le","","",17],[11,"gt","","",17],[11,"ge","","",17],[11,"cmp","","",17],[11,"clone","","",17],[11,"local_id","","Read the node id, asserting that this def-id is krate-local.",17],[11,"fmt","","",61],[11,"hash","","",61],[11,"decode","","",61],[11,"encode","","",61],[11,"eq","","",61],[11,"ne","","",61],[11,"clone","","",61],[11,"fmt","","",62],[11,"hash","","",62],[11,"decode","","",62],[11,"encode","","",62],[11,"eq","","",62],[11,"ne","","",62],[11,"clone","","",62],[11,"fmt","","",18],[11,"hash","","",18],[11,"decode","","",18],[11,"encode","","",18],[11,"eq","","",18],[11,"ne","","",18],[11,"clone","","",18],[11,"fmt","","",19],[11,"hash","","",19],[11,"decode","","",19],[11,"encode","","",19],[11,"eq","","",19],[11,"ne","","",19],[11,"clone","","",19],[11,"is_parameterized","","",19],[11,"is_lt_parameterized","","",19],[11,"is_type_parameterized","","",19],[11,"fmt","","",20],[11,"hash","","",20],[11,"decode","","",20],[11,"encode","","",20],[11,"eq","","",20],[11,"ne","","",20],[11,"clone","","",20],[11,"fmt","","",63],[11,"hash","","",63],[11,"decode","","",63],[11,"encode","","",63],[11,"eq","","",63],[11,"ne","","",63],[11,"clone","","",63],[11,"fmt","","",21],[11,"hash","","",21],[11,"decode","","",21],[11,"encode","","",21],[11,"eq","","",21],[11,"ne","","",21],[11,"clone","","",21],[11,"fmt","","",22],[11,"hash","","",22],[11,"decode","","",22],[11,"encode","","",22],[11,"eq","","",22],[11,"ne","","",22],[11,"clone","","",22],[11,"fmt","","",23],[11,"hash","","",23],[11,"decode","","",23],[11,"encode","","",23],[11,"eq","","",23],[11,"ne","","",23],[11,"clone","","",23],[11,"fmt","","",24],[11,"hash","","",24],[11,"decode","","",24],[11,"encode","","",24],[11,"eq","","",24],[11,"ne","","",24],[11,"clone","","",24],[11,"fmt","","",64],[11,"hash","","",64],[11,"decode","","",64],[11,"encode","","",64],[11,"clone","","",64],[11,"eq","","",64],[11,"fmt","","",25],[11,"hash","","",25],[11,"decode","","",25],[11,"encode","","",25],[11,"eq","","",25],[11,"ne","","",25],[11,"clone","","",25],[11,"fmt","","",26],[11,"hash","","",26],[11,"decode","","",26],[11,"encode","","",26],[11,"eq","","",26],[11,"ne","","",26],[11,"clone","","",26],[11,"fmt","","",27],[11,"hash","","",27],[11,"decode","","",27],[11,"encode","","",27],[11,"eq","","",27],[11,"ne","","",27],[11,"clone","","",27],[11,"fmt","","",65],[11,"hash","","",65],[11,"decode","","",65],[11,"encode","","",65],[11,"eq","","",65],[11,"ne","","",65],[11,"clone","","",65],[11,"fmt","","",66],[11,"hash","","",66],[11,"decode","","",66],[11,"encode","","",66],[11,"eq","","",66],[11,"ne","","",66],[11,"clone","","",66],[11,"fmt","","",67],[11,"hash","","",67],[11,"decode","","",67],[11,"encode","","",67],[11,"eq","","",67],[11,"ne","","",67],[11,"clone","","",67],[11,"fmt","","",68],[11,"hash","","",68],[11,"decode","","",68],[11,"encode","","",68],[11,"eq","","",68],[11,"ne","","",68],[11,"clone","","",68],[11,"fmt","","",69],[11,"hash","","",69],[11,"decode","","",69],[11,"encode","","",69],[11,"eq","","",69],[11,"ne","","",69],[11,"clone","","",69],[11,"fmt","","",70],[11,"hash","","",70],[11,"decode","","",70],[11,"encode","","",70],[11,"eq","","",70],[11,"ne","","",70],[11,"clone","","",70],[11,"fmt","","",71],[11,"hash","","",71],[11,"decode","","",71],[11,"encode","","",71],[11,"eq","","",71],[11,"ne","","",71],[11,"clone","","",71],[11,"fmt","","",72],[11,"hash","","",72],[11,"decode","","",72],[11,"encode","","",72],[11,"eq","","",72],[11,"ne","","",72],[11,"clone","","",72],[11,"fmt","","",73],[11,"hash","","",73],[11,"decode","","",73],[11,"encode","","",73],[11,"eq","","",73],[11,"ne","","",73],[11,"clone","","",73],[11,"fmt","","",28],[11,"hash","","",28],[11,"decode","","",28],[11,"encode","","",28],[11,"eq","","",28],[11,"ne","","",28],[11,"clone","","",28],[11,"fmt","","",74],[11,"hash","","",74],[11,"decode","","",74],[11,"encode","","",74],[11,"eq","","",74],[11,"ne","","",74],[11,"clone","","",74],[11,"fmt","","",29],[11,"hash","","",29],[11,"decode","","",29],[11,"encode","","",29],[11,"eq","","",29],[11,"ne","","",29],[11,"clone","","",29],[11,"fmt","","",30],[11,"hash","","",30],[11,"decode","","",30],[11,"encode","","",30],[11,"eq","","",30],[11,"ne","","",30],[11,"clone","","",30],[11,"fmt","","",75],[11,"hash","","",75],[11,"decode","","",75],[11,"encode","","",75],[11,"eq","","",75],[11,"ne","","",75],[11,"clone","","",75],[11,"fmt","","",76],[11,"hash","","",76],[11,"decode","","",76],[11,"encode","","",76],[11,"eq","","",76],[11,"ne","","",76],[11,"clone","","",76],[11,"fmt","","",31],[11,"hash","","",31],[11,"decode","","",31],[11,"encode","","",31],[11,"eq","","",31],[11,"ne","","",31],[11,"clone","","",31],[11,"fmt","","",77],[11,"hash","","",77],[11,"decode","","",77],[11,"encode","","",77],[11,"eq","","",77],[11,"ne","","",77],[11,"clone","","",77],[11,"fmt","","",32],[11,"hash","","",32],[11,"decode","","",32],[11,"encode","","",32],[11,"eq","","",32],[11,"ne","","",32],[11,"clone","","",32],[11,"fmt","","",78],[11,"hash","","",78],[11,"decode","","",78],[11,"encode","","",78],[11,"eq","","",78],[11,"ne","","",78],[11,"clone","","",78],[11,"fmt","","",79],[11,"hash","","",79],[11,"decode","","",79],[11,"encode","","",79],[11,"eq","","",79],[11,"ne","","",79],[11,"clone","","",79],[11,"fmt","","",33],[11,"hash","","",33],[11,"decode","","",33],[11,"encode","","",33],[11,"eq","","",33],[11,"ne","","",33],[11,"clone","","",33],[11,"open_token","","Returns the opening delimiter as a token.",33],[11,"close_token","","Returns the closing delimiter as a token.",33],[11,"open_tt","","Returns the opening delimiter as a token tree.",33],[11,"close_tt","","Returns the closing delimiter as a token tree.",33],[11,"fmt","","",34],[11,"hash","","",34],[11,"decode","","",34],[11,"encode","","",34],[11,"eq","","",34],[11,"ne","","",34],[11,"clone","","",34],[11,"fmt","","",80],[11,"hash","","",80],[11,"decode","","",80],[11,"encode","","",80],[11,"eq","","",80],[11,"ne","","",80],[11,"clone","","",80],[11,"fmt","","",81],[11,"hash","","",81],[11,"decode","","",81],[11,"encode","","",81],[11,"eq","","",81],[11,"ne","","",81],[11,"clone","","",81],[11,"len","","",81],[11,"get_tt","","",81],[11,"get_span","","Returns the `Span` corresponding to this token tree.",81],[11,"parse","","Use this token tree as a matcher to parse given tts.",81],[11,"fmt","","",82],[11,"hash","","",82],[11,"decode","","",82],[11,"encode","","",82],[11,"eq","","",82],[11,"ne","","",82],[11,"clone","","",82],[11,"fmt","","",83],[11,"hash","","",83],[11,"decode","","",83],[11,"encode","","",83],[11,"eq","","",83],[11,"ne","","",83],[11,"clone","","",83],[11,"fmt","","",84],[11,"hash","","",84],[11,"decode","","",84],[11,"encode","","",84],[11,"eq","","",84],[11,"ne","","",84],[11,"clone","","",84],[11,"new","","",84],[11,"fmt","","",85],[11,"hash","","",85],[11,"decode","","",85],[11,"encode","","",85],[11,"eq","","",85],[11,"ne","","",85],[11,"clone","","",85],[11,"suffix_len","","",85],[11,"fmt","","",86],[11,"hash","","",86],[11,"decode","","",86],[11,"encode","","",86],[11,"eq","","",86],[11,"ne","","",86],[11,"clone","","",86],[11,"fmt","","",35],[11,"hash","","",35],[11,"decode","","",35],[11,"encode","","",35],[11,"eq","","",35],[11,"ne","","",35],[11,"clone","","",35],[11,"fmt","","",36],[11,"hash","","",36],[11,"decode","","",36],[11,"encode","","",36],[11,"eq","","",36],[11,"ne","","",36],[11,"clone","","",36],[11,"fmt","","",37],[11,"hash","","",37],[11,"decode","","",37],[11,"encode","","",37],[11,"eq","","",37],[11,"ne","","",37],[11,"clone","","",37],[11,"fmt","","",87],[11,"hash","","",87],[11,"decode","","",87],[11,"encode","","",87],[11,"eq","","",87],[11,"ne","","",87],[11,"clone","","",87],[11,"fmt","","",88],[11,"hash","","",88],[11,"decode","","",88],[11,"encode","","",88],[11,"eq","","",88],[11,"ne","","",88],[11,"clone","","",88],[11,"fmt","","",38],[11,"hash","","",38],[11,"decode","","",38],[11,"encode","","",38],[11,"eq","","",38],[11,"ne","","",38],[11,"clone","","",38],[11,"fmt","","",39],[11,"hash","","",39],[11,"decode","","",39],[11,"encode","","",39],[11,"eq","","",39],[11,"ne","","",39],[11,"clone","","",39],[11,"hash","","",89],[11,"decode","","",89],[11,"encode","","",89],[11,"clone","","",89],[11,"eq","","",89],[11,"fmt","","",89],[11,"fmt","","",89],[11,"suffix_len","","",89],[11,"hash","","",90],[11,"decode","","",90],[11,"encode","","",90],[11,"clone","","",90],[11,"eq","","",90],[11,"suffix_len","","",90],[11,"fmt","","",90],[11,"fmt","","",90],[11,"hash","","",91],[11,"decode","","",91],[11,"encode","","",91],[11,"eq","","",91],[11,"ne","","",91],[11,"clone","","",91],[11,"fmt","","",91],[11,"fmt","","",91],[11,"suffix_len","","",91],[11,"fmt","","",40],[11,"hash","","",40],[11,"decode","","",40],[11,"encode","","",40],[11,"eq","","",40],[11,"ne","","",40],[11,"clone","","",40],[11,"fmt","","",41],[11,"hash","","",41],[11,"decode","","",41],[11,"encode","","",41],[11,"eq","","",41],[11,"ne","","",41],[11,"clone","","",41],[11,"fmt","","",92],[11,"hash","","",92],[11,"decode","","",92],[11,"encode","","",92],[11,"eq","","",92],[11,"ne","","",92],[11,"clone","","",92],[11,"fmt","","",42],[11,"hash","","",42],[11,"decode","","",42],[11,"encode","","",42],[11,"eq","","",42],[11,"ne","","",42],[11,"clone","","",42],[11,"fmt","","",93],[11,"hash","","",93],[11,"decode","","",93],[11,"encode","","",93],[11,"eq","","",93],[11,"ne","","",93],[11,"clone","","",93],[11,"fmt","","",94],[11,"hash","","",94],[11,"decode","","",94],[11,"encode","","",94],[11,"eq","","",94],[11,"ne","","",94],[11,"clone","","",94],[11,"fmt","","",43],[11,"hash","","",43],[11,"decode","","",43],[11,"encode","","",43],[11,"eq","","",43],[11,"ne","","",43],[11,"clone","","",43],[11,"fmt","","",44],[11,"hash","","",44],[11,"decode","","",44],[11,"encode","","",44],[11,"eq","","",44],[11,"ne","","",44],[11,"clone","","",44],[11,"new_self","","",44],[11,"fmt","","",45],[11,"hash","","",45],[11,"decode","","",45],[11,"encode","","",45],[11,"eq","","",45],[11,"ne","","",45],[11,"clone","","",45],[11,"fmt","","",95],[11,"hash","","",95],[11,"decode","","",95],[11,"encode","","",95],[11,"eq","","",95],[11,"ne","","",95],[11,"clone","","",95],[11,"fmt","","",95],[11,"hash","","",96],[11,"decode","","",96],[11,"encode","","",96],[11,"eq","","",96],[11,"ne","","",96],[11,"clone","","",96],[11,"fmt","","",96],[11,"fmt","","",97],[11,"hash","","",97],[11,"decode","","",97],[11,"encode","","",97],[11,"eq","","",97],[11,"ne","","",97],[11,"clone","","",97],[11,"span","","",97],[11,"fmt","","",98],[11,"hash","","",98],[11,"decode","","",98],[11,"encode","","",98],[11,"eq","","",98],[11,"ne","","",98],[11,"clone","","",98],[11,"fmt","","",46],[11,"hash","","",46],[11,"decode","","",46],[11,"encode","","",46],[11,"eq","","",46],[11,"ne","","",46],[11,"clone","","",46],[11,"fmt","","",99],[11,"hash","","",99],[11,"decode","","",99],[11,"encode","","",99],[11,"eq","","",99],[11,"ne","","",99],[11,"clone","","",99],[11,"fmt","","",47],[11,"hash","","",47],[11,"decode","","",47],[11,"encode","","",47],[11,"eq","","",47],[11,"ne","","",47],[11,"clone","","",47],[11,"fmt","","",48],[11,"hash","","",48],[11,"decode","","",48],[11,"encode","","",48],[11,"eq","","",48],[11,"ne","","",48],[11,"clone","","",48],[11,"fmt","","",49],[11,"hash","","",49],[11,"decode","","",49],[11,"encode","","",49],[11,"eq","","",49],[11,"ne","","",49],[11,"clone","","",49],[11,"fmt","","",100],[11,"hash","","",100],[11,"decode","","",100],[11,"encode","","",100],[11,"eq","","",100],[11,"ne","","",100],[11,"clone","","",100],[11,"fmt","","",50],[11,"hash","","",50],[11,"decode","","",50],[11,"encode","","",50],[11,"eq","","",50],[11,"ne","","",50],[11,"clone","","",50],[11,"fmt","","",51],[11,"hash","","",51],[11,"decode","","",51],[11,"encode","","",51],[11,"eq","","",51],[11,"ne","","",51],[11,"clone","","",51],[11,"fmt","","",101],[11,"hash","","",101],[11,"decode","","",101],[11,"encode","","",101],[11,"eq","","",101],[11,"ne","","",101],[11,"clone","","",101],[11,"id","","",101],[11,"fmt","","",102],[11,"hash","","",102],[11,"decode","","",102],[11,"encode","","",102],[11,"eq","","",102],[11,"ne","","",102],[11,"clone","","",102],[11,"fmt","","",103],[11,"hash","","",103],[11,"decode","","",103],[11,"encode","","",103],[11,"eq","","",103],[11,"ne","","",103],[11,"clone","","",103],[11,"fmt","","",110],[11,"hash","","",110],[11,"decode","","",110],[11,"encode","","",110],[11,"eq","","",110],[11,"ne","","",110],[11,"clone","","",110],[11,"fmt","","",52],[11,"hash","","",52],[11,"decode","","",52],[11,"encode","","",52],[11,"eq","","",52],[11,"ne","","",52],[11,"clone","","",52],[11,"fmt","","",53],[11,"hash","","",53],[11,"decode","","",53],[11,"encode","","",53],[11,"eq","","",53],[11,"ne","","",53],[11,"clone","","",53],[11,"fmt","","",54],[11,"hash","","",54],[11,"decode","","",54],[11,"encode","","",54],[11,"eq","","",54],[11,"ne","","",54],[11,"clone","","",54],[11,"fmt","","",104],[11,"hash","","",104],[11,"decode","","",104],[11,"encode","","",104],[11,"eq","","",104],[11,"ne","","",104],[11,"clone","","",104],[11,"inherit_from","","",104],[11,"fmt","","",55],[11,"hash","","",55],[11,"decode","","",55],[11,"encode","","",55],[11,"eq","","",55],[11,"ne","","",55],[11,"clone","","",55],[11,"ident","","",55],[11,"fmt","","",105],[11,"hash","","",105],[11,"decode","","",105],[11,"encode","","",105],[11,"eq","","",105],[11,"ne","","",105],[11,"clone","","",105],[11,"is_unnamed","","",105],[11,"fmt","","",56],[11,"hash","","",56],[11,"decode","","",56],[11,"encode","","",56],[11,"eq","","",56],[11,"ne","","",56],[11,"clone","","",56],[11,"fmt","","",57],[11,"hash","","",57],[11,"decode","","",57],[11,"encode","","",57],[11,"eq","","",57],[11,"ne","","",57],[11,"clone","","",57],[11,"fmt","","",106],[11,"hash","","",106],[11,"decode","","",106],[11,"encode","","",106],[11,"eq","","",106],[11,"ne","","",106],[11,"clone","","",106],[11,"descriptive_variant","","",106],[11,"fmt","","",58],[11,"hash","","",58],[11,"decode","","",58],[11,"encode","","",58],[11,"eq","","",58],[11,"ne","","",58],[11,"clone","","",58],[11,"fmt","","",107],[11,"hash","","",107],[11,"decode","","",107],[11,"encode","","",107],[11,"eq","","",107],[11,"ne","","",107],[11,"clone","","",107],[11,"descriptive_variant","","",107],[11,"fmt","","",108],[11,"hash","","",108],[11,"decode","","",108],[11,"encode","","",108],[11,"eq","","",108],[11,"ne","","",108],[11,"clone","","",108],[11,"fmt","","",59],[11,"hash","","",59],[11,"decode","","",59],[11,"encode","","",59],[11,"eq","","",59],[11,"ne","","",59],[11,"clone","","",59],[0,"ast_map","syntax",""],[3,"Forest","syntax::ast_map","Stores a crate and any number of inlined items from other crates."],[3,"Map","","Represents a mapping from Node IDs to AST elements and their parent\nNode IDs"],[3,"NodesMatchingSuffix","",""],[4,"PathElem","",""],[13,"PathMod","","",111],[13,"PathName","","",111],[4,"Node","",""],[13,"NodeItem","","",112],[13,"NodeForeignItem","","",112],[13,"NodeTraitItem","","",112],[13,"NodeImplItem","","",112],[13,"NodeVariant","","",112],[13,"NodeExpr","","",112],[13,"NodeStmt","","",112],[13,"NodeArg","","",112],[13,"NodeLocal","","",112],[13,"NodePat","","",112],[13,"NodeBlock","","",112],[13,"NodeStructCtor","","NodeStructCtor represents a tuple struct.",112],[13,"NodeLifetime","","",112],[5,"path_to_string","",""],[5,"map_crate","",""],[5,"map_decoded_item","","Used for items loaded from external crate that are being inlined into this\ncrate.  The `path` should be the path to the item but should not include\nthe item itself."],[0,"blocks","","This module provides a simplified abstraction for working with\ncode blocks identified by their integer node-id.  In particular,\nit captures a common set of attributes that all \"function-like\nthings\" (represented by `FnLike` instances) share.  For example,\nall `FnLike` instances have a type signature (be it explicit or\ninferred).  And all `FnLike` instances have a body, i.e. the code\nthat is run when the function-like thing it represents is invoked."],[3,"FnLikeNode","syntax::ast_map::blocks","An FnLikeNode is a Node that is like a fn, in that it has a decl\nand a body (as well as a NodeId, a span, etc)."],[3,"FnParts","","Components shared by fn-like things (fn items, methods, closures)."],[12,"decl","","",113],[12,"body","","",113],[12,"kind","","",113],[12,"span","","",113],[12,"id","","",113],[4,"Code","","Carries either an FnLikeNode or a Block, as these are the two\nconstructs that correspond to \"code\" (as in, something from which\nwe can construct a control-flow graph)."],[13,"FnLikeCode","","",114],[13,"BlockCode","","",114],[8,"MaybeFnLike","","MaybeFnLike wraps a method that indicates if an object\ncorresponds to some FnLikeNode."],[10,"is_fn_like","","",115],[11,"is_fn_like","syntax::ast","",57],[11,"is_fn_like","","",87],[11,"is_fn_like","","",31],[11,"id","syntax::ast_map::blocks","",114],[11,"from_node","","Attempts to construct a Code from presumed FnLike or Block node input.",114],[11,"to_fn_parts","","",116],[11,"body","","",116],[11,"decl","","",116],[11,"span","","",116],[11,"id","","",116],[11,"kind","","",116],[6,"PathElems","syntax::ast_map","The type of the iterator used by with_path."],[8,"FoldOps","",""],[11,"new_id","","",117],[11,"new_def_id","","",117],[11,"new_span","","",117],[8,"NodePrinter","",""],[10,"print_node","","",118],[11,"fmt","","",111],[11,"eq","","",111],[11,"ne","","",111],[11,"clone","","",111],[11,"name","","",111],[11,"fmt","","",111],[11,"fmt","","",112],[11,"new","","",119],[11,"krate","","",119],[11,"krate","","",120],[11,"get","","Retrieve the Node corresponding to `id`, panicking if it cannot\nbe found.",120],[11,"find","","Retrieve the Node corresponding to `id`, returning None if\ncannot be found.",120],[11,"get_parent","","Retrieve the parent NodeId for `id`, or `id` itself if no\nparent is registered in this map.",120],[11,"get_parent_did","","",120],[11,"get_foreign_abi","","",120],[11,"get_foreign_vis","","",120],[11,"expect_item","","",120],[11,"expect_struct","","",120],[11,"expect_variant","","",120],[11,"expect_foreign_item","","",120],[11,"expect_expr","","",120],[11,"get_path_elem","","returns the name associated with the given NodeId's AST",120],[11,"with_path","","",120],[11,"path_to_string","","",120],[11,"attrs","","Given a node ID, get a list of of attributes associated with the AST\ncorresponding to the Node ID",120],[11,"nodes_matching_suffix","","Returns an iterator that yields the node id's with paths that\nmatch `parts`.  (Requires `parts` is non-empty.)",120],[11,"opt_span","","",120],[11,"span","","",120],[11,"def_id_span","","",120],[11,"node_to_string","","",120],[11,"node_to_user_string","","",120],[6,"Item","",""],[11,"next","","",121],[0,"ast_util","syntax",""],[3,"IdRange","syntax::ast_util",""],[12,"min","","",122],[12,"max","","",122],[3,"IdVisitor","","A visitor that applies its operation to all of the node IDs\nin a visitable thing."],[12,"operation","","",123],[12,"pass_through_items","","",123],[12,"visited_outermost","","",123],[5,"path_name_i","",""],[5,"local_def","",""],[5,"is_local","",""],[5,"stmt_id","",""],[5,"binop_to_string","",""],[5,"lazy_binop","",""],[5,"is_shift_binop","",""],[5,"is_comparison_binop","",""],[5,"is_by_value_binop","","Returns `true` if the binary operator takes its arguments by value"],[5,"is_symmetric_binop","","Returns `true` if the binary operator is symmetric in the sense that LHS\nand RHS must have the same type. So the type of LHS can serve as an hint\nfor the type of RHS and vice versa."],[5,"is_by_value_unop","","Returns `true` if the unary operator takes its argument by value"],[5,"unop_to_string","",""],[5,"is_path","",""],[5,"int_ty_to_string","","Get a string representation of a signed int type, with its value.\nWe want to avoid \"45int\" and \"-3int\" in favor of \"45\" and \"-3\""],[5,"int_ty_max","",""],[5,"uint_ty_to_string","","Get a string representation of an unsigned int type, with its value.\nWe want to avoid \"42u\" in favor of \"42us\". \"42uint\" is right out."],[5,"uint_ty_max","",""],[5,"float_ty_to_string","",""],[5,"ident_to_path","",""],[5,"path_to_ident","",""],[5,"ident_to_pat","",""],[5,"name_to_dummy_lifetime","",""],[5,"impl_pretty_name","","Generate a \"pretty\" name for an `impl` from its type and trait.\nThis is designed so that symbols of `impl`'d methods give some\nhint of where they came from, (previously they would all just be\nlisted as `__extensions__::method_name::hash`, with no indication\nof the type)."],[5,"trait_method_to_ty_method","",""],[5,"trait_item_to_ty_method","","extract a TypeMethod from a TraitItem. if the TraitItem is\na default, pull out the useful fields to make a TypeMethod"],[5,"split_trait_methods","",""],[5,"struct_field_visibility","",""],[5,"operator_prec","","Maps a binary operator to its precedence"],[5,"empty_generics","",""],[5,"visit_ids_for_inlined_item","",""],[5,"compute_id_range_for_inlined_item","",""],[5,"compute_id_range_for_fn_body","","Computes the id range for a single fn body, ignoring nested items."],[5,"walk_pat","",""],[5,"struct_def_is_tuple_like","","Returns true if the given struct def is tuple-like; i.e. that its fields\nare unnamed."],[5,"pat_is_ident","","Returns true if the given pattern consists solely of an identifier\nand false otherwise."],[5,"path_name_eq","",""],[5,"segments_name_eq","",""],[5,"lit_is_str","","Returns true if this literal is a string and false otherwise."],[17,"AS_PREC","","Precedence of the `as` operator, which is a binary operator\nnot appearing in the prior table."],[8,"IdVisitingOperation","",""],[10,"visit_id","","",124],[8,"PostExpansionMethod","","Macro invocations are guaranteed not to occur after expansion is complete.\nExtracting fields of a method requires a dynamic check to make sure that it's\nnot a macro invocation. This check is guaranteed to succeed, assuming\nthat the invocations are indeed gone."],[10,"pe_ident","","",125],[10,"pe_generics","","",125],[10,"pe_abi","","",125],[10,"pe_explicit_self","","",125],[10,"pe_unsafety","","",125],[10,"pe_fn_decl","","",125],[10,"pe_body","","",125],[10,"pe_vis","","",125],[11,"fmt","","",122],[11,"decode","","",122],[11,"encode","","",122],[11,"max","","",122],[11,"empty","","",122],[11,"add","","",122],[11,"visit_mod","","",123],[11,"visit_foreign_item","","",123],[11,"visit_item","","",123],[11,"visit_local","","",123],[11,"visit_block","","",123],[11,"visit_stmt","","",123],[11,"visit_pat","","",123],[11,"visit_expr","","",123],[11,"visit_ty","","",123],[11,"visit_generics","","",123],[11,"visit_fn","","",123],[11,"visit_struct_field","","",123],[11,"visit_struct_def","","",123],[11,"visit_trait_item","","",123],[11,"visit_lifetime_ref","","",123],[11,"visit_lifetime_def","","",123],[11,"visit_trait_ref","","",123],[11,"pe_ident","syntax::ast","",46],[11,"pe_generics","","",46],[11,"pe_abi","","",46],[11,"pe_explicit_self","","",46],[11,"pe_unsafety","","",46],[11,"pe_fn_decl","","",46],[11,"pe_body","","",46],[11,"pe_vis","","",46],[0,"attr","syntax",""],[3,"Stability","syntax::attr","Represents the #[deprecated] and friends attributes."],[12,"level","","",126],[12,"feature","","",126],[12,"since","","",126],[12,"deprecated_since","","",126],[12,"reason","","",126],[4,"InlineAttr","",""],[13,"None","","",127],[13,"Hint","","",127],[13,"Always","","",127],[13,"Never","","",127],[4,"StabilityLevel","","The available stability levels."],[13,"Unstable","","",128],[13,"Stable","","",128],[4,"ReprAttr","",""],[13,"ReprAny","","",129],[13,"ReprInt","","",129],[13,"ReprExtern","","",129],[13,"ReprPacked","","",129],[4,"IntType","",""],[13,"SignedInt","","",130],[13,"UnsignedInt","","",130],[5,"mark_used","",""],[5,"is_used","",""],[5,"mk_name_value_item_str","",""],[5,"mk_name_value_item","",""],[5,"mk_list_item","",""],[5,"mk_word_item","",""],[5,"mk_attr_id","",""],[5,"mk_attr_inner","","Returns an inner attribute with the given value."],[5,"mk_attr_outer","","Returns an outer attribute with the given value."],[5,"mk_sugared_doc_attr","",""],[5,"contains","","Check if `needle` occurs in `haystack` by a structural\ncomparison. This is slightly subtle, and relies on ignoring the\nspan included in the `==` comparison a plain MetaItem."],[5,"contains_name","",""],[5,"first_attr_value_str_by_name","",""],[5,"last_meta_item_value_str_by_name","",""],[5,"sort_meta_items","",""],[5,"find_crate_name","",""],[5,"find_inline_attr","","Determine what `#[inline]` attribute is present in `attrs`, if any."],[5,"requests_inline","","True if `#[inline]` or `#[inline(always)]` is present in `attrs`."],[5,"cfg_matches","","Tests if a cfg-pattern matches the cfg set"],[5,"find_stability","","Find the first stability attribute. `None` if none exists."],[5,"require_unique_names","",""],[5,"find_repr_attrs","","Parse #[repr(...)] forms."],[8,"AttrMetaMethods","",""],[11,"check_name","","",131],[10,"name","","Retrieve the name of the meta item, e.g. `foo` in `#[foo]`,\n`#[foo=\"bar\"]` and `#[foo(bar)]`",131],[10,"value_str","","Gets the string value if self is a MetaNameValue variant\ncontaining a string, otherwise None.",131],[10,"meta_item_list","","Gets a list of inner meta items from a list MetaItem type.",131],[10,"span","","",131],[8,"AttributeMethods","",""],[10,"meta","","",132],[10,"with_desugared_doc","","",132],[11,"check_name","","",133],[11,"name","","",133],[11,"value_str","","",133],[11,"meta_item_list","","",133],[11,"span","","",133],[11,"name","","",134],[11,"value_str","","",134],[11,"meta_item_list","","",134],[11,"span","","",134],[11,"meta","","Extract the MetaItem from inside this Attribute.",133],[11,"with_desugared_doc","","Convert self to a normal #[doc=\"foo\"] comment, if it is a\ncomment like `///` or `/** */`. (Returns self unchanged for\nnon-sugared doc attributes.)",133],[11,"eq","","",127],[11,"ne","","",127],[11,"fmt","","",126],[11,"clone","","",126],[11,"decode","","",126],[11,"encode","","",126],[11,"fmt","","",128],[11,"clone","","",128],[11,"partial_cmp","","",128],[11,"lt","","",128],[11,"le","","",128],[11,"gt","","",128],[11,"ge","","",128],[11,"eq","","",128],[11,"ne","","",128],[11,"decode","","",128],[11,"encode","","",128],[11,"fmt","","",128],[11,"decode","","",129],[11,"encode","","",129],[11,"fmt","","",129],[11,"eq","","",129],[11,"ne","","",129],[11,"is_ffi_safe","","",129],[11,"decode","","",130],[11,"encode","","",130],[11,"fmt","","",130],[11,"eq","","",130],[11,"ne","","",130],[11,"hash","","",130],[11,"is_signed","","",130],[0,"codemap","syntax","The CodeMap tracks all the source code used within a single crate, mapping\nfrom integer byte positions to the original source code location. Each bit\nof source parsed during crate parsing (typically files, in-memory strings,\nor various bits of macro expansion) cover a continuous range of bytes in the\nCodeMap and are represented by FileMaps. Byte positions are stored in\n`spans` and used pervasively in the compiler. They are absolute positions\nwithin the CodeMap, which upon request can be converted to line and column\ninformation, source code snippets, etc."],[3,"BytePos","syntax::codemap","A byte offset. Keep this small (currently 32-bits), as AST contains\na lot of them."],[3,"CharPos","","A character offset. Because of multibyte utf8 characters, a byte offset\nis not equivalent to a character offset. The CodeMap will convert BytePos\nvalues to CharPos values as necessary."],[3,"Span","","Spans represent a region of code, used for error reporting. Positions in spans\nare *absolute* positions from the beginning of the codemap, not positions\nrelative to FileMaps. Methods on the CodeMap can be used to relate spans back\nto the original source."],[12,"lo","","",135],[12,"hi","","",135],[12,"expn_id","","Information about where the macro came from, if this piece of\ncode was created by a macro expansion.",135],[3,"Spanned","",""],[12,"node","","",136],[12,"span","","",136],[3,"Loc","","A source code location used for error reporting"],[12,"file","","Information about the original source",137],[12,"line","","The (1-based) line number",137],[12,"col","","The (0-based) column offset",137],[3,"LocWithOpt","","A source code location used as the result of lookup_char_pos_adj"],[12,"filename","","",138],[12,"line","","",138],[12,"col","","",138],[12,"file","","",138],[3,"FileMapAndLine","",""],[12,"fm","","",139],[12,"line","","",139],[3,"FileMapAndBytePos","",""],[12,"fm","","",140],[12,"pos","","",140],[3,"NameAndSpan","",""],[12,"name","","The name of the macro that was invoked to create the thing\nwith this Span.",141],[12,"format","","The format with which the macro was invoked.",141],[12,"allow_internal_unstable","","Whether the macro is allowed to use #[unstable]/feature-gated\nfeatures internally without forcing the whole crate to opt-in\nto them.",141],[12,"span","","The span of the macro definition itself. The macro may not\nhave a sensible definition span (e.g. something defined\ncompletely inside libsyntax) in which case this is None.",141],[3,"ExpnInfo","","Extra information for tracking macro expansion of spans"],[12,"call_site","","The location of the actual macro invocation, e.g. `let x =\nfoo!();`",142],[12,"callee","","Information about the macro and its definition.",142],[3,"ExpnId","",""],[3,"FileLines","",""],[12,"file","","",143],[12,"lines","","",143],[3,"MultiByteChar","","Identifies an offset of a multi-byte character in a FileMap"],[12,"pos","","The absolute offset of the character in the CodeMap",144],[12,"bytes","","The number of bytes, >=2",144],[3,"FileMap","","A single source in the CodeMap"],[12,"name","","The name of the file that the source came from, source that doesn't\noriginate from files has names between angle brackets by convention,\ne.g. `<anon>`",145],[12,"src","","The complete source code",145],[12,"start_pos","","The start position of this source in the CodeMap",145],[12,"end_pos","","The end position of this source in the CodeMap",145],[12,"lines","","Locations of lines beginnings in the source code",145],[12,"multibyte_chars","","Locations of multi-byte characters in the source code",145],[3,"CodeMap","",""],[12,"files","","",146],[3,"DistinctSources","",""],[3,"MalformedCodemapPositions","",""],[4,"MacroFormat","","The syntax with which a macro was invoked."],[13,"MacroAttribute","","e.g. #[derive(...)] <item>",147],[13,"MacroBang","","e.g. `format!()`",147],[4,"SpanSnippetError","",""],[13,"IllFormedSpan","","",148],[13,"DistinctSources","","",148],[13,"MalformedForCodemap","","",148],[13,"SourceNotAvailable","","",148],[12,"filename","syntax::codemap::SpanSnippetError","",148],[5,"spanned","syntax::codemap",""],[5,"respan","",""],[5,"dummy_spanned","",""],[5,"mk_sp","",""],[5,"original_sp","","Return the span itself if it doesn't come from a macro expansion,\notherwise return the call site span up to the `enclosing_sp` by\nfollowing the `expn_info` chain."],[6,"FileName","",""],[17,"DUMMY_SP","",""],[17,"COMMAND_LINE_SP","",""],[17,"NO_EXPANSION","",""],[17,"COMMAND_LINE_EXPN","",""],[8,"Pos","",""],[10,"from_usize","","",149],[10,"to_usize","","",149],[11,"fmt","","",150],[11,"partial_cmp","","",150],[11,"lt","","",150],[11,"le","","",150],[11,"gt","","",150],[11,"ge","","",150],[11,"hash","","",150],[11,"eq","","",150],[11,"ne","","",150],[11,"clone","","",150],[11,"fmt","","",151],[11,"partial_cmp","","",151],[11,"lt","","",151],[11,"le","","",151],[11,"gt","","",151],[11,"ge","","",151],[11,"hash","","",151],[11,"eq","","",151],[11,"ne","","",151],[11,"from_usize","","",150],[11,"to_usize","","",150],[6,"Output","",""],[11,"add","","",150],[6,"Output","",""],[11,"sub","","",150],[11,"encode","","",150],[11,"decode","","",150],[11,"from_usize","","",151],[11,"to_usize","","",151],[6,"Output","",""],[11,"add","","",151],[6,"Output","",""],[11,"sub","","",151],[11,"hash","","",135],[11,"fmt","","",135],[11,"clone","","",135],[11,"fmt","","",136],[11,"hash","","",136],[11,"decode","","",136],[11,"encode","","",136],[11,"eq","","",136],[11,"ne","","",136],[11,"clone","","",136],[11,"eq","","",135],[11,"ne","","",135],[11,"encode","","",135],[11,"decode","","",135],[11,"fmt","","",147],[11,"hash","","",147],[11,"clone","","",147],[11,"fmt","","",141],[11,"hash","","",141],[11,"clone","","",141],[11,"fmt","","",142],[11,"hash","","",142],[11,"decode","","",152],[11,"encode","","",152],[11,"hash","","",152],[11,"fmt","","",152],[11,"clone","","",152],[11,"eq","","",152],[11,"ne","","",152],[11,"from_llvm_cookie","","",152],[11,"to_llvm_cookie","","",152],[11,"eq","","",144],[11,"ne","","",144],[11,"decode","","",144],[11,"encode","","",144],[11,"encode","","",145],[11,"decode","","",145],[11,"next_line","","EFFECT: register a start-of-line offset in the\ntable of line-beginnings.\nUNCHECKED INVARIANT: these offsets must be added in the right\norder and must be in the right places; there is shared knowledge\nabout what ends a line between this file and parse.rs\nWARNING: pos param here is the offset relative to start of CodeMap,\nand CodeMap will append a newline when adding a filemap without a newline at the end,\nso the safe way to call this is with value calculated as\nfilemap.start_pos + newline_offset_relative_to_the_start_of_filemap.",145],[11,"get_line","","get a line from the list of pre-computed line-beginnings\n",145],[11,"record_multibyte_char","","",145],[11,"is_real_file","","",145],[11,"is_imported","","",145],[11,"new","","",146],[11,"new_filemap","","",146],[11,"new_imported_filemap","","Allocates a new FileMap representing a source file from an external\ncrate. The source code of such an \"imported filemap\" is not available,\nbut we still know enough to generate accurate debuginfo location\ninformation for things inlined from other crates.",146],[11,"mk_substr_filename","","",146],[11,"lookup_char_pos","","Lookup source information about a BytePos",146],[11,"lookup_char_pos_adj","","",146],[11,"span_to_string","","",146],[11,"span_to_filename","","",146],[11,"span_to_lines","","",146],[11,"span_to_snippet","","",146],[11,"get_filemap","","",146],[11,"lookup_byte_offset","","For a global BytePos compute the local offset within the containing FileMap",146],[11,"bytepos_to_file_charpos","","Converts an absolute BytePos to a CharPos relative to the filemap and above.",146],[11,"record_expansion","","",146],[11,"with_expn_info","","",146],[11,"span_allows_unstable","","Check if a span is \"internal\" to a macro in which #[unstable]\nitems can be used (that is, a macro marked with\n`#[allow_internal_unstable]`).",146],[11,"fmt","","",148],[11,"eq","","",148],[11,"ne","","",148],[11,"clone","","",148],[11,"fmt","","",153],[11,"eq","","",153],[11,"ne","","",153],[11,"clone","","",153],[11,"fmt","","",154],[11,"eq","","",154],[11,"ne","","",154],[11,"clone","","",154],[0,"config","syntax",""],[5,"strip_unconfigured_items","syntax::config",""],[5,"strip_items","",""],[0,"diagnostic","syntax",""],[3,"FatalError","syntax::diagnostic","This structure is used to signify that a task has panicked with a fatal error\nfrom the diagnostics. You can use this with the `Any` trait to figure out\nhow a rustc task died (if so desired)."],[3,"ExplicitBug","","Signifies that the compiler died with an explicit call to `.bug`\nor `.span_bug` rather than a failed assertion, etc."],[3,"SpanHandler","","A span-handler is like a handler but also\naccepts span information for source-location\nreporting."],[12,"handler","","",155],[12,"cm","","",155],[3,"Handler","","A handler deals with errors; certain errors\n(fatal, bug, unimpl) may cause immediate exit,\nothers log errors for later reporting."],[12,"can_emit_warnings","","",156],[3,"EmitterWriter","",""],[4,"RenderSpan","",""],[13,"FullSpan","","A FullSpan renders with both with an initial line for the\nmessage, prefixed by file:linenum, followed by a summary of\nthe source code covered by the span.",157],[13,"FileLine","","A FileLine renders with just a line for the message prefixed\nby file:linenum.",157],[4,"ColorConfig","",""],[13,"Auto","","",158],[13,"Always","","",158],[13,"Never","","",158],[4,"Level","",""],[13,"Bug","","",159],[13,"Fatal","","",159],[13,"Error","","",159],[13,"Warning","","",159],[13,"Note","","",159],[13,"Help","","",159],[5,"mk_span_handler","",""],[5,"default_handler","",""],[5,"mk_handler","",""],[5,"expect","",""],[8,"Emitter","",""],[10,"emit","","",160],[10,"custom_emit","","",160],[11,"clone","","",157],[11,"clone","","",158],[11,"span_fatal","","",155],[11,"span_fatal_with_code","","",155],[11,"span_err","","",155],[11,"span_err_with_code","","",155],[11,"span_warn","","",155],[11,"span_warn_with_code","","",155],[11,"span_note","","",155],[11,"span_end_note","","",155],[11,"span_help","","",155],[11,"fileline_note","","",155],[11,"fileline_help","","",155],[11,"span_bug","","",155],[11,"span_unimpl","","",155],[11,"handler","","",155],[11,"fatal","","",156],[11,"err","","",156],[11,"bump_err_count","","",156],[11,"err_count","","",156],[11,"has_errors","","",156],[11,"abort_if_errors","","",156],[11,"warn","","",156],[11,"note","","",156],[11,"help","","",156],[11,"bug","","",156],[11,"unimpl","","",156],[11,"emit","","",156],[11,"emit_with_code","","",156],[11,"custom_emit","","",156],[11,"fmt","","",159],[11,"clone","","",159],[11,"eq","","",159],[11,"ne","","",159],[11,"fmt","","",159],[11,"stderr","","",161],[11,"new","","",161],[11,"emit","","",161],[11,"custom_emit","","",161],[0,"feature_gate","syntax","Feature gating"],[3,"Features","syntax::feature_gate","A set of features to be used by later passes."],[12,"unboxed_closures","","",162],[12,"rustc_diagnostic_macros","","",162],[12,"visible_private_types","","",162],[12,"allow_quote","","",162],[12,"allow_asm","","",162],[12,"allow_log_syntax","","",162],[12,"allow_concat_idents","","",162],[12,"allow_trace_macros","","",162],[12,"allow_internal_unstable","","",162],[12,"allow_custom_derive","","",162],[12,"old_orphan_check","","",162],[12,"simd_ffi","","",162],[12,"unmarked_api","","",162],[12,"declared_stable_lang_features","","spans of #![feature] attrs for stable language features. for error reporting",162],[12,"declared_lib_features","","#![feature] attrs for non-language (library) features",162],[4,"AttributeType","",""],[13,"Normal","","Normal, builtin attribute that is consumed\nby the compiler before the unused_attribute check",163],[13,"Whitelisted","","Builtin attribute that may not be consumed by the compiler\nbefore the unused_attribute check. These attributes\nwill be ignored by the unused_attribute lint",163],[13,"Gated","","Is gated by a given feature gate and reason\nThese get whitelisted too",163],[13,"CrateLevel","","Builtin attribute that is only allowed at the crate level",163],[5,"emit_feature_err","",""],[5,"emit_feature_warn","",""],[5,"check_crate_macros","",""],[5,"check_crate","",""],[17,"KNOWN_ATTRIBUTES","",""],[17,"EXPLAIN_ASM","",""],[17,"EXPLAIN_LOG_SYNTAX","",""],[17,"EXPLAIN_CONCAT_IDENTS","",""],[17,"EXPLAIN_TRACE_MACROS","",""],[17,"EXPLAIN_ALLOW_INTERNAL_UNSTABLE","",""],[17,"EXPLAIN_CUSTOM_DERIVE","",""],[11,"fmt","","",163],[11,"eq","","",163],[11,"ne","","",163],[11,"new","","",162],[0,"fold","syntax","A Folder represents an AST->AST fold; it accepts an AST piece,\nand returns a piece of the same type. So, for instance, macro\nexpansion is a Folder that walks over an AST and produces another\nAST."],[5,"noop_fold_meta_items","syntax::fold",""],[5,"noop_fold_view_path","",""],[5,"fold_attrs","",""],[5,"noop_fold_arm","",""],[5,"noop_fold_decl","",""],[5,"noop_fold_ty_binding","",""],[5,"noop_fold_ty","",""],[5,"noop_fold_foreign_mod","",""],[5,"noop_fold_variant","",""],[5,"noop_fold_ident","",""],[5,"noop_fold_usize","",""],[5,"noop_fold_path","",""],[5,"noop_fold_path_parameters","",""],[5,"noop_fold_angle_bracketed_parameter_data","",""],[5,"noop_fold_parenthesized_parameter_data","",""],[5,"noop_fold_local","",""],[5,"noop_fold_attribute","",""],[5,"noop_fold_explicit_self_underscore","",""],[5,"noop_fold_explicit_self","",""],[5,"noop_fold_mac","",""],[5,"noop_fold_meta_item","",""],[5,"noop_fold_arg","",""],[5,"noop_fold_tt","",""],[5,"noop_fold_tts","",""],[5,"noop_fold_token","",""],[5,"noop_fold_interpolated","","apply folder to elements of interpolated nodes"],[5,"noop_fold_fn_decl","",""],[5,"noop_fold_ty_param_bound","",""],[5,"noop_fold_ty_param","",""],[5,"noop_fold_ty_params","",""],[5,"noop_fold_lifetime","",""],[5,"noop_fold_lifetime_def","",""],[5,"noop_fold_lifetimes","",""],[5,"noop_fold_lifetime_defs","",""],[5,"noop_fold_opt_lifetime","",""],[5,"noop_fold_generics","",""],[5,"noop_fold_where_clause","",""],[5,"noop_fold_where_predicate","",""],[5,"noop_fold_typedef","",""],[5,"noop_fold_associated_type","",""],[5,"noop_fold_struct_def","",""],[5,"noop_fold_trait_ref","",""],[5,"noop_fold_poly_trait_ref","",""],[5,"noop_fold_struct_field","",""],[5,"noop_fold_field","",""],[5,"noop_fold_mt","",""],[5,"noop_fold_opt_bounds","",""],[5,"noop_fold_block","",""],[5,"noop_fold_item_underscore","",""],[5,"noop_fold_trait_item","",""],[5,"noop_fold_impl_item","",""],[5,"noop_fold_type_method","",""],[5,"noop_fold_mod","",""],[5,"noop_fold_crate","",""],[5,"noop_fold_item","",""],[5,"noop_fold_item_simple","",""],[5,"noop_fold_foreign_item","",""],[5,"noop_fold_method","",""],[5,"noop_fold_pat","",""],[5,"noop_fold_expr","",""],[5,"noop_fold_stmt","",""],[8,"MoveMap","",""],[10,"move_map","","",164],[8,"Folder","",""],[11,"fold_crate","","",165],[11,"fold_meta_items","","",165],[11,"fold_meta_item","","",165],[11,"fold_view_path","","",165],[11,"fold_foreign_item","","",165],[11,"fold_item","","",165],[11,"fold_item_simple","","",165],[11,"fold_struct_field","","",165],[11,"fold_item_underscore","","",165],[11,"fold_trait_item","","",165],[11,"fold_impl_item","","",165],[11,"fold_fn_decl","","",165],[11,"fold_type_method","","",165],[11,"fold_method","","",165],[11,"fold_block","","",165],[11,"fold_stmt","","",165],[11,"fold_arm","","",165],[11,"fold_pat","","",165],[11,"fold_decl","","",165],[11,"fold_expr","","",165],[11,"fold_ty","","",165],[11,"fold_ty_binding","","",165],[11,"fold_mod","","",165],[11,"fold_foreign_mod","","",165],[11,"fold_variant","","",165],[11,"fold_ident","","",165],[11,"fold_usize","","",165],[11,"fold_path","","",165],[11,"fold_path_parameters","","",165],[11,"fold_angle_bracketed_parameter_data","","",165],[11,"fold_parenthesized_parameter_data","","",165],[11,"fold_local","","",165],[11,"fold_mac","","",165],[11,"fold_explicit_self","","",165],[11,"fold_explicit_self_underscore","","",165],[11,"fold_lifetime","","",165],[11,"fold_lifetime_def","","",165],[11,"fold_attribute","","",165],[11,"fold_arg","","",165],[11,"fold_generics","","",165],[11,"fold_trait_ref","","",165],[11,"fold_poly_trait_ref","","",165],[11,"fold_struct_def","","",165],[11,"fold_lifetimes","","",165],[11,"fold_lifetime_defs","","",165],[11,"fold_ty_param","","",165],[11,"fold_ty_params","","",165],[11,"fold_tt","","",165],[11,"fold_tts","","",165],[11,"fold_token","","",165],[11,"fold_interpolated","","",165],[11,"fold_opt_lifetime","","",165],[11,"fold_variant_arg","","",165],[11,"fold_opt_bounds","","",165],[11,"fold_bounds","","",165],[11,"fold_ty_param_bound","","",165],[11,"fold_mt","","",165],[11,"fold_field","","",165],[11,"fold_where_clause","","",165],[11,"fold_where_predicate","","",165],[11,"fold_typedef","","",165],[11,"fold_associated_type","","",165],[11,"new_id","","",165],[11,"new_span","","",165],[11,"move_map","collections::vec","",166],[0,"owned_slice","syntax",""],[3,"OwnedSlice","syntax::owned_slice","A non-growable owned slice. This is a separate type to allow the\nrepresentation to change."],[11,"cmp","","",167],[11,"partial_cmp","","",167],[11,"lt","","",167],[11,"le","","",167],[11,"gt","","",167],[11,"ge","","",167],[11,"eq","","",167],[11,"ne","","",167],[11,"hash","","",167],[11,"fmt","","",167],[11,"empty","","",167],[11,"from_vec","","",167],[11,"into_vec","","",167],[11,"as_slice","","",167],[11,"move_iter","","",167],[11,"map","","",167],[6,"Target","",""],[11,"deref","","",167],[11,"default","","",167],[11,"clone","","",167],[11,"from_iter","","",167],[11,"encode","","",167],[11,"decode","","",167],[0,"parse","syntax","The main parser interface"],[3,"ParseSess","syntax::parse","Info about a parsing session."],[12,"span_diagnostic","","",168],[12,"node_id","","",168],[5,"new_parse_sess","",""],[5,"new_parse_sess_special_handler","",""],[5,"parse_crate_from_file","",""],[5,"parse_crate_attrs_from_file","",""],[5,"parse_crate_from_source_str","",""],[5,"parse_crate_attrs_from_source_str","",""],[5,"parse_expr_from_source_str","",""],[5,"parse_item_from_source_str","",""],[5,"parse_meta_from_source_str","",""],[5,"parse_stmt_from_source_str","",""],[5,"parse_tts_from_source_str","",""],[5,"new_parser_from_source_str","",""],[5,"new_parser_from_file","","Create a new parser, handling errors as appropriate\nif the file doesn't exist"],[5,"new_sub_parser_from_file","","Given a session, a crate config, a path, and a span, add\nthe file at the given path to the codemap, and return a parser.\nOn an error, use the given span as the source of the problem."],[5,"filemap_to_parser","","Given a filemap and config, return a parser"],[5,"new_parser_from_tts","",""],[5,"file_to_filemap","","Given a session and a path and an optional span (for error reporting),\nadd the path to the session's codemap and return the new filemap."],[5,"string_to_filemap","","Given a session and a string, add the string to\nthe session's codemap and return the new filemap"],[5,"filemap_to_tts","","Given a filemap, produce a sequence of token-trees"],[5,"tts_to_parser","","Given tts and cfg, produce a parser"],[5,"maybe_aborted","","Abort if necessary"],[5,"char_lit","","Parse a string representing a character literal into its final form.\nRather than just accepting/rejecting a given literal, unescapes it as\nwell. Can take any slice prefixed by a character escape. Returns the\ncharacter and the number of characters consumed."],[5,"str_lit","","Parse a string representing a string literal into its final form. Does\nunescaping."],[5,"raw_str_lit","","Parse a string representing a raw string literal into its final form. The\nonly operation this does is convert embedded CRLF into a single LF."],[5,"float_lit","",""],[5,"byte_lit","","Parse a string representing a byte literal into its final form. Similar to `char_lit`"],[5,"binary_lit","",""],[5,"integer_lit","",""],[0,"parser","",""],[3,"Restrictions","syntax::parse::parser",""],[3,"Parser","",""],[12,"sess","","",169],[12,"token","","the current token:",169],[12,"span","","the span of the current token:",169],[12,"last_span","","the span of the prior token:",169],[12,"cfg","","",169],[12,"last_token","","the previous token or None (only stashed sometimes).",169],[12,"buffer","","",169],[12,"buffer_start","","",169],[12,"buffer_end","","",169],[12,"tokens_consumed","","",169],[12,"restrictions","","",169],[12,"quote_depth","","",169],[12,"reader","","",169],[12,"interner","","",169],[12,"obsolete_set","","The set of seen errors about obsolete syntax. Used to suppress\nextra detail when the same error is seen twice",169],[12,"mod_path_stack","","Used to determine the path to externally loaded source files",169],[12,"open_braces","","Stack of spans of open delimiters. Used for error message.",169],[12,"owns_directory","","Flag if this parser \"owns\" the directory that it is currently parsing\nin. This will affect how nested files are looked up.",169],[12,"root_module_name","","Name of the root module this parser originated from. If `None`, then the\nname is not known. This does not change while the parser is descending\ninto modules, and sub-parsers have new values for this name.",169],[12,"expected_tokens","","",169],[4,"PathParsingMode","","How to parse a path. There are four different kinds of paths, all of which\nare parsed somewhat differently."],[13,"NoTypesAllowed","","A path with no type parameters; e.g. `foo::bar::Baz`",170],[13,"LifetimeAndTypesWithoutColons","","A path with a lifetime and type parameters, with no double colons\nbefore the type parameters; e.g. `foo::bar<'a>::Baz<T>`",170],[13,"LifetimeAndTypesWithColons","","A path with a lifetime and type parameters with double colons before\nthe type parameters; e.g. `foo::bar::<'a>::Baz::<T>`",170],[4,"BoundParsingMode","","How to parse a bound, whether to allow bound modifiers such as `?`."],[13,"Bare","","",171],[13,"Modified","","",171],[4,"TokenType","",""],[13,"Token","","",172],[13,"Keyword","","",172],[13,"Operator","","",172],[17,"UNRESTRICTED","",""],[17,"RESTRICTION_STMT_EXPR","",""],[17,"RESTRICTION_NO_BAR_OP","",""],[17,"RESTRICTION_NO_STRUCT_LITERAL","",""],[11,"hash","","",173],[11,"cmp","","",173],[11,"partial_cmp","","",173],[11,"lt","","",173],[11,"le","","",173],[11,"gt","","",173],[11,"ge","","",173],[11,"clone","","",173],[11,"eq","","",173],[11,"ne","","",173],[11,"empty","","Returns an empty set of flags.",173],[11,"all","","Returns the set containing all flags.",173],[11,"bits","","Returns the raw value of the flags currently stored.",173],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",173],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",173],[11,"is_empty","","Returns `true` if no flags are currently stored.",173],[11,"is_all","","Returns `true` if all flags are currently set.",173],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",173],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",173],[11,"insert","","Inserts the specified flags in-place.",173],[11,"remove","","Removes the specified flags in-place.",173],[11,"toggle","","Toggles the specified flags in-place.",173],[6,"Output","",""],[11,"bitor","","Returns the union of the two sets of flags.",173],[6,"Output","",""],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",173],[6,"Output","",""],[11,"bitand","","Returns the intersection between the two sets of flags.",173],[6,"Output","",""],[11,"sub","","Returns the set difference of the two sets of flags.",173],[6,"Output","",""],[11,"not","","Returns the complement of this set of flags.",173],[11,"eq","","",170],[11,"ne","","",170],[11,"eq","","",171],[11,"ne","","",171],[11,"clone","","",172],[11,"eq","","",172],[11,"ne","","",172],[11,"new","","",169],[11,"token_to_string","","Convert a token to a string using self's reader",169],[11,"this_token_to_string","","Convert the current token to a string using self's reader",169],[11,"unexpected_last","","",169],[11,"unexpected","","",169],[11,"expect","","Expect and consume the token t. Signal an error if\nthe next token is not t.",169],[11,"expect_one_of","","Expect next token to be edible or inedible token.  If edible,\nthen consume it; if inedible, then return without consuming\nanything.  Signal a fatal error if next token is unexpected.",169],[11,"check_for_erroneous_unit_struct_expecting","","Check for erroneous `ident { }`; if matches, signal error and\nrecover (without consuming any expected input token).  Returns\ntrue if and only if input was consumed for recovery.",169],[11,"commit_expr","","Commit to parsing a complete expression `e` expected to be\nfollowed by some token from the set edible + inedible.  Recover\nfrom anticipated input errors, discarding erroneous characters.",169],[11,"commit_expr_expecting","","",169],[11,"commit_stmt","","Commit to parsing a complete statement `s`, which expects to be\nfollowed by some token from the set edible + inedible.  Check\nfor recoverable input errors, discarding erroneous characters.",169],[11,"commit_stmt_expecting","","",169],[11,"parse_ident","","",169],[11,"parse_ident_or_self_type","","",169],[11,"parse_path_list_item","","",169],[11,"check","","Check if the next token is `tok`, and return `true` if so.",169],[11,"eat","","Consume token 'tok' if it exists. Returns true if the given\ntoken was present, false otherwise.",169],[11,"check_keyword","","",169],[11,"eat_keyword","","If the next token is the given keyword, eat it and return\ntrue. Otherwise, return false.",169],[11,"eat_keyword_noexpect","","",169],[11,"expect_keyword","","If the given word is not a keyword, signal an error.\nIf the next token is not the given word, signal an error.\nOtherwise, eat it.",169],[11,"check_strict_keywords","","Signal an error if the given string is a strict keyword",169],[11,"check_reserved_keywords","","Signal an error if the current token is a reserved keyword",169],[11,"expect_no_suffix","","",169],[11,"expect_gt","","Expect and consume a GT. if a >> is seen, replace it\nwith a single > and continue. If a GT is not seen,\nsignal an error.",169],[11,"parse_seq_to_before_gt_or_return","","",169],[11,"parse_seq_to_before_gt","","Parse a sequence bracketed by '<' and '>', stopping\nbefore the '>'.",169],[11,"parse_seq_to_gt","","",169],[11,"parse_seq_to_gt_or_return","","",169],[11,"parse_seq_to_end","","Parse a sequence, including the closing delimiter. The function\nf must consume tokens until reaching the next separator or\nclosing bracket.",169],[11,"parse_seq_to_before_end","","Parse a sequence, not including the closing delimiter. The function\nf must consume tokens until reaching the next separator or\nclosing bracket.",169],[11,"parse_unspanned_seq","","Parse a sequence, including the closing delimiter. The function\nf must consume tokens until reaching the next separator or\nclosing bracket.",169],[11,"parse_enum_variant_seq","","Parse a sequence parameter of enum variant. For consistency purposes,\nthese should not be empty.",169],[11,"parse_seq","","",169],[11,"bump","","Advance the parser by one token",169],[11,"bump_and_get","","Advance the parser by one token and return the bumped token.",169],[11,"replace_token","","EFFECT: replace the current token and span with the given one",169],[11,"buffer_length","","",169],[11,"look_ahead","","",169],[11,"fatal","","",169],[11,"span_fatal","","",169],[11,"span_fatal_help","","",169],[11,"span_note","","",169],[11,"span_help","","",169],[11,"fileline_help","","",169],[11,"bug","","",169],[11,"warn","","",169],[11,"span_warn","","",169],[11,"span_err","","",169],[11,"span_bug","","",169],[11,"abort_if_errors","","",169],[11,"id_to_interned_str","","",169],[11,"token_is_bare_fn_keyword","","Is the current token one of the keywords that signals a bare function\ntype?",169],[11,"token_is_closure_keyword","","Is the current token one of the keywords that signals a closure type?",169],[11,"get_lifetime","","",169],[11,"parse_for_in_type","","",169],[11,"parse_ty_path","","",169],[11,"parse_ty_bare_fn","","parse a TyBareFn type:",169],[11,"parse_proc_type","","Parses a procedure type (`proc`). The initial `proc` keyword must\nalready have been parsed.",169],[11,"parse_obsolete_closure_kind","","Parses an obsolete closure kind (`&:`, `&mut:`, or `:`).",169],[11,"parse_ty_bare_fn_or_ty_closure","","",169],[11,"parse_ty_closure","","Parse a TyClosure type",169],[11,"parse_unsafety","","",169],[11,"parse_trait_items","","Parse the items in a trait declaration",169],[11,"parse_mt","","Parse a possibly mutable type",169],[11,"parse_ret_ty","","Parse optional return type [ -> TY ] in function decl",169],[11,"parse_ty_sum","","Parse a type in a context where `T1+T2` is allowed.",169],[11,"parse_ty","","Parse a type.",169],[11,"parse_borrowed_pointee","","",169],[11,"parse_ptr","","",169],[11,"is_named_argument","","",169],[11,"parse_arg_general","","This version of parse arg doesn't necessarily require\nidentifier names.",169],[11,"parse_arg","","Parse a single function argument",169],[11,"parse_fn_block_arg","","Parse an argument in a lambda header e.g. |arg, arg|",169],[11,"maybe_parse_fixed_length_of_vec","","",169],[11,"lit_from_token","","Matches token_lit = LIT_INTEGER | ...",169],[11,"parse_lit","","Matches lit = true | false | token_lit",169],[11,"parse_literal_maybe_minus","","matches '-' lit | lit",169],[11,"parse_path","","Parses a path and optional type parameter bounds, depending on the\nmode. The `mode` parameter determines whether lifetimes, types, and/or\nbounds are permitted and whether `::` must precede type parameter\ngroups.",169],[11,"parse_path_segments_without_colons","","Examples:\n- `a::b<T,U>::c<V,W>`\n- `a::b<T,U>::c(V) -> W`\n- `a::b<T,U>::c(V)`",169],[11,"parse_path_segments_with_colons","","Examples:\n- `a::b::<T,U>::c`",169],[11,"parse_path_segments_without_types","","Examples:\n- `a::b::c`",169],[11,"parse_opt_lifetime","","parses 0 or 1 lifetime",169],[11,"parse_lifetime","","Parses a single lifetime\nMatches lifetime = LIFETIME",169],[11,"parse_lifetime_defs","","Parses `lifetime_defs = [ lifetime_defs { ',' lifetime_defs } ]` where `lifetime_def  =\nlifetime [':' lifetimes]`",169],[11,"parse_lifetimes","","matches lifetimes = ( lifetime ) | ( lifetime , lifetimes ) actually, it matches the empty\none too, but putting that in there messes up the grammar....",169],[11,"parse_mutability","","Parse mutability declaration (mut/const/imm)",169],[11,"parse_field","","Parse ident COLON expr",169],[11,"mk_expr","","",169],[11,"mk_unary","","",169],[11,"mk_binary","","",169],[11,"mk_call","","",169],[11,"mk_index","","",169],[11,"mk_range","","",169],[11,"mk_field","","",169],[11,"mk_tup_field","","",169],[11,"mk_assign_op","","",169],[11,"mk_mac_expr","","",169],[11,"mk_lit_u32","","",169],[11,"parse_bottom_expr","","At the bottom (top?) of the precedence hierarchy,\nparse things like parenthesized exprs,\nmacros, return, etc.",169],[11,"parse_block_expr","","Parse a block or unsafe block",169],[11,"parse_dot_or_call_expr","","parse a.b or a(13) or a[4] or just a",169],[11,"parse_dot_or_call_expr_with","","",169],[11,"check_unknown_macro_variable","","",169],[11,"parse_sep_and_kleene_op","","Parse an optional separator followed by a Kleene-style\nrepetition token (+ or *).",169],[11,"parse_token_tree","","parse a single token tree from the input.",169],[11,"parse_all_token_trees","","",169],[11,"parse_prefix_expr","","Parse a prefix-operator expr",169],[11,"parse_binops","","Parse an expression of binops",169],[11,"parse_more_binops","","Parse an expression of binops of at least min_prec precedence",169],[11,"parse_assign_expr","","Parse an assignment expression....\nactually, this seems to be the main entry point for\nparsing an arbitrary expression.",169],[11,"parse_assign_expr_with","","",169],[11,"parse_if_expr","","Parse an 'if' or 'if let' expression ('if' token already eaten)",169],[11,"parse_if_let_expr","","Parse an 'if let' expression ('if' token already eaten)",169],[11,"parse_lambda_expr","","",169],[11,"parse_else_expr","","",169],[11,"parse_for_expr","","Parse a 'for' .. 'in' expression ('for' token already eaten)",169],[11,"parse_while_expr","","Parse a 'while' or 'while let' expression ('while' token already eaten)",169],[11,"parse_while_let_expr","","Parse a 'while let' expression ('while' token already eaten)",169],[11,"parse_loop_expr","","",169],[11,"parse_arm","","",169],[11,"parse_expr","","Parse an expression",169],[11,"parse_expr_res","","Parse an expression, subject to the given restrictions",169],[11,"parse_pat","","Parse a pattern.",169],[11,"parse_stmt","","Parse a statement. may include decl.\nPrecondition: any attributes are parsed already",169],[11,"parse_block","","Parse a block. No inner attrs are allowed.",169],[11,"parse_generics","","Parse a set of optional generic type parameter declarations. Where\nclauses are not parsed here, and must be added later via\n`parse_where_clause()`.",169],[11,"parse_fn_decl","","Parse the argument list and result type of a function declaration",169],[11,"parse_method_with_outer_attributes","","Parse a method in a trait impl",169],[11,"parse_method","","Parse a method in a trait impl, starting with `attrs` attributes.",169],[11,"parse_record_struct_body","","",169],[11,"parse_tuple_struct_body","","",169],[11,"parse_single_struct_field","","Parse a structure field declaration",169],[11,"parse_item_with_outer_attributes","","",169],[11,"parse_item","","",169],[11,"parse_crate_mod","","Parses a source module as a crate. This is the main\nentry point for the parser.",169],[11,"parse_optional_str","","",169],[11,"parse_str","","",169],[0,"lexer","syntax::parse",""],[3,"TokenAndSpan","syntax::parse::lexer",""],[12,"tok","","",174],[12,"sp","","",174],[3,"StringReader","",""],[12,"span_diagnostic","","",175],[12,"pos","","The absolute offset within the codemap of the next character to read",175],[12,"last_pos","","The absolute offset within the codemap of the last character read(curr)",175],[12,"col","","The column of the next character to read",175],[12,"curr","","The last character to be read",175],[12,"filemap","","",175],[12,"peek_tok","","",175],[12,"peek_span","","",175],[5,"make_reader_with_embedded_idents","",""],[5,"is_whitespace","",""],[5,"is_doc_comment","",""],[5,"is_block_doc_comment","",""],[0,"comments","",""],[3,"Comment","syntax::parse::lexer::comments",""],[12,"style","","",176],[12,"lines","","",176],[12,"pos","","",176],[3,"Literal","",""],[12,"lit","","",177],[12,"pos","","",177],[4,"CommentStyle","",""],[13,"Isolated","","No code on either side of each line of the comment",178],[13,"Trailing","","Code exists to the left of the comment",178],[13,"Mixed","","Code before /* foo */ and after the comment",178],[13,"BlankLine","","Just a manual blank line \"\\n\\n\", for layout",178],[5,"is_doc_comment","",""],[5,"doc_comment_style","",""],[5,"strip_doc_comment_decoration","",""],[5,"gather_comments_and_literals","",""],[11,"eq","","",178],[11,"ne","","",178],[11,"clone","","",178],[11,"clone","","",176],[11,"clone","","",177],[8,"Reader","syntax::parse::lexer",""],[10,"is_eof","","",179],[10,"next_token","","",179],[10,"fatal","","Report a fatal error with the current span.",179],[10,"err","","Report a non-fatal error with the current span.",179],[10,"peek","","",179],[11,"real_token","","Get a token the parser cares about.",179],[11,"fmt","","",174],[11,"eq","","",174],[11,"ne","","",174],[11,"clone","","",174],[11,"is_eof","","",175],[11,"next_token","","Return the next token. EFFECT: advances the string_reader.",175],[11,"fatal","","",175],[11,"err","","",175],[11,"peek","","",175],[11,"new_raw","","For comments.rs, which hackily pokes into pos and curr",175],[11,"new","","",175],[11,"curr_is","","",175],[11,"fatal_span","","Report a fatal lexical error with a given span.",175],[11,"err_span","","Report a lexical error with a given span.",175],[11,"with_str_from","","Calls `f` with a string slice of the source text spanning from `start`\nup to but excluding `self.last_pos`, meaning the slice does not include\nthe character `self.curr`.",175],[11,"name_from","","Create a Name from a given offset to the current offset, each\nadjusted 1 towards each other (assumes that on either side there is a\nsingle-byte delimiter).",175],[11,"name_from_to","","As name_from, with an explicit endpoint.",175],[11,"bump","","Advance the StringReader by one character. If a newline is\ndiscovered, add it to the FileMap's list of line start offsets.",175],[11,"nextch","","",175],[11,"nextch_is","","",175],[11,"nextnextch","","",175],[11,"nextnextch_is","","",175],[0,"token","syntax::parse",""],[3,"InternedString","syntax::parse::token","Represents a string stored in the task-local interner. Because the\ninterner lives for the life of the task, this can be safely treated as an\nimmortal string, as long as it never crosses between tasks."],[4,"BinOpToken","",""],[13,"Plus","","",180],[13,"Minus","","",180],[13,"Star","","",180],[13,"Slash","","",180],[13,"Percent","","",180],[13,"Caret","","",180],[13,"And","","",180],[13,"Or","","",180],[13,"Shl","","",180],[13,"Shr","","",180],[4,"DelimToken","","A delimiter token"],[13,"Paren","","A round parenthesis: `(` or `)`",181],[13,"Bracket","","A square bracket: `[` or `]`",181],[13,"Brace","","A curly brace: `{` or `}`",181],[4,"IdentStyle","",""],[13,"ModName","","`::` follows the identifier with no whitespace in-between.",182],[13,"Plain","","",182],[4,"SpecialMacroVar","",""],[13,"CrateMacroVar","","`$crate` will be filled in with the name of the crate a macro was\nimported from, if any.",183],[4,"Lit","",""],[13,"Byte","","",184],[13,"Char","","",184],[13,"Integer","","",184],[13,"Float","","",184],[13,"Str_","","",184],[13,"StrRaw","","",184],[13,"Binary","","",184],[13,"BinaryRaw","","",184],[4,"Token","",""],[13,"Eq","","",185],[13,"Lt","","",185],[13,"Le","","",185],[13,"EqEq","","",185],[13,"Ne","","",185],[13,"Ge","","",185],[13,"Gt","","",185],[13,"AndAnd","","",185],[13,"OrOr","","",185],[13,"Not","","",185],[13,"Tilde","","",185],[13,"BinOp","","",185],[13,"BinOpEq","","",185],[13,"At","","",185],[13,"Dot","","",185],[13,"DotDot","","",185],[13,"DotDotDot","","",185],[13,"Comma","","",185],[13,"Semi","","",185],[13,"Colon","","",185],[13,"ModSep","","",185],[13,"RArrow","","",185],[13,"LArrow","","",185],[13,"FatArrow","","",185],[13,"Pound","","",185],[13,"Dollar","","",185],[13,"Question","","",185],[13,"OpenDelim","","An opening delimiter, eg. `{`",185],[13,"CloseDelim","","A closing delimiter, eg. `}`",185],[13,"Literal","","",185],[13,"Ident","","",185],[13,"Underscore","","",185],[13,"Lifetime","","",185],[13,"Interpolated","","",185],[13,"DocComment","","Doc comment",185],[13,"MatchNt","","Parse a nonterminal (name to bind, name of NT, styles of their idents)",185],[13,"SubstNt","","A syntactic variable that will be filled in by macro expansion.",185],[13,"SpecialVarNt","","A macro variable with special meaning.",185],[13,"Whitespace","","Whitespace",185],[13,"Comment","","Comment",185],[13,"Shebang","","",185],[13,"Eof","","",185],[4,"Nonterminal","","For interpolation during macro expansion."],[13,"NtItem","","",186],[13,"NtBlock","","",186],[13,"NtStmt","","",186],[13,"NtPat","","",186],[13,"NtExpr","","",186],[13,"NtTy","","",186],[13,"NtIdent","","",186],[13,"NtMeta","","Stuff inside brackets for attributes",186],[13,"NtPath","","",186],[13,"NtTT","","",186],[5,"get_ident_interner","",""],[5,"reset_ident_interner","","Reset the ident interner to its initial state."],[5,"get_name","","Returns the string contents of a name, using the task-local interner."],[5,"get_ident","","Returns the string contents of an identifier, using the task-local\ninterner."],[5,"intern_and_get_ident","","Interns and returns the string contents of an identifier, using the\ntask-local interner."],[5,"intern","","Maps a string to its interned representation."],[5,"gensym","","gensym's a new usize, using the current interner."],[5,"str_to_ident","","Maps a string to an identifier with an empty syntax context."],[5,"gensym_ident","","Maps a string to a gensym'ed identifier."],[5,"fresh_name","",""],[5,"fresh_mark","",""],[0,"special_idents","",""],[17,"invalid","syntax::parse::token::special_idents",""],[17,"self_","",""],[17,"statik","",""],[17,"super_","",""],[17,"static_lifetime","",""],[17,"tt","",""],[17,"matchers","",""],[17,"clownshoe_abi","",""],[17,"opaque","",""],[17,"unnamed_field","",""],[17,"type_self","",""],[17,"prelude_import","",""],[0,"special_names","syntax::parse::token",""],[17,"invalid","syntax::parse::token::special_names",""],[17,"self_","",""],[17,"statik","",""],[17,"super_","",""],[17,"static_lifetime","",""],[17,"tt","",""],[17,"matchers","",""],[17,"clownshoe_abi","",""],[17,"opaque","",""],[17,"unnamed_field","",""],[17,"type_self","",""],[17,"prelude_import","",""],[0,"keywords","syntax::parse::token","All the valid words that have meaning in the Rust language."],[4,"Keyword","syntax::parse::token::keywords",""],[13,"As","","",187],[13,"Break","","",187],[13,"Crate","","",187],[13,"Else","","",187],[13,"Enum","","",187],[13,"Extern","","",187],[13,"False","","",187],[13,"Fn","","",187],[13,"For","","",187],[13,"If","","",187],[13,"Impl","","",187],[13,"In","","",187],[13,"Let","","",187],[13,"Loop","","",187],[13,"Match","","",187],[13,"Mod","","",187],[13,"Move","","",187],[13,"Mut","","",187],[13,"Pub","","",187],[13,"Ref","","",187],[13,"Return","","",187],[13,"Static","","",187],[13,"SelfValue","","",187],[13,"SelfType","","",187],[13,"Struct","","",187],[13,"Super","","",187],[13,"True","","",187],[13,"Trait","","",187],[13,"Type","","",187],[13,"Unsafe","","",187],[13,"Use","","",187],[13,"Virtual","","",187],[13,"While","","",187],[13,"Continue","","",187],[13,"Proc","","",187],[13,"Box","","",187],[13,"Const","","",187],[13,"Where","","",187],[13,"Alignof","","",187],[13,"Become","","",187],[13,"Offsetof","","",187],[13,"Priv","","",187],[13,"Pure","","",187],[13,"Sizeof","","",187],[13,"Typeof","","",187],[13,"Unsized","","",187],[13,"Yield","","",187],[13,"Do","","",187],[13,"Abstract","","",187],[13,"Final","","",187],[13,"Override","","",187],[13,"Macro","","",187],[11,"eq","","",187],[11,"ne","","",187],[11,"clone","","",187],[11,"to_name","","",187],[6,"IdentInterner","syntax::parse::token",""],[17,"SELF_KEYWORD_NAME","",""],[17,"SELF_KEYWORD_NAME_NUM","",""],[11,"fmt","","",180],[11,"hash","","",180],[11,"eq","","",180],[11,"ne","","",180],[11,"decode","","",180],[11,"encode","","",180],[11,"clone","","",180],[11,"fmt","","",181],[11,"hash","","",181],[11,"eq","","",181],[11,"ne","","",181],[11,"decode","","",181],[11,"encode","","",181],[11,"clone","","",181],[11,"fmt","","",182],[11,"hash","","",182],[11,"eq","","",182],[11,"ne","","",182],[11,"decode","","",182],[11,"encode","","",182],[11,"clone","","",182],[11,"fmt","","",183],[11,"hash","","",183],[11,"eq","","",183],[11,"ne","","",183],[11,"decode","","",183],[11,"encode","","",183],[11,"clone","","",183],[11,"as_str","","",183],[11,"fmt","","",184],[11,"hash","","",184],[11,"eq","","",184],[11,"ne","","",184],[11,"decode","","",184],[11,"encode","","",184],[11,"clone","","",184],[11,"short_name","","",184],[11,"fmt","","",185],[11,"hash","","",185],[11,"eq","","",185],[11,"ne","","",185],[11,"decode","","",185],[11,"encode","","",185],[11,"clone","","",185],[11,"can_begin_expr","","Returns `true` if the token can appear at the start of an expression.",185],[11,"is_lit","","Returns `true` if the token is any literal",185],[11,"is_ident","","Returns `true` if the token is an identifier.",185],[11,"is_path","","Returns `true` if the token is an interpolated path.",185],[11,"is_plain_ident","","Returns `true` if the token is a path that is not followed by a `::`\ntoken.",185],[11,"is_lifetime","","Returns `true` if the token is a lifetime.",185],[11,"is_mutability","","Returns `true` if the token is either the `mut` or `const` keyword.",185],[11,"to_binop","","Maps a token to its corresponding binary operator.",185],[11,"is_keyword","","Returns `true` if the token is a given keyword, `kw`.",185],[11,"is_keyword_allow_following_colon","","",185],[11,"is_any_keyword","","Returns `true` if the token is either a special identifier, or a strict\nor reserved keyword.",185],[11,"is_strict_keyword","","Returns `true` if the token may not appear as an identifier.",185],[11,"is_reserved_keyword","","Returns `true` if the token is a keyword that has been reserved for\npossible future use.",185],[11,"mtwt_eq","","Hygienic identifier equality comparison.",185],[11,"hash","","",186],[11,"eq","","",186],[11,"ne","","",186],[11,"decode","","",186],[11,"encode","","",186],[11,"clone","","",186],[11,"fmt","","",186],[11,"cmp","","",188],[11,"partial_cmp","","",188],[11,"lt","","",188],[11,"le","","",188],[11,"gt","","",188],[11,"ge","","",188],[11,"hash","","",188],[11,"eq","","",188],[11,"ne","","",188],[11,"clone","","",188],[11,"new","","",188],[6,"Target","",""],[11,"deref","","",188],[11,"container_as_bytes","","",188],[11,"fmt","","",188],[11,"fmt","","",188],[11,"eq","","",188],[11,"ne","","",188],[11,"decode","","",188],[11,"encode","","",188],[0,"attr","syntax::parse",""],[8,"ParserAttr","syntax::parse::attr","A parser that can parse attributes."],[10,"parse_outer_attributes","","",189],[10,"parse_attribute","","",189],[10,"parse_inner_attrs_and_next","","",189],[10,"parse_meta_item","","",189],[10,"parse_meta_seq","","",189],[10,"parse_optional_meta","","",189],[11,"parse_outer_attributes","syntax::parse::parser","Parse attributes that appear before an item",169],[11,"parse_attribute","","Matches `attribute = # ! [ meta_item ]`",169],[11,"parse_inner_attrs_and_next","","Parse attributes that appear after the opening of an item. These should\nbe preceded by an exclamation mark, but we accept and warn about one\nterminated by a semicolon. In addition to a vector of inner attributes,\nthis function also returns a vector that may contain the first outer\nattribute of the next item (since we can't know whether the attribute\nis an inner attribute of the containing item or an outer attribute of\nthe first contained item until we see the semi).\nmatches inner_attrs* outer_attr?\nyou can make the 'next' field an Option, but the result is going to be\nmore useful as a vector.",169],[11,"parse_meta_item","","matches meta_item = IDENT\n| IDENT = lit\n| IDENT meta_seq",169],[11,"parse_meta_seq","","matches meta_seq = ( COMMASEP(meta_item) )",169],[11,"parse_optional_meta","","",169],[0,"common","syntax::parse","Common routines shared by parser mods"],[3,"SeqSep","syntax::parse::common","SeqSep : a sequence separator (token)\nand whether a trailing separator is allowed."],[12,"sep","","",190],[12,"trailing_sep_allowed","","",190],[5,"seq_sep_trailing_allowed","",""],[5,"seq_sep_none","",""],[0,"classify","syntax::parse","Routines the parser uses to classify AST nodes"],[5,"expr_requires_semi_to_be_stmt","syntax::parse::classify","Does this expression require a semicolon to be treated\nas a statement? The negation of this: 'can this expression\nbe used as a statement without a semicolon' -- is used\nas an early-bail-out in the parser so that, for instance,\n    if true {...} else {...}\n     |x| 5\nisn't parsed as (if true {...} else {...} | x) | 5"],[5,"expr_is_simple_block","",""],[5,"stmt_ends_with_semi","","this statement requires a semicolon after it.\nnote that in one case (stmt_semi), we've already\nseen the semicolon, and thus don't need another."],[0,"obsolete","syntax::parse","Support for parsing unsupported, old syntaxes, for the purpose of reporting errors. Parsing of\nthese syntaxes is tested by compile-test/obsolete-syntax.rs."],[4,"ObsoleteSyntax","syntax::parse::obsolete","The specific types of unsupported syntax"],[13,"Sized","","",191],[13,"ForSized","","",191],[13,"ProcType","","",191],[13,"ProcExpr","","",191],[13,"ClosureType","","",191],[13,"ClosureKind","","",191],[13,"EmptyIndex","","",191],[8,"ParserObsoleteMethods","",""],[10,"obsolete","","Reports an obsolete syntax non-fatal error.",192],[10,"obsolete_expr","","Reports an obsolete syntax non-fatal error, and returns\na placeholder expression",192],[10,"report","","",192],[10,"is_obsolete_ident","","",192],[10,"eat_obsolete_ident","","",192],[11,"hash","","",191],[11,"eq","","",191],[11,"ne","","",191],[11,"obsolete","syntax::parse::parser","Reports an obsolete syntax non-fatal error.",169],[11,"obsolete_expr","","Reports an obsolete syntax non-fatal error, and returns\na placeholder expression",169],[11,"report","","",169],[11,"is_obsolete_ident","","",169],[11,"eat_obsolete_ident","","",169],[0,"with_hygiene","syntax::parse",""],[5,"parse_tts_from_source_str","syntax::parse::with_hygiene",""],[11,"next_node_id","syntax::parse","",168],[11,"reserve_node_ids","","",168],[0,"ptr","syntax","The AST pointer"],[3,"P","syntax::ptr","An owned smart pointer."],[5,"P","","Construct a `P<T>` from a `T` value."],[11,"and_then","","Move out of the pointer.\nIntended for chaining transformations not covered by `map`.",193],[11,"map","","Transform the inner value, consuming `self` and producing a new `P<T>`.",193],[6,"Target","",""],[11,"deref","","",193],[11,"clone","","",193],[11,"eq","","",193],[11,"fmt","","",193],[11,"fmt","","",193],[11,"hash","","",193],[11,"decode","","",193],[11,"encode","","",193],[0,"show_span","syntax","Span debugger"],[5,"run","syntax::show_span",""],[0,"std_inject","syntax",""],[5,"maybe_inject_crates_ref","syntax::std_inject",""],[5,"maybe_inject_prelude","",""],[5,"use_std","",""],[0,"test","syntax",""],[5,"modify_for_testing","syntax::test",""],[0,"visit","syntax","AST walker. Each overridden visit method has full control over what\nhappens with its node, it can do its own traversal of the node's children,\ncall `visit::walk_*` to apply the default traversal algorithm, or prevent\ndeeper traversal by doing nothing."],[4,"FnKind","syntax::visit",""],[13,"FkItemFn","","fn foo() or extern \"Abi\" fn foo()",194],[13,"FkMethod","","fn foo(&self)",194],[13,"FkFnBlock","","|x, y| ...\nproc(x, y) ...",194],[5,"walk_inlined_item","",""],[5,"walk_crate","",""],[5,"walk_mod","",""],[5,"walk_local","",""],[5,"walk_lifetime_def","",""],[5,"walk_lifetime_bound","",""],[5,"walk_lifetime_ref","",""],[5,"walk_explicit_self","",""],[5,"walk_poly_trait_ref","","Like with walk_method_helper this doesn't correspond to a method\nin Visitor, and so it gets a _helper suffix."],[5,"walk_trait_ref","","Like with walk_method_helper this doesn't correspond to a method\nin Visitor, and so it gets a _helper suffix."],[5,"walk_item","",""],[5,"walk_enum_def","",""],[5,"walk_variant","",""],[5,"skip_ty","",""],[5,"walk_ty_opt","",""],[5,"walk_ty","",""],[5,"walk_lifetime_decls_helper","",""],[5,"walk_path","",""],[5,"walk_path_segment","",""],[5,"walk_path_parameters","",""],[5,"walk_assoc_type_binding","",""],[5,"walk_pat","",""],[5,"walk_foreign_item","",""],[5,"walk_ty_param_bounds_helper","",""],[5,"walk_ty_param_bound","",""],[5,"walk_ty_param","",""],[5,"walk_generics","",""],[5,"walk_fn_ret_ty","",""],[5,"walk_fn_decl","",""],[5,"walk_method_helper","",""],[5,"walk_fn","",""],[5,"walk_ty_method","",""],[5,"walk_trait_item","",""],[5,"walk_struct_def","",""],[5,"walk_struct_field","",""],[5,"walk_block","",""],[5,"walk_stmt","",""],[5,"walk_decl","",""],[5,"walk_expr_opt","",""],[5,"walk_exprs","",""],[5,"walk_mac","",""],[5,"walk_expr","",""],[5,"walk_arm","",""],[8,"Visitor","","Each method of the Visitor trait is a hook to be potentially\noverridden.  Each method's default implementation recursively visits\nthe substructure of the input via the corresponding `walk` method;\ne.g. the `visit_mod` method by default calls `visit::walk_mod`."],[11,"visit_name","","",195],[11,"visit_ident","","",195],[11,"visit_mod","","",195],[11,"visit_foreign_item","","",195],[11,"visit_item","","",195],[11,"visit_local","","",195],[11,"visit_block","","",195],[11,"visit_stmt","","",195],[11,"visit_arm","","",195],[11,"visit_pat","","",195],[11,"visit_decl","","",195],[11,"visit_expr","","",195],[11,"visit_expr_post","","",195],[11,"visit_ty","","",195],[11,"visit_generics","","",195],[11,"visit_fn","","",195],[11,"visit_ty_method","","",195],[11,"visit_trait_item","","",195],[11,"visit_trait_ref","","",195],[11,"visit_ty_param_bound","","",195],[11,"visit_poly_trait_ref","","",195],[11,"visit_struct_def","","",195],[11,"visit_struct_field","","",195],[11,"visit_variant","","",195],[11,"visit_opt_lifetime_ref","","Visits an optional reference to a lifetime. The `span` is the span of some surrounding\nreference should opt_lifetime be None.",195],[11,"visit_lifetime_bound","","",195],[11,"visit_lifetime_ref","","",195],[11,"visit_lifetime_def","","",195],[11,"visit_explicit_self","","",195],[11,"visit_mac","","",195],[11,"visit_path","","",195],[11,"visit_path_segment","","",195],[11,"visit_path_parameters","","",195],[11,"visit_assoc_type_binding","","",195],[11,"visit_attribute","","",195],[0,"print","syntax",""],[0,"pp","syntax::print","This pretty-printer is a direct reimplementation of Philip Karlton's\nMesa pretty-printer, as described in appendix A of"],[3,"BreakToken","syntax::print::pp",""],[3,"BeginToken","",""],[3,"PrintStackElem","",""],[3,"Printer","","In case you do not have the paper, here is an explanation of what's going\non."],[12,"out","","",196],[4,"Breaks","",""],[13,"Consistent","","",197],[13,"Inconsistent","","",197],[4,"Token","",""],[13,"String","","",198],[13,"Break","","",198],[13,"Begin","","",198],[13,"End","","",198],[13,"Eof","","",198],[4,"PrintStackBreak","",""],[13,"Fits","","",199],[13,"Broken","","",199],[5,"tok_str","",""],[5,"buf_str","",""],[5,"mk_printer","",""],[5,"rbox","",""],[5,"ibox","",""],[5,"cbox","",""],[5,"break_offset","",""],[5,"end","",""],[5,"eof","",""],[5,"word","",""],[5,"huge_word","",""],[5,"zero_word","",""],[5,"spaces","",""],[5,"zerobreak","",""],[5,"space","",""],[5,"hardbreak","",""],[5,"hardbreak_tok_offset","",""],[5,"hardbreak_tok","",""],[11,"eq","","",197],[11,"ne","","",197],[11,"clone","","",197],[11,"clone","","",200],[11,"clone","","",201],[11,"clone","","",198],[11,"is_eof","","",198],[11,"is_hardbreak_tok","","",198],[11,"last_token","","",196],[11,"replace_last_token","","",196],[11,"pretty_print","","",196],[11,"check_stream","","",196],[11,"scan_push","","",196],[11,"scan_pop","","",196],[11,"scan_top","","",196],[11,"scan_pop_bottom","","",196],[11,"advance_right","","",196],[11,"advance_left","","",196],[11,"check_stack","","",196],[11,"print_newline","","",196],[11,"indent","","",196],[11,"get_top","","",196],[11,"print_str","","",196],[11,"print","","",196],[0,"pprust","syntax::print",""],[3,"NoAnn","syntax::print::pprust",""],[3,"CurrentCommentAndLiteral","",""],[3,"State","",""],[12,"s","","",202],[4,"AnnNode","",""],[13,"NodeIdent","","",203],[13,"NodeName","","",203],[13,"NodeBlock","","",203],[13,"NodeItem","","",203],[13,"NodeExpr","","",203],[13,"NodePat","","",203],[5,"rust_printer","",""],[5,"rust_printer_annotated","",""],[5,"print_crate","","Requires you to pass an input filename and reader so that\nit can scan the input text for comments and literals to\ncopy forward."],[5,"to_string","",""],[5,"binop_to_string","",""],[5,"token_to_string","",""],[5,"ty_to_string","",""],[5,"bounds_to_string","",""],[5,"pat_to_string","",""],[5,"arm_to_string","",""],[5,"expr_to_string","",""],[5,"lifetime_to_string","",""],[5,"tt_to_string","",""],[5,"tts_to_string","",""],[5,"stmt_to_string","",""],[5,"item_to_string","",""],[5,"generics_to_string","",""],[5,"ty_method_to_string","",""],[5,"method_to_string","",""],[5,"fn_block_to_string","",""],[5,"path_to_string","",""],[5,"ident_to_string","",""],[5,"fun_to_string","",""],[5,"block_to_string","",""],[5,"meta_item_to_string","",""],[5,"attribute_to_string","",""],[5,"lit_to_string","",""],[5,"explicit_self_to_string","",""],[5,"variant_to_string","",""],[5,"arg_to_string","",""],[5,"mac_to_string","",""],[5,"visibility_qualified","",""],[0,"with_hygiene","",""],[5,"to_string_hyg","syntax::print::pprust::with_hygiene",""],[5,"ty_to_string","",""],[5,"bounds_to_string","",""],[5,"pat_to_string","",""],[5,"arm_to_string","",""],[5,"expr_to_string","",""],[5,"lifetime_to_string","",""],[5,"tt_to_string","",""],[5,"tts_to_string","",""],[5,"stmt_to_string","",""],[5,"item_to_string","",""],[5,"generics_to_string","",""],[5,"ty_method_to_string","",""],[5,"method_to_string","",""],[5,"fn_block_to_string","",""],[5,"path_to_string","",""],[5,"ident_to_string","",""],[5,"fun_to_string","",""],[5,"block_to_string","",""],[5,"meta_item_to_string","",""],[5,"attribute_to_string","",""],[5,"lit_to_string","",""],[5,"explicit_self_to_string","",""],[5,"variant_to_string","",""],[5,"arg_to_string","",""],[5,"mac_to_string","",""],[17,"indent_unit","syntax::print::pprust",""],[17,"default_columns","",""],[8,"PpAnn","",""],[11,"pre","","",204],[11,"post","","",204],[11,"new_from_input","","",202],[11,"new","","",202],[11,"ibox","","",202],[11,"end","","",202],[11,"cbox","","",202],[11,"rbox","","",202],[11,"nbsp","","",202],[11,"word_nbsp","","",202],[11,"word_space","","",202],[11,"popen","","",202],[11,"pclose","","",202],[11,"head","","",202],[11,"bopen","","",202],[11,"bclose_","","",202],[11,"bclose_maybe_open","","",202],[11,"bclose","","",202],[11,"is_begin","","",202],[11,"is_end","","",202],[11,"is_bol","","",202],[11,"in_cbox","","",202],[11,"hardbreak_if_not_bol","","",202],[11,"space_if_not_bol","","",202],[11,"break_offset_if_not_bol","","",202],[11,"synth_comment","","",202],[11,"commasep","","",202],[11,"commasep_cmnt","","",202],[11,"commasep_exprs","","",202],[11,"print_mod","","",202],[11,"print_foreign_mod","","",202],[11,"print_opt_lifetime","","",202],[11,"print_type","","",202],[11,"print_foreign_item","","",202],[11,"print_item","","Pretty-print an item",202],[11,"print_enum_def","","",202],[11,"print_variants","","",202],[11,"print_visibility","","",202],[11,"print_struct","","",202],[11,"print_tt","","This doesn't deserve to be called \"pretty\" printing, but it should be\nmeaning-preserving. A quick hack that might help would be to look at the\nspans embedded in the TTs to decide where to put spaces and newlines.\nBut it'd be better to parse these according to the grammar of the\nappropriate macro, transcribe back into the grammar we just parsed from,\nand then pretty-print the resulting AST nodes (so, e.g., we print\nexpression arguments as expressions). It can be done! I think.",202],[11,"print_tts","","",202],[11,"print_variant","","",202],[11,"print_ty_method","","",202],[11,"print_trait_method","","",202],[11,"print_impl_item","","",202],[11,"print_method","","",202],[11,"print_outer_attributes","","",202],[11,"print_inner_attributes","","",202],[11,"print_attribute","","",202],[11,"print_stmt","","",202],[11,"print_block","","",202],[11,"print_block_unclosed","","",202],[11,"print_block_unclosed_indent","","",202],[11,"print_block_with_attrs","","",202],[11,"print_block_maybe_unclosed","","",202],[11,"print_if","","",202],[11,"print_if_let","","",202],[11,"print_mac","","",202],[11,"print_expr_maybe_paren","","",202],[11,"print_expr","","",202],[11,"print_local_decl","","",202],[11,"print_decl","","",202],[11,"print_ident","","",202],[11,"print_usize","","",202],[11,"print_name","","",202],[11,"print_for_decl","","",202],[11,"print_pat","","",202],[11,"print_fn","","",202],[11,"print_fn_args","","",202],[11,"print_fn_args_and_ret","","",202],[11,"print_fn_block_args","","",202],[11,"print_capture_clause","","",202],[11,"print_bounds","","",202],[11,"print_lifetime","","",202],[11,"print_lifetime_def","","",202],[11,"print_generics","","",202],[11,"print_ty_param","","",202],[11,"print_where_clause","","",202],[11,"print_meta_item","","",202],[11,"print_view_path","","",202],[11,"print_mutability","","",202],[11,"print_mt","","",202],[11,"print_arg","","",202],[11,"print_fn_output","","",202],[11,"print_ty_fn","","",202],[11,"maybe_print_trailing_comment","","",202],[11,"print_remaining_comments","","",202],[11,"print_literal","","",202],[11,"next_lit","","",202],[11,"maybe_print_comment","","",202],[11,"print_comment","","",202],[11,"print_string","","",202],[11,"next_comment","","",202],[11,"print_opt_unsafety","","",202],[11,"print_opt_abi_and_extern_if_nondefault","","",202],[11,"print_extern_opt_abi","","",202],[11,"print_fn_header_info","","",202],[11,"print_unsafety","","",202],[0,"ext","syntax",""],[0,"asm","syntax::ext",""],[5,"expand_asm","syntax::ext::asm",""],[0,"base","syntax::ext",""],[3,"MacEager","syntax::ext::base","`MacResult` implementation for the common case where you've already\nbuilt each form of AST that you might return."],[12,"expr","","",205],[12,"pat","","",205],[12,"items","","",205],[12,"methods","","",205],[12,"stmt","","",205],[3,"DummyResult","","Fill-in macro expansion result, to allow compilation to continue\nafter hitting errors."],[3,"BlockInfo","",""],[12,"macros_escape","","Should macros escape from this scope?",206],[12,"pending_renames","","What are the pending renames?",206],[3,"ExtCtxt","","One of these is made during expansion and incrementally updated as we go;\nwhen a macro expansion occurs, the resulting nodes have the backtrace()\n-> expn_info of their expansion context stored into their span."],[12,"parse_sess","","",207],[12,"cfg","","",207],[12,"backtrace","","",207],[12,"ecfg","","",207],[12,"use_std","","",207],[12,"mod_path","","",207],[12,"trace_mac","","",207],[12,"exported_macros","","",207],[12,"syntax_env","","",207],[12,"recursion_count","","",207],[3,"SyntaxEnv","","In order to have some notion of scoping for macros,\nwe want to implement the notion of a transformation\nenvironment."],[4,"Annotatable","",""],[13,"Item","","",208],[13,"TraitItem","","",208],[13,"ImplItem","","",208],[4,"SyntaxExtension","","An enum representing the different kinds of syntax extensions."],[13,"Decorator","","A syntax extension that is attached to an item and creates new items\nbased upon it.",209],[13,"Modifier","","A syntax extension that is attached to an item and modifies it\nin-place.",209],[13,"MultiModifier","","A syntax extension that is attached to an item and modifies it\nin-place. More flexible version than Modifier.",209],[13,"NormalTT","","A normal, function-like syntax extension.",209],[13,"IdentTT","","A function-like syntax extension that has an extra ident before\nthe block.\n",209],[13,"MacroRulesTT","","Represents `macro_rules!` itself.",209],[5,"expr_to_string","","Extract a string literal from the macro expanded version of `expr`,\nemitting `err_msg` if `expr` is not a string literal. This does not stop\ncompilation on error, merely emits a non-fatal error and returns None."],[5,"check_zero_tts","","Non-fatally assert that `tts` is empty. Note that this function\nreturns even when `tts` is non-empty, macros that *need* to stop\ncompilation should call\n`cx.parse_sess.span_diagnostic.abort_if_errors()` (this should be\ndone as rarely as possible)."],[5,"get_single_str_from_tts","","Extract the string literal from the first token of `tts`. If this\nis not a string literal, emit an error and return None."],[5,"get_exprs_from_tts","","Extract comma-separated expressions from `tts`. If there is a\nparsing error, emit a non-fatal error and return None."],[6,"MacroExpanderFn","",""],[6,"IdentMacroExpanderFn","",""],[6,"NamedSyntaxExtension","",""],[8,"ItemDecorator","",""],[10,"expand","","",210],[8,"ItemModifier","",""],[10,"expand","","",211],[8,"MultiItemModifier","",""],[10,"expand","","",212],[8,"TTMacroExpander","","Represents a thing that maps token trees to Macro Results"],[10,"expand","","",213],[8,"IdentMacroExpander","",""],[10,"expand","","",214],[8,"MacResult","","The result of a macro expansion. The return values of the various\nmethods are spliced into the AST at the callsite of the macro."],[11,"make_expr","","Create an expression.",215],[11,"make_items","","Create zero or more items.",215],[11,"make_methods","","Create zero or more methods.",215],[11,"make_pat","","Create a pattern.",215],[11,"make_stmt","","Create a statement.",215],[11,"clone","","",208],[11,"fmt","","",208],[11,"attrs","","",208],[11,"fold_attrs","","",208],[11,"expect_item","","",208],[11,"expect_trait_item","","",208],[11,"expect_impl_item","","",208],[11,"default","","",205],[11,"expr","","",205],[11,"pat","","",205],[11,"items","","",205],[11,"methods","","",205],[11,"stmt","","",205],[11,"make_expr","","",205],[11,"make_items","","",205],[11,"make_methods","","",205],[11,"make_stmt","","",205],[11,"make_pat","","",205],[11,"any","","Create a default MacResult that can be anything.",216],[11,"expr","","Create a default MacResult that can only be an expression.",216],[11,"raw_expr","","A plain dummy expression.",216],[11,"raw_pat","","A plain dummy pattern.",216],[11,"make_expr","","",216],[11,"make_pat","","",216],[11,"make_items","","",216],[11,"make_methods","","",216],[11,"make_stmt","","",216],[11,"new","","",206],[11,"new","","",207],[11,"expand_expr","","",207],[11,"expander","","Returns a `Folder` for deeply expanding all macros in a AST node.",207],[11,"new_parser_from_tts","","",207],[11,"codemap","","",207],[11,"parse_sess","","",207],[11,"cfg","","",207],[11,"call_site","","",207],[11,"print_backtrace","","",207],[11,"backtrace","","",207],[11,"original_span","","",207],[11,"original_span_in_file","","",207],[11,"mod_push","","",207],[11,"mod_pop","","",207],[11,"mod_path","","",207],[11,"bt_push","","",207],[11,"bt_pop","","",207],[11,"insert_macro","","",207],[11,"span_fatal","","Emit `msg` attached to `sp`, and stop compilation immediately.",207],[11,"span_err","","Emit `msg` attached to `sp`, without immediately stopping\ncompilation.",207],[11,"span_warn","","",207],[11,"span_unimpl","","",207],[11,"span_bug","","",207],[11,"span_note","","",207],[11,"span_help","","",207],[11,"fileline_help","","",207],[11,"bug","","",207],[11,"trace_macros","","",207],[11,"set_trace_macros","","",207],[11,"ident_of","","",207],[11,"ident_of_std","","",207],[11,"name_of","","",207],[11,"push_frame","","",217],[11,"pop_frame","","",217],[11,"find","","",217],[11,"insert","","",217],[11,"info","","",217],[0,"build","syntax::ext",""],[8,"AstBuilder","syntax::ext::build",""],[10,"path","","",218],[10,"path_ident","","",218],[10,"path_global","","",218],[10,"path_all","","",218],[10,"qpath","","",218],[10,"qpath_all","","",218],[10,"ty_mt","","",218],[10,"ty","","",218],[10,"ty_path","","",218],[10,"ty_sum","","",218],[10,"ty_ident","","",218],[10,"ty_rptr","","",218],[10,"ty_ptr","","",218],[10,"ty_option","","",218],[10,"ty_infer","","",218],[10,"ty_vars","","",218],[10,"ty_vars_global","","",218],[10,"ty_field_imm","","",218],[10,"typaram","","",218],[10,"trait_ref","","",218],[10,"poly_trait_ref","","",218],[10,"typarambound","","",218],[10,"lifetime","","",218],[10,"lifetime_def","","",218],[10,"stmt_expr","","",218],[10,"stmt_let","","",218],[10,"stmt_let_typed","","",218],[10,"stmt_item","","",218],[10,"block","","",218],[10,"block_expr","","",218],[10,"block_all","","",218],[10,"expr","","",218],[10,"expr_path","","",218],[10,"expr_qpath","","",218],[10,"expr_ident","","",218],[10,"expr_self","","",218],[10,"expr_binary","","",218],[10,"expr_deref","","",218],[10,"expr_unary","","",218],[10,"expr_addr_of","","",218],[10,"expr_mut_addr_of","","",218],[10,"expr_field_access","","",218],[10,"expr_tup_field_access","","",218],[10,"expr_call","","",218],[10,"expr_call_ident","","",218],[10,"expr_call_global","","",218],[10,"expr_method_call","","",218],[10,"expr_block","","",218],[10,"expr_cast","","",218],[10,"field_imm","","",218],[10,"expr_struct","","",218],[10,"expr_struct_ident","","",218],[10,"expr_lit","","",218],[10,"expr_usize","","",218],[10,"expr_int","","",218],[10,"expr_u8","","",218],[10,"expr_u32","","",218],[10,"expr_bool","","",218],[10,"expr_vec","","",218],[10,"expr_vec_ng","","",218],[10,"expr_vec_slice","","",218],[10,"expr_str","","",218],[10,"expr_some","","",218],[10,"expr_none","","",218],[10,"expr_break","","",218],[10,"expr_tuple","","",218],[10,"expr_fail","","",218],[10,"expr_unreachable","","",218],[10,"expr_ok","","",218],[10,"expr_err","","",218],[10,"expr_try","","",218],[10,"pat","","",218],[10,"pat_wild","","",218],[10,"pat_lit","","",218],[10,"pat_ident","","",218],[10,"pat_ident_binding_mode","","",218],[10,"pat_enum","","",218],[10,"pat_struct","","",218],[10,"pat_tuple","","",218],[10,"pat_some","","",218],[10,"pat_none","","",218],[10,"pat_ok","","",218],[10,"pat_err","","",218],[10,"arm","","",218],[10,"arm_unreachable","","",218],[10,"expr_match","","",218],[10,"expr_if","","",218],[10,"expr_loop","","",218],[10,"lambda_fn_decl","","",218],[10,"lambda","","",218],[10,"lambda0","","",218],[10,"lambda1","","",218],[10,"lambda_expr","","",218],[10,"lambda_expr_0","","",218],[10,"lambda_expr_1","","",218],[10,"lambda_stmts","","",218],[10,"lambda_stmts_0","","",218],[10,"lambda_stmts_1","","",218],[10,"item","","",218],[10,"arg","","",218],[10,"fn_decl","","",218],[10,"item_fn_poly","","",218],[10,"item_fn","","",218],[10,"variant","","",218],[10,"item_enum_poly","","",218],[10,"item_enum","","",218],[10,"item_struct_poly","","",218],[10,"item_struct","","",218],[10,"item_mod","","",218],[10,"item_static","","",218],[10,"item_const","","",218],[10,"item_ty_poly","","",218],[10,"item_ty","","",218],[10,"attribute","","",218],[10,"meta_word","","",218],[10,"meta_list","","",218],[10,"meta_name_value","","",218],[10,"item_use","","",218],[10,"item_use_simple","","",218],[10,"item_use_simple_","","",218],[10,"item_use_list","","",218],[10,"item_use_glob","","",218],[11,"path","syntax::ext::base","",207],[11,"path_ident","","",207],[11,"path_global","","",207],[11,"path_all","","",207],[11,"qpath","","Constructs a qualified path.",207],[11,"qpath_all","","Constructs a qualified path.",207],[11,"ty_mt","","",207],[11,"ty","","",207],[11,"ty_path","","",207],[11,"ty_sum","","",207],[11,"ty_ident","","",207],[11,"ty_rptr","","",207],[11,"ty_ptr","","",207],[11,"ty_option","","",207],[11,"ty_field_imm","","",207],[11,"ty_infer","","",207],[11,"typaram","","",207],[11,"ty_vars","","",207],[11,"ty_vars_global","","",207],[11,"trait_ref","","",207],[11,"poly_trait_ref","","",207],[11,"typarambound","","",207],[11,"lifetime","","",207],[11,"lifetime_def","","",207],[11,"stmt_expr","","",207],[11,"stmt_let","","",207],[11,"stmt_let_typed","","",207],[11,"block","","",207],[11,"stmt_item","","",207],[11,"block_expr","","",207],[11,"block_all","","",207],[11,"expr","","",207],[11,"expr_path","","",207],[11,"expr_qpath","","Constructs a QPath expression.",207],[11,"expr_ident","","",207],[11,"expr_self","","",207],[11,"expr_binary","","",207],[11,"expr_deref","","",207],[11,"expr_unary","","",207],[11,"expr_field_access","","",207],[11,"expr_tup_field_access","","",207],[11,"expr_addr_of","","",207],[11,"expr_mut_addr_of","","",207],[11,"expr_call","","",207],[11,"expr_call_ident","","",207],[11,"expr_call_global","","",207],[11,"expr_method_call","","",207],[11,"expr_block","","",207],[11,"field_imm","","",207],[11,"expr_struct","","",207],[11,"expr_struct_ident","","",207],[11,"expr_lit","","",207],[11,"expr_usize","","",207],[11,"expr_int","","",207],[11,"expr_u32","","",207],[11,"expr_u8","","",207],[11,"expr_bool","","",207],[11,"expr_vec","","",207],[11,"expr_vec_ng","","",207],[11,"expr_vec_slice","","",207],[11,"expr_str","","",207],[11,"expr_cast","","",207],[11,"expr_some","","",207],[11,"expr_none","","",207],[11,"expr_break","","",207],[11,"expr_tuple","","",207],[11,"expr_fail","","",207],[11,"expr_unreachable","","",207],[11,"expr_ok","","",207],[11,"expr_err","","",207],[11,"expr_try","","",207],[11,"pat","","",207],[11,"pat_wild","","",207],[11,"pat_lit","","",207],[11,"pat_ident","","",207],[11,"pat_ident_binding_mode","","",207],[11,"pat_enum","","",207],[11,"pat_struct","","",207],[11,"pat_tuple","","",207],[11,"pat_some","","",207],[11,"pat_none","","",207],[11,"pat_ok","","",207],[11,"pat_err","","",207],[11,"arm","","",207],[11,"arm_unreachable","","",207],[11,"expr_match","","",207],[11,"expr_if","","",207],[11,"expr_loop","","",207],[11,"lambda_fn_decl","","",207],[11,"lambda","","",207],[11,"lambda0","","",207],[11,"lambda1","","",207],[11,"lambda_expr","","",207],[11,"lambda_expr_0","","",207],[11,"lambda_expr_1","","",207],[11,"lambda_stmts","","",207],[11,"lambda_stmts_0","","",207],[11,"lambda_stmts_1","","",207],[11,"arg","","",207],[11,"fn_decl","","",207],[11,"item","","",207],[11,"item_fn_poly","","",207],[11,"item_fn","","",207],[11,"variant","","",207],[11,"item_enum_poly","","",207],[11,"item_enum","","",207],[11,"item_struct","","",207],[11,"item_struct_poly","","",207],[11,"item_mod","","",207],[11,"item_static","","",207],[11,"item_const","","",207],[11,"item_ty_poly","","",207],[11,"item_ty","","",207],[11,"attribute","","",207],[11,"meta_word","","",207],[11,"meta_list","","",207],[11,"meta_name_value","","",207],[11,"item_use","","",207],[11,"item_use_simple","","",207],[11,"item_use_simple_","","",207],[11,"item_use_list","","",207],[11,"item_use_glob","","",207],[0,"cfg","syntax::ext",""],[5,"expand_cfg","syntax::ext::cfg",""],[0,"concat","syntax::ext",""],[5,"expand_syntax_ext","syntax::ext::concat",""],[0,"concat_idents","syntax::ext",""],[5,"expand_syntax_ext","syntax::ext::concat_idents",""],[0,"deriving","syntax::ext","The compiler code necessary to implement the `#[derive]` extensions."],[5,"register_all","syntax::ext::deriving",""],[0,"bounds","",""],[5,"expand_deriving_unsafe_bound","syntax::ext::deriving::bounds",""],[5,"expand_deriving_copy","",""],[0,"clone","syntax::ext::deriving",""],[5,"expand_deriving_clone","syntax::ext::deriving::clone",""],[0,"encodable","syntax::ext::deriving","The compiler code necessary to implement the `#[derive(Encodable)]`\n(and `Decodable`, in decodable.rs) extension.  The idea here is that\ntype-defining items may be tagged with `#[derive(Encodable, Decodable)]`."],[5,"expand_deriving_rustc_encodable","syntax::ext::deriving::encodable",""],[5,"expand_deriving_encodable","",""],[0,"decodable","syntax::ext::deriving","The compiler code necessary for `#[derive(Decodable)]`. See encodable.rs for more."],[5,"expand_deriving_rustc_decodable","syntax::ext::deriving::decodable",""],[5,"expand_deriving_decodable","",""],[0,"hash","syntax::ext::deriving",""],[5,"expand_deriving_hash","syntax::ext::deriving::hash",""],[0,"rand","syntax::ext::deriving",""],[5,"expand_deriving_rand","syntax::ext::deriving::rand",""],[0,"show","syntax::ext::deriving",""],[5,"expand_deriving_show","syntax::ext::deriving::show",""],[0,"default","syntax::ext::deriving",""],[5,"expand_deriving_default","syntax::ext::deriving::default",""],[0,"primitive","syntax::ext::deriving",""],[5,"expand_deriving_from_primitive","syntax::ext::deriving::primitive",""],[0,"eq","syntax::ext::deriving",""],[5,"expand_deriving_eq","syntax::ext::deriving::eq",""],[0,"totaleq","syntax::ext::deriving",""],[5,"expand_deriving_totaleq","syntax::ext::deriving::totaleq",""],[0,"ord","syntax::ext::deriving",""],[4,"OrderingOp","syntax::ext::deriving::ord",""],[13,"PartialCmpOp","","",219],[13,"LtOp","","",219],[13,"LeOp","","",219],[13,"GtOp","","",219],[13,"GeOp","","",219],[5,"expand_deriving_ord","",""],[5,"some_ordering_collapsed","",""],[5,"cs_partial_cmp","",""],[0,"totalord","syntax::ext::deriving",""],[5,"expand_deriving_totalord","syntax::ext::deriving::totalord",""],[5,"ordering_collapsed","",""],[5,"cs_cmp","",""],[0,"generic","syntax::ext::deriving","Some code that abstracts away much of the boilerplate of writing\n`derive` instances for traits. Among other things it manages getting\naccess to the fields of the 4 different sorts of structs and enum\nvariants, as well as creating the method and impl ast instances."],[3,"TraitDef","syntax::ext::deriving::generic",""],[12,"span","","The span for the current #[derive(Foo)] header.",220],[12,"attributes","","",220],[12,"path","","Path of the trait, including any type parameters",220],[12,"additional_bounds","","Additional bounds required of any type parameters of the type,\nother than the current trait",220],[12,"generics","","Any extra lifetimes and/or bounds, e.g. `D: serialize::Decoder`",220],[12,"methods","","",220],[12,"associated_types","","",220],[3,"MethodDef","",""],[12,"name","","name of the method",221],[12,"generics","","List of generics, e.g. `R: rand::Rng`",221],[12,"explicit_self","","Whether there is a self argument (outer Option) i.e. whether\nthis is a static function, and whether it is a pointer (inner\nOption)",221],[12,"args","","Arguments other than the self argument",221],[12,"ret_ty","","Return type",221],[12,"attributes","","",221],[12,"combine_substructure","","",221],[3,"Substructure","","All the data about the data structure/method being derived upon."],[12,"type_ident","","ident of self",222],[12,"method_ident","","ident of the method",222],[12,"self_args","","dereferenced access to any `Self_` or `Ptr(Self_, _)` arguments",222],[12,"nonself_args","","verbatim access to any other arguments",222],[12,"fields","","",222],[3,"FieldInfo","","Summary of the relevant parts of a struct/enum field."],[12,"span","","",223],[12,"name","","None for tuple structs/normal enum variants, Some for normal\nstructs/struct enum variants.",223],[12,"self_","","The expression corresponding to this field of `self`\n(specifically, a reference to it).",223],[12,"other","","The expressions corresponding to references to this field in\nthe other `Self` arguments.",223],[4,"StaticFields","","Fields for a static method"],[13,"Unnamed","","Tuple structs/enum variants like this.",224],[13,"Named","","Normal structs/struct variants.",224],[4,"SubstructureFields","","A summary of the possible sets of fields."],[13,"Struct","","",225],[13,"EnumMatching","","Matching variants of the enum: variant index, ast::Variant,\nfields: the field name is only non-`None` in the case of a struct\nvariant.",225],[13,"EnumNonMatchingCollapsed","","Non-matching variants of the enum, but with all state hidden from\nthe consequent code.  The first component holds `Ident`s for all of\nthe `Self` arguments; the second component is a slice of all of the\nvariants for the enum itself, and the third component is a list of\n`Ident`s bound to the variant index values for each of the actual\ninput `Self` arguments.",225],[13,"StaticStruct","","A static method where `Self` is a struct.",225],[13,"StaticEnum","","A static method where `Self` is an enum.",225],[5,"combine_substructure","",""],[5,"cs_fold","","Fold the fields. `use_foldl` controls whether this is done\nleft-to-right (`true`) or right-to-left (`false`)."],[5,"cs_same_method","","Call the method that is being derived on all the fields, and then\nprocess the collected results. i.e."],[5,"cs_same_method_fold","","Fold together the results of calling the derived method on all the\nfields. `use_foldl` controls whether this is done left-to-right\n(`true`) or right-to-left (`false`)."],[5,"cs_binop","","Use a given binop to combine the result of calling the derived method\non all the fields."],[5,"cs_or","","cs_binop with binop == or"],[5,"cs_and","","cs_binop with binop == and"],[0,"ty","","A mini version of ast::Ty, which is easier to use, and features an explicit `Self` type to use\nwhen specifying impls to be derived."],[3,"Path","syntax::ext::deriving::generic::ty","A path, e.g. `::std::option::Option::<i32>` (global). Has support\nfor type parameters and a lifetime."],[12,"path","","",226],[12,"lifetime","","",226],[12,"params","","",226],[12,"global","","",226],[3,"LifetimeBounds","","Lifetimes and bounds on type parameters"],[12,"lifetimes","","",227],[12,"bounds","","",227],[4,"PtrTy","","The types of pointers"],[13,"Borrowed","","&'lifetime mut",228],[13,"Raw","","*mut",228],[4,"Ty","","A type. Supports pointers, Self, and literals"],[13,"Self_","","",229],[13,"Ptr","","&/Box/ Ty",229],[13,"Literal","","mod::mod::Type<[lifetime], [Params...]>, including a plain type\nparameter, and things like `i32`",229],[13,"Tuple","","includes unit",229],[5,"borrowed_ptrty","",""],[5,"borrowed","",""],[5,"borrowed_explicit_self","",""],[5,"borrowed_self","",""],[5,"nil_ty","",""],[5,"get_explicit_self","",""],[11,"clone","","",228],[11,"clone","","",226],[11,"new","","",226],[11,"new_local","","",226],[11,"new_","","",226],[11,"to_ty","","",226],[11,"to_path","","",226],[11,"clone","","",229],[11,"to_ty","","",229],[11,"to_path","","",229],[11,"clone","","",227],[11,"empty","","",227],[11,"to_generics","","",227],[6,"CombineSubstructureFunc","syntax::ext::deriving::generic","Combine the values of all the fields together. The last argument is\nall the fields of all the structures."],[6,"EnumNonMatchCollapsedFunc","","Deal with non-matching enum variants.  The tuple is a list of\nidentifiers (one for each `Self` argument, which could be any of the\nvariants since they have been collapsed together) and the identifiers\nholding the variant index value for each of the `Self` arguments.  The\nlast argument is all the non-`Self` args of the method being derived."],[11,"expand","","",220],[0,"env","syntax::ext",""],[5,"expand_option_env","syntax::ext::env",""],[5,"expand_env","",""],[0,"expand","syntax::ext",""],[3,"IdentRenamer","syntax::ext::expand","A tree-folder that applies every rename in its (mutable) list\nto every identifier, including both bindings and varrefs\n(and lots of things that will turn out to be neither)"],[3,"PatIdentRenamer","","A tree-folder that applies every rename in its list to\nthe idents that are in PatIdent patterns. This is more narrowly\nfocused than IdentRenamer, and is needed for FnDecl,\nwhere we want to rename the args but not the fn name or the generics etc."],[3,"MacroExpander","","A tree-folder that performs macro expansion"],[12,"cx","","",230],[3,"ExpansionConfig","",""],[12,"crate_name","","",231],[12,"features","","",231],[12,"recursion_limit","","",231],[5,"expand_type","",""],[5,"expand_expr","",""],[5,"expand_item","",""],[5,"expand_item_mac","",""],[5,"expand_block","",""],[5,"expand_block_elts","",""],[5,"expand_crate","",""],[5,"check_for_macros","","Check that there are no macro invocations left in the AST:"],[11,"fold_ident","","",232],[11,"fold_mac","","",232],[11,"fold_pat","","",233],[11,"fold_mac","","",233],[11,"new","","",230],[11,"fold_expr","","",230],[11,"fold_pat","","",230],[11,"fold_item","","",230],[11,"fold_item_underscore","","",230],[11,"fold_stmt","","",230],[11,"fold_block","","",230],[11,"fold_arm","","",230],[11,"fold_trait_item","","",230],[11,"fold_impl_item","","",230],[11,"fold_method","","",230],[11,"fold_ty","","",230],[11,"new_span","","",230],[11,"default","","",231],[11,"enable_quotes","","",231],[11,"enable_asm","","",231],[11,"enable_log_syntax","","",231],[11,"enable_concat_idents","","",231],[11,"enable_trace_macros","","",231],[11,"enable_allow_internal_unstable","","",231],[11,"enable_custom_derive","","",231],[0,"format","syntax::ext",""],[5,"expand_format_args","syntax::ext::format",""],[5,"expand_preparsed_format_args","","Take the various parts of `format_args!(efmt, args..., name=names...)`\nand construct the appropriate formatting expression."],[0,"log_syntax","syntax::ext",""],[5,"expand_syntax_ext","syntax::ext::log_syntax",""],[0,"mtwt","syntax::ext","Machinery for hygienic macros, as described in the MTWT[1] paper."],[3,"SCTable","syntax::ext::mtwt","The SCTable contains a table of SyntaxContext_'s. It\nrepresents a flattened tree structure, to avoid having\nmanaged pointers everywhere (that caused an ICE).\nthe mark_memo and rename_memo fields are side-tables\nthat ensure that adding the same mark to the same context\ngives you back the same context as before. This shouldn't\nchange the semantics--everything here is immutable--but\nit should cut down on memory use *a lot*; applying a mark\nto a tree containing 50 identifiers would otherwise generate\n50 new contexts"],[4,"SyntaxContext_","",""],[13,"EmptyCtxt","","",234],[13,"Mark","","",234],[13,"Rename","","flattening the name and syntaxcontext into the rename...\nHIDDEN INVARIANTS:\n1) the first name in a Rename node\ncan only be a programmer-supplied name.\n2) Every Rename node with a given Name in the\n\"to\" slot must have the same name and context\nin the \"from\" slot. In essence, they're all\npointers to a single \"rename\" event node.",234],[13,"IllegalCtxt","","actually, IllegalCtxt may not be necessary.",234],[5,"apply_mark","","Extend a syntax context with a given mark"],[5,"apply_rename","","Extend a syntax context with a given rename"],[5,"apply_renames","","Apply a list of renamings to a context"],[5,"with_sctable","","Fetch the SCTable from TLS, create one if it doesn't yet exist."],[5,"display_sctable","","Print out an SCTable for debugging"],[5,"clear_tables","","Clear the tables from TLD to reclaim memory."],[5,"reset_tables","","Reset the tables to their initial state"],[5,"resolve","","Resolve a syntax object to a name, per MTWT."],[5,"marksof","","Compute the marks associated with a syntax context."],[5,"outer_mark","","Return the outer mark for a context with a mark at the outside.\nFAILS when outside is not a mark."],[6,"RenameList","","A list of ident->name renamings"],[11,"fmt","","",234],[11,"hash","","",234],[11,"decode","","",234],[11,"encode","","",234],[11,"eq","","",234],[11,"ne","","",234],[0,"quote","syntax::ext",""],[5,"expand_quote_tokens","syntax::ext::quote",""],[5,"expand_quote_expr","",""],[5,"expand_quote_item","",""],[5,"expand_quote_pat","",""],[5,"expand_quote_arm","",""],[5,"expand_quote_ty","",""],[5,"expand_quote_method","",""],[5,"expand_quote_stmt","",""],[5,"expand_quote_attr","",""],[5,"expand_quote_matcher","",""],[0,"rt","","Quasiquoting works via token trees."],[8,"ToTokens","syntax::ext::quote::rt",""],[10,"to_tokens","","",235],[8,"ToSource","",""],[10,"to_source","","",236],[8,"ExtParseUtils","",""],[10,"parse_item","","",237],[10,"parse_expr","","",237],[10,"parse_stmt","","",237],[10,"parse_tts","","",237],[11,"to_tokens","syntax::ast","",81],[11,"to_tokens","collections::vec","",166],[11,"to_tokens","syntax::codemap","",136],[11,"to_tokens","core::option","",238],[11,"to_source","syntax::ast","",10],[11,"to_source","","",41],[11,"to_source","","",25],[11,"to_source","","",44],[11,"to_source","","",19],[11,"to_source","syntax::ptr","",193],[11,"to_source","","",193],[11,"to_source","","",193],[11,"to_source","","",193],[11,"to_source","","",193],[11,"to_source","syntax::ast","",29],[11,"to_source","","",52],[11,"to_tokens","","",10],[11,"to_tokens","syntax::ptr","",193],[11,"to_tokens","","",193],[11,"to_tokens","syntax::ast","",29],[11,"to_tokens","syntax::ptr","",193],[11,"to_tokens","syntax::ast","",41],[11,"to_tokens","","",19],[11,"to_tokens","syntax::ptr","",193],[11,"to_tokens","","",193],[11,"to_tokens","syntax::ast","",25],[11,"to_tokens","","",44],[11,"to_tokens","","",52],[11,"parse_item","syntax::ext::base","",207],[11,"parse_stmt","","",207],[11,"parse_expr","","",207],[11,"parse_tts","","",207],[0,"source_util","syntax::ext",""],[5,"expand_line","syntax::ext::source_util","line!(): expands to the current line number"],[5,"expand_column","",""],[5,"expand_file","","file!(): expands to the current filename */\nThe filemap (`loc.file`) contains a bunch more information we could spit\nout if we wanted."],[5,"expand_stringify","",""],[5,"expand_mod","",""],[5,"expand_include","","include! : parse the given file as an expr\nThis is generally a bad idea because it's going to behave\nunhygienically."],[5,"expand_include_str","",""],[5,"expand_include_bytes","",""],[0,"trace_macros","syntax::ext",""],[5,"expand_trace_macros","syntax::ext::trace_macros",""],[0,"tt","syntax::ext",""],[0,"transcribe","syntax::ext::tt",""],[3,"TtReader","syntax::ext::tt::transcribe",""],[12,"sp_diag","","",239],[12,"cur_tok","","",239],[12,"cur_span","","",239],[12,"desugar_doc_comments","","Transform doc comments. Only useful in macro invocations",239],[5,"new_tt_reader","","This can do Macro-By-Example transcription. On the other hand, if\n`src` contains no `TtSequence`s, `MatchNt`s or `SubstNt`s, `interp` can\n(and should) be None."],[5,"new_tt_reader_with_doc_flag","","The extra `desugar_doc_comments` flag enables reading doc comments\nlike any other attribute which consists of `meta` and surrounding #[ ] tokens."],[5,"tt_next_token","","Return the next token from the TtReader.\nEFFECT: advances the reader's token field"],[11,"clone","","",239],[0,"macro_parser","syntax::ext::tt","This is an Earley-like parser, without support for in-grammar nonterminals,\nonly by calling out to the main rust parser for named nonterminals (which it\ncommits to fully when it hits one in a grammar). This means that there are no\ncompleter or predictor rules, and therefore no need to store one column per\ntoken: instead, there's a set of current Earley items and a set of next\nones. Instead of NTs, we have a special case for Kleene star. The big-O, in\npathological cases, is worse than traditional Earley parsing, but it's an\neasier fit for Macro-by-Example-style rules, and I think the overhead is\nlower. (In order to prevent the pathological case, we'd need to lazily\nconstruct the resulting `NamedMatch`es at the very end. It'd be a pain,\nand require more memory to keep around old items, but it would also save\noverhead)"],[3,"MatcherPos","syntax::ext::tt::macro_parser",""],[4,"NamedMatch","","NamedMatch is a pattern-match result for a single token::MATCH_NONTERMINAL:\nso it is associated with a single ident in a parse, and all\n`MatchedNonterminal`s in the NamedMatch have the same nonterminal type\n(expr, item, etc). Each leaf in a single NamedMatch corresponds to a\nsingle token::MATCH_NONTERMINAL in the TokenTree that produced it."],[13,"MatchedSeq","","",240],[13,"MatchedNonterminal","","",240],[4,"ParseResult","",""],[13,"Success","","",241],[13,"Failure","","",241],[13,"Error","","",241],[5,"count_names","",""],[5,"initial_matcher_pos","",""],[5,"nameize","",""],[5,"parse_or_else","",""],[5,"token_name_eq","","Perform a token equality check, ignoring syntax context (that is, an\nunhygienic comparison)"],[5,"parse","",""],[5,"parse_nt","",""],[6,"NamedParseResult","",""],[6,"PositionalParseResult","",""],[11,"clone","","",242],[0,"macro_rules","syntax::ext::tt",""],[5,"compile","syntax::ext::tt::macro_rules","Converts a `macro_rules!` invocation into a syntax extension."],[14,"register_diagnostic!","syntax",""],[14,"span_fatal!","",""],[14,"span_err!","",""],[14,"span_warn!","",""],[14,"span_note!","",""],[14,"span_help!","",""],[14,"fileline_help!","",""],[14,"register_diagnostics!","",""],[14,"register_long_diagnostics!","",""],[11,"print_node","syntax::print::pprust","",202],[11,"name","syntax::ptr","",193],[11,"value_str","","",193],[11,"meta_item_list","","",193],[11,"span","","",193],[11,"move_map","syntax::owned_slice","",167],[11,"is_eof","syntax::ext::tt::transcribe","",239],[11,"next_token","","",239],[11,"fatal","","",239],[11,"err","","",239],[11,"peek","","",239]],"paths":[[3,"Interner"],[3,"RcStr"],[3,"StrInterner"],[3,"SmallVector"],[3,"IntoIter"],[3,"Registry"],[4,"Os"],[4,"Abi"],[4,"Architecture"],[4,"AbiArchitecture"],[3,"Ident"],[3,"Lifetime"],[3,"LifetimeDef"],[3,"Path"],[3,"PathSegment"],[3,"AngleBracketedParameterData"],[3,"ParenthesizedParameterData"],[3,"DefId"],[3,"TyParam"],[3,"Generics"],[3,"WhereClause"],[3,"WhereBoundPredicate"],[3,"WhereRegionPredicate"],[3,"WhereEqPredicate"],[3,"Crate"],[3,"Block"],[3,"Pat"],[3,"FieldPat"],[3,"Local"],[3,"Arm"],[3,"Field"],[3,"Expr"],[3,"QSelf"],[3,"Delimited"],[3,"SequenceRepetition"],[3,"MutTy"],[3,"TypeField"],[3,"TypeMethod"],[3,"AssociatedType"],[3,"Typedef"],[3,"TypeBinding"],[3,"Ty"],[3,"BareFnTy"],[3,"InlineAsm"],[3,"Arg"],[3,"FnDecl"],[3,"Method"],[3,"Mod"],[3,"ForeignMod"],[3,"VariantArg"],[3,"EnumDef"],[3,"Variant_"],[3,"Attribute_"],[3,"TraitRef"],[3,"PolyTraitRef"],[3,"StructField_"],[3,"StructDef"],[3,"Item"],[3,"ForeignItem"],[3,"MacroDef"],[4,"PathParameters"],[4,"TyParamBound"],[4,"TraitBoundModifier"],[4,"WherePredicate"],[4,"MetaItem_"],[4,"BindingMode"],[4,"PatWildKind"],[4,"Pat_"],[4,"Mutability"],[4,"BinOp_"],[4,"UnOp"],[4,"Stmt_"],[4,"MacStmtStyle"],[4,"LocalSource"],[4,"Decl_"],[4,"BlockCheckMode"],[4,"UnsafeSource"],[4,"Expr_"],[4,"MatchSource"],[4,"CaptureClause"],[4,"KleeneOp"],[4,"TokenTree"],[4,"Mac_"],[4,"StrStyle"],[4,"Sign"],[4,"LitIntType"],[4,"Lit_"],[4,"TraitItem"],[4,"ImplItem"],[4,"IntTy"],[4,"UintTy"],[4,"FloatTy"],[4,"PrimTy"],[4,"Ty_"],[4,"AsmDialect"],[4,"Unsafety"],[4,"ImplPolarity"],[4,"FunctionRetTy"],[4,"ExplicitSelf_"],[4,"Method_"],[4,"VariantKind"],[4,"PathListItem_"],[4,"ViewPath_"],[4,"AttrStyle"],[4,"Visibility"],[4,"StructFieldKind"],[4,"Item_"],[4,"ForeignItem_"],[4,"InlinedItem"],[3,"Name"],[3,"AttrId"],[4,"PathElem"],[4,"Node"],[3,"FnParts"],[4,"Code"],[8,"MaybeFnLike"],[3,"FnLikeNode"],[8,"FoldOps"],[8,"NodePrinter"],[3,"Forest"],[3,"Map"],[3,"NodesMatchingSuffix"],[3,"IdRange"],[3,"IdVisitor"],[8,"IdVisitingOperation"],[8,"PostExpansionMethod"],[3,"Stability"],[4,"InlineAttr"],[4,"StabilityLevel"],[4,"ReprAttr"],[4,"IntType"],[8,"AttrMetaMethods"],[8,"AttributeMethods"],[6,"Attribute"],[6,"MetaItem"],[3,"Span"],[3,"Spanned"],[3,"Loc"],[3,"LocWithOpt"],[3,"FileMapAndLine"],[3,"FileMapAndBytePos"],[3,"NameAndSpan"],[3,"ExpnInfo"],[3,"FileLines"],[3,"MultiByteChar"],[3,"FileMap"],[3,"CodeMap"],[4,"MacroFormat"],[4,"SpanSnippetError"],[8,"Pos"],[3,"BytePos"],[3,"CharPos"],[3,"ExpnId"],[3,"DistinctSources"],[3,"MalformedCodemapPositions"],[3,"SpanHandler"],[3,"Handler"],[4,"RenderSpan"],[4,"ColorConfig"],[4,"Level"],[8,"Emitter"],[3,"EmitterWriter"],[3,"Features"],[4,"AttributeType"],[8,"MoveMap"],[8,"Folder"],[3,"Vec"],[3,"OwnedSlice"],[3,"ParseSess"],[3,"Parser"],[4,"PathParsingMode"],[4,"BoundParsingMode"],[4,"TokenType"],[3,"Restrictions"],[3,"TokenAndSpan"],[3,"StringReader"],[3,"Comment"],[3,"Literal"],[4,"CommentStyle"],[8,"Reader"],[4,"BinOpToken"],[4,"DelimToken"],[4,"IdentStyle"],[4,"SpecialMacroVar"],[4,"Lit"],[4,"Token"],[4,"Nonterminal"],[4,"Keyword"],[3,"InternedString"],[8,"ParserAttr"],[3,"SeqSep"],[4,"ObsoleteSyntax"],[8,"ParserObsoleteMethods"],[3,"P"],[4,"FnKind"],[8,"Visitor"],[3,"Printer"],[4,"Breaks"],[4,"Token"],[4,"PrintStackBreak"],[3,"BreakToken"],[3,"BeginToken"],[3,"State"],[4,"AnnNode"],[8,"PpAnn"],[3,"MacEager"],[3,"BlockInfo"],[3,"ExtCtxt"],[4,"Annotatable"],[4,"SyntaxExtension"],[8,"ItemDecorator"],[8,"ItemModifier"],[8,"MultiItemModifier"],[8,"TTMacroExpander"],[8,"IdentMacroExpander"],[8,"MacResult"],[3,"DummyResult"],[3,"SyntaxEnv"],[8,"AstBuilder"],[4,"OrderingOp"],[3,"TraitDef"],[3,"MethodDef"],[3,"Substructure"],[3,"FieldInfo"],[4,"StaticFields"],[4,"SubstructureFields"],[3,"Path"],[3,"LifetimeBounds"],[4,"PtrTy"],[4,"Ty"],[3,"MacroExpander"],[3,"ExpansionConfig"],[3,"IdentRenamer"],[3,"PatIdentRenamer"],[4,"SyntaxContext_"],[8,"ToTokens"],[8,"ToSource"],[8,"ExtParseUtils"],[4,"Option"],[3,"TtReader"],[4,"NamedMatch"],[4,"ParseResult"],[3,"MatcherPos"]]};
searchIndex['rustc_driver'] = {"items":[[0,"","rustc_driver","The Rust compiler."],[0,"diagnostic","",""],[11,"new","syntax::util::interner","",0],[11,"prefill","","",0],[11,"intern","","",0],[11,"gensym","","",0],[11,"get","","",0],[11,"len","","",0],[11,"find","","",0],[11,"clear","","",0],[11,"partial_cmp","","",1],[11,"lt","","",1],[11,"le","","",1],[11,"gt","","",1],[11,"ge","","",1],[11,"hash","","",1],[11,"eq","","",1],[11,"ne","","",1],[11,"clone","","",1],[11,"new","","",1],[11,"cmp","","",1],[11,"fmt","","",1],[11,"fmt","","",1],[11,"borrow","","",1],[6,"Target","rustc_driver::diagnostic",""],[11,"deref","syntax::util::interner","",1],[11,"new","","",2],[11,"prefill","","",2],[11,"intern","","",2],[11,"gensym","","",2],[11,"gensym_copy","","Create a gensym with the same name as an existing\nentry.",2],[11,"get","","",2],[11,"len","","",2],[11,"find","","",2],[11,"clear","","",2],[11,"reset","","",2],[11,"from_iter","syntax::util::small_vector","",3],[11,"extend","","",3],[11,"zero","","",3],[11,"one","","",3],[11,"many","","",3],[11,"as_slice","","",3],[11,"push","","",3],[11,"push_all","","",3],[11,"get","","",3],[11,"expect_one","","",3],[11,"move_iter","","Deprecated: use `into_iter`.",3],[11,"into_iter","","",3],[11,"len","","",3],[11,"is_empty","","",3],[6,"Item","rustc_driver::diagnostic",""],[11,"next","syntax::util::small_vector","",4],[11,"size_hint","","",4],[11,"move_map","","",3],[11,"clone","syntax::diagnostics::registry","",5],[11,"new","","",5],[11,"find_description","","",5],[11,"clone","syntax::ext::base","",6],[11,"fmt","","",6],[11,"attrs","","",6],[11,"fold_attrs","","",6],[11,"expect_item","","",6],[11,"expect_trait_item","","",6],[11,"expect_impl_item","","",6],[11,"default","","",7],[11,"expr","","",7],[11,"pat","","",7],[11,"items","","",7],[11,"methods","","",7],[11,"stmt","","",7],[11,"make_expr","","",7],[11,"make_items","","",7],[11,"make_methods","","",7],[11,"make_stmt","","",7],[11,"make_pat","","",7],[11,"any","","Create a default MacResult that can be anything.",8],[11,"expr","","Create a default MacResult that can only be an expression.",8],[11,"raw_expr","","A plain dummy expression.",8],[11,"raw_pat","","A plain dummy pattern.",8],[11,"make_expr","","",8],[11,"make_pat","","",8],[11,"make_items","","",8],[11,"make_methods","","",8],[11,"make_stmt","","",8],[11,"new","","",9],[11,"new","","",10],[11,"expand_expr","","",10],[11,"expander","","Returns a `Folder` for deeply expanding all macros in a AST node.",10],[11,"new_parser_from_tts","","",10],[11,"codemap","","",10],[11,"parse_sess","","",10],[11,"cfg","","",10],[11,"call_site","","",10],[11,"print_backtrace","","",10],[11,"backtrace","","",10],[11,"original_span","","",10],[11,"original_span_in_file","","",10],[11,"mod_push","","",10],[11,"mod_pop","","",10],[11,"mod_path","","",10],[11,"bt_push","","",10],[11,"bt_pop","","",10],[11,"insert_macro","","",10],[11,"span_fatal","","Emit `msg` attached to `sp`, and stop compilation immediately.",10],[11,"span_err","","Emit `msg` attached to `sp`, without immediately stopping\ncompilation.",10],[11,"span_warn","","",10],[11,"span_unimpl","","",10],[11,"span_bug","","",10],[11,"span_note","","",10],[11,"span_help","","",10],[11,"fileline_help","","",10],[11,"bug","","",10],[11,"trace_macros","","",10],[11,"set_trace_macros","","",10],[11,"ident_of","","",10],[11,"ident_of_std","","",10],[11,"name_of","","",10],[11,"push_frame","","",11],[11,"pop_frame","","",11],[11,"find","","",11],[11,"insert","","",11],[11,"info","","",11],[11,"path","","",10],[11,"path_ident","","",10],[11,"path_global","","",10],[11,"path_all","","",10],[11,"qpath","","Constructs a qualified path.",10],[11,"qpath_all","","Constructs a qualified path.",10],[11,"ty_mt","","",10],[11,"ty","","",10],[11,"ty_path","","",10],[11,"ty_sum","","",10],[11,"ty_ident","","",10],[11,"ty_rptr","","",10],[11,"ty_ptr","","",10],[11,"ty_option","","",10],[11,"ty_field_imm","","",10],[11,"ty_infer","","",10],[11,"typaram","","",10],[11,"ty_vars","","",10],[11,"ty_vars_global","","",10],[11,"trait_ref","","",10],[11,"poly_trait_ref","","",10],[11,"typarambound","","",10],[11,"lifetime","","",10],[11,"lifetime_def","","",10],[11,"stmt_expr","","",10],[11,"stmt_let","","",10],[11,"stmt_let_typed","","",10],[11,"block","","",10],[11,"stmt_item","","",10],[11,"block_expr","","",10],[11,"block_all","","",10],[11,"expr","","",10],[11,"expr_path","","",10],[11,"expr_qpath","","Constructs a QPath expression.",10],[11,"expr_ident","","",10],[11,"expr_self","","",10],[11,"expr_binary","","",10],[11,"expr_deref","","",10],[11,"expr_unary","","",10],[11,"expr_field_access","","",10],[11,"expr_tup_field_access","","",10],[11,"expr_addr_of","","",10],[11,"expr_mut_addr_of","","",10],[11,"expr_call","","",10],[11,"expr_call_ident","","",10],[11,"expr_call_global","","",10],[11,"expr_method_call","","",10],[11,"expr_block","","",10],[11,"field_imm","","",10],[11,"expr_struct","","",10],[11,"expr_struct_ident","","",10],[11,"expr_lit","","",10],[11,"expr_usize","","",10],[11,"expr_int","","",10],[11,"expr_u32","","",10],[11,"expr_u8","","",10],[11,"expr_bool","","",10],[11,"expr_vec","","",10],[11,"expr_vec_ng","","",10],[11,"expr_vec_slice","","",10],[11,"expr_str","","",10],[11,"expr_cast","","",10],[11,"expr_some","","",10],[11,"expr_none","","",10],[11,"expr_break","","",10],[11,"expr_tuple","","",10],[11,"expr_fail","","",10],[11,"expr_unreachable","","",10],[11,"expr_ok","","",10],[11,"expr_err","","",10],[11,"expr_try","","",10],[11,"pat","","",10],[11,"pat_wild","","",10],[11,"pat_lit","","",10],[11,"pat_ident","","",10],[11,"pat_ident_binding_mode","","",10],[11,"pat_enum","","",10],[11,"pat_struct","","",10],[11,"pat_tuple","","",10],[11,"pat_some","","",10],[11,"pat_none","","",10],[11,"pat_ok","","",10],[11,"pat_err","","",10],[11,"arm","","",10],[11,"arm_unreachable","","",10],[11,"expr_match","","",10],[11,"expr_if","","",10],[11,"expr_loop","","",10],[11,"lambda_fn_decl","","",10],[11,"lambda","","",10],[11,"lambda0","","",10],[11,"lambda1","","",10],[11,"lambda_expr","","",10],[11,"lambda_expr_0","","",10],[11,"lambda_expr_1","","",10],[11,"lambda_stmts","","",10],[11,"lambda_stmts_0","","",10],[11,"lambda_stmts_1","","",10],[11,"arg","","",10],[11,"fn_decl","","",10],[11,"item","","",10],[11,"item_fn_poly","","",10],[11,"item_fn","","",10],[11,"variant","","",10],[11,"item_enum_poly","","",10],[11,"item_enum","","",10],[11,"item_struct","","",10],[11,"item_struct_poly","","",10],[11,"item_mod","","",10],[11,"item_static","","",10],[11,"item_const","","",10],[11,"item_ty_poly","","",10],[11,"item_ty","","",10],[11,"attribute","","",10],[11,"meta_word","","",10],[11,"meta_list","","",10],[11,"meta_name_value","","",10],[11,"item_use","","",10],[11,"item_use_simple","","",10],[11,"item_use_simple_","","",10],[11,"item_use_list","","",10],[11,"item_use_glob","","",10],[11,"clone","syntax::ext::deriving::generic::ty","",12],[11,"clone","","",13],[11,"new","","",13],[11,"new_local","","",13],[11,"new_","","",13],[11,"to_ty","","",13],[11,"to_path","","",13],[11,"clone","","",14],[11,"to_ty","","",14],[11,"to_path","","",14],[11,"clone","","",15],[11,"empty","","",15],[11,"to_generics","","",15],[11,"expand","syntax::ext::deriving::generic","",16],[11,"eq","","",17],[11,"ne","","",17],[11,"clone","syntax::ext::expand","",18],[11,"visit_pat","","",18],[11,"fold_ident","","",19],[11,"fold_mac","","",19],[11,"fold_pat","","",20],[11,"fold_mac","","",20],[11,"new","","",21],[11,"fold_expr","","",21],[11,"fold_pat","","",21],[11,"fold_item","","",21],[11,"fold_item_underscore","","",21],[11,"fold_stmt","","",21],[11,"fold_block","","",21],[11,"fold_arm","","",21],[11,"fold_trait_item","","",21],[11,"fold_impl_item","","",21],[11,"fold_method","","",21],[11,"fold_ty","","",21],[11,"new_span","","",21],[11,"default","","",22],[11,"enable_quotes","","",22],[11,"enable_asm","","",22],[11,"enable_log_syntax","","",22],[11,"enable_concat_idents","","",22],[11,"enable_trace_macros","","",22],[11,"enable_allow_internal_unstable","","",22],[11,"enable_custom_derive","","",22],[11,"fold_ident","","",23],[11,"fold_mac","","",23],[11,"visit_mac","","",24],[11,"eq","syntax::ext::format","",25],[11,"ne","","",25],[11,"fmt","syntax::ext::mtwt","",26],[11,"hash","","",26],[11,"decode","","",26],[11,"encode","","",26],[11,"eq","","",26],[11,"ne","","",26],[11,"to_tokens","syntax::ast","",27],[11,"to_tokens","collections::vec","",28],[11,"to_tokens","syntax::codemap","",29],[11,"to_tokens","core::option","",30],[11,"to_source","syntax::ast","",31],[11,"to_source_with_hygiene","","",31],[11,"to_source","","",32],[11,"to_source_with_hygiene","","",32],[11,"to_source","","",33],[11,"to_source_with_hygiene","","",33],[11,"to_source","","",34],[11,"to_source_with_hygiene","","",34],[11,"to_source","","",35],[11,"to_source_with_hygiene","","",35],[11,"to_source","syntax::ptr","",36],[11,"to_source_with_hygiene","","",36],[11,"to_source","","",36],[11,"to_source_with_hygiene","","",36],[11,"to_source","","",36],[11,"to_source_with_hygiene","","",36],[11,"to_source","","",36],[11,"to_source_with_hygiene","","",36],[11,"to_source","","",36],[11,"to_source_with_hygiene","","",36],[11,"to_source","syntax::ast","",37],[11,"to_source_with_hygiene","","",37],[11,"to_source","","",38],[11,"to_source_with_hygiene","","",38],[11,"to_tokens","","",31],[11,"to_tokens","syntax::ptr","",36],[11,"to_tokens","","",36],[11,"to_tokens","syntax::ast","",37],[11,"to_tokens","syntax::ptr","",36],[11,"to_tokens","syntax::ast","",32],[11,"to_tokens","","",35],[11,"to_tokens","syntax::ptr","",36],[11,"to_tokens","","",36],[11,"to_tokens","syntax::ast","",33],[11,"to_tokens","","",34],[11,"to_tokens","","",38],[11,"parse_item","syntax::ext::base","",10],[11,"parse_stmt","","",10],[11,"parse_expr","","",10],[11,"parse_tts","","",10],[11,"parse_tts_with_hygiene","","",10],[11,"clone","syntax::ext::tt::transcribe","",39],[11,"clone","","",40],[11,"clone","","",41],[6,"Output","rustc_driver::diagnostic",""],[11,"add","syntax::ext::tt::transcribe","",41],[11,"clone","syntax::ext::tt::macro_parser","",42],[11,"clone","","",43],[11,"clone","","",44],[11,"make_expr","syntax::ext::tt::macro_rules","",45],[11,"make_pat","","",45],[11,"make_items","","",45],[11,"make_methods","","",45],[11,"make_stmt","","",45],[11,"expand","","",46],[11,"cmp","syntax::ast","",31],[11,"partial_cmp","","",31],[11,"lt","","",31],[11,"le","","",31],[11,"gt","","",31],[11,"ge","","",31],[11,"hash","","",31],[11,"clone","","",31],[11,"new","","Construct an identifier with the given name and an empty context:",31],[11,"as_str","","",31],[11,"encode_with_hygiene","","",31],[11,"fmt","","",31],[11,"fmt","","",31],[11,"fmt","","",47],[11,"fmt","","",47],[11,"eq","","",31],[11,"ne","","",31],[11,"clone","","",47],[11,"decode","","",47],[11,"encode","","",47],[11,"hash","","",47],[11,"partial_cmp","","",47],[11,"lt","","",47],[11,"le","","",47],[11,"gt","","",47],[11,"ge","","",47],[11,"eq","","",47],[11,"ne","","",47],[11,"cmp","","",47],[11,"as_str","","",47],[11,"usize","","",47],[11,"ident","","",47],[11,"encode","","",31],[11,"decode","","",31],[11,"fmt","","",48],[11,"hash","","",48],[11,"decode","","",48],[11,"encode","","",48],[11,"eq","","",48],[11,"ne","","",48],[11,"clone","","",48],[11,"fmt","","",49],[11,"hash","","",49],[11,"decode","","",49],[11,"encode","","",49],[11,"eq","","",49],[11,"ne","","",49],[11,"clone","","",49],[11,"fmt","","",50],[11,"hash","","",50],[11,"decode","","",50],[11,"encode","","",50],[11,"eq","","",50],[11,"ne","","",50],[11,"clone","","",50],[11,"fmt","","",51],[11,"hash","","",51],[11,"decode","","",51],[11,"encode","","",51],[11,"eq","","",51],[11,"ne","","",51],[11,"clone","","",51],[11,"fmt","","",52],[11,"hash","","",52],[11,"decode","","",52],[11,"encode","","",52],[11,"eq","","",52],[11,"ne","","",52],[11,"clone","","",52],[11,"none","","",52],[11,"is_empty","","",52],[11,"has_lifetimes","","",52],[11,"has_types","","",52],[11,"types","","Returns the types that the user wrote. Note that these do not necessarily map to the type\nparameters in the parenthesized case.",52],[11,"lifetimes","","",52],[11,"bindings","","",52],[11,"fmt","","",53],[11,"hash","","",53],[11,"decode","","",53],[11,"encode","","",53],[11,"eq","","",53],[11,"ne","","",53],[11,"clone","","",53],[11,"fmt","","",54],[11,"hash","","",54],[11,"decode","","",54],[11,"encode","","",54],[11,"eq","","",54],[11,"ne","","",54],[11,"clone","","",54],[11,"fmt","","",55],[11,"hash","","",55],[11,"decode","","",55],[11,"encode","","",55],[11,"eq","","",55],[11,"ne","","",55],[11,"partial_cmp","","",55],[11,"lt","","",55],[11,"le","","",55],[11,"gt","","",55],[11,"ge","","",55],[11,"cmp","","",55],[11,"clone","","",55],[11,"local_id","","Read the node id, asserting that this def-id is krate-local.",55],[11,"fmt","","",56],[11,"hash","","",56],[11,"decode","","",56],[11,"encode","","",56],[11,"eq","","",56],[11,"ne","","",56],[11,"clone","","",56],[11,"fmt","","",57],[11,"hash","","",57],[11,"decode","","",57],[11,"encode","","",57],[11,"eq","","",57],[11,"ne","","",57],[11,"clone","","",57],[11,"fmt","","",58],[11,"hash","","",58],[11,"decode","","",58],[11,"encode","","",58],[11,"eq","","",58],[11,"ne","","",58],[11,"clone","","",58],[11,"fmt","","",35],[11,"hash","","",35],[11,"decode","","",35],[11,"encode","","",35],[11,"eq","","",35],[11,"ne","","",35],[11,"clone","","",35],[11,"is_parameterized","","",35],[11,"is_lt_parameterized","","",35],[11,"is_type_parameterized","","",35],[11,"fmt","","",59],[11,"hash","","",59],[11,"decode","","",59],[11,"encode","","",59],[11,"eq","","",59],[11,"ne","","",59],[11,"clone","","",59],[11,"fmt","","",60],[11,"hash","","",60],[11,"decode","","",60],[11,"encode","","",60],[11,"eq","","",60],[11,"ne","","",60],[11,"clone","","",60],[11,"fmt","","",61],[11,"hash","","",61],[11,"decode","","",61],[11,"encode","","",61],[11,"eq","","",61],[11,"ne","","",61],[11,"clone","","",61],[11,"fmt","","",62],[11,"hash","","",62],[11,"decode","","",62],[11,"encode","","",62],[11,"eq","","",62],[11,"ne","","",62],[11,"clone","","",62],[11,"fmt","","",63],[11,"hash","","",63],[11,"decode","","",63],[11,"encode","","",63],[11,"eq","","",63],[11,"ne","","",63],[11,"clone","","",63],[11,"fmt","","",64],[11,"hash","","",64],[11,"decode","","",64],[11,"encode","","",64],[11,"eq","","",64],[11,"ne","","",64],[11,"clone","","",64],[11,"fmt","","",65],[11,"hash","","",65],[11,"decode","","",65],[11,"encode","","",65],[11,"clone","","",65],[11,"eq","","",65],[11,"fmt","","",33],[11,"hash","","",33],[11,"decode","","",33],[11,"encode","","",33],[11,"eq","","",33],[11,"ne","","",33],[11,"clone","","",33],[11,"fmt","","",66],[11,"hash","","",66],[11,"decode","","",66],[11,"encode","","",66],[11,"eq","","",66],[11,"ne","","",66],[11,"clone","","",66],[11,"fmt","","",67],[11,"hash","","",67],[11,"decode","","",67],[11,"encode","","",67],[11,"eq","","",67],[11,"ne","","",67],[11,"clone","","",67],[11,"fmt","","",68],[11,"hash","","",68],[11,"decode","","",68],[11,"encode","","",68],[11,"eq","","",68],[11,"ne","","",68],[11,"clone","","",68],[11,"fmt","","",69],[11,"hash","","",69],[11,"decode","","",69],[11,"encode","","",69],[11,"eq","","",69],[11,"ne","","",69],[11,"clone","","",69],[11,"fmt","","",70],[11,"hash","","",70],[11,"decode","","",70],[11,"encode","","",70],[11,"eq","","",70],[11,"ne","","",70],[11,"clone","","",70],[11,"fmt","","",71],[11,"hash","","",71],[11,"decode","","",71],[11,"encode","","",71],[11,"eq","","",71],[11,"ne","","",71],[11,"clone","","",71],[11,"fmt","","",72],[11,"hash","","",72],[11,"decode","","",72],[11,"encode","","",72],[11,"eq","","",72],[11,"ne","","",72],[11,"clone","","",72],[11,"fmt","","",73],[11,"hash","","",73],[11,"decode","","",73],[11,"encode","","",73],[11,"eq","","",73],[11,"ne","","",73],[11,"clone","","",73],[11,"fmt","","",74],[11,"hash","","",74],[11,"decode","","",74],[11,"encode","","",74],[11,"eq","","",74],[11,"ne","","",74],[11,"clone","","",74],[11,"fmt","","",75],[11,"hash","","",75],[11,"decode","","",75],[11,"encode","","",75],[11,"eq","","",75],[11,"ne","","",75],[11,"clone","","",75],[11,"fmt","","",76],[11,"hash","","",76],[11,"decode","","",76],[11,"encode","","",76],[11,"eq","","",76],[11,"ne","","",76],[11,"clone","","",76],[11,"fmt","","",77],[11,"hash","","",77],[11,"decode","","",77],[11,"encode","","",77],[11,"eq","","",77],[11,"ne","","",77],[11,"clone","","",77],[11,"fmt","","",78],[11,"hash","","",78],[11,"decode","","",78],[11,"encode","","",78],[11,"eq","","",78],[11,"ne","","",78],[11,"clone","","",78],[11,"fmt","","",37],[11,"hash","","",37],[11,"decode","","",37],[11,"encode","","",37],[11,"eq","","",37],[11,"ne","","",37],[11,"clone","","",37],[11,"fmt","","",79],[11,"hash","","",79],[11,"decode","","",79],[11,"encode","","",79],[11,"eq","","",79],[11,"ne","","",79],[11,"clone","","",79],[11,"fmt","","",80],[11,"hash","","",80],[11,"decode","","",80],[11,"encode","","",80],[11,"eq","","",80],[11,"ne","","",80],[11,"clone","","",80],[11,"fmt","","",81],[11,"hash","","",81],[11,"decode","","",81],[11,"encode","","",81],[11,"eq","","",81],[11,"ne","","",81],[11,"clone","","",81],[11,"fmt","","",82],[11,"hash","","",82],[11,"decode","","",82],[11,"encode","","",82],[11,"eq","","",82],[11,"ne","","",82],[11,"clone","","",82],[11,"fmt","","",83],[11,"hash","","",83],[11,"decode","","",83],[11,"encode","","",83],[11,"eq","","",83],[11,"ne","","",83],[11,"clone","","",83],[11,"fmt","","",84],[11,"hash","","",84],[11,"decode","","",84],[11,"encode","","",84],[11,"eq","","",84],[11,"ne","","",84],[11,"clone","","",84],[11,"fmt","","",85],[11,"hash","","",85],[11,"decode","","",85],[11,"encode","","",85],[11,"eq","","",85],[11,"ne","","",85],[11,"clone","","",85],[11,"fmt","","",86],[11,"hash","","",86],[11,"decode","","",86],[11,"encode","","",86],[11,"eq","","",86],[11,"ne","","",86],[11,"clone","","",86],[11,"fmt","","",87],[11,"hash","","",87],[11,"decode","","",87],[11,"encode","","",87],[11,"eq","","",87],[11,"ne","","",87],[11,"clone","","",87],[11,"open_token","","Returns the opening delimiter as a token.",87],[11,"close_token","","Returns the closing delimiter as a token.",87],[11,"open_tt","","Returns the opening delimiter as a token tree.",87],[11,"close_tt","","Returns the closing delimiter as a token tree.",87],[11,"fmt","","",88],[11,"hash","","",88],[11,"decode","","",88],[11,"encode","","",88],[11,"eq","","",88],[11,"ne","","",88],[11,"clone","","",88],[11,"fmt","","",89],[11,"hash","","",89],[11,"decode","","",89],[11,"encode","","",89],[11,"eq","","",89],[11,"ne","","",89],[11,"clone","","",89],[11,"fmt","","",27],[11,"hash","","",27],[11,"decode","","",27],[11,"encode","","",27],[11,"eq","","",27],[11,"ne","","",27],[11,"clone","","",27],[11,"len","","",27],[11,"get_tt","","",27],[11,"get_span","","Returns the `Span` corresponding to this token tree.",27],[11,"parse","","Use this token tree as a matcher to parse given tts.",27],[11,"fmt","","",90],[11,"hash","","",90],[11,"decode","","",90],[11,"encode","","",90],[11,"eq","","",90],[11,"ne","","",90],[11,"clone","","",90],[11,"fmt","","",91],[11,"hash","","",91],[11,"decode","","",91],[11,"encode","","",91],[11,"eq","","",91],[11,"ne","","",91],[11,"clone","","",91],[11,"fmt","","",92],[11,"hash","","",92],[11,"decode","","",92],[11,"encode","","",92],[11,"eq","","",92],[11,"ne","","",92],[11,"clone","","",92],[11,"new","","",92],[11,"fmt","","",93],[11,"hash","","",93],[11,"decode","","",93],[11,"encode","","",93],[11,"eq","","",93],[11,"ne","","",93],[11,"clone","","",93],[11,"suffix_len","","",93],[11,"fmt","","",94],[11,"hash","","",94],[11,"decode","","",94],[11,"encode","","",94],[11,"eq","","",94],[11,"ne","","",94],[11,"clone","","",94],[11,"fmt","","",95],[11,"hash","","",95],[11,"decode","","",95],[11,"encode","","",95],[11,"eq","","",95],[11,"ne","","",95],[11,"clone","","",95],[11,"fmt","","",96],[11,"hash","","",96],[11,"decode","","",96],[11,"encode","","",96],[11,"eq","","",96],[11,"ne","","",96],[11,"clone","","",96],[11,"fmt","","",97],[11,"hash","","",97],[11,"decode","","",97],[11,"encode","","",97],[11,"eq","","",97],[11,"ne","","",97],[11,"clone","","",97],[11,"fmt","","",98],[11,"hash","","",98],[11,"decode","","",98],[11,"encode","","",98],[11,"eq","","",98],[11,"ne","","",98],[11,"clone","","",98],[11,"fmt","","",99],[11,"hash","","",99],[11,"decode","","",99],[11,"encode","","",99],[11,"eq","","",99],[11,"ne","","",99],[11,"clone","","",99],[11,"fmt","","",100],[11,"hash","","",100],[11,"decode","","",100],[11,"encode","","",100],[11,"eq","","",100],[11,"ne","","",100],[11,"clone","","",100],[11,"fmt","","",101],[11,"hash","","",101],[11,"decode","","",101],[11,"encode","","",101],[11,"eq","","",101],[11,"ne","","",101],[11,"clone","","",101],[11,"hash","","",102],[11,"decode","","",102],[11,"encode","","",102],[11,"clone","","",102],[11,"eq","","",102],[11,"fmt","","",102],[11,"fmt","","",102],[11,"suffix_len","","",102],[11,"hash","","",103],[11,"decode","","",103],[11,"encode","","",103],[11,"clone","","",103],[11,"eq","","",103],[11,"suffix_len","","",103],[11,"fmt","","",103],[11,"fmt","","",103],[11,"hash","","",104],[11,"decode","","",104],[11,"encode","","",104],[11,"eq","","",104],[11,"ne","","",104],[11,"clone","","",104],[11,"fmt","","",104],[11,"fmt","","",104],[11,"suffix_len","","",104],[11,"fmt","","",105],[11,"hash","","",105],[11,"decode","","",105],[11,"encode","","",105],[11,"eq","","",105],[11,"ne","","",105],[11,"clone","","",105],[11,"fmt","","",32],[11,"hash","","",32],[11,"decode","","",32],[11,"encode","","",32],[11,"eq","","",32],[11,"ne","","",32],[11,"clone","","",32],[11,"fmt","","",106],[11,"hash","","",106],[11,"decode","","",106],[11,"encode","","",106],[11,"eq","","",106],[11,"ne","","",106],[11,"clone","","",106],[11,"fmt","","",107],[11,"hash","","",107],[11,"decode","","",107],[11,"encode","","",107],[11,"eq","","",107],[11,"ne","","",107],[11,"clone","","",107],[11,"fmt","","",108],[11,"hash","","",108],[11,"decode","","",108],[11,"encode","","",108],[11,"eq","","",108],[11,"ne","","",108],[11,"clone","","",108],[11,"fmt","","",109],[11,"hash","","",109],[11,"decode","","",109],[11,"encode","","",109],[11,"eq","","",109],[11,"ne","","",109],[11,"clone","","",109],[11,"fmt","","",110],[11,"hash","","",110],[11,"decode","","",110],[11,"encode","","",110],[11,"eq","","",110],[11,"ne","","",110],[11,"clone","","",110],[11,"fmt","","",34],[11,"hash","","",34],[11,"decode","","",34],[11,"encode","","",34],[11,"eq","","",34],[11,"ne","","",34],[11,"clone","","",34],[11,"new_self","","",34],[11,"fmt","","",111],[11,"hash","","",111],[11,"decode","","",111],[11,"encode","","",111],[11,"eq","","",111],[11,"ne","","",111],[11,"clone","","",111],[11,"fmt","","",112],[11,"hash","","",112],[11,"decode","","",112],[11,"encode","","",112],[11,"eq","","",112],[11,"ne","","",112],[11,"clone","","",112],[11,"fmt","","",112],[11,"hash","","",113],[11,"decode","","",113],[11,"encode","","",113],[11,"eq","","",113],[11,"ne","","",113],[11,"clone","","",113],[11,"fmt","","",113],[11,"fmt","","",114],[11,"hash","","",114],[11,"decode","","",114],[11,"encode","","",114],[11,"eq","","",114],[11,"ne","","",114],[11,"clone","","",114],[11,"span","","",114],[11,"fmt","","",115],[11,"hash","","",115],[11,"decode","","",115],[11,"encode","","",115],[11,"eq","","",115],[11,"ne","","",115],[11,"clone","","",115],[11,"fmt","","",116],[11,"hash","","",116],[11,"decode","","",116],[11,"encode","","",116],[11,"eq","","",116],[11,"ne","","",116],[11,"clone","","",116],[11,"fmt","","",117],[11,"hash","","",117],[11,"decode","","",117],[11,"encode","","",117],[11,"eq","","",117],[11,"ne","","",117],[11,"clone","","",117],[11,"fmt","","",118],[11,"hash","","",118],[11,"decode","","",118],[11,"encode","","",118],[11,"eq","","",118],[11,"ne","","",118],[11,"clone","","",118],[11,"fmt","","",119],[11,"hash","","",119],[11,"decode","","",119],[11,"encode","","",119],[11,"eq","","",119],[11,"ne","","",119],[11,"clone","","",119],[11,"fmt","","",120],[11,"hash","","",120],[11,"decode","","",120],[11,"encode","","",120],[11,"eq","","",120],[11,"ne","","",120],[11,"clone","","",120],[11,"fmt","","",121],[11,"hash","","",121],[11,"decode","","",121],[11,"encode","","",121],[11,"eq","","",121],[11,"ne","","",121],[11,"clone","","",121],[11,"fmt","","",122],[11,"hash","","",122],[11,"decode","","",122],[11,"encode","","",122],[11,"eq","","",122],[11,"ne","","",122],[11,"clone","","",122],[11,"fmt","","",123],[11,"hash","","",123],[11,"decode","","",123],[11,"encode","","",123],[11,"eq","","",123],[11,"ne","","",123],[11,"clone","","",123],[11,"fmt","","",124],[11,"hash","","",124],[11,"decode","","",124],[11,"encode","","",124],[11,"eq","","",124],[11,"ne","","",124],[11,"clone","","",124],[11,"id","","",124],[11,"fmt","","",125],[11,"hash","","",125],[11,"decode","","",125],[11,"encode","","",125],[11,"eq","","",125],[11,"ne","","",125],[11,"clone","","",125],[11,"fmt","","",126],[11,"hash","","",126],[11,"decode","","",126],[11,"encode","","",126],[11,"eq","","",126],[11,"ne","","",126],[11,"clone","","",126],[11,"fmt","","",127],[11,"hash","","",127],[11,"decode","","",127],[11,"encode","","",127],[11,"eq","","",127],[11,"ne","","",127],[11,"clone","","",127],[11,"fmt","","",38],[11,"hash","","",38],[11,"decode","","",38],[11,"encode","","",38],[11,"eq","","",38],[11,"ne","","",38],[11,"clone","","",38],[11,"fmt","","",128],[11,"hash","","",128],[11,"decode","","",128],[11,"encode","","",128],[11,"eq","","",128],[11,"ne","","",128],[11,"clone","","",128],[11,"fmt","","",129],[11,"hash","","",129],[11,"decode","","",129],[11,"encode","","",129],[11,"eq","","",129],[11,"ne","","",129],[11,"clone","","",129],[11,"fmt","","",130],[11,"hash","","",130],[11,"decode","","",130],[11,"encode","","",130],[11,"eq","","",130],[11,"ne","","",130],[11,"clone","","",130],[11,"inherit_from","","",130],[11,"fmt","","",131],[11,"hash","","",131],[11,"decode","","",131],[11,"encode","","",131],[11,"eq","","",131],[11,"ne","","",131],[11,"clone","","",131],[11,"ident","","",131],[11,"fmt","","",132],[11,"hash","","",132],[11,"decode","","",132],[11,"encode","","",132],[11,"eq","","",132],[11,"ne","","",132],[11,"clone","","",132],[11,"is_unnamed","","",132],[11,"fmt","","",133],[11,"hash","","",133],[11,"decode","","",133],[11,"encode","","",133],[11,"eq","","",133],[11,"ne","","",133],[11,"clone","","",133],[11,"fmt","","",134],[11,"hash","","",134],[11,"decode","","",134],[11,"encode","","",134],[11,"eq","","",134],[11,"ne","","",134],[11,"clone","","",134],[11,"fmt","","",135],[11,"hash","","",135],[11,"decode","","",135],[11,"encode","","",135],[11,"eq","","",135],[11,"ne","","",135],[11,"clone","","",135],[11,"descriptive_variant","","",135],[11,"fmt","","",136],[11,"hash","","",136],[11,"decode","","",136],[11,"encode","","",136],[11,"eq","","",136],[11,"ne","","",136],[11,"clone","","",136],[11,"fmt","","",137],[11,"hash","","",137],[11,"decode","","",137],[11,"encode","","",137],[11,"eq","","",137],[11,"ne","","",137],[11,"clone","","",137],[11,"descriptive_variant","","",137],[11,"fmt","","",138],[11,"hash","","",138],[11,"decode","","",138],[11,"encode","","",138],[11,"eq","","",138],[11,"ne","","",138],[11,"clone","","",138],[11,"fmt","","",139],[11,"hash","","",139],[11,"decode","","",139],[11,"encode","","",139],[11,"eq","","",139],[11,"ne","","",139],[11,"clone","","",139],[11,"hash","syntax::parse::parser","",140],[11,"cmp","","",140],[11,"partial_cmp","","",140],[11,"lt","","",140],[11,"le","","",140],[11,"gt","","",140],[11,"ge","","",140],[11,"clone","","",140],[11,"eq","","",140],[11,"ne","","",140],[11,"empty","","Returns an empty set of flags.",140],[11,"all","","Returns the set containing all flags.",140],[11,"bits","","Returns the raw value of the flags currently stored.",140],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",140],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",140],[11,"is_empty","","Returns `true` if no flags are currently stored.",140],[11,"is_all","","Returns `true` if all flags are currently set.",140],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",140],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",140],[11,"insert","","Inserts the specified flags in-place.",140],[11,"remove","","Removes the specified flags in-place.",140],[11,"toggle","","Toggles the specified flags in-place.",140],[6,"Output","rustc_driver::diagnostic",""],[11,"bitor","syntax::parse::parser","Returns the union of the two sets of flags.",140],[6,"Output","rustc_driver::diagnostic",""],[11,"bitxor","syntax::parse::parser","Returns the left flags, but with all the right flags toggled.",140],[6,"Output","rustc_driver::diagnostic",""],[11,"bitand","syntax::parse::parser","Returns the intersection between the two sets of flags.",140],[6,"Output","rustc_driver::diagnostic",""],[11,"sub","syntax::parse::parser","Returns the set difference of the two sets of flags.",140],[6,"Output","rustc_driver::diagnostic",""],[11,"not","syntax::parse::parser","Returns the complement of this set of flags.",140],[11,"eq","","",141],[11,"ne","","",141],[11,"eq","","",142],[11,"ne","","",142],[11,"clone","","",143],[11,"eq","","",143],[11,"ne","","",143],[11,"new","","",144],[11,"token_to_string","","Convert a token to a string using self's reader",144],[11,"this_token_to_string","","Convert the current token to a string using self's reader",144],[11,"unexpected_last","","",144],[11,"unexpected","","",144],[11,"expect","","Expect and consume the token t. Signal an error if\nthe next token is not t.",144],[11,"expect_one_of","","Expect next token to be edible or inedible token.  If edible,\nthen consume it; if inedible, then return without consuming\nanything.  Signal a fatal error if next token is unexpected.",144],[11,"check_for_erroneous_unit_struct_expecting","","Check for erroneous `ident { }`; if matches, signal error and\nrecover (without consuming any expected input token).  Returns\ntrue if and only if input was consumed for recovery.",144],[11,"commit_expr","","Commit to parsing a complete expression `e` expected to be\nfollowed by some token from the set edible + inedible.  Recover\nfrom anticipated input errors, discarding erroneous characters.",144],[11,"commit_expr_expecting","","",144],[11,"commit_stmt","","Commit to parsing a complete statement `s`, which expects to be\nfollowed by some token from the set edible + inedible.  Check\nfor recoverable input errors, discarding erroneous characters.",144],[11,"commit_stmt_expecting","","",144],[11,"parse_ident","","",144],[11,"parse_ident_or_self_type","","",144],[11,"parse_path_list_item","","",144],[11,"check","","Check if the next token is `tok`, and return `true` if so.",144],[11,"eat","","Consume token 'tok' if it exists. Returns true if the given\ntoken was present, false otherwise.",144],[11,"check_keyword","","",144],[11,"eat_keyword","","If the next token is the given keyword, eat it and return\ntrue. Otherwise, return false.",144],[11,"eat_keyword_noexpect","","",144],[11,"expect_keyword","","If the given word is not a keyword, signal an error.\nIf the next token is not the given word, signal an error.\nOtherwise, eat it.",144],[11,"check_strict_keywords","","Signal an error if the given string is a strict keyword",144],[11,"check_reserved_keywords","","Signal an error if the current token is a reserved keyword",144],[11,"expect_no_suffix","","",144],[11,"expect_gt","","Expect and consume a GT. if a >> is seen, replace it\nwith a single > and continue. If a GT is not seen,\nsignal an error.",144],[11,"parse_seq_to_before_gt_or_return","","",144],[11,"parse_seq_to_before_gt","","Parse a sequence bracketed by '<' and '>', stopping\nbefore the '>'.",144],[11,"parse_seq_to_gt","","",144],[11,"parse_seq_to_gt_or_return","","",144],[11,"parse_seq_to_end","","Parse a sequence, including the closing delimiter. The function\nf must consume tokens until reaching the next separator or\nclosing bracket.",144],[11,"parse_seq_to_before_end","","Parse a sequence, not including the closing delimiter. The function\nf must consume tokens until reaching the next separator or\nclosing bracket.",144],[11,"parse_unspanned_seq","","Parse a sequence, including the closing delimiter. The function\nf must consume tokens until reaching the next separator or\nclosing bracket.",144],[11,"parse_enum_variant_seq","","Parse a sequence parameter of enum variant. For consistency purposes,\nthese should not be empty.",144],[11,"parse_seq","","",144],[11,"bump","","Advance the parser by one token",144],[11,"bump_and_get","","Advance the parser by one token and return the bumped token.",144],[11,"replace_token","","EFFECT: replace the current token and span with the given one",144],[11,"buffer_length","","",144],[11,"look_ahead","","",144],[11,"fatal","","",144],[11,"span_fatal","","",144],[11,"span_fatal_help","","",144],[11,"span_note","","",144],[11,"span_help","","",144],[11,"fileline_help","","",144],[11,"bug","","",144],[11,"warn","","",144],[11,"span_warn","","",144],[11,"span_err","","",144],[11,"span_bug","","",144],[11,"abort_if_errors","","",144],[11,"id_to_interned_str","","",144],[11,"token_is_bare_fn_keyword","","Is the current token one of the keywords that signals a bare function\ntype?",144],[11,"token_is_closure_keyword","","Is the current token one of the keywords that signals a closure type?",144],[11,"get_lifetime","","",144],[11,"parse_for_in_type","","",144],[11,"parse_ty_path","","",144],[11,"parse_ty_bare_fn","","parse a TyBareFn type:",144],[11,"parse_proc_type","","Parses a procedure type (`proc`). The initial `proc` keyword must\nalready have been parsed.",144],[11,"parse_obsolete_closure_kind","","Parses an obsolete closure kind (`&:`, `&mut:`, or `:`).",144],[11,"parse_ty_bare_fn_or_ty_closure","","",144],[11,"parse_ty_closure","","Parse a TyClosure type",144],[11,"parse_unsafety","","",144],[11,"parse_trait_items","","Parse the items in a trait declaration",144],[11,"parse_mt","","Parse a possibly mutable type",144],[11,"parse_ret_ty","","Parse optional return type [ -> TY ] in function decl",144],[11,"parse_ty_sum","","Parse a type in a context where `T1+T2` is allowed.",144],[11,"parse_ty","","Parse a type.",144],[11,"parse_borrowed_pointee","","",144],[11,"parse_ptr","","",144],[11,"is_named_argument","","",144],[11,"parse_arg_general","","This version of parse arg doesn't necessarily require\nidentifier names.",144],[11,"parse_arg","","Parse a single function argument",144],[11,"parse_fn_block_arg","","Parse an argument in a lambda header e.g. |arg, arg|",144],[11,"maybe_parse_fixed_length_of_vec","","",144],[11,"lit_from_token","","Matches token_lit = LIT_INTEGER | ...",144],[11,"parse_lit","","Matches lit = true | false | token_lit",144],[11,"parse_literal_maybe_minus","","matches '-' lit | lit",144],[11,"parse_path","","Parses a path and optional type parameter bounds, depending on the\nmode. The `mode` parameter determines whether lifetimes, types, and/or\nbounds are permitted and whether `::` must precede type parameter\ngroups.",144],[11,"parse_path_segments_without_colons","","Examples:\n- `a::b<T,U>::c<V,W>`\n- `a::b<T,U>::c(V) -> W`\n- `a::b<T,U>::c(V)`",144],[11,"parse_path_segments_with_colons","","Examples:\n- `a::b::<T,U>::c`",144],[11,"parse_path_segments_without_types","","Examples:\n- `a::b::c`",144],[11,"parse_opt_lifetime","","parses 0 or 1 lifetime",144],[11,"parse_lifetime","","Parses a single lifetime\nMatches lifetime = LIFETIME",144],[11,"parse_lifetime_defs","","Parses `lifetime_defs = [ lifetime_defs { ',' lifetime_defs } ]` where `lifetime_def  =\nlifetime [':' lifetimes]`",144],[11,"parse_lifetimes","","matches lifetimes = ( lifetime ) | ( lifetime , lifetimes ) actually, it matches the empty\none too, but putting that in there messes up the grammar....",144],[11,"parse_mutability","","Parse mutability declaration (mut/const/imm)",144],[11,"parse_field","","Parse ident COLON expr",144],[11,"mk_expr","","",144],[11,"mk_unary","","",144],[11,"mk_binary","","",144],[11,"mk_call","","",144],[11,"mk_index","","",144],[11,"mk_range","","",144],[11,"mk_field","","",144],[11,"mk_tup_field","","",144],[11,"mk_assign_op","","",144],[11,"mk_mac_expr","","",144],[11,"mk_lit_u32","","",144],[11,"parse_bottom_expr","","At the bottom (top?) of the precedence hierarchy,\nparse things like parenthesized exprs,\nmacros, return, etc.",144],[11,"parse_block_expr","","Parse a block or unsafe block",144],[11,"parse_dot_or_call_expr","","parse a.b or a(13) or a[4] or just a",144],[11,"parse_dot_or_call_expr_with","","",144],[11,"check_unknown_macro_variable","","",144],[11,"parse_sep_and_kleene_op","","Parse an optional separator followed by a Kleene-style\nrepetition token (+ or *).",144],[11,"parse_token_tree","","parse a single token tree from the input.",144],[11,"parse_all_token_trees","","",144],[11,"parse_prefix_expr","","Parse a prefix-operator expr",144],[11,"parse_binops","","Parse an expression of binops",144],[11,"parse_more_binops","","Parse an expression of binops of at least min_prec precedence",144],[11,"parse_assign_expr","","Parse an assignment expression....\nactually, this seems to be the main entry point for\nparsing an arbitrary expression.",144],[11,"parse_assign_expr_with","","",144],[11,"parse_if_expr","","Parse an 'if' or 'if let' expression ('if' token already eaten)",144],[11,"parse_if_let_expr","","Parse an 'if let' expression ('if' token already eaten)",144],[11,"parse_lambda_expr","","",144],[11,"parse_else_expr","","",144],[11,"parse_for_expr","","Parse a 'for' .. 'in' expression ('for' token already eaten)",144],[11,"parse_while_expr","","Parse a 'while' or 'while let' expression ('while' token already eaten)",144],[11,"parse_while_let_expr","","Parse a 'while let' expression ('while' token already eaten)",144],[11,"parse_loop_expr","","",144],[11,"parse_arm","","",144],[11,"parse_expr","","Parse an expression",144],[11,"parse_expr_res","","Parse an expression, subject to the given restrictions",144],[11,"parse_pat","","Parse a pattern.",144],[11,"parse_stmt","","Parse a statement. may include decl.\nPrecondition: any attributes are parsed already",144],[11,"parse_block","","Parse a block. No inner attrs are allowed.",144],[11,"parse_generics","","Parse a set of optional generic type parameter declarations. Where\nclauses are not parsed here, and must be added later via\n`parse_where_clause()`.",144],[11,"parse_fn_decl","","Parse the argument list and result type of a function declaration",144],[11,"parse_method_with_outer_attributes","","Parse a method in a trait impl",144],[11,"parse_method","","Parse a method in a trait impl, starting with `attrs` attributes.",144],[11,"parse_record_struct_body","","",144],[11,"parse_tuple_struct_body","","",144],[11,"parse_single_struct_field","","Parse a structure field declaration",144],[11,"parse_item_with_outer_attributes","","",144],[11,"parse_item","","",144],[11,"parse_crate_mod","","Parses a source module as a crate. This is the main\nentry point for the parser.",144],[11,"parse_optional_str","","",144],[11,"parse_str","","",144],[11,"eq","syntax::parse::lexer::comments","",145],[11,"ne","","",145],[11,"clone","","",145],[11,"clone","","",146],[11,"clone","","",147],[11,"fmt","syntax::parse::lexer","",148],[11,"eq","","",148],[11,"ne","","",148],[11,"clone","","",148],[11,"is_eof","","",149],[11,"next_token","","Return the next token. EFFECT: advances the string_reader.",149],[11,"fatal","","",149],[11,"err","","",149],[11,"peek","","",149],[11,"is_eof","syntax::ext::tt::transcribe","",40],[11,"next_token","","",40],[11,"fatal","","",40],[11,"err","","",40],[11,"peek","","",40],[11,"new_raw","syntax::parse::lexer","For comments.rs, which hackily pokes into pos and curr",149],[11,"new","","",149],[11,"curr_is","","",149],[11,"fatal_span","","Report a fatal lexical error with a given span.",149],[11,"err_span","","Report a lexical error with a given span.",149],[11,"with_str_from","","Calls `f` with a string slice of the source text spanning from `start`\nup to but excluding `self.last_pos`, meaning the slice does not include\nthe character `self.curr`.",149],[11,"name_from","","Create a Name from a given offset to the current offset, each\nadjusted 1 towards each other (assumes that on either side there is a\nsingle-byte delimiter).",149],[11,"name_from_to","","As name_from, with an explicit endpoint.",149],[11,"bump","","Advance the StringReader by one character. If a newline is\ndiscovered, add it to the FileMap's list of line start offsets.",149],[11,"nextch","","",149],[11,"nextch_is","","",149],[11,"nextnextch","","",149],[11,"nextnextch_is","","",149],[11,"fmt","syntax::parse::token","",150],[11,"hash","","",150],[11,"eq","","",150],[11,"ne","","",150],[11,"decode","","",150],[11,"encode","","",150],[11,"clone","","",150],[11,"fmt","","",151],[11,"hash","","",151],[11,"eq","","",151],[11,"ne","","",151],[11,"decode","","",151],[11,"encode","","",151],[11,"clone","","",151],[11,"fmt","","",152],[11,"hash","","",152],[11,"eq","","",152],[11,"ne","","",152],[11,"decode","","",152],[11,"encode","","",152],[11,"clone","","",152],[11,"fmt","","",153],[11,"hash","","",153],[11,"eq","","",153],[11,"ne","","",153],[11,"decode","","",153],[11,"encode","","",153],[11,"clone","","",153],[11,"as_str","","",153],[11,"fmt","","",154],[11,"hash","","",154],[11,"eq","","",154],[11,"ne","","",154],[11,"decode","","",154],[11,"encode","","",154],[11,"clone","","",154],[11,"short_name","","",154],[11,"fmt","","",155],[11,"hash","","",155],[11,"eq","","",155],[11,"ne","","",155],[11,"decode","","",155],[11,"encode","","",155],[11,"clone","","",155],[11,"can_begin_expr","","Returns `true` if the token can appear at the start of an expression.",155],[11,"is_lit","","Returns `true` if the token is any literal",155],[11,"is_ident","","Returns `true` if the token is an identifier.",155],[11,"is_path","","Returns `true` if the token is an interpolated path.",155],[11,"is_plain_ident","","Returns `true` if the token is a path that is not followed by a `::`\ntoken.",155],[11,"is_lifetime","","Returns `true` if the token is a lifetime.",155],[11,"is_mutability","","Returns `true` if the token is either the `mut` or `const` keyword.",155],[11,"to_binop","","Maps a token to its corresponding binary operator.",155],[11,"is_keyword","","Returns `true` if the token is a given keyword, `kw`.",155],[11,"is_keyword_allow_following_colon","","",155],[11,"is_any_keyword","","Returns `true` if the token is either a special identifier, or a strict\nor reserved keyword.",155],[11,"is_strict_keyword","","Returns `true` if the token may not appear as an identifier.",155],[11,"is_reserved_keyword","","Returns `true` if the token is a keyword that has been reserved for\npossible future use.",155],[11,"mtwt_eq","","Hygienic identifier equality comparison.",155],[11,"hash","","",156],[11,"eq","","",156],[11,"ne","","",156],[11,"decode","","",156],[11,"encode","","",156],[11,"clone","","",156],[11,"fmt","","",156],[11,"eq","syntax::parse::token::keywords","",157],[11,"ne","","",157],[11,"clone","","",157],[11,"to_name","","",157],[11,"cmp","syntax::parse::token","",158],[11,"partial_cmp","","",158],[11,"lt","","",158],[11,"le","","",158],[11,"gt","","",158],[11,"ge","","",158],[11,"hash","","",158],[11,"eq","","",158],[11,"ne","","",158],[11,"clone","","",158],[11,"new","","",158],[6,"Target","rustc_driver::diagnostic",""],[11,"deref","syntax::parse::token","",158],[11,"container_as_bytes","","",158],[11,"fmt","","",158],[11,"fmt","","",158],[11,"eq","","",158],[11,"ne","","",158],[11,"decode","","",158],[11,"encode","","",158],[11,"parse_outer_attributes","syntax::parse::parser","Parse attributes that appear before an item",144],[11,"parse_attribute","","Matches `attribute = # ! [ meta_item ]`",144],[11,"parse_inner_attrs_and_next","","Parse attributes that appear after the opening of an item. These should\nbe preceded by an exclamation mark, but we accept and warn about one\nterminated by a semicolon. In addition to a vector of inner attributes,\nthis function also returns a vector that may contain the first outer\nattribute of the next item (since we can't know whether the attribute\nis an inner attribute of the containing item or an outer attribute of\nthe first contained item until we see the semi).\nmatches inner_attrs* outer_attr?\nyou can make the 'next' field an Option, but the result is going to be\nmore useful as a vector.",144],[11,"parse_meta_item","","matches meta_item = IDENT\n| IDENT = lit\n| IDENT meta_seq",144],[11,"parse_meta_seq","","matches meta_seq = ( COMMASEP(meta_item) )",144],[11,"parse_optional_meta","","",144],[11,"hash","syntax::parse::obsolete","",159],[11,"eq","","",159],[11,"ne","","",159],[11,"obsolete","syntax::parse::parser","Reports an obsolete syntax non-fatal error.",144],[11,"obsolete_expr","","Reports an obsolete syntax non-fatal error, and returns\na placeholder expression",144],[11,"report","","",144],[11,"is_obsolete_ident","","",144],[11,"eat_obsolete_ident","","",144],[11,"next_node_id","syntax::parse","",160],[11,"reserve_node_ids","","",160],[11,"fmt","syntax::abi","",161],[11,"eq","","",161],[11,"ne","","",161],[11,"fmt","","",162],[11,"clone","","",162],[11,"decode","","",162],[11,"encode","","",162],[11,"hash","","",162],[11,"eq","","",162],[11,"ne","","",162],[11,"fmt","","",163],[11,"eq","","",163],[11,"ne","","",163],[11,"index","","",162],[11,"data","","",162],[11,"name","","",162],[11,"fmt","","",162],[11,"fmt","","",161],[11,"is_fn_like","syntax::ast","",134],[11,"is_fn_like","","",98],[11,"is_fn_like","","",82],[11,"id","syntax::ast_map::blocks","",164],[11,"from_node","","Attempts to construct a Code from presumed FnLike or Block node input.",164],[11,"to_fn_parts","","",165],[11,"body","","",165],[11,"decl","","",165],[11,"span","","",165],[11,"id","","",165],[11,"kind","","",165],[11,"fmt","syntax::ast_map","",166],[11,"eq","","",166],[11,"ne","","",166],[11,"clone","","",166],[11,"name","","",166],[11,"fmt","","",166],[11,"clone","","",167],[6,"Item","rustc_driver::diagnostic",""],[11,"next","core::option","",30],[11,"fmt","syntax::ast_map","",168],[11,"fmt","","",169],[11,"clone","","",169],[11,"fmt","","",170],[11,"new","","",171],[11,"krate","","",171],[11,"krate","","",172],[11,"get","","Retrieve the Node corresponding to `id`, panicking if it cannot\nbe found.",172],[11,"find","","Retrieve the Node corresponding to `id`, returning None if\ncannot be found.",172],[11,"get_parent","","Retrieve the parent NodeId for `id`, or `id` itself if no\nparent is registered in this map.",172],[11,"get_parent_did","","",172],[11,"get_foreign_abi","","",172],[11,"get_foreign_vis","","",172],[11,"expect_item","","",172],[11,"expect_struct","","",172],[11,"expect_variant","","",172],[11,"expect_foreign_item","","",172],[11,"expect_expr","","",172],[11,"get_path_elem","","returns the name associated with the given NodeId's AST",172],[11,"with_path","","",172],[11,"path_to_string","","",172],[11,"attrs","","Given a node ID, get a list of of attributes associated with the AST\ncorresponding to the Node ID",172],[11,"nodes_matching_suffix","","Returns an iterator that yields the node id's with paths that\nmatch `parts`.  (Requires `parts` is non-empty.)",172],[11,"opt_span","","",172],[11,"span","","",172],[11,"def_id_span","","",172],[11,"node_to_string","","",172],[11,"node_to_user_string","","",172],[6,"Item","rustc_driver::diagnostic",""],[11,"next","syntax::ast_map","",173],[11,"name","syntax::codemap","",29],[11,"name","syntax::ast","",134],[11,"name","","",136],[11,"name","","",123],[11,"name","","",98],[11,"name","","",99],[11,"name","","",116],[11,"new_id","syntax::ast_map","",174],[11,"new_span","","",174],[11,"visit_item","","",175],[11,"visit_pat","","",175],[11,"visit_expr","","",175],[11,"visit_stmt","","",175],[11,"visit_ty_method","","",175],[11,"visit_fn","","",175],[11,"visit_ty","","",175],[11,"visit_block","","",175],[11,"visit_lifetime_ref","","",175],[11,"visit_lifetime_def","","",175],[11,"print_node","syntax::print::pprust","",176],[11,"fmt","syntax::ast_util","",177],[11,"decode","","",177],[11,"encode","","",177],[11,"max","","",177],[11,"empty","","",177],[11,"add","","",177],[11,"visit_mod","","",178],[11,"visit_foreign_item","","",178],[11,"visit_item","","",178],[11,"visit_local","","",178],[11,"visit_block","","",178],[11,"visit_stmt","","",178],[11,"visit_pat","","",178],[11,"visit_expr","","",178],[11,"visit_ty","","",178],[11,"visit_generics","","",178],[11,"visit_fn","","",178],[11,"visit_struct_field","","",178],[11,"visit_struct_def","","",178],[11,"visit_trait_item","","",178],[11,"visit_lifetime_ref","","",178],[11,"visit_lifetime_def","","",178],[11,"visit_trait_ref","","",178],[11,"visit_id","","",179],[11,"pe_ident","syntax::ast","",116],[11,"pe_generics","","",116],[11,"pe_abi","","",116],[11,"pe_explicit_self","","",116],[11,"pe_unsafety","","",116],[11,"pe_fn_decl","","",116],[11,"pe_body","","",116],[11,"pe_vis","","",116],[11,"check_name","syntax::codemap","",29],[11,"name","","",29],[11,"value_str","","",29],[11,"meta_item_list","","",29],[11,"span","","",29],[11,"name","","",29],[11,"value_str","","",29],[11,"meta_item_list","","",29],[11,"span","","",29],[11,"name","syntax::ptr","",36],[11,"value_str","","",36],[11,"meta_item_list","","",36],[11,"span","","",36],[11,"meta","syntax::codemap","Extract the MetaItem from inside this Attribute.",29],[11,"with_desugared_doc","","Convert self to a normal #[doc=\"foo\"] comment, if it is a\ncomment like `///` or `/** */`. (Returns self unchanged for\nnon-sugared doc attributes.)",29],[11,"eq","syntax::attr","",180],[11,"ne","","",180],[11,"fmt","","",181],[11,"clone","","",181],[11,"decode","","",181],[11,"encode","","",181],[11,"fmt","","",182],[11,"clone","","",182],[11,"partial_cmp","","",182],[11,"lt","","",182],[11,"le","","",182],[11,"gt","","",182],[11,"ge","","",182],[11,"eq","","",182],[11,"ne","","",182],[11,"decode","","",182],[11,"encode","","",182],[11,"fmt","","",182],[11,"decode","","",183],[11,"encode","","",183],[11,"fmt","","",183],[11,"eq","","",183],[11,"ne","","",183],[11,"is_ffi_safe","","",183],[11,"decode","","",184],[11,"encode","","",184],[11,"fmt","","",184],[11,"eq","","",184],[11,"ne","","",184],[11,"hash","","",184],[11,"is_signed","","",184],[11,"fmt","syntax::codemap","",185],[11,"partial_cmp","","",185],[11,"lt","","",185],[11,"le","","",185],[11,"gt","","",185],[11,"ge","","",185],[11,"hash","","",185],[11,"eq","","",185],[11,"ne","","",185],[11,"clone","","",185],[11,"fmt","","",186],[11,"partial_cmp","","",186],[11,"lt","","",186],[11,"le","","",186],[11,"gt","","",186],[11,"ge","","",186],[11,"hash","","",186],[11,"eq","","",186],[11,"ne","","",186],[11,"from_usize","","",185],[11,"to_usize","","",185],[6,"Output","rustc_driver::diagnostic",""],[11,"add","syntax::codemap","",185],[6,"Output","rustc_driver::diagnostic",""],[11,"sub","syntax::codemap","",185],[11,"encode","","",185],[11,"decode","","",185],[11,"from_usize","","",186],[11,"to_usize","","",186],[6,"Output","rustc_driver::diagnostic",""],[11,"add","syntax::codemap","",186],[6,"Output","rustc_driver::diagnostic",""],[11,"sub","syntax::codemap","",186],[11,"hash","","",187],[11,"fmt","","",187],[11,"clone","","",187],[11,"fmt","","",29],[11,"hash","","",29],[11,"decode","","",29],[11,"encode","","",29],[11,"eq","","",29],[11,"ne","","",29],[11,"clone","","",29],[11,"eq","","",187],[11,"ne","","",187],[11,"encode","","",187],[11,"decode","","",187],[11,"fmt","","",188],[11,"hash","","",188],[11,"clone","","",188],[11,"fmt","","",189],[11,"hash","","",189],[11,"clone","","",189],[11,"fmt","","",190],[11,"hash","","",190],[11,"decode","","",191],[11,"encode","","",191],[11,"hash","","",191],[11,"fmt","","",191],[11,"clone","","",191],[11,"eq","","",191],[11,"ne","","",191],[11,"from_llvm_cookie","","",191],[11,"to_llvm_cookie","","",191],[11,"eq","","",192],[11,"ne","","",192],[11,"decode","","",192],[11,"encode","","",192],[11,"encode","","",193],[11,"decode","","",193],[11,"next_line","","EFFECT: register a start-of-line offset in the\ntable of line-beginnings.\nUNCHECKED INVARIANT: these offsets must be added in the right\norder and must be in the right places; there is shared knowledge\nabout what ends a line between this file and parse.rs\nWARNING: pos param here is the offset relative to start of CodeMap,\nand CodeMap will append a newline when adding a filemap without a newline at the end,\nso the safe way to call this is with value calculated as\nfilemap.start_pos + newline_offset_relative_to_the_start_of_filemap.",193],[11,"get_line","","get a line from the list of pre-computed line-beginnings\n",193],[11,"record_multibyte_char","","",193],[11,"is_real_file","","",193],[11,"is_imported","","",193],[11,"new","","",194],[11,"new_filemap","","",194],[11,"new_imported_filemap","","Allocates a new FileMap representing a source file from an external\ncrate. The source code of such an \"imported filemap\" is not available,\nbut we still know enough to generate accurate debuginfo location\ninformation for things inlined from other crates.",194],[11,"mk_substr_filename","","",194],[11,"lookup_char_pos","","Lookup source information about a BytePos",194],[11,"lookup_char_pos_adj","","",194],[11,"span_to_string","","",194],[11,"span_to_filename","","",194],[11,"span_to_lines","","",194],[11,"span_to_snippet","","",194],[11,"get_filemap","","",194],[11,"lookup_byte_offset","","For a global BytePos compute the local offset within the containing FileMap",194],[11,"bytepos_to_file_charpos","","Converts an absolute BytePos to a CharPos relative to the filemap and above.",194],[11,"record_expansion","","",194],[11,"with_expn_info","","",194],[11,"span_allows_unstable","","Check if a span is \"internal\" to a macro in which #[unstable]\nitems can be used (that is, a macro marked with\n`#[allow_internal_unstable]`).",194],[11,"fmt","","",195],[11,"eq","","",195],[11,"ne","","",195],[11,"clone","","",195],[11,"fmt","","",196],[11,"eq","","",196],[11,"ne","","",196],[11,"clone","","",196],[11,"fmt","","",197],[11,"eq","","",197],[11,"ne","","",197],[11,"clone","","",197],[11,"fold_mod","syntax::config","",198],[11,"fold_block","","",198],[11,"fold_foreign_mod","","",198],[11,"fold_item_underscore","","",198],[11,"fold_expr","","",198],[11,"fold_mac","","",198],[11,"fold_item","","",198],[11,"fold_attribute","","",199],[11,"fold_mac","","",199],[11,"clone","syntax::diagnostic","",200],[11,"clone","","",201],[11,"span_fatal","","",202],[11,"span_fatal_with_code","","",202],[11,"span_err","","",202],[11,"span_err_with_code","","",202],[11,"span_warn","","",202],[11,"span_warn_with_code","","",202],[11,"span_note","","",202],[11,"span_end_note","","",202],[11,"span_help","","",202],[11,"fileline_note","","",202],[11,"fileline_help","","",202],[11,"span_bug","","",202],[11,"span_unimpl","","",202],[11,"handler","","",202],[11,"fatal","","",203],[11,"err","","",203],[11,"bump_err_count","","",203],[11,"err_count","","",203],[11,"has_errors","","",203],[11,"abort_if_errors","","",203],[11,"warn","","",203],[11,"note","","",203],[11,"help","","",203],[11,"bug","","",203],[11,"unimpl","","",203],[11,"emit","","",203],[11,"emit_with_code","","",203],[11,"custom_emit","","",203],[11,"fmt","","",204],[11,"clone","","",204],[11,"eq","","",204],[11,"ne","","",204],[11,"fmt","","",204],[11,"stderr","","",205],[11,"new","","",205],[11,"write_all","","",206],[11,"emit","","",205],[11,"custom_emit","","",205],[11,"fmt","syntax::feature_gate","",207],[11,"eq","","",207],[11,"ne","","",207],[11,"new","","",208],[11,"visit_mac","","",209],[11,"visit_attribute","","",209],[11,"visit_attribute","","",210],[11,"visit_name","","",210],[11,"visit_item","","",210],[11,"visit_foreign_item","","",210],[11,"visit_ty","","",210],[11,"visit_expr","","",210],[11,"visit_pat","","",210],[11,"visit_fn","","",210],[11,"move_map","collections::vec","",28],[11,"move_map","syntax::owned_slice","",211],[11,"cmp","","",211],[11,"partial_cmp","","",211],[11,"lt","","",211],[11,"le","","",211],[11,"gt","","",211],[11,"ge","","",211],[11,"eq","","",211],[11,"ne","","",211],[11,"hash","","",211],[11,"fmt","","",211],[11,"empty","","",211],[11,"from_vec","","",211],[11,"into_vec","","",211],[11,"as_slice","","",211],[11,"move_iter","","",211],[11,"map","","",211],[6,"Target","rustc_driver::diagnostic",""],[11,"deref","syntax::owned_slice","",211],[11,"default","","",211],[11,"clone","","",211],[11,"from_iter","","",211],[11,"encode","","",211],[11,"decode","","",211],[11,"and_then","syntax::ptr","Move out of the pointer.\nIntended for chaining transformations not covered by `map`.",36],[11,"map","","Transform the inner value, consuming `self` and producing a new `P<T>`.",36],[6,"Target","rustc_driver::diagnostic",""],[11,"deref","syntax::ptr","",36],[11,"clone","","",36],[11,"eq","","",36],[11,"fmt","","",36],[11,"fmt","","",36],[11,"hash","","",36],[11,"decode","","",36],[11,"encode","","",36],[6,"Err","rustc_driver::diagnostic",""],[11,"from_str","syntax::show_span","",212],[11,"visit_expr","","",213],[11,"visit_pat","","",213],[11,"visit_ty","","",213],[11,"visit_mac","","",213],[11,"fold_crate","syntax::std_inject","",214],[11,"fold_crate","","",215],[11,"fold_item","","",215],[11,"fold_mod","","",215],[11,"fold_crate","syntax::test","",216],[11,"fold_item","","",216],[11,"fold_mod","","",216],[11,"eq","","",217],[11,"ne","","",217],[11,"eq","syntax::print::pp","",218],[11,"ne","","",218],[11,"clone","","",218],[11,"clone","","",219],[11,"clone","","",220],[11,"clone","","",221],[11,"is_eof","","",221],[11,"is_hardbreak_tok","","",221],[11,"last_token","","",222],[11,"replace_last_token","","",222],[11,"pretty_print","","",222],[11,"check_stream","","",222],[11,"scan_push","","",222],[11,"scan_pop","","",222],[11,"scan_top","","",222],[11,"scan_pop_bottom","","",222],[11,"advance_right","","",222],[11,"advance_left","","",222],[11,"check_stack","","",222],[11,"print_newline","","",222],[11,"indent","","",222],[11,"get_top","","",222],[11,"print_str","","",222],[11,"print","","",222],[11,"new_from_input","syntax::print::pprust","",176],[11,"new","","",176],[11,"ibox","","",176],[11,"end","","",176],[11,"cbox","","",176],[11,"rbox","","",176],[11,"nbsp","","",176],[11,"word_nbsp","","",176],[11,"word_space","","",176],[11,"popen","","",176],[11,"pclose","","",176],[11,"head","","",176],[11,"bopen","","",176],[11,"bclose_","","",176],[11,"bclose_maybe_open","","",176],[11,"bclose","","",176],[11,"is_begin","","",176],[11,"is_end","","",176],[11,"is_bol","","",176],[11,"in_cbox","","",176],[11,"hardbreak_if_not_bol","","",176],[11,"space_if_not_bol","","",176],[11,"break_offset_if_not_bol","","",176],[11,"synth_comment","","",176],[11,"commasep","","",176],[11,"commasep_cmnt","","",176],[11,"commasep_exprs","","",176],[11,"print_mod","","",176],[11,"print_foreign_mod","","",176],[11,"print_opt_lifetime","","",176],[11,"print_type","","",176],[11,"print_foreign_item","","",176],[11,"print_item","","Pretty-print an item",176],[11,"print_enum_def","","",176],[11,"print_variants","","",176],[11,"print_visibility","","",176],[11,"print_struct","","",176],[11,"print_tt","","This doesn't deserve to be called \"pretty\" printing, but it should be\nmeaning-preserving. A quick hack that might help would be to look at the\nspans embedded in the TTs to decide where to put spaces and newlines.\nBut it'd be better to parse these according to the grammar of the\nappropriate macro, transcribe back into the grammar we just parsed from,\nand then pretty-print the resulting AST nodes (so, e.g., we print\nexpression arguments as expressions). It can be done! I think.",176],[11,"print_tts","","",176],[11,"print_variant","","",176],[11,"print_ty_method","","",176],[11,"print_trait_method","","",176],[11,"print_impl_item","","",176],[11,"print_method","","",176],[11,"print_outer_attributes","","",176],[11,"print_inner_attributes","","",176],[11,"print_attribute","","",176],[11,"print_stmt","","",176],[11,"print_block","","",176],[11,"print_block_unclosed","","",176],[11,"print_block_unclosed_indent","","",176],[11,"print_block_with_attrs","","",176],[11,"print_block_maybe_unclosed","","",176],[11,"print_if","","",176],[11,"print_if_let","","",176],[11,"print_mac","","",176],[11,"print_expr_maybe_paren","","",176],[11,"print_expr","","",176],[11,"print_local_decl","","",176],[11,"print_decl","","",176],[11,"print_ident","","",176],[11,"print_usize","","",176],[11,"print_name","","",176],[11,"print_for_decl","","",176],[11,"print_pat","","",176],[11,"print_fn","","",176],[11,"print_fn_args","","",176],[11,"print_fn_args_and_ret","","",176],[11,"print_fn_block_args","","",176],[11,"print_capture_clause","","",176],[11,"print_bounds","","",176],[11,"print_lifetime","","",176],[11,"print_lifetime_def","","",176],[11,"print_generics","","",176],[11,"print_ty_param","","",176],[11,"print_where_clause","","",176],[11,"print_meta_item","","",176],[11,"print_view_path","","",176],[11,"print_mutability","","",176],[11,"print_mt","","",176],[11,"print_arg","","",176],[11,"print_fn_output","","",176],[11,"print_ty_fn","","",176],[11,"maybe_print_trailing_comment","","",176],[11,"print_remaining_comments","","",176],[11,"print_literal","","",176],[11,"next_lit","","",176],[11,"maybe_print_comment","","",176],[11,"print_comment","","",176],[11,"print_string","","",176],[11,"next_comment","","",176],[11,"print_opt_unsafety","","",176],[11,"print_opt_abi_and_extern_if_nondefault","","",176],[11,"print_extern_opt_abi","","",176],[11,"print_fn_header_info","","",176],[11,"print_unsafety","","",176],[4,"RenderSpan","rustc_driver::diagnostic",""],[13,"FullSpan","","A FullSpan renders with both with an initial line for the\nmessage, prefixed by file:linenum, followed by a summary of\nthe source code covered by the span.",200],[13,"FileLine","","A FileLine renders with just a line for the message prefixed\nby file:linenum.",200],[4,"ColorConfig","",""],[13,"Auto","","",201],[13,"Always","","",201],[13,"Never","","",201],[8,"Emitter","",""],[10,"emit","","",223],[10,"custom_emit","","",223],[3,"FatalError","","This structure is used to signify that a task has panicked with a fatal error\nfrom the diagnostics. You can use this with the `Any` trait to figure out\nhow a rustc task died (if so desired)."],[3,"ExplicitBug","","Signifies that the compiler died with an explicit call to `.bug`\nor `.span_bug` rather than a failed assertion, etc."],[3,"SpanHandler","","A span-handler is like a handler but also\naccepts span information for source-location\nreporting."],[12,"handler","","",202],[12,"cm","","",202],[3,"Handler","","A handler deals with errors; certain errors\n(fatal, bug, unimpl) may cause immediate exit,\nothers log errors for later reporting."],[12,"can_emit_warnings","","",203],[5,"mk_span_handler","",""],[5,"default_handler","",""],[5,"mk_handler","",""],[4,"Level","",""],[13,"Bug","","",204],[13,"Fatal","","",204],[13,"Error","","",204],[13,"Warning","","",204],[13,"Note","","",204],[13,"Help","","",204],[3,"EmitterWriter","",""],[5,"expect","",""],[3,"RustcDefaultCalls","rustc_driver",""],[4,"Compilation","",""],[13,"Stop","","",224],[13,"Continue","","",224],[5,"run","",""],[5,"run_compiler","",""],[5,"release_str","","Returns a version string such as \"0.12.0-dev\"."],[5,"commit_hash_str","","Returns the full SHA1 hash of HEAD of the Git repo from which rustc was built."],[5,"commit_date_str","","Returns the \"commit date\" of HEAD of the Git repo from which rustc was built as a static string."],[5,"build_date_str","",""],[5,"version","","Prints version information and returns None on success or an error\nmessage on panic."],[5,"handle_options","","Process command line options. Emits messages as appropriate. If compilation\nshould continue, returns a getopts::Matches object parsed from args, otherwise\nreturns None."],[5,"monitor","","Run a procedure which will detect panics in the compiler and print nicer\nerror messages rather than just failing the test."],[5,"diagnostics_registry","",""],[5,"main","",""],[0,"driver","",""],[3,"CompileController","rustc_driver::driver","CompileController is used to customise compilation, it allows compilation to\nbe stopped and/or to call arbitrary code at various points in compilation.\nIt also allows for various flags to be set to influence what information gets\ncollected during compilation."],[12,"after_parse","","",225],[12,"after_expand","","",225],[12,"after_write_deps","","",225],[12,"after_analysis","","",225],[12,"after_llvm","","",225],[12,"make_glob_map","","",225],[3,"PhaseController","",""],[12,"stop","","",226],[12,"callback","","",226],[3,"CompileState","","State that is passed to a callback. What state is available depends on when\nduring compilation the callback is made. See the various constructor methods\n(`state_*`) in the impl to see which data is provided for any given entry point."],[12,"input","","",227],[12,"session","","",227],[12,"cfg","","",227],[12,"krate","","",227],[12,"crate_name","","",227],[12,"output_filenames","","",227],[12,"out_dir","","",227],[12,"expanded_crate","","",227],[12,"ast_map","","",227],[12,"analysis","","",227],[12,"tcx","","",227],[12,"trans","","",227],[5,"compile_input","",""],[5,"anon_src","","The name used for source code that doesn't originate in a file\n(e.g. source from stdin or a string)"],[5,"source_name","",""],[5,"phase_1_parse_input","",""],[5,"phase_2_configure_and_expand","","Run the \"early phases\" of the compiler: initial `cfg` processing,\nloading compiler plugins (including those from `addl_plugins`),\nsyntax expansion, secondary `cfg` expansion, synthesis of a test\nharness if one is to be provided and injection of a dependency on the\nstandard library and prelude."],[5,"assign_node_ids_and_map","",""],[5,"phase_3_run_analysis_passes","","Run the resolution, typechecking, region checking and other\nmiscellaneous analysis passes on the crate. Return various\nstructures carrying the results of the analysis."],[5,"phase_4_translate_to_llvm","","Run the translation phase to LLVM, after which the AST and analysis can\nbe discarded."],[5,"phase_5_run_llvm_passes","","Run LLVM itself, producing a bitcode file, assembly file or object file\nas a side effect."],[5,"phase_6_link_output","","Run the linker on any artifacts that resulted from the LLVM run.\nThis should produce either a finished executable or library."],[5,"collect_crate_types","",""],[5,"collect_crate_metadata","",""],[5,"build_output_filenames","",""],[11,"basic","","",225],[11,"basic","","",226],[0,"pretty","rustc_driver","The various pretty print routines."],[4,"PpSourceMode","rustc_driver::pretty",""],[13,"PpmNormal","","",228],[13,"PpmEveryBodyLoops","","",228],[13,"PpmExpanded","","",228],[13,"PpmTyped","","",228],[13,"PpmIdentified","","",228],[13,"PpmExpandedIdentified","","",228],[13,"PpmExpandedHygiene","","",228],[4,"PpFlowGraphMode","",""],[13,"Default","","",229],[13,"UnlabelledEdges","","Drops the labels from the edges in the flowgraph output. This\nis mostly for use in the --xpretty flowgraph run-make tests,\nsince the labels are largely uninteresting in those cases and\nhave become a pain to maintain.",229],[4,"PpMode","",""],[13,"PpmSource","","",230],[13,"PpmFlowGraph","","",230],[4,"UserIdentifiedItem","",""],[13,"ItemViaNode","","",231],[13,"ItemViaPath","","",231],[5,"parse_pretty","",""],[5,"pretty_print_input","",""],[11,"fmt","","",228],[11,"eq","","",228],[11,"ne","","",228],[11,"fmt","","",229],[11,"eq","","",229],[11,"ne","","",229],[11,"fmt","","",230],[11,"eq","","",230],[11,"ne","","",230],[11,"fmt","","",231],[11,"clone","","",231],[6,"Err","",""],[11,"from_str","","",231],[8,"CompilerCalls","rustc_driver",""],[10,"early_callback","","",232],[10,"late_callback","","",232],[11,"some_input","","",232],[10,"no_input","","",232],[11,"parse_pretty","","",232],[10,"build_controller","","",232],[11,"eq","","",224],[11,"ne","","",224],[11,"fmt","","",224],[11,"and_then","","",224],[11,"early_callback","","",233],[11,"no_input","","",233],[11,"parse_pretty","","",233],[11,"late_callback","","",233],[11,"build_controller","","",233],[11,"list_metadata","","",233]],"paths":[[3,"Interner"],[3,"RcStr"],[3,"StrInterner"],[3,"SmallVector"],[3,"IntoIter"],[3,"Registry"],[4,"Annotatable"],[3,"MacEager"],[3,"DummyResult"],[3,"BlockInfo"],[3,"ExtCtxt"],[3,"SyntaxEnv"],[4,"PtrTy"],[3,"Path"],[4,"Ty"],[3,"LifetimeBounds"],[3,"TraitDef"],[4,"StructType"],[3,"PatIdentFinder"],[3,"IdentRenamer"],[3,"PatIdentRenamer"],[3,"MacroExpander"],[3,"ExpansionConfig"],[3,"Marker"],[3,"MacroExterminator"],[4,"ArgumentType"],[4,"SyntaxContext_"],[4,"TokenTree"],[3,"Vec"],[3,"Spanned"],[4,"Option"],[3,"Ident"],[3,"Ty"],[3,"Block"],[3,"Arg"],[3,"Generics"],[3,"P"],[3,"Arm"],[3,"Attribute_"],[3,"TtFrame"],[3,"TtReader"],[4,"LockstepIterSize"],[4,"TokenTreeOrTokenTreeVec"],[3,"MatcherTtFrame"],[3,"MatcherPos"],[3,"ParserAnyMacro"],[3,"MacroRulesMacroExpander"],[3,"Name"],[3,"Lifetime"],[3,"LifetimeDef"],[3,"Path"],[3,"PathSegment"],[4,"PathParameters"],[3,"AngleBracketedParameterData"],[3,"ParenthesizedParameterData"],[3,"DefId"],[4,"TyParamBound"],[4,"TraitBoundModifier"],[3,"TyParam"],[3,"WhereClause"],[4,"WherePredicate"],[3,"WhereBoundPredicate"],[3,"WhereRegionPredicate"],[3,"WhereEqPredicate"],[3,"Crate"],[4,"MetaItem_"],[3,"Pat"],[3,"FieldPat"],[4,"BindingMode"],[4,"PatWildKind"],[4,"Pat_"],[4,"Mutability"],[4,"BinOp_"],[4,"UnOp"],[4,"Stmt_"],[4,"MacStmtStyle"],[4,"LocalSource"],[3,"Local"],[4,"Decl_"],[3,"Field"],[4,"BlockCheckMode"],[4,"UnsafeSource"],[3,"Expr"],[4,"Expr_"],[3,"QSelf"],[4,"MatchSource"],[4,"CaptureClause"],[3,"Delimited"],[3,"SequenceRepetition"],[4,"KleeneOp"],[4,"Mac_"],[4,"StrStyle"],[4,"Sign"],[4,"LitIntType"],[4,"Lit_"],[3,"MutTy"],[3,"TypeField"],[3,"TypeMethod"],[4,"TraitItem"],[4,"ImplItem"],[3,"AssociatedType"],[3,"Typedef"],[4,"IntTy"],[4,"UintTy"],[4,"FloatTy"],[3,"TypeBinding"],[4,"PrimTy"],[3,"BareFnTy"],[4,"Ty_"],[4,"AsmDialect"],[3,"InlineAsm"],[3,"FnDecl"],[4,"Unsafety"],[4,"ImplPolarity"],[4,"FunctionRetTy"],[4,"ExplicitSelf_"],[3,"Method"],[4,"Method_"],[3,"Mod"],[3,"ForeignMod"],[3,"VariantArg"],[4,"VariantKind"],[3,"EnumDef"],[3,"Variant_"],[4,"PathListItem_"],[4,"ViewPath_"],[4,"AttrStyle"],[3,"AttrId"],[3,"TraitRef"],[3,"PolyTraitRef"],[4,"Visibility"],[3,"StructField_"],[4,"StructFieldKind"],[3,"StructDef"],[3,"Item"],[4,"Item_"],[3,"ForeignItem"],[4,"ForeignItem_"],[4,"InlinedItem"],[3,"MacroDef"],[3,"Restrictions"],[4,"PathParsingMode"],[4,"BoundParsingMode"],[4,"TokenType"],[3,"Parser"],[4,"CommentStyle"],[3,"Comment"],[3,"Literal"],[3,"TokenAndSpan"],[3,"StringReader"],[4,"BinOpToken"],[4,"DelimToken"],[4,"IdentStyle"],[4,"SpecialMacroVar"],[4,"Lit"],[4,"Token"],[4,"Nonterminal"],[4,"Keyword"],[3,"InternedString"],[4,"ObsoleteSyntax"],[3,"ParseSess"],[4,"Os"],[4,"Abi"],[4,"Architecture"],[4,"Code"],[3,"FnLikeNode"],[4,"PathElem"],[3,"LinkedPathNode"],[4,"Node"],[4,"MapEntry"],[3,"InlinedParent"],[3,"Forest"],[3,"Map"],[3,"NodesMatchingSuffix"],[3,"IdAndSpanUpdater"],[3,"NodeCollector"],[3,"State"],[3,"IdRange"],[3,"IdVisitor"],[3,"IdRangeComputingVisitor"],[4,"InlineAttr"],[3,"Stability"],[4,"StabilityLevel"],[4,"ReprAttr"],[4,"IntType"],[3,"BytePos"],[3,"CharPos"],[3,"Span"],[4,"MacroFormat"],[3,"NameAndSpan"],[3,"ExpnInfo"],[3,"ExpnId"],[3,"MultiByteChar"],[3,"FileMap"],[3,"CodeMap"],[4,"SpanSnippetError"],[3,"DistinctSources"],[3,"MalformedCodemapPositions"],[3,"Context"],[3,"CfgAttrFolder"],[4,"RenderSpan"],[4,"ColorConfig"],[3,"SpanHandler"],[3,"Handler"],[4,"Level"],[3,"EmitterWriter"],[4,"Destination"],[4,"AttributeType"],[3,"Features"],[3,"MacroVisitor"],[3,"PostExpansionVisitor"],[3,"OwnedSlice"],[4,"Mode"],[3,"ShowSpanVisitor"],[3,"StandardLibraryInjector"],[3,"PreludeInjector"],[3,"TestHarnessGenerator"],[4,"HasTestSignature"],[4,"Breaks"],[3,"BreakToken"],[3,"BeginToken"],[4,"Token"],[3,"Printer"],[8,"Emitter"],[4,"Compilation"],[3,"CompileController"],[3,"PhaseController"],[3,"CompileState"],[4,"PpSourceMode"],[4,"PpFlowGraphMode"],[4,"PpMode"],[4,"UserIdentifiedItem"],[8,"CompilerCalls"],[3,"RustcDefaultCalls"]]};
searchIndex['rustc_typeck'] = {"items":[[0,"","rustc_typeck","typeck.rs, an introduction"],[0,"lint","","Lints, aka compiler warnings."],[11,"name_lower","rustc::lint","Get the lint's name, with ASCII letters converted to lowercase.",0],[11,"open","rustc_back::archive","Opens an existing static archive",1],[11,"remove_file","","Removes a file from this archive",1],[11,"files","","Lists all files in an archive",1],[11,"extend","","Creates an `ArchiveBuilder` for adding files to this archive.",1],[11,"create","","Create a new static archive, ready for adding files.",2],[11,"add_native_library","","Adds all of the contents of a native library to this archive. This will\nsearch in the relevant locations for a library named `name`.",2],[11,"add_rlib","","Adds all of the contents of the rlib at the specified path to this\narchive.",2],[11,"add_file","","Adds an arbitrary file to this archive",2],[11,"update_symbols","","Indicate that the next call to `build` should updates all symbols in\nthe archive (run 'ar s' over it).",2],[11,"build","","Combine the provided files, rlibs, and native libraries into a single\n`Archive`.",2],[11,"fmt","rustc_back::svh","",3],[11,"eq","","",3],[11,"ne","","",3],[11,"clone","","",3],[11,"new","","",3],[11,"as_str","","",3],[11,"calculate","","",3],[11,"fmt","","",3],[11,"hash","rustc_back::svh::svh_visitor","",4],[11,"hash","","",5],[11,"hash","","",6],[11,"get_content","syntax::ast","",7],[11,"get_content","","",8],[11,"visit_mac","rustc_back::svh::svh_visitor","",9],[11,"visit_struct_def","","",9],[11,"visit_variant","","",9],[11,"visit_opt_lifetime_ref","","",9],[11,"visit_ident","","",9],[11,"visit_lifetime_ref","","",9],[11,"visit_lifetime_def","","",9],[11,"visit_expr","","",9],[11,"visit_stmt","","",9],[11,"visit_foreign_item","","",9],[11,"visit_item","","",9],[11,"visit_mod","","",9],[11,"visit_decl","","",9],[11,"visit_ty","","",9],[11,"visit_generics","","",9],[11,"visit_fn","","",9],[11,"visit_ty_method","","",9],[11,"visit_trait_item","","",9],[11,"visit_struct_field","","",9],[11,"visit_explicit_self","","",9],[11,"visit_path","","",9],[11,"visit_block","","",9],[11,"visit_pat","","",9],[11,"visit_local","","",9],[11,"visit_arm","","",9],[11,"tr_id","rustc::middle::astencode","Translates an internal id, meaning a node id that is known to refer to some part of the\nitem currently being inlined, such as a local variable or argument.  All naked node-ids\nthat appear in types have this property, since if something might refer to an external item\nwe would use a def-id to allow for the possibility that the item resides in another crate.",10],[11,"tr_def_id","","Translates an EXTERNAL def-id, converting the crate number from the one used in the encoded\ndata to the current crate numbers..  By external, I mean that it be translated to a\nreference to the item in its original crate, as opposed to being translated to a reference\nto the inlined version of the item.  This is typically, but not always, what you want,\nbecause most def-ids refer to external things like types or other fns that may or may not\nbe inlined.  Note that even when the inlined function is referencing itself recursively, we\nwould want `tr_def_id` for that reference--- conceptually the function calls the original,\nnon-inlined version, and trans deals with linking that recursive call to the inlined copy.",10],[11,"tr_intern_def_id","","Translates an INTERNAL def-id, meaning a def-id that is\nknown to refer to some part of the item currently being\ninlined.  In that case, we want to convert the def-id to\nrefer to the current crate and to the new, inlined node-id.",10],[11,"tr_span","","Translates a `Span` from an extern crate to the corresponding `Span`\nwithin the local crate's codemap. `creader::import_codemap()` will\nalready have allocated any additionally needed FileMaps in the local\ncodemap as a side-effect of creating the crate_metadata's\n`codemap_import_info`.",10],[11,"tr_intern","syntax::ast","",11],[11,"tr","","",11],[11,"tr","core::option","",12],[11,"tr","syntax::codemap","",13],[11,"fold_block","rustc::middle::astencode","",14],[11,"tr","rustc::middle::def","",15],[11,"tr","rustc::middle::ty","",16],[11,"tr","","",17],[11,"tr","rustc::middle::region","",18],[11,"tr","","",19],[11,"tr","rustc::middle::ty","",20],[11,"read_freevar_entry","rbml::reader","",21],[11,"read_capture_mode","","",21],[11,"tr","rustc::middle::ty","",22],[11,"tr","","",23],[11,"tr","","",24],[11,"read_method_callee","rbml::reader","",21],[11,"tr","rustc::middle::ty","",25],[11,"read_vec_per_param_space","rbml::reader","",21],[11,"read_vtable_res_with_key","","",21],[11,"read_vtable_res","","",21],[11,"read_vtable_param_res","","",21],[11,"read_vtable_origin","","",21],[11,"ty_str_ctxt","rustc::metadata::encoder","",26],[11,"emit_closure_type","rbml::writer","",27],[11,"emit_method_origin","","",27],[11,"emit_ty","","",27],[11,"emit_tys","","",27],[11,"emit_trait_ref","","",27],[11,"emit_type_param_def","","",27],[11,"emit_predicate","","",27],[11,"emit_type_scheme","","",27],[11,"emit_existential_bounds","","",27],[11,"emit_builtin_bounds","","",27],[11,"emit_substs","","",27],[11,"emit_auto_adjustment","","",27],[11,"emit_autoref","","",27],[11,"emit_auto_deref_ref","","",27],[11,"emit_unsize_kind","","",27],[11,"tag","","",27],[11,"id","","",27],[11,"visit_id","rustc::middle::astencode","",28],[11,"as_int","rbml","",29],[11,"opt_child","","",29],[11,"read_ty_nodcx","rbml::reader","",21],[11,"read_tys_nodcx","","",21],[11,"read_substs_nodcx","","",21],[11,"read_method_origin","","",21],[11,"read_ty","","",21],[11,"read_tys","","",21],[11,"read_trait_ref","","",21],[11,"read_poly_trait_ref","","",21],[11,"read_type_param_def","","",21],[11,"read_predicate","","",21],[11,"read_type_scheme","","",21],[11,"read_existential_bounds","","",21],[11,"read_substs","","",21],[11,"read_auto_adjustment","","",21],[11,"read_auto_deref_ref","","",21],[11,"read_autoref","","",21],[11,"read_unsize_kind","","",21],[11,"read_closure_kind","","",21],[11,"read_closure_ty","","",21],[11,"convert_def_id","","Converts a def-id that appears in a type.  The correct\ntranslation will depend on what kind of def-id this is.\nThis is a subtle point: type definitions are not\ninlined into the current crate, so if the def-id names\na nominal type or type alias, then it should be\ntranslated to refer to the source crate.",21],[11,"graph_id","rustc::middle::cfg::graphviz","",30],[11,"node_id","","",30],[11,"node_label","","",30],[11,"edge_label","","",30],[11,"nodes","","",30],[11,"edges","","",30],[11,"source","","",30],[11,"target","","",30],[11,"eq","rustc::middle::cfg","",31],[11,"ne","","",31],[11,"id","","",31],[11,"new","","",32],[11,"node_is_reachable","","",32],[11,"hash","rustc::middle::check_const","",33],[11,"cmp","","",33],[11,"partial_cmp","","",33],[11,"lt","","",33],[11,"le","","",33],[11,"gt","","",33],[11,"ge","","",33],[11,"clone","","",33],[11,"eq","","",33],[11,"ne","","",33],[11,"decode","","",33],[11,"encode","","",33],[11,"empty","","Returns an empty set of flags.",33],[11,"all","","Returns the set containing all flags.",33],[11,"bits","","Returns the raw value of the flags currently stored.",33],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",33],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",33],[11,"is_empty","","Returns `true` if no flags are currently stored.",33],[11,"is_all","","Returns `true` if all flags are currently set.",33],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",33],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",33],[11,"insert","","Inserts the specified flags in-place.",33],[11,"remove","","Removes the specified flags in-place.",33],[11,"toggle","","Toggles the specified flags in-place.",33],[6,"Output","rustc_typeck::lint",""],[11,"bitor","rustc::middle::check_const","Returns the union of the two sets of flags.",33],[6,"Output","rustc_typeck::lint",""],[11,"bitxor","rustc::middle::check_const","Returns the left flags, but with all the right flags toggled.",33],[6,"Output","rustc_typeck::lint",""],[11,"bitand","rustc::middle::check_const","Returns the intersection between the two sets of flags.",33],[6,"Output","rustc_typeck::lint",""],[11,"sub","rustc::middle::check_const","Returns the set difference of the two sets of flags.",33],[6,"Output","rustc_typeck::lint",""],[11,"not","rustc::middle::check_const","Returns the complement of this set of flags.",33],[11,"eq","","",34],[11,"ne","","",34],[11,"visit_item","","",35],[11,"visit_fn","","",35],[11,"visit_pat","","",35],[11,"visit_expr","","",35],[11,"consume","","",35],[11,"borrow","","",35],[11,"decl_without_init","","",35],[11,"mutate","","",35],[11,"matched_pat","","",35],[11,"consume_pat","","",35],[11,"visit_item","rustc::middle::check_static_recursion","",36],[11,"visit_item","","",37],[11,"visit_expr","","",37],[11,"eq","rustc::middle::check_loop","",38],[11,"ne","","",38],[11,"clone","","",38],[11,"visit_item","","",39],[11,"visit_expr","","",39],[11,"fmt","rustc::middle::check_match","",40],[11,"from_iter","","",40],[11,"eq","","",41],[11,"ne","","",41],[11,"clone","","",41],[11,"eq","","",42],[11,"ne","","",42],[11,"clone","","",42],[11,"visit_expr","","",43],[11,"visit_local","","",43],[11,"visit_fn","","",43],[11,"new","","",44],[11,"visit_id","","",45],[11,"fold_pat","","",44],[11,"matched_pat","","",46],[11,"consume","","",46],[11,"consume_pat","","",46],[11,"borrow","","",46],[11,"decl_without_init","","",46],[11,"mutate","","",46],[11,"visit_pat","","",47],[11,"visit_fn","rustc::middle::check_rvalues","",48],[11,"consume","","",49],[11,"matched_pat","","",49],[11,"consume_pat","","",49],[11,"borrow","","",49],[11,"decl_without_init","","",49],[11,"mutate","","",49],[11,"eq","rustc::middle::const_eval","",50],[11,"ne","","",50],[11,"clone","","",50],[11,"clone","","",51],[11,"clone","","",52],[11,"description","","",51],[11,"fmt","rustc::middle::dataflow","",53],[11,"clone","","",54],[11,"pre","","",54],[11,"new","","",54],[11,"add_gen","","Indicates that `id` generates `bit`",54],[11,"add_kill","","Indicates that `id` kills `bit`",54],[11,"each_bit_on_entry","","Iterates through each bit that is set on entry to `id`.\nOnly useful after `propagate()` has been called.",54],[11,"each_bit_for_node","","Iterates through each bit that is set on entry/exit to `cfgidx`.\nOnly useful after `propagate()` has been called.",54],[11,"each_gen_bit","","Iterates through each bit in the gen set for `id`.",54],[11,"add_kills_from_flow_exits","","Whenever you have a `break` or `continue` statement, flow\nexits through any number of enclosing scopes on its way to\nthe new destination. This function infers the kill bits of\nthose control operators based on the kill bits associated\nwith those scopes.",54],[11,"propagate","","Performs the data flow analysis.",54],[11,"join","","",55],[11,"join","","",56],[11,"visit_struct_def","rustc::middle::dead","",57],[11,"visit_expr","","",57],[11,"visit_pat","","",57],[11,"visit_path","","",57],[11,"visit_item","","",57],[11,"visit_item","","",58],[11,"visit_fn","","",58],[11,"visit_item","","",59],[11,"visit_foreign_item","","",59],[11,"visit_fn","","",59],[11,"visit_struct_field","","",59],[11,"visit_trait_item","","",59],[11,"fmt","rustc::middle::def","",15],[11,"hash","","",15],[11,"decode","","",15],[11,"encode","","",15],[11,"eq","","",15],[11,"ne","","",15],[11,"clone","","",15],[11,"fmt","","",60],[11,"full_def","","Get the definition, if fully resolved, otherwise panic.",60],[11,"def_id","","Get the DefId, if fully resolved, otherwise panic.",60],[11,"fmt","","",61],[11,"hash","","",61],[11,"decode","","",61],[11,"encode","","",61],[11,"eq","","",61],[11,"ne","","",61],[11,"clone","","",61],[11,"map","","",61],[11,"local_node_id","","",15],[11,"def_id","","",15],[11,"variant_def_ids","","",15],[11,"eq","rustc::middle::effect","",62],[11,"ne","","",62],[11,"visit_fn","","",63],[11,"visit_block","","",63],[11,"visit_expr","","",63],[11,"visit_item","rustc::middle::entry","",64],[11,"fmt","rustc::middle::expr_use_visitor","",65],[11,"eq","","",65],[11,"ne","","",65],[11,"fmt","","",66],[11,"eq","","",66],[11,"ne","","",66],[11,"fmt","","",67],[11,"eq","","",67],[11,"ne","","",67],[11,"fmt","","",68],[11,"eq","","",68],[11,"ne","","",68],[11,"fmt","","",69],[11,"eq","","",69],[11,"ne","","",69],[11,"fmt","","",70],[11,"eq","","",70],[11,"ne","","",70],[11,"new","","",71],[11,"walk_fn","","",71],[11,"consume_expr","","",71],[11,"walk_expr","","",71],[11,"hash","rustc::middle::fast_reject","",72],[11,"eq","","",72],[11,"ne","","",72],[11,"clone","","",72],[11,"fmt","rustc::middle::graph","",73],[11,"fmt","","",74],[11,"eq","","",74],[11,"ne","","",74],[11,"clone","","",74],[11,"fmt","","",75],[11,"eq","","",75],[11,"ne","","",75],[11,"fmt","","",76],[11,"node_id","","Returns unique id (unique with respect to the graph holding associated node).",74],[11,"edge_id","","Returns unique id (unique with respect to the graph holding associated edge).",75],[11,"new","","",77],[11,"with_capacity","","",77],[11,"all_nodes","","",77],[11,"all_edges","","",77],[11,"next_node_index","","",77],[11,"add_node","","",77],[11,"mut_node_data","","",77],[11,"node_data","","",77],[11,"node","","",77],[11,"next_edge_index","","",77],[11,"add_edge","","",77],[11,"mut_edge_data","","",77],[11,"edge_data","","",77],[11,"edge","","",77],[11,"first_adjacent","","Accesses the index of the first edge adjacent to `node`.\nThis is useful if you wish to modify the graph while walking\nthe linked list of edges.",77],[11,"next_adjacent","","Accesses the next edge in a given direction.\nThis is useful if you wish to modify the graph while walking\nthe linked list of edges.",77],[11,"each_node","","Iterates over all edges defined in the graph.",77],[11,"each_edge","","Iterates over all edges defined in the graph",77],[11,"each_outgoing_edge","","Iterates over all outgoing edges from the node `from`",77],[11,"each_incoming_edge","","Iterates over all incoming edges to the node `target`",77],[11,"each_adjacent_edge","","Iterates over all edges adjacent to the node `node`\nin the direction `dir` (either `Outgoing` or `Incoming)",77],[11,"iterate_until_fixed_point","","",77],[11,"depth_traverse","","",77],[6,"Item","rustc_typeck::lint",""],[11,"next","rustc::middle::graph","",78],[11,"source","","",73],[11,"target","","",73],[11,"visit_fn","rustc::middle::intrinsicck","",79],[11,"visit_expr","","",79],[11,"repr","rustc::middle::ty","",80],[11,"tag","rustc::middle::infer::bivariate","",81],[11,"fields","","",81],[11,"tys_with_variance","","",81],[11,"regions_with_variance","","",81],[11,"regions","","",81],[11,"mts","","",81],[11,"unsafeties","","",81],[11,"builtin_bounds","","",81],[11,"tys","","",81],[11,"binders","","",81],[11,"combine","alloc::rc","",82],[11,"combine","rustc::middle::ty","",83],[11,"combine","","",84],[11,"combine","","",85],[11,"clone","rustc::middle::infer::combine","",86],[11,"switch_expected","","",86],[11,"instantiate","","",86],[11,"tcx","","",87],[11,"fold_ty","","",87],[11,"fold_region","","",87],[11,"tag","rustc::middle::infer::equate","",88],[11,"fields","","",88],[11,"tys_with_variance","","",88],[11,"regions_with_variance","","",88],[11,"regions","","",88],[11,"mts","","",88],[11,"unsafeties","","",88],[11,"builtin_bounds","","",88],[11,"tys","","",88],[11,"binders","","",88],[11,"report_region_errors","rustc::middle::infer","",89],[11,"process_errors","","",89],[11,"report_type_error","","",89],[11,"report_and_explain_type_error","","",89],[11,"values_str","","Returns a string of the form \"expected `{}`, found `{}`\", or None if this is a derived\nerror.",89],[11,"expected_found_str","","",89],[11,"report_generic_bound_failure","","",89],[11,"report_concrete_failure","","",89],[11,"report_sub_sup_conflict","","",89],[11,"report_sup_sup_conflict","","",89],[11,"report_processed_errors","","",89],[11,"give_suggestion","","",89],[11,"give_expl_lifetime_param","","",89],[11,"report_inference_failure","","",89],[11,"note_region_origin","","",89],[11,"resolve","alloc::rc","",82],[11,"contains_error","","",82],[11,"resolve","rustc::middle::ty","",90],[11,"contains_error","","",90],[11,"tag","rustc::middle::infer::glb","",91],[11,"fields","","",91],[11,"tys_with_variance","","",91],[11,"regions_with_variance","","",91],[11,"mts","","",91],[11,"unsafeties","","",91],[11,"builtin_bounds","","",91],[11,"regions","","",91],[11,"tys","","",91],[11,"binders","","",91],[11,"tainted_regions","rustc::middle::infer","",89],[11,"region_vars_confined_to_snapshot","","Returns the set of region variables that do not affect any\ntypes/regions which existed before `snapshot` was\nstarted. This is used in the sub/lub/glb computations. The\nidea here is that when we are computing lub/glb of two\nregions, we sometimes create intermediate region variables.\nThose region variables may touch some of the skolemized or\nother \"forbidden\" regions we created to replace bound\nregions, but they don't really represent an \"external\"\nconstraint.",89],[11,"relate_bound","rustc::middle::infer::lub","",92],[11,"relate_bound","rustc::middle::infer::glb","",91],[11,"tag","rustc::middle::infer::lub","",92],[11,"fields","","",92],[11,"tys_with_variance","","",92],[11,"regions_with_variance","","",92],[11,"mts","","",92],[11,"unsafeties","","",92],[11,"builtin_bounds","","",92],[11,"regions","","",92],[11,"tys","","",92],[11,"binders","","",92],[11,"fmt","rustc::middle::infer::region_inference::graphviz","",93],[11,"eq","","",93],[11,"ne","","",93],[11,"hash","","",93],[11,"clone","","",93],[11,"fmt","","",94],[11,"eq","","",94],[11,"ne","","",94],[11,"clone","","",94],[11,"graph_id","","",95],[11,"node_id","","",95],[11,"node_label","","",95],[11,"edge_label","","",95],[11,"nodes","","",95],[11,"edges","","",95],[11,"source","","",95],[11,"target","","",95],[11,"fmt","rustc::middle::infer::region_inference","",96],[11,"hash","","",96],[11,"eq","","",96],[11,"ne","","",96],[11,"clone","","",96],[11,"eq","","",97],[11,"ne","","",97],[11,"fmt","","",97],[11,"clone","","",97],[11,"hash","","",98],[11,"eq","","",98],[11,"ne","","",98],[11,"eq","","",99],[11,"ne","","",99],[11,"eq","","",100],[11,"ne","","",100],[11,"fmt","","",101],[11,"clone","","",101],[11,"fmt","","",102],[11,"clone","","",102],[11,"contains","","",102],[11,"push","","",102],[11,"fmt","","",103],[11,"new","","",104],[11,"start_snapshot","","",104],[11,"commit","","",104],[11,"rollback_to","","",104],[11,"num_vars","","",104],[11,"new_region_var","","",104],[11,"new_skolemized","","Creates a new skolemized region. Skolemized regions are fresh\nregions used when performing higher-ranked computations. They\nmust be used in a very particular way and are never supposed\nto \"escape\" out into error messages or the code at large.",104],[11,"new_bound","","",104],[11,"add_given","","",104],[11,"make_eqregion","","",104],[11,"make_subregion","","",104],[11,"verify_generic_bound","","See `Verify::VerifyGenericBound`",104],[11,"lub_regions","","",104],[11,"glb_regions","","",104],[11,"resolve_var","","",104],[11,"combine_vars","","",104],[11,"vars_created_since_snapshot","","",104],[11,"tainted","","Computes all regions that have been related to `r0` in any way since the mark `mark` was\nmade---`r0` itself will be the first entry. This is used when checking whether skolemized\nregions are being improperly related to other regions.",104],[11,"resolve_regions","","This function performs the actual region resolution.  It must be\ncalled after all constraints have been added.  It performs a\nfixed-point iteration to find region values which satisfy all\nconstraints, assuming such values can be found; if they cannot,\nerrors are reported.",104],[11,"fmt","","",105],[11,"eq","","",105],[11,"ne","","",105],[11,"repr","","",96],[11,"repr","","",106],[11,"repr","","",107],[11,"repr","","",108],[11,"repr","","",97],[11,"user_string","","",97],[11,"to_ty","","",97],[11,"new","rustc::middle::infer::resolve","",109],[11,"tcx","","",109],[11,"fold_ty","","",109],[11,"tcx","","",110],[11,"fold_ty","","",110],[11,"fold_region","","",110],[11,"new","rustc::middle::infer::freshen","",111],[11,"tcx","","",111],[11,"fold_region","","",111],[11,"fold_ty","","",111],[11,"tag","rustc::middle::infer::sub","",112],[11,"fields","","",112],[11,"tys_with_variance","","",112],[11,"regions_with_variance","","",112],[11,"regions","","",112],[11,"mts","","",112],[11,"unsafeties","","",112],[11,"builtin_bounds","","",112],[11,"tys","","",112],[11,"binders","","",112],[11,"fmt","rustc::middle::infer::type_variable","",113],[11,"eq","","",113],[11,"ne","","",113],[11,"new","","",114],[11,"var_diverges","","",114],[11,"relate_vars","","Records that `a <: b`, `a :> b`, or `a == b`, depending on `dir`.",114],[11,"instantiate_and_push","","Instantiates `vid` with the type `ty` and then pushes an entry onto `stack` for each of the\nrelations of `vid` to other variables. The relations will have the form `(ty, dir, vid1)`\nwhere `vid1` is some other variable id.",114],[11,"new_var","","",114],[11,"probe","","",114],[11,"replace_if_possible","","",114],[11,"snapshot","","",114],[11,"rollback_to","","",114],[11,"commit","","",114],[11,"types_escaping_snapshot","","Find the set of type variables that existed *before* `s`\nbut which have only been unified since `s` started, and\nreturn the types with which they were unified. So if we had\na type variable `V0`, then we started the snapshot, then we\ncreated a type variable `V1`, unifed `V0` with `T0`, and\nunified `V1` with `T1`, this function would return `{T0}`.",114],[6,"Value","rustc_typeck::lint",""],[6,"Undo","",""],[11,"reverse","rustc::middle::infer::type_variable","",115],[11,"fmt","rustc::middle::infer::unify","",116],[11,"clone","","",116],[11,"eq","","",116],[11,"ne","","",116],[11,"new","","",117],[11,"snapshot","","Starts a new snapshot. Each snapshot must be either\nrolled back or committed in a \"LIFO\" (stack) order.",117],[11,"rollback_to","","Reverses all changes since the last snapshot. Also\nremoves any keys that have been created since then.",117],[11,"commit","","Commits all changes since the last snapshot. Of course, they\ncan still be undone if there is a snapshot further out.",117],[11,"new_key","","",117],[11,"get","","Find the root node for `vid`. This uses the standard union-find algorithm with path\ncompression: http://en.wikipedia.org/wiki/Disjoint-set_data_structure",117],[11,"set","","Sets the value for `vid` to `new_value`. `vid` MUST be a root node! Also, we must be in the\nmiddle of a snapshot.",117],[11,"unify","","Either redirects node_a to node_b or vice versa, depending on the relative rank. Returns\nthe new root and rank. You should then update the value of the new root to something\nsuitable.",117],[6,"Value","rustc_typeck::lint",""],[6,"Undo","",""],[11,"reverse","rustc::middle::infer::unify","",118],[11,"simple_vars","rustc::middle::infer","Unifies two simple keys. Because simple keys do not have any subtyping relationships, if\nboth keys have already been associated with a value, then those two values must be the\nsame.",89],[11,"simple_var_t","","Sets the value of the key `a_id` to `b`. Because simple keys do not have any subtyping\nrelationships, if `a_id` already has a value, it must be the same as `b`.",89],[11,"probe_var","","",89],[6,"Value","rustc_typeck::lint",""],[11,"index","rustc::middle::ty","",119],[11,"from_index","","",119],[11,"unification_table","","",119],[11,"tag","","",119],[11,"to_type","","",120],[11,"to_type_err","","",120],[6,"Value","rustc_typeck::lint",""],[11,"index","rustc::middle::ty","",121],[11,"from_index","","",121],[11,"unification_table","","",121],[11,"tag","","",121],[11,"to_type","syntax::ast","",122],[11,"to_type_err","","",122],[11,"fmt","rustc::middle::infer","",123],[11,"clone","","",123],[11,"fmt","","",124],[11,"clone","","",124],[11,"fmt","","",125],[11,"clone","","",125],[11,"fmt","","",126],[11,"clone","","",126],[11,"fmt","","",127],[11,"clone","","",127],[11,"fmt","","",128],[11,"clone","","",128],[11,"fmt","","",129],[11,"then","core::result","",130],[11,"to_ures","","",130],[11,"compare","","",130],[11,"freshen","rustc::middle::infer","",89],[11,"type_var_diverges","","",89],[11,"freshener","","",89],[11,"type_is_unconstrained_numeric","","",89],[11,"combine_fields","","",89],[11,"equate","","",89],[11,"sub","","",89],[11,"lub","","",89],[11,"commit_unconditionally","","Execute `f` and commit the bindings",89],[11,"commit_if_ok","","Execute `f` and commit the bindings if successful",89],[11,"commit_regions_if_ok","","Execute `f` and commit only the region bindings if successful.\nThe function f must be very careful not to leak any non-region\nvariables that get created.",89],[11,"try","","Execute `f`, unroll bindings on panic",89],[11,"probe","","Execute `f` then unroll any bindings it creates",89],[11,"add_given","","",89],[11,"sub_types","","",89],[11,"eq_types","","",89],[11,"sub_trait_refs","","",89],[11,"sub_poly_trait_refs","","",89],[11,"skolemize_late_bound_regions","","See `higher_ranked::skolemize_late_bound_regions`",89],[11,"leak_check","","See `higher_ranked::leak_check`",89],[11,"plug_leaks","","See `higher_ranked::plug_leaks`",89],[11,"equality_predicate","","",89],[11,"region_outlives_predicate","","",89],[11,"next_ty_var_id","","",89],[11,"next_ty_var","","",89],[11,"next_diverging_ty_var","","",89],[11,"next_ty_vars","","",89],[11,"next_int_var_id","","",89],[11,"next_float_var_id","","",89],[11,"next_region_var","","",89],[11,"region_vars_for_defs","","",89],[11,"fresh_substs_for_generics","","Given a set of generics defined on a type or impl, returns a substitution mapping each\ntype/region parameter to a fresh inference variable.",89],[11,"fresh_substs_for_trait","","Given a set of generics defined on a trait, returns a substitution mapping each output\ntype/region parameter to a fresh inference variable, and mapping the self type to\n`self_ty`.",89],[11,"fresh_bound_region","","",89],[11,"resolve_regions_and_report_errors","","",89],[11,"ty_to_string","","",89],[11,"tys_to_string","","",89],[11,"trait_ref_to_string","","",89],[11,"shallow_resolve","","",89],[11,"resolve_type_vars_if_possible","","Where possible, replaces type/int/float variables in\n`value` with their final value. Note that region variables\nare unaffected. If a type variable has not been unified, it\nis left as is.  This is an idempotent operation that does\nnot affect inference state in any way and so you can do it\nat will.",89],[11,"fully_resolve","","Attempts to resolve all type/region variables in\n`value`. Region inference must have been run already (e.g.,\nby calling `resolve_regions_and_report_errors`).  If some\nvariable was never unified, an `Err` results.",89],[11,"type_error_message_str","","",89],[11,"type_error_message_str_with_expected","","",89],[11,"type_error_message","","",89],[11,"report_mismatched_types","","",89],[11,"replace_late_bound_regions_with_fresh_var","","",89],[11,"verify_generic_bound","","See `verify_generic_bound` method in `region_inference`",89],[11,"can_equate","","",89],[11,"span","","",125],[11,"types","","",125],[11,"dummy","","",125],[11,"repr","","",125],[11,"span","","",123],[11,"repr","","",123],[11,"span","","",126],[11,"repr","","",126],[11,"span","","",128],[11,"repr","","",128],[11,"hash","rustc::middle::lang_items","",131],[11,"eq","","",131],[11,"ne","","",131],[11,"from_i64","","",131],[11,"from_u64","","",131],[11,"new","","",132],[11,"items","","",132],[11,"item_name","","",132],[11,"require","","",132],[11,"from_builtin_kind","","",132],[11,"to_builtin_kind","","",132],[11,"fn_trait_kind","","",132],[11,"send_trait","","",132],[11,"sized_trait","","",132],[11,"copy_trait","","",132],[11,"sync_trait","","",132],[11,"drop_trait","","",132],[11,"add_trait","","",132],[11,"sub_trait","","",132],[11,"mul_trait","","",132],[11,"div_trait","","",132],[11,"rem_trait","","",132],[11,"neg_trait","","",132],[11,"not_trait","","",132],[11,"bitxor_trait","","",132],[11,"bitand_trait","","",132],[11,"bitor_trait","","",132],[11,"shl_trait","","",132],[11,"shr_trait","","",132],[11,"index_trait","","",132],[11,"index_mut_trait","","",132],[11,"range_struct","","",132],[11,"range_from_struct","","",132],[11,"range_to_struct","","",132],[11,"range_full_struct","","",132],[11,"unsafe_cell_type","","",132],[11,"deref_trait","","",132],[11,"deref_mut_trait","","",132],[11,"fn_trait","","",132],[11,"fn_mut_trait","","",132],[11,"fn_once_trait","","",132],[11,"eq_trait","","",132],[11,"ord_trait","","",132],[11,"str_eq_fn","","",132],[11,"panic_fn","","",132],[11,"panic_bounds_check_fn","","",132],[11,"panic_fmt","","",132],[11,"exchange_malloc_fn","","",132],[11,"exchange_free_fn","","",132],[11,"strdup_uniq_fn","","",132],[11,"start_fn","","",132],[11,"ty_desc","","",132],[11,"opaque","","",132],[11,"eh_personality","","",132],[11,"exchange_heap","","",132],[11,"owned_box","","",132],[11,"phantom_fn","","",132],[11,"phantom_data","","",132],[11,"covariant_type","","",132],[11,"contravariant_type","","",132],[11,"invariant_type","","",132],[11,"covariant_lifetime","","",132],[11,"contravariant_lifetime","","",132],[11,"invariant_lifetime","","",132],[11,"no_copy_bound","","",132],[11,"managed_bound","","",132],[11,"non_zero","","",132],[11,"stack_exhausted","","",132],[11,"debug_trait","","",132],[11,"visit_item","","",133],[11,"new","","",133],[11,"collect_item","","",133],[11,"collect_local_language_items","","",133],[11,"collect_external_language_items","","",133],[11,"collect","","",133],[11,"eq","rustc::middle::liveness","",134],[11,"ne","","",134],[11,"eq","","",135],[11,"ne","","",135],[11,"clone","","",135],[11,"fmt","","",136],[11,"eq","","",136],[11,"ne","","",136],[11,"visit_fn","","",137],[11,"visit_local","","",137],[11,"visit_expr","","",137],[11,"visit_arm","","",137],[11,"fmt","","",135],[11,"fmt","","",134],[11,"fmt","","",138],[11,"fmt","","",139],[11,"visit_fn","","",140],[11,"visit_local","","",140],[11,"visit_expr","","",140],[11,"visit_arm","","",140],[11,"clone","","",141],[11,"fmt","rustc::middle::mem_categorization","",142],[11,"eq","","",142],[11,"ne","","",142],[11,"clone","","",142],[11,"fmt","","",143],[11,"eq","","",143],[11,"ne","","",143],[11,"clone","","",143],[11,"fmt","","",144],[11,"hash","","",144],[11,"eq","","",144],[11,"ne","","",144],[11,"clone","","",144],[11,"fmt","","",145],[11,"hash","","",145],[11,"eq","","",145],[11,"ne","","",145],[11,"clone","","",145],[11,"fmt","","",146],[11,"hash","","",146],[11,"eq","","",146],[11,"ne","","",146],[11,"clone","","",146],[11,"fmt","","",147],[11,"hash","","",147],[11,"eq","","",147],[11,"ne","","",147],[11,"clone","","",147],[11,"fmt","","",148],[11,"hash","","",148],[11,"eq","","",148],[11,"ne","","",148],[11,"clone","","",148],[11,"fmt","","",149],[11,"hash","","",149],[11,"eq","","",149],[11,"ne","","",149],[11,"clone","","",149],[11,"fmt","","",150],[11,"eq","","",150],[11,"ne","","",150],[11,"clone","","",150],[11,"fmt","","",151],[11,"eq","","",151],[11,"ne","","",151],[11,"clone","","",151],[11,"id","syntax::ast","",152],[11,"span","","",152],[11,"id","","",153],[11,"span","","",153],[11,"from_mutbl","rustc::middle::mem_categorization","",149],[11,"from_borrow_kind","","",149],[11,"from_pointer_kind","","",149],[11,"inherit","","",149],[11,"is_mutable","","",149],[11,"is_immutable","","",149],[11,"to_user_str","","",149],[11,"new","","",154],[11,"cat_expr","","",154],[11,"cat_expr_autoderefd","","",154],[11,"cat_expr_unadjusted","","",154],[11,"cat_def","","",154],[11,"cat_rvalue_node","","",154],[11,"cat_rvalue","","",154],[11,"cat_field","","",154],[11,"cat_tup_field","","",154],[11,"cat_index","","Creates a cmt for an indexing operation (`[]`).",154],[11,"cat_slice_pattern","","Given a pattern P like: `[_, ..Q, _]`, where `vec_cmt` is the cmt for `P`, `slice_pat` is\nthe pattern `Q`, returns:",154],[11,"cat_imm_interior","","",154],[11,"cat_downcast","","",154],[11,"cat_pattern","","",154],[11,"guarantor","","Returns `self` after stripping away any owned pointer derefs or\ninterior content. The return value is basically the `cmt` which\ndetermines how long the value in `self` remains live.",151],[11,"freely_aliasable","","Returns `Some(_)` if this lvalue represents a freely aliasable pointer type.",151],[11,"upvar","","",151],[11,"descriptive_string","","",151],[11,"repr","","",151],[11,"repr","","",142],[11,"repr","","",144],[11,"repr","","",145],[11,"repr","rustc::middle::ty","",155],[11,"repr","rustc::middle::mem_categorization","",143],[11,"user_string","","",143],[11,"fmt","rustc::middle::privacy","",156],[11,"fmt","","",157],[11,"fmt","","",158],[11,"eq","","",158],[11,"ne","","",158],[11,"or","","",156],[11,"visit_expr","rustc::middle::reachable","",159],[11,"visit_item","","",159],[11,"fmt","rustc::middle::region","",18],[11,"decode","","",18],[11,"encode","","",18],[11,"hash","","",18],[11,"cmp","","",18],[11,"partial_cmp","","",18],[11,"lt","","",18],[11,"le","","",18],[11,"gt","","",18],[11,"ge","","",18],[11,"eq","","",18],[11,"ne","","",18],[11,"clone","","",18],[11,"fmt","","",19],[11,"decode","","",19],[11,"encode","","",19],[11,"hash","","",19],[11,"cmp","","",19],[11,"partial_cmp","","",19],[11,"lt","","",19],[11,"le","","",19],[11,"gt","","",19],[11,"ge","","",19],[11,"eq","","",19],[11,"ne","","",19],[11,"clone","","",19],[11,"new","","",19],[11,"to_code_extent","","",19],[11,"fmt","","",160],[11,"decode","","",160],[11,"encode","","",160],[11,"hash","","",160],[11,"cmp","","",160],[11,"partial_cmp","","",160],[11,"lt","","",160],[11,"le","","",160],[11,"gt","","",160],[11,"ge","","",160],[11,"eq","","",160],[11,"ne","","",160],[11,"clone","","",160],[11,"from_node_id","","Creates a scope that represents the dynamic extent associated\nwith `node_id`.",18],[11,"node_id","","Returns a node id associated with this scope.",18],[11,"map_id","","Maps this scope to a potentially new one according to the\nNodeId transformer `f_id`.",18],[11,"span","","Returns the span of this CodeExtent.  Note that in general the\nreturned span may not correspond to the span of any node id in\nthe AST.",18],[11,"fmt","","",161],[11,"eq","","",161],[11,"ne","","",161],[11,"fmt","","",162],[11,"eq","","",162],[11,"ne","","",162],[11,"fmt","","",163],[11,"eq","","",163],[11,"ne","","",163],[11,"fmt","","",164],[11,"each_encl_scope","","",165],[11,"each_var_scope","","",165],[11,"each_encl_free_region","","",165],[11,"each_rvalue_scope","","",165],[11,"each_terminating_scope","","",165],[11,"relate_free_regions","","",165],[11,"record_encl_scope","","",165],[11,"record_var_scope","","",165],[11,"record_rvalue_scope","","",165],[11,"mark_as_terminating_scope","","Records that a scope is a TERMINATING SCOPE. Whenever we create automatic temporaries --\ne.g. by an expression like `a().f` -- they will be freed within the innermost terminating\nscope.",165],[11,"opt_encl_scope","","Returns the narrowest scope that encloses `id`, if any.",165],[11,"encl_scope","","Returns the narrowest scope that encloses `id`, if any.",165],[11,"var_scope","","Returns the lifetime of the local variable `var_id`",165],[11,"temporary_scope","","Returns the scope when temp created by expr_id will be cleaned up",165],[11,"var_region","","Returns the lifetime of the variable `id`.",165],[11,"scopes_intersect","","",165],[11,"is_subscope_of","","Returns true if `subscope` is equal to or is lexically nested inside `superscope` and false\notherwise.",165],[11,"sub_free_region","","Determines whether two free regions have a subregion relationship\nby walking the graph encoded in `free_region_map`.  Note that\nit is possible that `sub != sup` and `sub <= sup` and `sup <= sub`\n(that is, the user can give two different names to the same lifetime).",165],[11,"is_subregion_of","","Determines whether one region is a subregion of another.  This is intended to run *after\ninference* and sadly the logic is somewhat duplicated with the code in infer.rs.",165],[11,"nearest_common_ancestor","","Finds the nearest common ancestor (if any) of two scopes.  That is, finds the smallest\nscope which is greater than or equal to both `scope_a` and `scope_b`.",165],[11,"visit_block","","",166],[11,"visit_item","","",166],[11,"visit_fn","","",166],[11,"visit_arm","","",166],[11,"visit_pat","","",166],[11,"visit_stmt","","",166],[11,"visit_expr","","",166],[11,"visit_local","","",166],[11,"fmt","rustc::middle::resolve_lifetime","",167],[11,"decode","","",167],[11,"encode","","",167],[11,"hash","","",167],[11,"eq","","",167],[11,"ne","","",167],[11,"clone","","",167],[11,"visit_item","","",168],[11,"visit_fn","","",168],[11,"visit_ty","","",168],[11,"visit_ty_method","","",168],[11,"visit_block","","",168],[11,"visit_lifetime_ref","","",168],[11,"visit_generics","","",168],[11,"visit_poly_trait_ref","","",168],[11,"fmt","","",169],[11,"visit_item","rustc::middle::stability","",170],[11,"visit_fn","","",170],[11,"visit_trait_item","","",170],[11,"visit_variant","","",170],[11,"visit_struct_field","","",170],[11,"visit_foreign_item","","",170],[11,"build","","Construct the stability index for a crate being compiled.",171],[11,"new","","",171],[11,"visit_item","","",172],[11,"visit_expr","","",172],[11,"visit_path","","",172],[11,"visit_pat","","",172],[11,"fmt","rustc::middle::subst","",173],[11,"hash","","",173],[11,"eq","","",173],[11,"ne","","",173],[11,"clone","","",173],[11,"fmt","","",174],[11,"hash","","",174],[11,"eq","","",174],[11,"ne","","",174],[11,"clone","","",174],[11,"new","","",173],[11,"new_type","","",173],[11,"new_trait","","",173],[11,"erased","","",173],[11,"empty","","",173],[11,"trans_empty","","",173],[11,"is_noop","","",173],[11,"type_for_def","","",173],[11,"has_regions_escaping_depth","","",173],[11,"self_ty","","",173],[11,"with_self_ty","","",173],[11,"erase_regions","","",173],[11,"regions","","Since ErasedRegions are only to be used in trans, most of the compiler can use this method\nto easily access the set of region substitutions.",173],[11,"mut_regions","","Since ErasedRegions are only to be used in trans, most of the compiler can use this method\nto easily access the set of region substitutions.",173],[11,"with_method","","",173],[11,"is_erased","","",174],[11,"fmt","","",175],[11,"decode","","",175],[11,"encode","","",175],[11,"hash","","",175],[11,"clone","","",175],[11,"eq","","",175],[11,"ne","","",175],[11,"cmp","","",175],[11,"partial_cmp","","",175],[11,"lt","","",175],[11,"le","","",175],[11,"gt","","",175],[11,"ge","","",175],[11,"all","","",175],[11,"to_uint","","",175],[11,"from_uint","","",175],[11,"decode","","",176],[11,"encode","","",176],[11,"hash","","",176],[11,"clone","","",176],[11,"eq","","",176],[11,"ne","","",176],[11,"fmt","","",176],[11,"empty","","",176],[11,"params_from_type","","",176],[11,"new","","`t` is the type space.\n`s` is the self space.\n`a` is the assoc space.\n`f` is the fn space.",176],[11,"push","","Appends `value` to the vector associated with `space`.",176],[11,"extend","","Appends `values` to the vector associated with `space`.",176],[11,"pop","","",176],[11,"truncate","","",176],[11,"replace","","",176],[11,"get_self","","",176],[11,"len","","",176],[11,"is_empty_in","","",176],[11,"get_slice","","",176],[11,"get_mut_slice","","",176],[11,"opt_get","","",176],[11,"get","","",176],[11,"iter","","",176],[11,"into_iter","","",176],[11,"iter_enumerated","","",176],[11,"as_slice","","",176],[11,"into_vec","","",176],[11,"all_vecs","","",176],[11,"all","","",176],[11,"any","","",176],[11,"is_empty","","",176],[11,"map","","",176],[11,"map_enumerated","","",176],[11,"map_move","","",176],[11,"split","","",176],[11,"with_vec","","",176],[11,"clone","","",177],[6,"Item","rustc_typeck::lint",""],[11,"next","rustc::middle::subst","",177],[6,"Item","rustc_typeck::lint",""],[6,"IntoIter","",""],[11,"into_iter","rustc::middle::subst","",176],[6,"Item","rustc_typeck::lint",""],[6,"IntoIter","",""],[11,"tcx","rustc::middle::subst","",178],[11,"enter_region_binder","","",178],[11,"exit_region_binder","","",178],[11,"fold_region","","",178],[11,"fold_ty","","",178],[11,"clone","rustc::middle::traits::fulfill","",179],[11,"new","","",180],[11,"normalize_projection_type","","\"Normalize\" a projection type `<SomeType as SomeTrait>::X` by\ncreating a fresh type variable `$0` as well as a projection\npredicate `<SomeType as SomeTrait>::X == $0`. When the\ninference engine runs, it will attempt to find an impl of\n`SomeTrait` or a where clause that lets us unify `$0` with\nsomething concrete. If this fails, we'll unify `$0` with\n`projection_ty` again.",180],[11,"register_builtin_bound","","",180],[11,"register_region_obligation","","",180],[11,"register_predicate_obligation","","",180],[11,"region_obligations","","",180],[11,"select_all_or_error","","",180],[11,"select_new_obligations","","Attempts to select obligations that were registered since the call to a selection routine.\nThis is used by the type checker to eagerly attempt to resolve obligations in hopes of\ngaining type information. It'd be equally valid to use `select_where_possible` but it\nresults in `O(n^2)` performance (#18208).",180],[11,"select_where_possible","","",180],[11,"pending_obligations","","",180],[11,"repr","","",179],[11,"clone","rustc::middle::traits::project","",181],[11,"eq","","",182],[11,"ne","","",182],[11,"tcx","","",183],[11,"fold_ty","","",183],[11,"with","","",184],[11,"repr","","",185],[11,"repr","","",182],[11,"fold_with","","",184],[11,"repr","","",184],[11,"fmt","rustc::middle::traits::object_safety","",186],[11,"clone","","",186],[11,"repr","","",187],[11,"clone","rustc::middle::traits::select","",188],[11,"fmt","","",189],[11,"clone","","",190],[11,"fmt","","",190],[11,"eq","","",190],[11,"ne","","",190],[11,"fmt","","",191],[11,"new","","",192],[11,"intercrate","","",192],[11,"infcx","","",192],[11,"tcx","","",192],[11,"param_env","","",192],[11,"closure_typer","","",192],[11,"select","","Attempts to satisfy the obligation. If successful, this will affect the surrounding\ntype environment by performing unification.",192],[11,"evaluate_obligation","","Evaluates whether the obligation `obligation` can be satisfied (by any means).",192],[11,"evaluate_impl","","Evaluates whether the impl with id `impl_def_id` could be applied to the self type\n`obligation_self_ty`. This can be used either for trait or inherent impls.",192],[11,"repr","","",190],[11,"new","","",188],[6,"Item","rustc_typeck::lint",""],[11,"next","core::option","",12],[11,"repr","rustc::middle::traits::select","",193],[11,"may_apply","","",194],[11,"filter_to_traits","rustc::middle::traits::util","",195],[6,"Item","rustc_typeck::lint",""],[11,"next","rustc::middle::traits::util","",195],[6,"Item","rustc_typeck::lint",""],[11,"next","rustc::middle::traits::util","",196],[11,"fmt","rustc::middle::traits","",197],[11,"fmt","","",198],[11,"repr","","",199],[11,"repr","","",200],[11,"repr","","",197],[11,"repr","","",201],[11,"repr","","",202],[11,"repr","","",198],[11,"repr","","",203],[11,"repr","","",204],[11,"repr","","",205],[11,"fmt","","",205],[11,"repr","rustc::middle::traits::project","",181],[11,"fmt","","",181],[11,"eq","rustc::middle::traits","",199],[11,"ne","","",199],[11,"clone","","",199],[11,"eq","","",206],[11,"ne","","",206],[11,"clone","","",206],[11,"eq","","",207],[11,"ne","","",207],[11,"clone","","",207],[11,"eq","","",208],[11,"ne","","",208],[11,"clone","","",208],[11,"fmt","","",203],[11,"clone","","",203],[11,"clone","","",205],[11,"clone","","",200],[11,"fmt","","",200],[11,"eq","","",197],[11,"ne","","",197],[11,"clone","","",197],[11,"clone","","",202],[11,"fmt","","",202],[11,"clone","","",201],[11,"fmt","","",201],[11,"clone","","",198],[11,"eq","","",198],[11,"ne","","",198],[11,"new","","",199],[11,"misc","","",199],[11,"with","","",199],[11,"new","","",206],[11,"misc","","",206],[11,"dummy","","",206],[11,"iter_nested","","",200],[11,"map_nested","","",200],[11,"map_move_nested","","",200],[11,"iter_nested","","",197],[11,"map_nested","","",197],[11,"map_move_nested","","",197],[11,"iter_nested","","",202],[11,"map_nested","","",202],[11,"map_move_nested","","",202],[11,"iter_nested","","",201],[11,"map_nested","","",201],[11,"map_move_nested","","",201],[11,"is_overflow","","",204],[11,"hash","rustc::middle::ty","",209],[11,"eq","","",209],[11,"ne","","",209],[11,"clone","","",209],[11,"fmt","","",210],[11,"clone","","",210],[11,"id","","",210],[11,"fmt","","",211],[11,"clone","","",211],[11,"def_id","","",211],[11,"name","","",211],[11,"container","","",211],[11,"as_opt_method","","",211],[11,"fmt","","",212],[11,"clone","","",212],[11,"def_id","","",212],[11,"fmt","","",213],[11,"clone","","",213],[11,"new","","",213],[11,"container_id","","",213],[11,"fmt","","",214],[11,"clone","","",214],[11,"fmt","","",215],[11,"hash","","",215],[11,"eq","","",215],[11,"ne","","",215],[11,"clone","","",215],[11,"fmt","","",216],[11,"clone","","",216],[11,"hash","","",217],[11,"eq","","",217],[11,"ne","","",217],[11,"encode","","",218],[11,"decode","","",218],[11,"eq","","",218],[11,"ne","","",218],[11,"clone","","",218],[11,"fmt","","",219],[11,"encode","","",219],[11,"decode","","",219],[11,"eq","","",219],[11,"ne","","",219],[11,"clone","","",219],[11,"fmt","","",220],[11,"clone","","",220],[11,"fmt","","",221],[11,"eq","","",221],[11,"ne","","",221],[11,"clone","","",221],[11,"fmt","","",222],[11,"clone","","",222],[11,"fmt","","",223],[11,"eq","","",223],[11,"ne","","",223],[11,"clone","","",223],[11,"fmt","","",224],[11,"partial_cmp","","",224],[11,"lt","","",224],[11,"le","","",224],[11,"gt","","",224],[11,"ge","","",224],[11,"eq","","",224],[11,"ne","","",224],[11,"decode","","",224],[11,"encode","","",224],[11,"clone","","",224],[11,"fmt","","",25],[11,"clone","","",25],[11,"fmt","","",225],[11,"clone","","",225],[11,"fmt","","",226],[11,"clone","","",226],[11,"clone","","",227],[11,"fmt","","",228],[11,"hash","","",228],[11,"eq","","",228],[11,"ne","","",228],[11,"clone","","",228],[11,"decode","","",229],[11,"encode","","",229],[11,"fmt","","",229],[11,"hash","","",229],[11,"eq","","",229],[11,"ne","","",229],[11,"clone","","",229],[11,"expr","","",228],[11,"autoobject","","",228],[11,"autoderef","","",228],[11,"clone","","",230],[11,"new","","",231],[11,"hash","","",232],[11,"cmp","","",232],[11,"partial_cmp","","",232],[11,"lt","","",232],[11,"le","","",232],[11,"gt","","",232],[11,"ge","","",232],[11,"clone","","",232],[11,"eq","","",232],[11,"ne","","",232],[11,"empty","","Returns an empty set of flags.",232],[11,"all","","Returns the set containing all flags.",232],[11,"bits","","Returns the raw value of the flags currently stored.",232],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",232],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",232],[11,"is_empty","","Returns `true` if no flags are currently stored.",232],[11,"is_all","","Returns `true` if all flags are currently set.",232],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",232],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",232],[11,"insert","","Inserts the specified flags in-place.",232],[11,"remove","","Removes the specified flags in-place.",232],[11,"toggle","","Toggles the specified flags in-place.",232],[6,"Output","rustc_typeck::lint",""],[11,"bitor","rustc::middle::ty","Returns the union of the two sets of flags.",232],[6,"Output","rustc_typeck::lint",""],[11,"bitxor","rustc::middle::ty","Returns the left flags, but with all the right flags toggled.",232],[6,"Output","rustc_typeck::lint",""],[11,"bitand","rustc::middle::ty","Returns the intersection between the two sets of flags.",232],[6,"Output","rustc_typeck::lint",""],[11,"sub","rustc::middle::ty","Returns the set difference of the two sets of flags.",232],[6,"Output","rustc_typeck::lint",""],[11,"not","rustc::middle::ty","Returns the complement of this set of flags.",232],[11,"print_debug_stats","","",233],[11,"fmt","","",234],[11,"fmt","","",232],[11,"eq","","",234],[11,"hash","","",234],[11,"eq","","",235],[11,"hash","","",235],[11,"borrow","","",235],[11,"fmt","","",236],[11,"hash","","",236],[11,"eq","","",236],[11,"ne","","",236],[11,"clone","","",236],[11,"fmt","","",237],[11,"hash","","",237],[11,"eq","","",237],[11,"ne","","",237],[11,"clone","","",237],[11,"fmt","","",238],[11,"hash","","",238],[11,"eq","","",238],[11,"ne","","",238],[11,"clone","","",238],[11,"diverges","","",238],[11,"unwrap","","",238],[11,"diverges","","",90],[11,"hash","","",85],[11,"eq","","",85],[11,"ne","","",85],[11,"clone","","",85],[11,"inputs","","",90],[11,"input","","",90],[11,"output","","",90],[11,"variadic","","",90],[11,"fmt","","",239],[11,"hash","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"clone","","",239],[11,"fmt","","",240],[11,"decode","","",240],[11,"encode","","",240],[11,"hash","","",240],[11,"eq","","",240],[11,"ne","","",240],[11,"clone","","",240],[11,"fmt","","",16],[11,"decode","","",16],[11,"encode","","",16],[11,"hash","","",16],[11,"eq","","",16],[11,"ne","","",16],[11,"clone","","",16],[11,"fmt","","",241],[11,"hash","","",241],[11,"eq","","",241],[11,"ne","","",241],[11,"clone","","",241],[11,"decode","","",242],[11,"encode","","",242],[11,"fmt","","",242],[11,"hash","","",242],[11,"eq","","",242],[11,"ne","","",242],[11,"clone","","",242],[11,"fmt","","",24],[11,"decode","","",24],[11,"encode","","",24],[11,"clone","","",24],[11,"eq","","",24],[11,"ne","","",24],[11,"fmt","","",23],[11,"decode","","",23],[11,"encode","","",23],[11,"clone","","",23],[11,"eq","","",23],[11,"ne","","",23],[11,"is_bound","","",16],[11,"escapes_depth","","",16],[11,"fmt","","",17],[11,"decode","","",17],[11,"encode","","",17],[11,"hash","","",17],[11,"cmp","","",17],[11,"partial_cmp","","",17],[11,"lt","","",17],[11,"le","","",17],[11,"gt","","",17],[11,"ge","","",17],[11,"eq","","",17],[11,"ne","","",17],[11,"clone","","",17],[11,"fmt","","",20],[11,"decode","","",20],[11,"encode","","",20],[11,"hash","","",20],[11,"cmp","","",20],[11,"partial_cmp","","",20],[11,"lt","","",20],[11,"le","","",20],[11,"gt","","",20],[11,"ge","","",20],[11,"eq","","",20],[11,"ne","","",20],[11,"clone","","",20],[11,"fmt","","",243],[11,"hash","","",243],[11,"eq","","",243],[11,"ne","","",243],[11,"clone","","",243],[11,"fmt","","",244],[11,"hash","","",244],[11,"eq","","",244],[11,"ne","","",244],[11,"clone","","",244],[11,"principal_def_id","","",244],[11,"principal_trait_ref_with_self_ty","","Object types don't have a self-type specified. Therefore, when\nwe convert the principal trait-ref into a normal trait-ref,\nyou must give *some* self-type. A common choice is `mk_err()`\nor some skolemized type.",244],[11,"projection_bounds_with_self_ty","","",244],[11,"fmt","","",83],[11,"hash","","",83],[11,"eq","","",83],[11,"ne","","",83],[11,"clone","","",83],[11,"self_ty","","",90],[11,"def_id","","",90],[11,"substs","","",90],[11,"input_types","","",90],[11,"to_poly_trait_predicate","","",90],[11,"fmt","","",90],[11,"hash","","",90],[11,"eq","","",90],[11,"ne","","",90],[11,"clone","","",90],[11,"skip_binder","","Skips the binder and returns the \"bound\" value. This is a\nrisky thing to do because it's easy to get confused about\ndebruijn indices and the like. It is usually better to\ndischarge the binder using `no_late_bound_regions` or\n`replace_late_bound_regions` or something like\nthat. `skip_binder` is only valid when you are either\nextracting data that has nothing to do with bound regions, you\nare doing some sort of test that does not involve bound\nregions, or you are being very careful about your depth\naccounting.",90],[11,"eq","","",120],[11,"ne","","",120],[11,"clone","","",120],[11,"fmt","","",245],[11,"clone","","",245],[11,"fmt","","",246],[11,"clone","","",246],[11,"fmt","","",247],[11,"clone","","",247],[11,"fmt","","",248],[11,"clone","","",248],[11,"hash","","",248],[11,"eq","","",248],[11,"ne","","",248],[11,"fmt","","",249],[11,"clone","","",249],[11,"hash","","",249],[11,"eq","","",249],[11,"ne","","",249],[11,"fmt","","",250],[11,"hash","","",250],[11,"decode","","",250],[11,"eq","","",250],[11,"ne","","",250],[11,"encode","","",250],[11,"clone","","",250],[11,"to_usize","","",250],[11,"from_usize","","",250],[11,"hash","","",251],[11,"eq","","",251],[11,"ne","","",251],[11,"clone","","",251],[11,"hash","","",119],[11,"eq","","",119],[11,"ne","","",119],[11,"clone","","",119],[11,"hash","","",121],[11,"eq","","",121],[11,"ne","","",121],[11,"clone","","",121],[11,"hash","","",252],[11,"decode","","",252],[11,"encode","","",252],[11,"eq","","",252],[11,"ne","","",252],[11,"clone","","",252],[11,"hash","","",253],[11,"eq","","",253],[11,"ne","","",253],[11,"clone","","",253],[11,"fmt","","",254],[11,"hash","","",254],[11,"eq","","",254],[11,"ne","","",254],[11,"decode","","",254],[11,"encode","","",254],[11,"clone","","",254],[11,"fmt","","",255],[11,"hash","","",255],[11,"decode","","",255],[11,"encode","","",255],[11,"clone","","",255],[11,"eq","","",255],[11,"ne","","",255],[11,"fmt","","",251],[11,"fmt","","",119],[11,"fmt","","",121],[11,"fmt","","",252],[11,"fmt","","",85],[11,"fmt","","",253],[11,"fmt","","",120],[11,"fmt","","",256],[11,"clone","","",256],[11,"fmt","","",257],[11,"clone","","",257],[11,"fmt","","",258],[11,"clone","","",258],[11,"decode","","",258],[11,"encode","","",258],[11,"to_early_bound_region","","",258],[11,"fmt","","",259],[11,"clone","","",259],[11,"empty","","",259],[11,"is_empty","","",259],[11,"has_type_params","","",259],[11,"has_region_params","","",259],[11,"fmt","","",260],[11,"clone","","",260],[11,"empty","","",260],[11,"instantiate","","",260],[11,"instantiate_supertrait","","",260],[11,"fmt","","",261],[11,"hash","","",261],[11,"eq","","",261],[11,"ne","","",261],[11,"clone","","",261],[11,"subst_supertrait","","Performs a substituion suitable for going from a\npoly-trait-ref to supertraits that must hold if that\npoly-trait-ref holds. This is slightly different from a normal\nsubstitution in terms of what happens with bound regions.  See\nlengthy comment below for details.",261],[11,"fmt","","",262],[11,"hash","","",262],[11,"eq","","",262],[11,"ne","","",262],[11,"clone","","",262],[11,"def_id","","",262],[11,"input_types","","",262],[11,"self_ty","","",262],[11,"def_id","","",90],[11,"fmt","","",263],[11,"hash","","",263],[11,"eq","","",263],[11,"ne","","",263],[11,"clone","","",263],[11,"fmt","","",264],[11,"hash","","",264],[11,"eq","","",264],[11,"ne","","",264],[11,"clone","","",264],[11,"fmt","","",84],[11,"hash","","",84],[11,"eq","","",84],[11,"ne","","",84],[11,"clone","","",84],[11,"item_name","","",90],[11,"sort_key","","",90],[11,"fmt","","",265],[11,"hash","","",265],[11,"eq","","",265],[11,"ne","","",265],[11,"clone","","",265],[11,"sort_key","","",265],[11,"to_poly_trait_ref","alloc::rc","",82],[11,"to_poly_trait_ref","rustc::middle::ty","",90],[11,"to_poly_trait_ref","","",90],[11,"as_predicate","alloc::rc","",82],[11,"as_predicate","rustc::middle::ty","",90],[11,"as_predicate","","",90],[11,"as_predicate","","",90],[11,"as_predicate","","",90],[11,"as_predicate","","",90],[11,"walk_tys","","Iterates over the types in this predicate. Note that in all\ncases this is skipping over a binder, so late-bound regions\nwith depth 0 are bound by the predicate.",261],[11,"has_escaping_regions","","",261],[11,"to_opt_poly_trait_ref","","",261],[11,"fmt","","",266],[11,"clone","","",266],[11,"empty","","",266],[11,"has_escaping_regions","","",266],[11,"is_empty","","",266],[11,"new","","",83],[11,"self_ty","","",83],[11,"input_types","","",83],[11,"clone","","",267],[11,"with_caller_bounds","","",267],[11,"for_item","","",267],[11,"fmt","","",268],[11,"clone","","",268],[11,"clone","","",269],[11,"decode","","",155],[11,"encode","","",155],[11,"fmt","","",155],[11,"eq","","",155],[11,"ne","","",155],[11,"clone","","",155],[11,"trait_did","","",155],[11,"mk_substs","","",233],[11,"mk_bare_fn","","",233],[11,"mk_region","","",233],[11,"closure_kind","","",233],[11,"closure_type","","",233],[11,"type_parameter_def","","",233],[11,"walk","","Iterator that walks `self` and any types reachable from\n`self`, in depth-first order. Note that just walks the types\nthat appear in `self`, it does not descend into the fields of\nstructs or variants. For example:",234],[11,"walk_children","","Iterator that walks types reachable from `self`, in\ndepth-first order. Note that this is a shallow walk. For\nexample:",234],[11,"as_opt_param_ty","","",234],[11,"is_param","","",234],[11,"new","","",239],[11,"for_self","","",239],[11,"for_def","","",239],[11,"to_ty","","",239],[11,"is_self","","",239],[11,"empty","","",269],[11,"is_noop","","",269],[11,"empty","","",248],[11,"clone","","",270],[11,"when","","",270],[11,"intersects","","",270],[11,"owns_managed","","",270],[11,"owns_owned","","",270],[11,"is_sized","","",270],[11,"interior_param","","",270],[11,"interior_unsafe","","",270],[11,"interior_unsized","","",270],[11,"needs_drop","","",270],[11,"owned_pointer","","Includes only those bits that still apply when indirected through a `Box` pointer",270],[11,"reference","","Includes only those bits that still apply when indirected through a reference (`&`)",270],[11,"managed_pointer","","Includes only those bits that still apply when indirected through a managed pointer (`@`)",270],[11,"unsafe_pointer","","Includes only those bits that still apply when indirected through an unsafe pointer (`*`)",270],[11,"union","","",270],[11,"has_dtor","","",270],[6,"Output","rustc_typeck::lint",""],[11,"bitor","rustc::middle::ty","",270],[6,"Output","rustc_typeck::lint",""],[11,"bitand","rustc::middle::ty","",270],[6,"Output","rustc_typeck::lint",""],[11,"sub","rustc::middle::ty","",270],[11,"fmt","","",270],[11,"fmt","","",271],[11,"eq","","",271],[11,"ne","","",271],[11,"cmp","","",271],[11,"partial_cmp","","",271],[11,"lt","","",271],[11,"le","","",271],[11,"gt","","",271],[11,"ge","","",271],[11,"repr","","",247],[11,"clone","","",272],[11,"from_ast_variant","","Creates a new VariantInfo from the corresponding ast representation.",272],[11,"is_present","","",273],[11,"has_drop_flag","","",273],[11,"clone","","",274],[11,"to_string","","",219],[11,"from_mutbl","","",242],[11,"to_mutbl_lossy","","Returns a mutability `m` such that an `&m T` pointer could be used to obtain this borrow\nkind. Because borrow kinds are richer than mutabilities, we sometimes have to pick a\nmutability that is stronger than necessary so that it at least *would permit* the borrow in\nquestion.",242],[11,"to_user_str","","",242],[11,"is_method_call","","",233],[11,"upvar_capture","","",233],[11,"node_ty","","",267],[11,"expr_ty_adjusted","","",267],[11,"node_method_ty","","",267],[11,"node_method_origin","","",267],[11,"adjustments","","",267],[11,"is_method_call","","",267],[11,"temporary_scope","","",267],[11,"upvar_capture","","",267],[11,"type_moves_by_default","","",267],[11,"param_env","","",267],[11,"closure_kind","","",267],[11,"closure_type","","",267],[11,"closure_upvars","","",267],[11,"fmt","","",275],[11,"eq","","",275],[11,"ne","","",275],[11,"clone","","",275],[11,"decode","","",22],[11,"encode","","",22],[11,"clone","","",22],[11,"is_identity","","",220],[11,"is_identity","","",222],[11,"new","","",240],[11,"shifted","","",240],[11,"repr","","",220],[11,"repr","","",221],[11,"repr","","",222],[11,"repr","","",223],[11,"repr","","",244],[11,"repr","","",261],[11,"repr","","",230],[11,"has_regions_escaping_depth","rustc::middle::subst","",173],[11,"has_regions_escaping_depth","","",176],[11,"has_regions_escaping_depth","rustc::middle::ty","",268],[11,"has_regions_escaping_depth","","",16],[11,"has_regions_escaping_depth","","",260],[11,"has_regions_escaping_depth","","",261],[11,"has_regions_escaping_depth","","",83],[11,"has_regions_escaping_depth","rustc::middle::subst","",174],[11,"has_regions_escaping_depth","rustc::middle::ty","",90],[11,"has_regions_escaping_depth","","",263],[11,"has_regions_escaping_depth","","",262],[11,"has_regions_escaping_depth","","",264],[11,"has_regions_escaping_depth","","",84],[11,"has_regions_escaping_depth","","",265],[11,"repr","","",84],[11,"has_projection_types","collections::vec","",276],[11,"has_projection_types","rustc::middle::subst","",176],[11,"has_projection_types","rustc::middle::ty","",237],[11,"has_projection_types","","",274],[11,"has_projection_types","","",266],[11,"has_projection_types","","",261],[11,"has_projection_types","","",262],[11,"has_projection_types","","",263],[11,"has_projection_types","","",16],[11,"has_projection_types","","",264],[11,"has_projection_types","","",84],[11,"has_projection_types","","",265],[11,"has_projection_types","","",83],[11,"has_projection_types","rustc::middle::subst","",173],[11,"has_projection_types","core::option","",12],[11,"has_projection_types","alloc::rc","",82],[11,"has_projection_types","alloc::boxed","",277],[11,"has_projection_types","rustc::middle::ty","",90],[11,"has_projection_types","","",238],[11,"has_projection_types","","",85],[11,"has_projection_types","","",209],[11,"has_projection_types","","",236],[11,"references_error","","",90],[11,"references_error","alloc::rc","",82],[11,"references_error","rustc::middle::ty","",262],[11,"references_error","","",84],[11,"references_error","","",83],[11,"references_error","","",261],[11,"references_error","","",264],[11,"references_error","","",263],[11,"references_error","","",16],[11,"repr","","",237],[11,"repr","","",274],[11,"repr","","",209],[11,"repr","","",267],[11,"repr","","",256],[11,"fold_with","core::option","",12],[11,"fold_with","alloc::rc","",82],[11,"fold_with","alloc::boxed","",277],[11,"fold_with","collections::vec","",276],[11,"fold_with","rustc::middle::ty","",90],[11,"fold_with","syntax::owned_slice","",278],[11,"fold_with","rustc::middle::subst","",176],[11,"fold_with","rustc::middle::ty","",236],[11,"fold_with","","",237],[11,"fold_with","","",215],[11,"fold_with","","",238],[11,"fold_with","","",85],[11,"fold_with","","",83],[11,"fold_with","","",209],[11,"fold_with","","",16],[11,"fold_with","rustc::middle::subst","",173],[11,"fold_with","rustc::middle::ty","",269],[11,"fold_with","","",223],[11,"fold_with","","",25],[11,"fold_with","","",230],[11,"fold_with","collections::enum_set","",279],[11,"fold_with","rustc::middle::ty","",249],[11,"fold_with","","",248],[11,"fold_with","","",257],[11,"fold_with","","",256],[11,"fold_with","","",258],[11,"fold_with","","",259],[11,"fold_with","","",260],[11,"fold_with","","",261],[11,"fold_with","","",84],[11,"fold_with","","",265],[11,"fold_with","","",266],[11,"fold_with","","",221],[11,"fold_with","rustc::middle::traits","",199],[11,"fold_with","","",197],[11,"fold_with","","",202],[11,"fold_with","","",201],[11,"fold_with","","",200],[11,"fold_with","","",198],[11,"fold_with","rustc::middle::ty","",263],[11,"fold_with","","",262],[11,"fold_with","","",264],[11,"fold_with","","",274],[11,"fold_with","","",267],[11,"tcx","rustc::middle::ty_fold","",280],[11,"fold_ty","","",280],[11,"new","","",281],[11,"tcx","","",281],[11,"enter_region_binder","","",281],[11,"exit_region_binder","","",281],[11,"fold_region","","",281],[11,"tcx","","",282],[11,"fold_region","","",282],[11,"new","rustc::middle::ty_walk","",283],[11,"skip_current_subtree","","Skips the subtree of types corresponding to the last type\nreturned by `next()`.",283],[6,"Item","rustc_typeck::lint",""],[11,"next","rustc::middle::ty_walk","",283],[11,"visit_foreign_item","rustc::middle::weak_lang_items","",284],[11,"from_i64","rustc::metadata::common","",285],[11,"from_u64","","",285],[11,"eq","","",285],[11,"ne","","",285],[11,"fmt","","",286],[11,"clone","","",286],[11,"fmt","rustc::metadata::tydecode","",287],[11,"clone","rustc::metadata::encoder","",288],[11,"visit_expr","","",289],[11,"visit_item","","",289],[11,"visit_foreign_item","","",289],[11,"visit_item","","",290],[11,"eq","rustc::metadata::decoder","",291],[11,"ne","","",291],[11,"fmt","","",292],[11,"clone","","",292],[11,"clone","","",293],[11,"visit_item","rustc::metadata::creader","",294],[11,"as_slice","","",295],[11,"new","","",294],[11,"read_crates","","",294],[11,"read_exported_macros","","Read exported macros.",294],[11,"find_plugin_registrar","","Look for a plugin registrar. Returns library path and symbol name.",294],[11,"clone","rustc::metadata::cstore","",296],[11,"eq","","",296],[11,"ne","","",296],[11,"fmt","","",296],[11,"from_i64","","",297],[11,"from_u64","","",297],[11,"eq","","",297],[11,"ne","","",297],[11,"clone","","",297],[11,"clone","","",298],[11,"eq","","",298],[11,"ne","","",298],[11,"new","","",299],[11,"next_crate_num","","",299],[11,"get_crate_data","","",299],[11,"get_crate_hash","","",299],[11,"set_crate_data","","",299],[11,"iter_crate_data","","",299],[11,"iter_crate_data_origins","","Like `iter_crate_data`, but passes source paths (if available) as well.",299],[11,"add_used_crate_source","","",299],[11,"get_used_crate_source","","",299],[11,"reset","","",299],[11,"get_used_crates","","",299],[11,"add_used_library","","",299],[11,"get_used_libraries","","",299],[11,"add_used_link_args","","",299],[11,"get_used_link_args","","",299],[11,"add_extern_mod_stmt_cnum","","",299],[11,"find_extern_mod_stmt_cnum","","",299],[11,"data","","",300],[11,"name","","",300],[11,"hash","","",300],[11,"as_slice","","",301],[11,"maybe_load_library_crate","rustc::metadata::loader","",302],[11,"load_library_crate","","",302],[11,"report_load_errs","","",302],[11,"as_slice","","",303],[11,"for_each_lib_search_path","rustc::metadata::filesearch","",304],[11,"get_lib_path","","",304],[11,"search","","",304],[11,"new","","",304],[11,"get_dylib_search_paths","","",304],[11,"get_tools_search_paths","","",304],[11,"visit_item","rustc::metadata::macro_import","",305],[11,"visit_mac","","",305],[11,"eq","rustc::session::config","",306],[11,"ne","","",306],[11,"clone","","",306],[11,"eq","","",307],[11,"ne","","",307],[11,"clone","","",307],[11,"cmp","","",308],[11,"partial_cmp","","",308],[11,"lt","","",308],[11,"le","","",308],[11,"gt","","",308],[11,"ge","","",308],[11,"eq","","",308],[11,"ne","","",308],[11,"clone","","",308],[11,"clone","","",309],[11,"clone","","",310],[11,"eq","","",311],[11,"ne","","",311],[11,"clone","","",311],[11,"filestem","","",312],[11,"clone","","",313],[11,"path","","",313],[11,"temp_path","","",313],[11,"with_extension","","",313],[11,"filestem","","",313],[11,"eq","","",314],[11,"ne","","",314],[11,"fmt","","",315],[11,"hash","","",315],[11,"cmp","","",315],[11,"clone","","",315],[11,"partial_cmp","","",315],[11,"lt","","",315],[11,"le","","",315],[11,"gt","","",315],[11,"ge","","",315],[11,"eq","","",315],[11,"ne","","",315],[11,"clone","","",316],[11,"is_empty","","",316],[11,"clone","","",317],[11,"clone","","",318],[11,"fmt","","",319],[11,"eq","","",319],[11,"ne","","",319],[11,"clone","","",319],[11,"eq","","",320],[11,"ne","","",320],[11,"clone","","",320],[11,"is_stable","","",320],[11,"fmt","","",315],[11,"fmt","rustc::session::search_paths","",321],[11,"clone","","",321],[11,"fmt","","",322],[11,"clone","","",322],[11,"eq","","",322],[11,"ne","","",322],[11,"new","","",321],[11,"add_path","","",321],[11,"iter","","",321],[6,"Item","rustc_typeck::lint",""],[11,"next","rustc::session::search_paths","",323],[11,"span_fatal","rustc::session","",324],[11,"span_fatal_with_code","","",324],[11,"fatal","","",324],[11,"span_err","","",324],[11,"span_err_with_code","","",324],[11,"err","","",324],[11,"err_count","","",324],[11,"has_errors","","",324],[11,"abort_if_errors","","",324],[11,"span_warn","","",324],[11,"span_warn_with_code","","",324],[11,"warn","","",324],[11,"opt_span_warn","","",324],[11,"span_note","","",324],[11,"span_end_note","","",324],[11,"span_help","","",324],[11,"fileline_note","","",324],[11,"fileline_help","","",324],[11,"note","","",324],[11,"help","","",324],[11,"opt_span_bug","","",324],[11,"span_bug","","",324],[11,"bug","","",324],[11,"span_unimpl","","",324],[11,"unimpl","","",324],[11,"add_lint","","",324],[11,"next_node_id","","",324],[11,"reserve_node_ids","","",324],[11,"diagnostic","","",324],[11,"codemap","","",324],[11,"impossible_case","","",324],[11,"verbose","","",324],[11,"time_passes","","",324],[11,"count_llvm_insns","","",324],[11,"count_type_sizes","","",324],[11,"time_llvm_passes","","",324],[11,"trans_stats","","",324],[11,"meta_stats","","",324],[11,"asm_comments","","",324],[11,"no_verify","","",324],[11,"borrowck_stats","","",324],[11,"print_llvm_passes","","",324],[11,"lto","","",324],[11,"no_landing_pads","","",324],[11,"unstable_options","","",324],[11,"print_enum_sizes","","",324],[11,"sysroot","","",324],[11,"target_filesearch","","",324],[11,"host_filesearch","","",324],[11,"args","rustc::plugin::registry","Get the plugin's arguments, if any.",325],[11,"register_syntax_extension","","Register a syntax extension of any kind.",325],[11,"register_macro","","Register a macro of the usual kind.",325],[11,"register_lint_pass","","Register a compiler lint pass.",325],[11,"register_lint_group","","Register a lint group.",325],[11,"visit_item","rustc::plugin::build","",326],[11,"fmt","rustc::lint","",0],[11,"clone","","",327],[11,"eq","","",327],[11,"hash","","",327],[11,"of","","Get the `LintId` for a `Lint`.",327],[11,"as_str","","Get the name of the lint.",327],[11,"fmt","","",328],[11,"cmp","","",328],[11,"partial_cmp","","",328],[11,"lt","","",328],[11,"le","","",328],[11,"gt","","",328],[11,"ge","","",328],[11,"eq","","",328],[11,"ne","","",328],[11,"clone","","",328],[11,"as_str","","Convert a level to a lower-case string.",328],[11,"from_str","","Convert a lower-case string to a level.",328],[11,"eq","","",329],[11,"ne","","",329],[11,"clone","","",329],[11,"get_lints","rustc::lint::builtin","",330],[11,"new","rustc::lint::context","",331],[11,"get_lints","","",331],[11,"get_lint_groups","","",331],[11,"register_pass","","",331],[11,"register_group","","",331],[11,"register_renamed","","",331],[11,"process_command_line","","",331],[11,"sess","","Get the overall compiler `Session` object.",332],[11,"current_level","","Get the level of `lint` at the current position of the lint\ntraversal.",332],[11,"lint","","Emit a lint at the appropriate level, with no associated span.",332],[11,"span_lint","","Emit a lint at the appropriate level, for a particular span.",332],[11,"visit_item","","",332],[11,"visit_foreign_item","","",332],[11,"visit_pat","","",332],[11,"visit_expr","","",332],[11,"visit_stmt","","",332],[11,"visit_fn","","",332],[11,"visit_ty_method","","",332],[11,"visit_struct_def","","",332],[11,"visit_struct_field","","",332],[11,"visit_variant","","",332],[11,"visit_ty","","",332],[11,"visit_ident","","",332],[11,"visit_mod","","",332],[11,"visit_local","","",332],[11,"visit_block","","",332],[11,"visit_arm","","",332],[11,"visit_decl","","",332],[11,"visit_expr_post","","",332],[11,"visit_generics","","",332],[11,"visit_trait_item","","",332],[11,"visit_opt_lifetime_ref","","",332],[11,"visit_lifetime_ref","","",332],[11,"visit_lifetime_def","","",332],[11,"visit_explicit_self","","",332],[11,"visit_mac","","",332],[11,"visit_path","","",332],[11,"visit_attribute","","",332],[11,"visit_id","","",332],[11,"get_lints","","",333],[11,"check_item","","",333],[11,"fmt","rustc::util::common","",334],[11,"clone","","",334],[11,"drop","","",335],[11,"visit_expr","","",336],[11,"visit_expr","","",337],[11,"repr","core::option","",12],[11,"repr","syntax::ptr","",338],[11,"repr","core::result","",130],[11,"repr","alloc::rc","",82],[11,"repr","alloc::boxed","",277],[11,"repr","syntax::owned_slice","",278],[11,"repr","collections::vec","",276],[11,"user_string","","",276],[11,"repr","rustc::middle::def","",15],[11,"user_string","rustc::middle::ty","",244],[11,"repr","","",257],[11,"repr","","",258],[11,"repr","","",234],[11,"repr","","",215],[11,"repr","rustc::middle::subst","",173],[11,"repr","","",176],[11,"repr","rustc::middle::ty","",269],[11,"repr","rustc::middle::subst","",174],[11,"repr","collections::enum_set","",279],[11,"repr","rustc::middle::ty","",248],[11,"repr","","",83],[11,"repr","","",339],[11,"repr","syntax::ast","",340],[11,"repr","","",152],[11,"repr","","",341],[11,"user_string","","",341],[11,"repr","","",342],[11,"repr","","",343],[11,"repr","","",344],[11,"repr","syntax::codemap","",345],[11,"repr","syntax::ast","",153],[11,"repr","rustc::middle::ty","",20],[11,"repr","","",16],[11,"user_string","","",16],[11,"repr","","",17],[11,"repr","rustc::middle::region","",18],[11,"repr","","",19],[11,"repr","syntax::ast","",11],[11,"repr","rustc::middle::ty","",268],[11,"repr","","",259],[11,"repr","","",260],[11,"repr","","",266],[11,"repr","","",218],[11,"repr","","",219],[11,"repr","","",213],[11,"repr","syntax::ast","",8],[11,"user_string","","",8],[11,"repr","","",7],[11,"repr","","",346],[11,"repr","","",347],[11,"repr","rustc::middle::ty","",236],[11,"repr","","",85],[11,"repr","","",238],[11,"repr","","",227],[11,"repr","","",25],[11,"repr","","",225],[11,"repr","","",226],[11,"repr","","",250],[11,"user_string","","",250],[11,"repr","syntax::codemap","",13],[11,"user_string","alloc::rc","",82],[11,"user_string","rustc::middle::ty","",248],[11,"repr","","",249],[11,"user_string","collections::enum_set","",279],[11,"user_string","rustc::middle::ty","",90],[11,"user_string","","",83],[11,"user_string","syntax::ast","",7],[11,"repr","syntax::abi","",348],[11,"user_string","","",348],[11,"repr","rustc::middle::ty","",241],[11,"repr","syntax::ast","",349],[11,"repr","rustc::middle::ty","",242],[11,"repr","","",23],[11,"repr","","",24],[11,"repr","","",119],[11,"repr","","",121],[11,"repr","","",252],[11,"repr","","",251],[11,"repr","","",120],[11,"repr","syntax::ast","",350],[11,"repr","","",351],[11,"repr","","",122],[11,"repr","rustc::middle::ty","",275],[11,"user_string","","",239],[11,"repr","","",239],[11,"repr","","",90],[11,"repr","std::collections::hash::map","",352],[11,"repr","rustc::middle::ty","",264],[11,"user_string","","",264],[11,"repr","","",263],[11,"user_string","","",263],[11,"repr","","",262],[11,"user_string","","",262],[11,"user_string","","",84],[11,"repr","","",265],[11,"user_string","","",265],[11,"user_string","","",261],[11,"default","rustc::util::nodemap","",353],[11,"write","","",353],[11,"finish","","",353],[11,"new","rustc::util::snapshot_vec","",354],[11,"record","","",354],[11,"push","","",354],[11,"get","","",354],[11,"get_mut","","Returns a mutable pointer into the vec; whatever changes you make here cannot be undone\nautomatically, so you should be sure call `record()` with some sort of suitable undo\naction.",354],[11,"set","","Updates the element at the given index. The old value will saved (and perhaps restored) if\na snapshot is active.",354],[11,"start_snapshot","","",354],[11,"actions_since_snapshot","","",354],[11,"rollback_to","","",354],[11,"commit","","Commits all changes since the last snapshot. Of course, they\ncan still be undone if there is a snapshot further out.",354],[11,"input","rustc_back::sha2","",355],[11,"reset","","",355],[11,"zero_until","","",355],[11,"next","","",355],[11,"full_buffer","","",355],[11,"position","","",355],[11,"remaining","","",355],[11,"size","","",355],[11,"new","","Construct a new instance of a SHA-256 digest.",356],[11,"input","","",356],[11,"result","","",356],[11,"reset","","",356],[11,"output_bits","","",356],[11,"open","rustc_llvm::archive_ro","Opens a static archive for read-only purposes. This is more optimized\nthan the `open` method because it uses LLVM's internal `Archive` class\nrather than shelling out to `ar` for everything.",357],[11,"read","","Reads a file in the archive",357],[11,"drop","","",357],[11,"describe","rustc_llvm::diagnostic","",358],[11,"unpack","","",359],[11,"eq","rustc_llvm","",360],[11,"ne","","",360],[11,"fmt","","",361],[11,"hash","","",362],[11,"cmp","","",362],[11,"partial_cmp","","",362],[11,"lt","","",362],[11,"le","","",362],[11,"gt","","",362],[11,"ge","","",362],[11,"clone","","",362],[11,"eq","","",362],[11,"ne","","",362],[11,"empty","","Returns an empty set of flags.",362],[11,"all","","Returns the set containing all flags.",362],[11,"bits","","Returns the raw value of the flags currently stored.",362],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",362],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",362],[11,"is_empty","","Returns `true` if no flags are currently stored.",362],[11,"is_all","","Returns `true` if all flags are currently set.",362],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",362],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",362],[11,"insert","","Inserts the specified flags in-place.",362],[11,"remove","","Removes the specified flags in-place.",362],[11,"toggle","","Toggles the specified flags in-place.",362],[6,"Output","rustc_typeck::lint",""],[11,"bitor","rustc_llvm","Returns the union of the two sets of flags.",362],[6,"Output","rustc_typeck::lint",""],[11,"bitxor","rustc_llvm","Returns the left flags, but with all the right flags toggled.",362],[6,"Output","rustc_typeck::lint",""],[11,"bitand","rustc_llvm","Returns the intersection between the two sets of flags.",362],[6,"Output","rustc_typeck::lint",""],[11,"sub","rustc_llvm","Returns the set difference of the two sets of flags.",362],[6,"Output","rustc_typeck::lint",""],[11,"not","rustc_llvm","Returns the complement of this set of flags.",362],[11,"apply_llfn","","",362],[11,"apply_callsite","","",362],[11,"apply_llfn","","",363],[11,"apply_callsite","","",363],[11,"apply_llfn","","",364],[11,"apply_callsite","","",364],[11,"new","","",365],[11,"arg","","",365],[11,"ret","","",365],[11,"apply_llfn","","",365],[11,"apply_callsite","","",365],[11,"fmt","","",366],[11,"eq","","",366],[11,"ne","","",366],[11,"clone","","",367],[11,"eq","","",367],[11,"ne","","",367],[11,"eq","","",368],[11,"ne","","",368],[11,"drop","","",369],[11,"new","","",370],[11,"drop","","",370],[11,"drop","","",371],[3,"Lint","rustc_typeck::lint","Specification of a single lint."],[12,"name","","A string identifier for the lint.",0],[12,"default_level","","Default level for the lint.",0],[12,"desc","","Description of the lint or the issue it detects.",0],[6,"LintArray","",""],[8,"LintPass","","Trait for types providing lint checks."],[10,"get_lints","","Get descriptions of the lints this `LintPass` object can emit.",372],[10,"check_crate","","",372],[10,"check_ident","","",372],[10,"check_mod","","",372],[10,"check_foreign_item","","",372],[10,"check_item","","",372],[10,"check_local","","",372],[10,"check_block","","",372],[10,"check_stmt","","",372],[10,"check_arm","","",372],[10,"check_pat","","",372],[10,"check_decl","","",372],[10,"check_expr","","",372],[10,"check_expr_post","","",372],[10,"check_ty","","",372],[10,"check_generics","","",372],[10,"check_fn","","",372],[10,"check_ty_method","","",372],[10,"check_trait_item","","",372],[10,"check_struct_def","","",372],[10,"check_struct_def_post","","",372],[10,"check_struct_field","","",372],[10,"check_variant","","",372],[10,"check_variant_post","","",372],[10,"check_opt_lifetime_ref","","",372],[10,"check_lifetime_ref","","",372],[10,"check_lifetime_def","","",372],[10,"check_explicit_self","","",372],[10,"check_mac","","",372],[10,"check_path","","",372],[10,"check_attribute","","",372],[10,"enter_lint_attrs","","Called when entering a syntax node that can have lint attributes such\nas `#[allow(...)]`. Called with *all* the attributes of that node.",372],[10,"exit_lint_attrs","","Counterpart to `enter_lint_attrs`.",372],[6,"LintPassObject","",""],[3,"LintId","","Identifies a lint known to the compiler."],[4,"Level","","Setting for how to handle a lint."],[13,"Allow","","",328],[13,"Warn","","",328],[13,"Deny","","",328],[13,"Forbid","","",328],[4,"LintSource","","How a lint level was set."],[13,"Default","","Lint is at the default level as declared\nin rustc or a plugin.",329],[13,"Node","","Lint level was set by an attribute.",329],[13,"CommandLine","","Lint level was set by a command-line flag.",329],[13,"ReleaseChannel","","Lint level was set by the release channel.",329],[6,"LevelSource","",""],[0,"builtin","","Some lints that are built in to the compiler."],[7,"UNUSED_IMPORTS","rustc_typeck::lint::builtin",""],[7,"UNUSED_EXTERN_CRATES","",""],[7,"UNUSED_QUALIFICATIONS","",""],[7,"UNKNOWN_LINTS","",""],[7,"UNUSED_VARIABLES","",""],[7,"UNUSED_ASSIGNMENTS","",""],[7,"DEAD_CODE","",""],[7,"UNREACHABLE_CODE","",""],[7,"WARNINGS","",""],[7,"UNUSED_FEATURES","",""],[7,"STABLE_FEATURES","",""],[7,"UNKNOWN_CRATE_TYPES","",""],[7,"VARIANT_SIZE_DIFFERENCES","",""],[7,"FAT_PTR_TRANSMUTES","",""],[3,"HardwiredLints","","Does nothing as a lint pass, but registers some `Lint`s\nwhich are used by other parts of the compiler."],[3,"GatherNodeLevels","rustc_typeck::lint",""],[3,"Context","","Context for lint checking."],[12,"tcx","","Type context we're checking in.",332],[12,"krate","","The crate being checked.",332],[12,"exported_items","","Items exported from the crate being checked.",332],[3,"LintStore","","Information about the registered lints."],[5,"check_crate","","Perform lint checking on a crate."],[5,"raw_emit_lint","","Emit a lint as a warning or an error (or not at all)\naccording to `level`."],[5,"gather_attrs","","Parse the lint attributes into a vector, with `Err`s for malformed lint\nattributes. Writing this as an iterator is an enormous mess."],[0,"metadata","rustc_typeck",""],[0,"common","rustc_typeck::metadata",""],[17,"tag_items","rustc_typeck::metadata::common",""],[17,"tag_paths_data_name","",""],[17,"tag_def_id","",""],[17,"tag_items_data","",""],[17,"tag_items_data_item","",""],[17,"tag_items_data_item_family","",""],[17,"tag_items_data_item_type","",""],[17,"tag_items_data_item_symbol","",""],[17,"tag_items_data_item_variant","",""],[17,"tag_items_data_parent_item","",""],[17,"tag_items_data_item_is_tuple_struct_ctor","",""],[17,"tag_index","",""],[17,"tag_index_buckets","",""],[17,"tag_index_buckets_bucket","",""],[17,"tag_index_buckets_bucket_elt","",""],[17,"tag_index_table","",""],[17,"tag_meta_item_name_value","",""],[17,"tag_meta_item_name","",""],[17,"tag_meta_item_value","",""],[17,"tag_attributes","",""],[17,"tag_attribute","",""],[17,"tag_meta_item_word","",""],[17,"tag_meta_item_list","",""],[17,"tag_crate_deps","",""],[17,"tag_crate_dep","",""],[17,"tag_crate_hash","",""],[17,"tag_crate_crate_name","",""],[17,"tag_crate_dep_crate_name","",""],[17,"tag_crate_dep_hash","",""],[17,"tag_mod_impl","",""],[17,"tag_item_trait_item","",""],[17,"tag_item_trait_ref","",""],[17,"tag_disr_val","",""],[17,"tag_path","",""],[17,"tag_path_len","",""],[17,"tag_path_elem_mod","",""],[17,"tag_path_elem_name","",""],[17,"tag_item_field","",""],[17,"tag_item_field_origin","",""],[17,"tag_item_variances","",""],[17,"tag_item_impl_item","",""],[17,"tag_item_trait_method_explicit_self","",""],[17,"tag_items_data_item_reexport","",""],[17,"tag_items_data_item_reexport_def_id","",""],[17,"tag_items_data_item_reexport_name","",""],[4,"astencode_tag","",""],[13,"tag_ast","","",285],[13,"tag_tree","","",285],[13,"tag_id_range","","",285],[13,"tag_table","","",285],[13,"tag_table_def","","",285],[13,"tag_table_node_type","","",285],[13,"tag_table_item_subst","","",285],[13,"tag_table_freevars","","",285],[13,"tag_table_tcache","","",285],[13,"tag_table_param_defs","","",285],[13,"tag_table_mutbl","","",285],[13,"tag_table_last_use","","",285],[13,"tag_table_spill","","",285],[13,"tag_table_method_map","","",285],[13,"tag_table_vtable_map","","",285],[13,"tag_table_adjustments","","",285],[13,"tag_table_moves_map","","",285],[13,"tag_table_capture_map","","",285],[13,"tag_table_closure_tys","","",285],[13,"tag_table_closure_kinds","","",285],[13,"tag_table_upvar_capture_map","","",285],[13,"tag_table_capture_modes","","",285],[13,"tag_table_object_cast_map","","",285],[13,"tag_table_const_qualif","","",285],[17,"tag_item_trait_item_sort","",""],[17,"tag_item_trait_parent_sort","",""],[17,"tag_item_impl_type_basename","",""],[17,"tag_crate_triple","",""],[17,"tag_dylib_dependency_formats","",""],[17,"tag_lang_items","",""],[17,"tag_lang_items_item","",""],[17,"tag_lang_items_item_id","",""],[17,"tag_lang_items_item_node_id","",""],[17,"tag_lang_items_missing","",""],[17,"tag_item_unnamed_field","",""],[17,"tag_items_data_item_visibility","",""],[17,"tag_item_method_tps","",""],[17,"tag_item_method_fty","",""],[17,"tag_mod_child","",""],[17,"tag_misc_info","",""],[17,"tag_misc_info_crate_items","",""],[17,"tag_item_method_provided_source","",""],[17,"tag_item_impl_vtables","",""],[17,"tag_impls","",""],[17,"tag_impls_impl","",""],[17,"tag_items_data_item_inherent_impl","",""],[17,"tag_items_data_item_extension_impl","",""],[17,"tag_native_libraries","",""],[17,"tag_native_libraries_lib","",""],[17,"tag_native_libraries_name","",""],[17,"tag_native_libraries_kind","",""],[17,"tag_plugin_registrar_fn","",""],[17,"tag_method_argument_names","",""],[17,"tag_method_argument_name","",""],[17,"tag_reachable_extern_fns","",""],[17,"tag_reachable_extern_fn_id","",""],[17,"tag_items_data_item_stability","",""],[17,"tag_items_data_item_repr","",""],[3,"LinkMeta","",""],[12,"crate_name","","",286],[12,"crate_hash","","",286],[17,"tag_struct_fields","",""],[17,"tag_struct_field","",""],[17,"tag_struct_field_id","",""],[17,"tag_attribute_is_sugared_doc","",""],[17,"tag_items_data_region","",""],[17,"tag_region_param_def","",""],[17,"tag_region_param_def_ident","",""],[17,"tag_region_param_def_def_id","",""],[17,"tag_region_param_def_space","",""],[17,"tag_region_param_def_index","",""],[17,"tag_type_param_def","",""],[17,"tag_item_generics","",""],[17,"tag_method_ty_generics","",""],[17,"tag_predicate","",""],[17,"tag_predicate_space","",""],[17,"tag_predicate_data","",""],[17,"tag_unsafety","",""],[17,"tag_associated_type_names","",""],[17,"tag_associated_type_name","",""],[17,"tag_polarity","",""],[17,"tag_macro_defs","",""],[17,"tag_macro_def","",""],[17,"tag_macro_def_body","",""],[17,"tag_paren_sugar","",""],[17,"tag_codemap","",""],[17,"tag_codemap_filemap","",""],[17,"tag_item_super_predicates","",""],[17,"tag_defaulted_trait","",""],[0,"tyencode","rustc_typeck::metadata",""],[3,"ctxt","rustc_typeck::metadata::tyencode",""],[12,"diag","","",373],[12,"ds","","",373],[12,"tcx","","",373],[12,"abbrevs","","",373],[3,"ty_abbrev","",""],[6,"abbrev_map","",""],[5,"enc_ty","",""],[5,"enc_substs","",""],[5,"enc_region","",""],[5,"enc_trait_ref","",""],[5,"enc_bare_fn_ty","",""],[5,"enc_closure_ty","",""],[5,"enc_builtin_bounds","",""],[5,"enc_existential_bounds","",""],[5,"enc_bounds","",""],[5,"enc_region_bounds","",""],[5,"enc_type_param_def","",""],[5,"enc_predicate","",""],[0,"tydecode","rustc_typeck::metadata",""],[4,"DefIdSource","rustc_typeck::metadata::tydecode",""],[13,"NominalType","","",287],[13,"TypeWithId","","",287],[13,"TypeParameter","","",287],[13,"RegionParameter","","",287],[13,"ClosureSource","","",287],[3,"PState","",""],[5,"parse_ident","",""],[5,"parse_name","",""],[5,"parse_state_from_data","",""],[5,"parse_ty_closure_data","",""],[5,"parse_ty_data","",""],[5,"parse_region_data","",""],[5,"parse_bare_fn_ty_data","",""],[5,"parse_trait_ref_data","",""],[5,"parse_substs_data","",""],[5,"parse_bounds_data","",""],[5,"parse_existential_bounds_data","",""],[5,"parse_builtin_bounds_data","",""],[5,"parse_def_id","",""],[5,"parse_predicate_data","",""],[5,"parse_predicate","",""],[5,"parse_type_param_def_data","",""],[0,"encoder","rustc_typeck::metadata",""],[4,"InlinedItemRef","rustc_typeck::metadata::encoder","A borrowed version of `ast::InlinedItem`."],[13,"IIItemRef","","",374],[13,"IITraitItemRef","","",374],[13,"IIImplItemRef","","",374],[13,"IIForeignRef","","",374],[6,"EncodeInlinedItem","",""],[3,"EncodeParams","",""],[12,"diag","","",375],[12,"tcx","","",375],[12,"reexports","","",375],[12,"item_symbols","","",375],[12,"link_meta","","",375],[12,"cstore","","",375],[12,"encode_inlined_item","","",375],[12,"reachable","","",375],[3,"EncodeContext","",""],[12,"diag","","",26],[12,"tcx","","",26],[12,"reexports","","",26],[12,"item_symbols","","",26],[12,"link_meta","","",26],[12,"cstore","","",26],[12,"encode_inlined_item","","",26],[12,"type_abbrevs","","",26],[12,"reachable","","",26],[5,"encode_def_id","",""],[5,"def_to_string","",""],[5,"write_closure_type","",""],[5,"write_type","",""],[5,"write_trait_ref","",""],[5,"write_region","",""],[17,"metadata_encoding_version","",""],[5,"encode_metadata","",""],[5,"encoded_ty","",""],[0,"decoder","rustc_typeck::metadata",""],[6,"Cmd","rustc_typeck::metadata::decoder",""],[5,"maybe_find_item","",""],[5,"item_type","",""],[5,"get_trait_def","",""],[5,"get_predicates","",""],[5,"get_super_predicates","",""],[5,"get_type","",""],[5,"get_stability","",""],[5,"get_repr_attrs","",""],[5,"get_impl_polarity","",""],[5,"get_impl_trait","",""],[5,"get_impl_vtables","",""],[5,"get_symbol","",""],[4,"DefLike","",""],[13,"DlDef","","",292],[13,"DlImpl","","",292],[13,"DlField","","",292],[5,"each_lang_item","","Iterates over the language items in the given crate."],[5,"each_child_of_item","","Iterates over each child of the given item."],[5,"each_top_level_item_of_crate","","Iterates over all the top-level crate items."],[5,"get_item_path","",""],[6,"DecodeInlinedItem","",""],[5,"maybe_get_item_ast","",""],[5,"get_enum_variant_defs","",""],[5,"get_enum_variants","",""],[5,"get_impl_items","","Returns the def IDs of all the items in the given implementation."],[5,"get_trait_name","",""],[5,"is_static_method","",""],[5,"get_impl_or_trait_item","",""],[5,"get_trait_item_def_ids","",""],[5,"get_item_variances","",""],[5,"get_provided_trait_methods","",""],[5,"get_type_name_if_impl","",""],[5,"get_methods_if_impl","",""],[5,"get_tuple_struct_definition_if_ctor","","If node_id is the constructor of a tuple struct, retrieve the NodeId of\nthe actual type definition, otherwise, return None"],[5,"get_item_attrs","",""],[5,"get_struct_field_attrs","",""],[5,"get_struct_fields","",""],[5,"get_crate_attributes","",""],[3,"CrateDep","",""],[12,"cnum","","",293],[12,"name","","",293],[12,"hash","","",293],[5,"get_crate_deps","",""],[5,"maybe_get_crate_hash","",""],[5,"get_crate_hash","",""],[5,"maybe_get_crate_name","",""],[5,"get_crate_triple","",""],[5,"get_crate_name","",""],[5,"list_crate_metadata","",""],[5,"translate_def_id","",""],[5,"each_impl","",""],[5,"each_implementation_for_type","",""],[5,"each_implementation_for_trait","",""],[5,"get_trait_of_item","",""],[5,"get_native_libraries","",""],[5,"get_plugin_registrar_fn","",""],[5,"each_exported_macro","",""],[5,"get_dylib_dependency_formats","",""],[5,"get_missing_lang_items","",""],[5,"get_method_arg_names","",""],[5,"get_reachable_extern_fns","",""],[5,"is_typedef","",""],[5,"is_associated_type","",""],[5,"is_defaulted_trait","",""],[5,"get_imported_filemaps","",""],[0,"creader","rustc_typeck::metadata","Validates all used crates and extern libraries and loads their metadata"],[3,"CrateReader","rustc_typeck::metadata::creader",""],[5,"validate_crate_name","",""],[0,"cstore","rustc_typeck::metadata",""],[6,"cnum_map","rustc_typeck::metadata::cstore",""],[4,"MetadataBlob","",""],[13,"MetadataVec","","",301],[13,"MetadataArchive","","",301],[3,"ImportedFileMap","","Holds information about a codemap::FileMap imported from another crate.\nSee creader::import_codemap() for more information."],[12,"original_start_pos","","This FileMap's byte-offset within the codemap of its original crate",376],[12,"original_end_pos","","The end of this FileMap within the codemap of its original crate",376],[12,"translated_filemap","","The imported FileMap's representation within the local codemap",376],[3,"crate_metadata","",""],[12,"name","","",300],[12,"data","","",300],[12,"cnum_map","","",300],[12,"cnum","","",300],[12,"codemap_import_info","","",300],[12,"span","","",300],[4,"LinkagePreference","",""],[13,"RequireDynamic","","",296],[13,"RequireStatic","","",296],[4,"NativeLibraryKind","",""],[13,"NativeStatic","","",297],[13,"NativeFramework","","",297],[13,"NativeUnknown","","",297],[3,"CrateSource","",""],[12,"dylib","","",298],[12,"rlib","","",298],[12,"cnum","","",298],[3,"CStore","",""],[12,"intr","","",299],[0,"csearch","rustc_typeck::metadata",""],[3,"MethodInfo","rustc_typeck::metadata::csearch",""],[12,"name","","",377],[12,"def_id","","",377],[12,"vis","","",377],[5,"get_symbol","",""],[5,"each_lang_item","","Iterates over all the language items in the given crate."],[5,"each_child_of_item","","Iterates over each child of the given item."],[5,"each_top_level_item_of_crate","","Iterates over each top-level crate item."],[5,"get_item_path","",""],[4,"FoundAst","",""],[13,"Found","","",378],[13,"FoundParent","","",378],[13,"NotFound","","",378],[5,"maybe_get_item_ast","",""],[5,"get_enum_variant_defs","",""],[5,"get_enum_variants","",""],[5,"get_impl_items","","Returns information about the given implementation."],[5,"get_impl_or_trait_item","",""],[5,"get_trait_name","",""],[5,"is_static_method","",""],[5,"get_trait_item_def_ids","",""],[5,"get_item_variances","",""],[5,"get_provided_trait_methods","",""],[5,"get_type_name_if_impl","",""],[5,"get_methods_if_impl","",""],[5,"get_item_attrs","",""],[5,"get_struct_fields","",""],[5,"get_struct_field_attrs","",""],[5,"get_type","",""],[5,"get_trait_def","",""],[5,"get_predicates","",""],[5,"get_super_predicates","",""],[5,"get_field_type","",""],[5,"get_impl_polarity","",""],[5,"get_impl_trait","",""],[5,"get_impl_vtables","",""],[5,"get_native_libraries","",""],[5,"each_impl","",""],[5,"each_implementation_for_type","",""],[5,"each_implementation_for_trait","",""],[5,"get_trait_of_item","","If the given def ID describes an item belonging to a trait (either a\ndefault method or an implementation of a trait method), returns the ID of\nthe trait that the method belongs to. Otherwise, returns `None`."],[5,"get_tuple_struct_definition_if_ctor","",""],[5,"get_dylib_dependency_formats","",""],[5,"get_missing_lang_items","",""],[5,"get_method_arg_names","",""],[5,"get_reachable_extern_fns","",""],[5,"is_typedef","",""],[5,"get_stability","",""],[5,"is_staged_api","",""],[5,"get_repr_attrs","",""],[5,"is_associated_type","",""],[5,"is_defaulted_trait","",""],[0,"loader","rustc_typeck::metadata","Finds crate binaries and loads their metadata"],[3,"CrateMismatch","rustc_typeck::metadata::loader",""],[3,"Context","",""],[12,"sess","","",302],[12,"span","","",302],[12,"ident","","",302],[12,"crate_name","","",302],[12,"hash","","",302],[12,"target","","",302],[12,"triple","","",302],[12,"filesearch","","",302],[12,"root","","",302],[12,"rejected_via_hash","","",302],[12,"rejected_via_triple","","",302],[12,"rejected_via_kind","","",302],[12,"should_match_name","","",302],[3,"Library","",""],[12,"dylib","","",379],[12,"rlib","","",379],[12,"metadata","","",379],[3,"ArchiveMetadata","",""],[3,"CratePaths","",""],[12,"ident","","",380],[12,"dylib","","",380],[12,"rlib","","",380],[5,"note_crate_name","",""],[5,"meta_section_name","",""],[5,"read_meta_section_name","",""],[5,"list_file_metadata","",""],[0,"filesearch","rustc_typeck::metadata",""],[4,"FileMatch","rustc_typeck::metadata::filesearch",""],[13,"FileMatches","","",381],[13,"FileDoesntMatch","","",381],[3,"FileSearch","",""],[12,"sysroot","","",304],[12,"search_paths","","",304],[12,"triple","","",304],[12,"kind","","",304],[5,"relative_target_lib_path","",""],[5,"get_or_default_sysroot","",""],[5,"get_rust_path","","Returns RUST_PATH as a string, without default paths added"],[5,"rust_path","","Returns the value of RUST_PATH, as a list\nof Paths. Includes default entries for, if they exist:\n$HOME/.rust\nDIR/.rust for any DIR that's the current working directory\nor an ancestor of it"],[5,"rustlibdir","",""],[0,"macro_import","rustc_typeck::metadata","Used by `rustc` when loading a crate with exported macros."],[5,"read_macro_defs","rustc_typeck::metadata::macro_import","Read exported macros."],[6,"MacroSelection","",""],[0,"middle","rustc_typeck",""],[0,"astconv_util","rustc_typeck::middle","This module contains a simple utility routine\nused by both `typeck` and `const_eval`.\nAlmost certainly this could (and should) be refactored out of existence."],[17,"NO_REGIONS","rustc_typeck::middle::astconv_util",""],[17,"NO_TPS","",""],[5,"check_path_args","",""],[5,"prim_ty_to_ty","",""],[5,"ast_ty_to_prim_ty","",""],[0,"astencode","rustc_typeck::middle",""],[5,"encode_inlined_item","rustc_typeck::middle::astencode",""],[5,"decode_inlined_item","","Decodes an item from its AST in the cdata's metadata and adds it to the\nast-map."],[5,"encode_closure_kind","",""],[8,"vtable_decoder_helpers","",""],[10,"read_vec_per_param_space","","",382],[10,"read_vtable_res_with_key","","",382],[10,"read_vtable_res","","",382],[10,"read_vtable_param_res","","",382],[10,"read_vtable_origin","","",382],[0,"cfg","rustc_typeck::middle","Module that constructs a control-flow graph representing an item.\nUses `Graph` as the underlying representation."],[0,"graphviz","rustc_typeck::middle::cfg",""],[6,"Node","rustc_typeck::middle::cfg::graphviz",""],[6,"Edge","",""],[3,"LabelledCFG","",""],[12,"ast_map","","",30],[12,"cfg","","",30],[12,"name","","",30],[12,"labelled_edges","","`labelled_edges` controls whether we emit labels on the edges",30],[3,"CFG","rustc_typeck::middle::cfg",""],[12,"graph","","",32],[12,"entry","","",32],[12,"exit","","",32],[4,"CFGNodeData","",""],[13,"AST","","",31],[13,"Entry","","",31],[13,"Exit","","",31],[13,"Dummy","","",31],[13,"Unreachable","","",31],[3,"CFGEdgeData","",""],[12,"exiting_scopes","","",383],[6,"CFGIndex","",""],[6,"CFGGraph","",""],[6,"CFGNode","",""],[6,"CFGEdge","",""],[0,"check_const","rustc_typeck::middle",""],[3,"ConstQualif","rustc_typeck::middle::check_const",""],[17,"PURE_CONST","",""],[17,"MUTABLE_MEM","",""],[17,"NEEDS_DROP","",""],[17,"PREFER_IN_PLACE","",""],[17,"NON_ZERO_SIZED","",""],[17,"HAS_STATIC_BORROWS","",""],[17,"NOT_CONST","",""],[17,"NON_STATIC_BORROWS","",""],[5,"check_crate","",""],[0,"check_static_recursion","rustc_typeck::middle",""],[5,"check_crate","rustc_typeck::middle::check_static_recursion",""],[5,"check_item_recursion","",""],[0,"check_loop","rustc_typeck::middle",""],[5,"check_crate","rustc_typeck::middle::check_loop",""],[0,"check_match","rustc_typeck::middle",""],[17,"DUMMY_WILD_PAT","rustc_typeck::middle::check_match",""],[3,"MatchCheckCtxt","",""],[12,"tcx","","",43],[12,"param_env","","",43],[4,"Constructor","",""],[13,"Single","","The constructor of all patterns that don't vary by constructor,\ne.g. struct patterns and fixed-length arrays.",41],[13,"Variant","","Enum variants.",41],[13,"ConstantValue","","Literal values.",41],[13,"ConstantRange","","Ranges of literal values (2..5).",41],[13,"Slice","","Array patterns of length n.",41],[13,"SliceWithSubslice","","Array patterns with a subslice.",41],[5,"check_crate","",""],[3,"StaticInliner","",""],[12,"tcx","","",44],[12,"failed","","",44],[12,"renaming_map","","",44],[5,"constructor_arity","","This computes the arity of a constructor. The arity of a constructor\nis how many subpattern patterns of that constructor should be expanded to."],[5,"specialize","","This is the main specialization step. It expands the first pattern in the given row\ninto `arity` patterns based on the constructor. For most patterns, the step is trivial,\nfor instance tuple patterns are flattened and box patterns expand into their inner pattern."],[0,"check_rvalues","rustc_typeck::middle",""],[5,"check_crate","rustc_typeck::middle::check_rvalues",""],[0,"const_eval","rustc_typeck::middle",""],[5,"lookup_const_by_id","rustc_typeck::middle::const_eval",""],[4,"const_val","",""],[13,"const_float","","",50],[13,"const_int","","",50],[13,"const_uint","","",50],[13,"const_str","","",50],[13,"const_binary","","",50],[13,"const_bool","","",50],[5,"const_expr_to_pat","",""],[5,"eval_const_expr","",""],[3,"ConstEvalErr","",""],[12,"span","","",51],[12,"kind","","",51],[4,"ErrKind","",""],[13,"CannotCast","","",52],[13,"CannotCastTo","","",52],[13,"InvalidOpForBools","","",52],[13,"InvalidOpForFloats","","",52],[13,"InvalidOpForIntUint","","",52],[13,"InvalidOpForUintInt","","",52],[13,"NegateOnString","","",52],[13,"NegateOnBoolean","","",52],[13,"NegateOnBinary","","",52],[13,"NotOnFloat","","",52],[13,"NotOnString","","",52],[13,"NotOnBinary","","",52],[13,"AddiWithOverflow","","",52],[13,"SubiWithOverflow","","",52],[13,"MuliWithOverflow","","",52],[13,"AdduWithOverflow","","",52],[13,"SubuWithOverflow","","",52],[13,"MuluWithOverflow","","",52],[13,"DivideByZero","","",52],[13,"DivideWithOverflow","","",52],[13,"ModuloByZero","","",52],[13,"ModuloWithOverflow","","",52],[13,"MissingStructField","","",52],[13,"NonConstPath","","",52],[13,"NonConstStruct","","",52],[13,"TupleIndexOutOfBounds","","",52],[13,"MiscBinaryOp","","",52],[13,"MiscCatchAll","","",52],[5,"eval_const_expr_partial","",""],[5,"compare_const_vals","",""],[5,"compare_lit_exprs","",""],[0,"dataflow","rustc_typeck::middle","A module for propagating forward dataflow information. The analysis\nassumes that the items to be propagated can be represented as bits\nand thus uses bitvectors. Your job is simply to specify the so-called\nGEN and KILL bits for each expression."],[4,"EntryOrExit","rustc_typeck::middle::dataflow",""],[13,"Entry","","",53],[13,"Exit","","",53],[3,"DataFlowContext","",""],[8,"BitwiseOperator","",""],[10,"join","","Joins two predecessor bits together, typically either `|` or `&`",384],[8,"DataFlowOperator","","Parameterization for the precise form of data flow that is used."],[10,"initial_value","","Specifies the initial value for each bit in the `on_entry` set",385],[0,"dead","rustc_typeck::middle",""],[5,"check_crate","rustc_typeck::middle::dead",""],[0,"def","rustc_typeck::middle",""],[4,"Def","rustc_typeck::middle::def",""],[13,"DefFn","","",15],[13,"DefSelfTy","","",15],[13,"DefMod","","",15],[13,"DefForeignMod","","",15],[13,"DefStatic","","",15],[13,"DefConst","","",15],[13,"DefLocal","","",15],[13,"DefVariant","","",15],[13,"DefTy","","",15],[13,"DefAssociatedTy","","",15],[13,"DefTrait","","",15],[13,"DefPrimTy","","",15],[13,"DefTyParam","","",15],[13,"DefUse","","",15],[13,"DefUpvar","","",15],[13,"DefStruct","","Note that if it's a tuple struct's definition, the node id of the ast::DefId\nmay either refer to the item definition's id or the StructDef.ctor_id.",15],[13,"DefRegion","","",15],[13,"DefLabel","","",15],[13,"DefMethod","","",15],[3,"PathResolution","","The result of resolving a path.\nBefore type checking completes, `depth` represents the number of\ntrailing segments which are yet unresolved. Afterwards, if there\nwere no errors, all paths should be fully resolved, with `depth`\nset to `0` and `base_def` representing the final resolution."],[12,"base_def","","",60],[12,"last_private","","",60],[12,"depth","","",60],[6,"DefMap","",""],[6,"ExportMap","",""],[3,"Export","",""],[12,"name","","",386],[12,"def_id","","",386],[4,"MethodProvenance","",""],[13,"FromTrait","","",61],[13,"FromImpl","","",61],[0,"dependency_format","rustc_typeck::middle","Resolution of mixing rlibs and dylibs"],[6,"DependencyList","rustc_typeck::middle::dependency_format",""],[6,"Dependencies","",""],[5,"calculate","",""],[0,"effect","rustc_typeck::middle","Enforces the Rust effect system. Currently there is just one effect,\n`unsafe`."],[5,"check_crate","rustc_typeck::middle::effect",""],[0,"entry","rustc_typeck::middle",""],[5,"find_entry_point","rustc_typeck::middle::entry",""],[0,"expr_use_visitor","rustc_typeck::middle","A different sort of visitor for walking fn bodies.  Unlike the\nnormal visitor, which just walks the entire body in one shot, the\n`ExprUseVisitor` determines how expressions are being used."],[8,"Delegate","rustc_typeck::middle::expr_use_visitor","This trait defines the callbacks you can expect to receive when\nemploying the ExprUseVisitor."],[10,"consume","","",387],[10,"matched_pat","","",387],[10,"consume_pat","","",387],[10,"borrow","","",387],[10,"decl_without_init","","",387],[10,"mutate","","",387],[4,"LoanCause","",""],[13,"ClosureCapture","","",65],[13,"AddrOf","","",65],[13,"AutoRef","","",65],[13,"RefBinding","","",65],[13,"OverloadedOperator","","",65],[13,"ClosureInvocation","","",65],[13,"ForLoop","","",65],[13,"MatchDiscriminant","","",65],[4,"ConsumeMode","",""],[13,"Copy","","",66],[13,"Move","","",66],[4,"MoveReason","",""],[13,"DirectRefMove","","",67],[13,"PatBindingMove","","",67],[13,"CaptureMove","","",67],[4,"MatchMode","",""],[13,"NonBindingMatch","","",68],[13,"BorrowingMatch","","",68],[13,"CopyingMatch","","",68],[13,"MovingMatch","","",68],[4,"MutateMode","",""],[13,"Init","","",70],[13,"JustWrite","","",70],[13,"WriteAndRead","","",70],[3,"ExprUseVisitor","",""],[0,"fast_reject","rustc_typeck::middle",""],[4,"SimplifiedType","rustc_typeck::middle::fast_reject","See `simplify_type"],[13,"BoolSimplifiedType","","",72],[13,"CharSimplifiedType","","",72],[13,"IntSimplifiedType","","",72],[13,"UintSimplifiedType","","",72],[13,"FloatSimplifiedType","","",72],[13,"EnumSimplifiedType","","",72],[13,"StrSimplifiedType","","",72],[13,"VecSimplifiedType","","",72],[13,"PtrSimplifiedType","","",72],[13,"TupleSimplifiedType","","",72],[13,"TraitSimplifiedType","","",72],[13,"StructSimplifiedType","","",72],[13,"ClosureSimplifiedType","","",72],[13,"FunctionSimplifiedType","","",72],[13,"ParameterSimplifiedType","","",72],[5,"simplify_type","","Tries to simplify a type by dropping type parameters, deref'ing away any reference types, etc.\nThe idea is to get something simple that we can use to quickly decide if two types could unify\nduring method lookup."],[0,"graph","rustc_typeck::middle","A graph module for use in dataflow, region resolution, and elsewhere."],[3,"Graph","rustc_typeck::middle::graph",""],[3,"Node","",""],[12,"data","","",388],[3,"Edge","",""],[12,"data","","",73],[3,"NodeIndex","",""],[17,"InvalidNodeIndex","",""],[3,"EdgeIndex","",""],[17,"InvalidEdgeIndex","",""],[3,"Direction","",""],[17,"Outgoing","",""],[17,"Incoming","",""],[3,"DepthFirstTraversal","",""],[5,"each_edge_index","",""],[0,"intrinsicck","rustc_typeck::middle",""],[5,"check_crate","rustc_typeck::middle::intrinsicck",""],[0,"infer","rustc_typeck::middle","See the Book for more information."],[0,"bivariate","rustc_typeck::middle::infer","Applies the \"bivariance relationship\" to two types and/or regions.\nIf (A,B) are bivariant then either A <: B or B <: A. It occurs\nwhen type/lifetime parameters are unconstrained. Usually this is\nan error, but we permit it in the specific case where a type\nparameter is constrained in a where-clause via an associated type."],[3,"Bivariate","rustc_typeck::middle::infer::bivariate",""],[5,"Bivariate","",""],[0,"combine","rustc_typeck::middle::infer",""],[8,"Combine","rustc_typeck::middle::infer::combine",""],[10,"tcx","","",389],[10,"tag","","",389],[10,"fields","","",389],[10,"infcx","","",389],[10,"a_is_expected","","",389],[10,"trace","","",389],[10,"equate","","",389],[10,"bivariate","","",389],[10,"sub","","",389],[10,"lub","","",389],[10,"glb","","",389],[10,"mts","","",389],[10,"tys_with_variance","","",389],[10,"tys","","",389],[10,"regions_with_variance","","",389],[10,"regions","","",389],[10,"substs","","",389],[10,"substs_variances","","",389],[10,"bare_fn_tys","","",389],[10,"fn_sigs","","",389],[10,"args","","",389],[10,"unsafeties","","",389],[10,"abi","","",389],[10,"projection_tys","","",389],[10,"projection_predicates","","",389],[10,"projection_bounds","","",389],[10,"existential_bounds","","",389],[10,"builtin_bounds","","",389],[10,"trait_refs","","",389],[10,"binders","","",389],[8,"Combineable","",""],[10,"combine","","",390],[3,"CombineFields","",""],[12,"infcx","","",86],[12,"a_is_expected","","",86],[12,"trace","","",86],[5,"expected_found","",""],[5,"super_tys","",""],[0,"equate","rustc_typeck::middle::infer",""],[3,"Equate","rustc_typeck::middle::infer::equate",""],[5,"Equate","",""],[0,"error_reporting","rustc_typeck::middle::infer","Error Reporting Code for the inference engine"],[8,"ErrorReporting","rustc_typeck::middle::infer::error_reporting",""],[10,"report_region_errors","","",391],[10,"process_errors","","",391],[10,"report_type_error","","",391],[10,"report_and_explain_type_error","","",391],[10,"values_str","","",391],[10,"expected_found_str","","",391],[10,"report_concrete_failure","","",391],[10,"report_generic_bound_failure","","",391],[10,"report_sub_sup_conflict","","",391],[10,"report_sup_sup_conflict","","",391],[10,"report_processed_errors","","",391],[10,"give_suggestion","","",391],[8,"Resolvable","",""],[10,"resolve","","",392],[10,"contains_error","","",392],[0,"glb","rustc_typeck::middle::infer",""],[3,"Glb","rustc_typeck::middle::infer::glb","\"Greatest lower bound\" (common subtype)"],[5,"Glb","",""],[0,"lattice","rustc_typeck::middle::infer","# Lattice Variables"],[8,"LatticeDir","rustc_typeck::middle::infer::lattice",""],[10,"relate_bound","","",393],[5,"super_lattice_tys","",""],[0,"lub","rustc_typeck::middle::infer",""],[3,"Lub","rustc_typeck::middle::infer::lub","\"Least upper bound\" (common supertype)"],[5,"Lub","",""],[0,"region_inference","rustc_typeck::middle::infer","See README.md"],[4,"Constraint","rustc_typeck::middle::infer::region_inference",""],[13,"ConstrainVarSubVar","","",96],[13,"ConstrainRegSubVar","","",96],[13,"ConstrainVarSubReg","","",96],[4,"Verify","",""],[13,"VerifyRegSubReg","","",106],[13,"VerifyGenericBound","","",106],[4,"GenericKind","",""],[13,"Param","","",97],[13,"Projection","","",97],[3,"TwoRegions","",""],[4,"UndoLogEntry","",""],[13,"OpenSnapshot","","",99],[13,"CommitedSnapshot","","",99],[13,"AddVar","","",99],[13,"AddConstraint","","",99],[13,"AddVerify","","",99],[13,"AddGiven","","",99],[13,"AddCombination","","",99],[4,"CombineMapType","",""],[13,"Lub","","",100],[13,"Glb","","",100],[4,"RegionResolutionError","",""],[13,"ConcreteFailure","","`ConcreteFailure(o, a, b)`:",101],[13,"GenericBoundFailure","","`GenericBoundFailure(p, s, a, bs)",101],[13,"SubSupConflict","","`SubSupConflict(v, sub_origin, sub_r, sup_origin, sup_r)`:",101],[13,"SupSupConflict","","`SupSupConflict(v, origin1, r1, origin2, r2)`:",101],[13,"ProcessedErrors","","For subsets of `ConcreteFailure` and `SubSupConflict`, we can derive\nmore specific errors message by suggesting to the user where they\nshould put a lifetime. In those cases we process and put those errors\ninto `ProcessedErrors` before we do any reporting.",101],[3,"SameRegions","","SameRegions is used to group regions that we think are the same and would\nlike to indicate so to the user.\nFor example, the following function\n```\nstruct Foo { bar: int }\nfn foo2<'a, 'b>(x: &'a Foo) -> &'b int {\n   &x.bar\n}\n```\nwould report an error because we expect 'a and 'b to match, and so we group\n'a and 'b together inside a SameRegions struct"],[12,"scope_id","","",102],[12,"regions","","",102],[6,"CombineMap","",""],[3,"RegionVarBindings","",""],[3,"RegionSnapshot","",""],[4,"VarValue","",""],[13,"NoValue","","",107],[13,"Value","","",107],[13,"ErrorValue","","",107],[0,"resolve","rustc_typeck::middle::infer",""],[3,"OpportunisticTypeResolver","rustc_typeck::middle::infer::resolve","The opportunistic type resolver can be used at any time. It simply replaces\ntype variables that have been unified with the things they have\nbeen unified with (similar to `shallow_resolve`, but deep). This is\nuseful for printing messages etc but also required at various\npoints for correctness."],[5,"fully_resolve","","Full type resolution replaces all type and region variables with\ntheir concrete results. If any variable cannot be replaced (never unified, etc)\nthen an `Err` result is returned."],[0,"sub","rustc_typeck::middle::infer",""],[3,"Sub","rustc_typeck::middle::infer::sub","\"Greatest lower bound\" (common subtype)"],[5,"Sub","",""],[0,"type_variable","rustc_typeck::middle::infer",""],[3,"TypeVariableTable","rustc_typeck::middle::infer::type_variable",""],[3,"Snapshot","",""],[4,"RelationDir","",""],[13,"SubtypeOf","","",113],[13,"SupertypeOf","","",113],[13,"EqTo","","",113],[13,"BiTo","","",113],[0,"unify","rustc_typeck::middle::infer",""],[8,"UnifyKey","rustc_typeck::middle::infer::unify","This trait is implemented by any type that can serve as a type\nvariable. We call such variables *unification keys*. For example,\nthis trait is implemented by `IntVid`, which represents integral\nvariables."],[16,"Value","rustc_typeck::middle::infer::unify::UnifyKey",""],[10,"index","rustc_typeck::middle::infer::unify","",394],[10,"from_index","","",394],[10,"unification_table","","",394],[10,"tag","","",394],[8,"UnifyValue","","Trait for valid types that a type variable can be set to. Note that\nthis is typically not the end type that the value will take on, but\nrather an `Option` wrapper (where `None` represents a variable\nwhose value is not yet set)."],[4,"VarValue","","Value of a unification key. We implement Tarjan's union-find\nalgorithm: when two keys are unified, one of them is converted\ninto a \"redirect\" pointing at the other. These redirects form a\nDAG: the roots of the DAG (nodes that are not redirected) are each\nassociated with a value of type `V` and a rank. The rank is used\nto keep the DAG relatively balanced, which helps keep the running\ntime of the algorithm under control. For more information, see\n<http://en.wikipedia.org/wiki/Disjoint-set_data_structure>."],[13,"Redirect","","",116],[13,"Root","","",116],[3,"UnificationTable","","Table of unification keys and their values."],[3,"Snapshot","","At any time, users may snapshot a unification table.  The changes\nmade during the snapshot may either be *committed* or *rolled back*."],[3,"Node","","Internal type used to represent the result of a `get()` operation.\nConveys the current root and value of the key."],[12,"key","","",395],[12,"value","","",395],[12,"rank","","",395],[3,"Delegate","",""],[8,"SimplyUnifiable","","Indicates a type that does not have any kind of subtyping\nrelationship."],[10,"to_type","","",396],[10,"to_type_err","","",396],[5,"err","",""],[8,"InferCtxtMethodsForSimplyUnifiableTypes","",""],[10,"simple_vars","","",397],[10,"simple_var_t","","",397],[10,"probe_var","","",397],[6,"Bound","rustc_typeck::middle::infer",""],[6,"cres","",""],[6,"ures","",""],[6,"fres","",""],[3,"InferCtxt","",""],[12,"tcx","","",89],[6,"SkolemizationMap","",""],[4,"TypeOrigin","","Why did we require that the two types be related?"],[13,"Misc","","",123],[13,"MethodCompatCheck","","",123],[13,"ExprAssignable","","",123],[13,"RelateTraitRefs","","",123],[13,"RelateSelfType","","",123],[13,"RelateOutputImplTypes","","",123],[13,"MatchExpressionArm","","",123],[13,"IfExpression","","",123],[13,"IfExpressionWithNoElse","","",123],[13,"RangeExpression","","",123],[13,"EquatePredicate","","",123],[4,"ValuePairs","","See `error_reporting.rs` for more details"],[13,"Types","","",124],[13,"TraitRefs","","",124],[13,"PolyTraitRefs","","",124],[3,"TypeTrace","","The trace designates the path through inference that we took to\nencounter an error or subtyping constraint."],[4,"SubregionOrigin","","The origin of a `r1 <= r2` constraint."],[13,"Subtype","","",126],[13,"InfStackClosure","","",126],[13,"InvokeClosure","","",126],[13,"DerefPointer","","",126],[13,"FreeVariable","","",126],[13,"IndexSlice","","",126],[13,"RelateObjectBound","","",126],[13,"RelateParamBound","","",126],[13,"RelateRegionParamBound","","",126],[13,"RelateDefaultParamBound","","",126],[13,"Reborrow","","",126],[13,"ReborrowUpvar","","",126],[13,"ReferenceOutlivesReferent","","",126],[13,"ExprTypeIsNotInScope","","",126],[13,"BindingTypeIsNotValidAtDecl","","",126],[13,"CallRcvr","","",126],[13,"CallArg","","",126],[13,"CallReturn","","",126],[13,"Operand","","",126],[13,"AddrOf","","",126],[13,"AutoBorrow","","",126],[13,"SafeDestructor","","",126],[4,"LateBoundRegionConversionTime","","Times when we replace late-bound regions with variables:"],[13,"FnCall","","when a fn is called",127],[13,"HigherRankedType","","when two higher-ranked types are compared",127],[13,"AssocTypeProjection","","when projecting an associated type",127],[4,"RegionVariableOrigin","","Reasons to create a region inference variable"],[13,"MiscVariable","","",128],[13,"PatternRegion","","",128],[13,"AddrOfRegion","","",128],[13,"Autoref","","",128],[13,"Coercion","","",128],[13,"EarlyBoundRegion","","",128],[13,"LateBoundRegion","","",128],[13,"UpvarRegion","","",128],[13,"BoundRegionInCoherence","","",128],[4,"fixup_err","",""],[13,"unresolved_int_ty","","",129],[13,"unresolved_float_ty","","",129],[13,"unresolved_ty","","",129],[5,"fixup_err_to_string","",""],[5,"new_infer_ctxt","",""],[5,"common_supertype","","Computes the least upper-bound of `a` and `b`. If this is not possible, reports an error and\nreturns ty::err."],[5,"mk_subty","",""],[5,"can_mk_subty","",""],[5,"can_mk_eqty","",""],[5,"mk_subr","",""],[5,"mk_eqty","",""],[5,"mk_sub_poly_trait_refs","",""],[5,"uok","",""],[3,"CombinedSnapshot","",""],[4,"IntVarValue","",""],[13,"IntType","","",120],[13,"UintType","","",120],[4,"GenericKind","",""],[13,"Param","","",97],[13,"Projection","","",97],[3,"TypeFreshener","",""],[0,"lang_items","rustc_typeck::middle",""],[4,"LangItem","rustc_typeck::middle::lang_items",""],[13,"SendTraitLangItem","","",131],[13,"SizedTraitLangItem","","",131],[13,"CopyTraitLangItem","","",131],[13,"SyncTraitLangItem","","",131],[13,"DropTraitLangItem","","",131],[13,"AddTraitLangItem","","",131],[13,"SubTraitLangItem","","",131],[13,"MulTraitLangItem","","",131],[13,"DivTraitLangItem","","",131],[13,"RemTraitLangItem","","",131],[13,"NegTraitLangItem","","",131],[13,"NotTraitLangItem","","",131],[13,"BitXorTraitLangItem","","",131],[13,"BitAndTraitLangItem","","",131],[13,"BitOrTraitLangItem","","",131],[13,"ShlTraitLangItem","","",131],[13,"ShrTraitLangItem","","",131],[13,"IndexTraitLangItem","","",131],[13,"IndexMutTraitLangItem","","",131],[13,"RangeStructLangItem","","",131],[13,"RangeFromStructLangItem","","",131],[13,"RangeToStructLangItem","","",131],[13,"RangeFullStructLangItem","","",131],[13,"UnsafeCellTypeLangItem","","",131],[13,"DerefTraitLangItem","","",131],[13,"DerefMutTraitLangItem","","",131],[13,"FnTraitLangItem","","",131],[13,"FnMutTraitLangItem","","",131],[13,"FnOnceTraitLangItem","","",131],[13,"EqTraitLangItem","","",131],[13,"OrdTraitLangItem","","",131],[13,"StrEqFnLangItem","","",131],[13,"PanicFnLangItem","","",131],[13,"PanicBoundsCheckFnLangItem","","",131],[13,"PanicFmtLangItem","","",131],[13,"ExchangeMallocFnLangItem","","",131],[13,"ExchangeFreeFnLangItem","","",131],[13,"StrDupUniqFnLangItem","","",131],[13,"StartFnLangItem","","",131],[13,"TyDescStructLangItem","","",131],[13,"OpaqueStructLangItem","","",131],[13,"EhPersonalityLangItem","","",131],[13,"ExchangeHeapLangItem","","",131],[13,"OwnedBoxLangItem","","",131],[13,"PhantomFnItem","","",131],[13,"PhantomDataItem","","",131],[13,"CovariantTypeItem","","",131],[13,"ContravariantTypeItem","","",131],[13,"InvariantTypeItem","","",131],[13,"CovariantLifetimeItem","","",131],[13,"ContravariantLifetimeItem","","",131],[13,"InvariantLifetimeItem","","",131],[13,"NoCopyItem","","",131],[13,"ManagedItem","","",131],[13,"NonZeroItem","","",131],[13,"StackExhaustedLangItem","","",131],[13,"DebugTraitLangItem","","",131],[3,"LanguageItems","",""],[12,"items","","",132],[12,"missing","","",132],[5,"extract","",""],[5,"collect_language_items","",""],[0,"liveness","rustc_typeck::middle","A classic liveness analysis based on dataflow over the AST.  Computes,\nfor each local variable in a function, whether that variable is live\nat a given point.  Program execution points are identified by their\nid."],[5,"check_crate","rustc_typeck::middle::liveness",""],[0,"mem_categorization","rustc_typeck::middle","# Categorization"],[4,"categorization","rustc_typeck::middle::mem_categorization",""],[13,"cat_rvalue","","",142],[13,"cat_static_item","","",142],[13,"cat_upvar","","",142],[13,"cat_local","","",142],[13,"cat_deref","","",142],[13,"cat_interior","","",142],[13,"cat_downcast","","",142],[3,"Upvar","",""],[12,"id","","",143],[12,"kind","","",143],[4,"PointerKind","",""],[13,"Unique","","`Box<T>`",144],[13,"BorrowedPtr","","`&T`",144],[13,"UnsafePtr","","`*T`",144],[13,"Implicit","","Implicit deref of the `&T` that results from an overloaded index `[]`.",144],[4,"InteriorKind","",""],[13,"InteriorField","","",145],[13,"InteriorElement","","",145],[4,"FieldName","",""],[13,"NamedField","","",146],[13,"PositionalField","","",146],[4,"InteriorOffsetKind","",""],[13,"Index","","",147],[13,"Pattern","","",147],[4,"ElementKind","",""],[13,"VecElement","","",148],[13,"OtherElement","","",148],[4,"MutabilityCategory","",""],[13,"McImmutable","","",149],[13,"McDeclared","","",149],[13,"McInherited","","",149],[4,"Note","",""],[13,"NoteClosureEnv","","",150],[13,"NoteUpvarRef","","",150],[13,"NoteNone","","",150],[3,"cmt_","",""],[12,"id","","",151],[12,"span","","",151],[12,"cat","","",151],[12,"mutbl","","",151],[12,"ty","","",151],[12,"note","","",151],[6,"cmt","",""],[4,"deref_kind","",""],[13,"deref_ptr","","",398],[13,"deref_interior","","",398],[8,"ast_node","",""],[10,"id","","",399],[10,"span","","",399],[3,"MemCategorizationContext","",""],[6,"McResult","",""],[8,"Typer","","The `Typer` trait provides the interface for the mem-categorization\nmodule to the results of the type check. It can be used to query\nthe type assigned to an expression node, to inquire after adjustments,\nand so on."],[10,"node_ty","","",400],[10,"expr_ty_adjusted","","",400],[10,"type_moves_by_default","","",400],[10,"node_method_ty","","",400],[10,"node_method_origin","","",400],[10,"adjustments","","",400],[10,"is_method_call","","",400],[10,"temporary_scope","","",400],[10,"upvar_capture","","",400],[4,"InteriorSafety","",""],[13,"InteriorUnsafe","","",401],[13,"InteriorSafe","","",401],[4,"AliasableReason","",""],[13,"AliasableBorrowed","","",402],[13,"AliasableClosure","","",402],[13,"AliasableOther","","",402],[13,"AliasableStatic","","",402],[13,"AliasableStaticMut","","",402],[5,"ptr_sigil","",""],[0,"pat_util","rustc_typeck::middle",""],[6,"PatIdMap","rustc_typeck::middle::pat_util",""],[5,"pat_id_map","",""],[5,"pat_is_refutable","",""],[5,"pat_is_variant_or_struct","",""],[5,"pat_is_const","",""],[5,"pat_is_binding","",""],[5,"pat_is_binding_or_wild","",""],[5,"pat_bindings","","Call `it` on every \"binding\" in a pattern, e.g., on `a` in\n`match foo() { Some(a) => (), None => () }`"],[5,"pat_contains_bindings","","Checks if the pattern contains any patterns that bind something to\nan ident, e.g. `foo`, or `Foo(foo)` or `foo @ Bar(..)`."],[5,"pat_contains_bindings_or_wild","","Checks if the pattern contains any patterns that bind something to\nan ident or wildcard, e.g. `foo`, or `Foo(_)`, `foo @ Bar(..)`,"],[5,"simple_identifier","",""],[5,"def_to_path","",""],[0,"privacy","rustc_typeck::middle","A pass that checks to make sure private fields and methods aren't used\noutside their scopes. This pass will also generate a set of exported items\nwhich are available for use externally when compiled as a library."],[6,"ExportedItems","rustc_typeck::middle::privacy",""],[6,"ExternalExports","",""],[6,"PublicItems","",""],[4,"LastPrivate","",""],[13,"LastMod","","",156],[13,"LastImport","","",156],[12,"value_priv","rustc_typeck::middle::privacy::LastPrivate","",156],[12,"value_used","","",156],[12,"type_priv","","",156],[12,"type_used","","",156],[4,"PrivateDep","rustc_typeck::middle::privacy",""],[13,"AllPublic","","",157],[13,"DependsOn","","",157],[4,"ImportUse","",""],[13,"Unused","","",158],[13,"Used","","",158],[0,"reachable","rustc_typeck::middle",""],[5,"find_reachable","rustc_typeck::middle::reachable",""],[0,"region","rustc_typeck::middle","This file actually contains two passes related to regions.  The first\npass builds up the `scope_map`, which describes the parent links in\nthe region hierarchy.  The second pass infers which types must be\nregion parameterized."],[4,"CodeExtent","rustc_typeck::middle::region","CodeExtent represents a statically-describable extent that can be\nused to bound the lifetime/region for values."],[13,"Misc","","",18],[13,"DestructionScope","","",18],[13,"Remainder","","",18],[3,"DestructionScopeData","","extent of destructors for temporaries of node-id"],[12,"node_id","","",19],[3,"BlockRemainder","","Represents a subscope of `block` for a binding that is introduced\nby `block.stmts[first_statement_index]`. Such subscopes represent\na suffix of the block. Note that each subscope does not include\nthe initializer expression, if any, for the statement indexed by\n`first_statement_index`."],[12,"block","","",160],[12,"first_statement_index","","",160],[3,"RegionMaps","","The region maps encode information about region relationships."],[3,"Context","",""],[5,"resolve_crate","",""],[5,"resolve_inlined_item","",""],[0,"recursion_limit","rustc_typeck::middle",""],[5,"update_recursion_limit","rustc_typeck::middle::recursion_limit",""],[0,"resolve_lifetime","rustc_typeck::middle","Name resolution for lifetimes."],[4,"DefRegion","rustc_typeck::middle::resolve_lifetime",""],[13,"DefStaticRegion","","",167],[13,"DefEarlyBoundRegion","","",167],[13,"DefLateBoundRegion","","",167],[13,"DefFreeRegion","","",167],[6,"NamedRegionMap","",""],[5,"krate","",""],[5,"early_bound_lifetimes","",""],[0,"stability","rustc_typeck::middle","A pass that annotates every item and method with its stability level,\npropagating default levels lexically from parent to children ast nodes."],[3,"Index","rustc_typeck::middle::stability","A stability index, giving the stability level for items and methods."],[5,"check_unstable_api_usage","","Cross-references the feature names of unstable APIs with enabled\nfeatures and possibly prints errors. Returns a list of all\nfeatures used."],[5,"check_item","","Helper for discovering nodes to check for stability"],[5,"check_expr","","Helper for discovering nodes to check for stability"],[5,"check_path","",""],[5,"check_pat","",""],[5,"lookup","","Lookup the stability for a node, loading external crate\nmetadata as necessary."],[5,"check_unused_or_stable_features","","Given the list of enabled features that were not language features (i.e. that\nwere expected to be library features), and the list of features used from\nlibraries, identify activated features that don't exist and error about them."],[0,"subst","rustc_typeck::middle",""],[3,"Substs","rustc_typeck::middle::subst","A substitution mapping type/region parameters to new values. We\nidentify each in-scope parameter by an *index* and a *parameter\nspace* (which indices where the parameter is defined; see\n`ParamSpace`)."],[12,"types","","",173],[12,"regions","","",173],[4,"RegionSubsts","","Represents the values to use when substituting lifetime parameters.\nIf the value is `ErasedRegions`, then this subst is occurring during\ntrans, and all region parameters will be replaced with `ty::ReStatic`."],[13,"ErasedRegions","","",174],[13,"NonerasedRegions","","",174],[4,"ParamSpace","",""],[13,"TypeSpace","","",175],[13,"SelfSpace","","",175],[13,"FnSpace","","",175],[3,"VecPerParamSpace","","Vector of things sorted by param space. Used to keep\nthe set of things declared on the type, self, or method\ndistinct."],[3,"SeparateVecsPerParamSpace","","The `split` function converts one `VecPerParamSpace` into this\n`SeparateVecsPerParamSpace` structure."],[12,"types","","",403],[12,"selfs","","",403],[12,"fns","","",403],[3,"EnumeratedItems","",""],[8,"Subst","",""],[10,"subst","","",404],[10,"subst_spanned","","",404],[0,"traits","rustc_typeck::middle","Trait Resolution. See the Book for more."],[3,"Obligation","rustc_typeck::middle::traits","An `Obligation` represents some trait reference (e.g. `int:Eq`) for\nwhich the vtable must be found.  The process of finding a vtable is\ncalled \"resolving\" the `Obligation`. This process consists of\neither identifying an `impl` (e.g., `impl Eq for int`) that\nprovides the required vtable, or else finding a bound that is in\nscope. The eventual result is usually a `Selection` (defined below)."],[12,"cause","","",199],[12,"recursion_depth","","",199],[12,"predicate","","",199],[6,"PredicateObligation","",""],[6,"TraitObligation","",""],[3,"ObligationCause","","Why did we incur this obligation? Used for error reporting."],[12,"span","","",206],[12,"body_id","","",206],[12,"code","","",206],[4,"ObligationCauseCode","",""],[13,"MiscObligation","","Not well classified or should be obvious from span.",207],[13,"ItemObligation","","In an impl of trait X for type Y, type Y must\nalso implement all supertraits of X.",207],[13,"ObjectCastObligation","","Obligation incurred due to an object cast.",207],[13,"AssignmentLhsSized","","Various cases where expressions must be sized/copy/etc:",207],[13,"StructInitializerSized","","",207],[13,"VariableType","","",207],[13,"ReturnType","","",207],[13,"RepeatVec","","",207],[13,"ClosureCapture","","",207],[13,"FieldSized","","",207],[13,"ObjectSized","","",207],[13,"SharedStatic","","",207],[13,"BuiltinDerivedObligation","","",207],[13,"ImplDerivedObligation","","",207],[13,"CompareImplMethodObligation","","",207],[3,"DerivedObligationCause","",""],[6,"Obligations","",""],[6,"PredicateObligations","",""],[6,"TraitObligations","",""],[6,"Selection","",""],[4,"SelectionError","",""],[13,"Unimplemented","","",203],[13,"Overflow","","",203],[13,"OutputTypeParameterMismatch","","",203],[3,"FulfillmentError","",""],[12,"obligation","","",204],[12,"code","","",204],[4,"FulfillmentErrorCode","",""],[13,"CodeSelectionError","","",205],[13,"CodeProjectionError","","",205],[13,"CodeAmbiguity","","",205],[6,"SelectionResult","",""],[4,"Vtable","","Given the successful resolution of an obligation, the `Vtable`\nindicates where the vtable comes from. Note that while we call this\na \"vtable\", it does not necessarily indicate dynamic dispatch at\nruntime. `Vtable` instances just tell the compiler where to find\nmethods, but in generic code those methods are typically statically\ndispatched -- only when an object is constructed is a `Vtable`\ninstance reified into an actual vtable."],[13,"VtableImpl","","Vtable identifying a particular impl.",200],[13,"VtableDefaultImpl","","Vtable for default trait implementations\nThis carries the information and nested obligations with regards\nto a default implementation for a trait `Trait`. The nested obligations\nensure the trait implementation holds for all the constituent types.",200],[13,"VtableParam","","Successful resolution to an obligation provided by the caller\nfor some type parameter. The `Vec<N>` represents the\nobligations incurred from normalizing the where-clause (if\nany).",200],[13,"VtableObject","","Virtual calls through an object",200],[13,"VtableBuiltin","","Successful resolution for a builtin trait.",200],[13,"VtableClosure","","Vtable automatically generated for a closure. The def ID is the ID\nof the closure expression. This is a `VtableImpl` in spirit, but the\nimpl is generated by the compiler and does not appear in the source.",200],[13,"VtableFnPointer","","Same as above, but for a fn pointer type with the given signature.",200],[3,"VtableImplData","","Identifies a particular impl in the source, along with a set of\nsubstitutions from the impl's type/lifetime parameters. The\n`nested` vector corresponds to the nested obligations attached to\nthe impl's type parameters."],[12,"impl_def_id","","",197],[12,"substs","","",197],[12,"nested","","",197],[3,"VtableDefaultImplData","",""],[12,"trait_def_id","","",202],[12,"nested","","",202],[3,"VtableBuiltinData","",""],[12,"nested","","",201],[3,"VtableObjectData","","A vtable for some object-safe trait `Foo` automatically derived\nfor the object type `Foo`."],[12,"object_ty","","the object type `Foo`.",198],[12,"upcast_trait_ref","","`Foo` upcast to the obligation trait. This will be some supertrait of `Foo`.",198],[5,"predicates_for_generics","","Creates predicate obligations from the generic bounds."],[5,"evaluate_builtin_bound","","Determines whether the type `ty` is known to meet `bound` and\nreturns true if so. Returns false if `ty` either does not meet\n`bound` or is not known to meet bound (note that this is\nconservative towards *no impl*, which is the opposite of the\n`evaluate` methods)."],[5,"type_known_to_meet_builtin_bound","",""],[5,"normalize_param_env_or_error","","Normalizes the parameter environment, reporting errors if they occur."],[5,"fully_normalize","",""],[5,"orphan_check","","Checks the coherence orphan rules. `impl_def_id` should be the\ndef-id of a trait impl. To pass, either the trait must be local, or else\ntwo conditions must be satisfied:"],[5,"is_object_safe","",""],[5,"report_fulfillment_errors","",""],[5,"object_safety_violations","",""],[4,"MethodViolationCode","","Reasons a method might not be object-safe."],[13,"StaticMethod","","e.g., `fn foo()`",186],[13,"ReferencesSelf","","e.g., `fn foo(&self, x: Self)` or `fn foo(&self) -> Self`",186],[13,"Generic","","e.g., `fn foo<A>()`",186],[5,"normalize","","Normalizes any associated type projections in `value`, replacing\nthem with a fully resolved type where possible. The return value\ncombines the normalized result and any additional obligations that\nwere incurred as result."],[3,"SelectionCache","",""],[3,"Normalized","",""],[12,"value","","",184],[12,"obligations","","",184],[3,"MismatchedProjectionTypes","",""],[12,"err","","",181],[5,"get_vtable_index_of_object_method","","Given an object of type `object_trait_ref`, returns the index of\nthe method `n_method` found in the trait `trait_def_id` (which\nshould be a supertrait of `object_trait_ref`) within the vtable\nfor `object_trait_ref`."],[4,"OrphanCheckErr","",""],[13,"NoLocalInputType","","",405],[13,"UncoveredTy","","",405],[4,"ObjectSafetyViolation","",""],[13,"SizedSelf","","Self : Sized declared on the trait",187],[13,"SupertraitSelf","","Supertrait reference references `Self` an in illegal location\n(e.g. `trait Foo : Bar<Self>`)",187],[13,"Method","","Method has something illegal",187],[3,"RegionObligation","",""],[12,"sub_region","","",179],[12,"sup_type","","",179],[12,"cause","","",179],[3,"SelectionContext","",""],[5,"transitive_bounds","",""],[5,"upcast","","Cast a trait reference into a reference to one of its super\ntraits; returns `None` if `target_trait_def_id` is not a\nsupertrait."],[5,"overlapping_impls","","True if there exist types that satisfy both of the two given impls."],[5,"trait_ref_for_builtin_bound","",""],[5,"suggest_new_overflow_limit","",""],[5,"elaborate_predicates","",""],[3,"FulfillmentContext","","The fulfillment context is used to drive trait resolution.  It\nconsists of a list of obligations that must be (eventually)\nsatisfied. The job is to track which are satisfied, which yielded\nerrors, and which are still pending. At any point, users can call\n`select_where_possible`, and the fulfilment context will try to do\nselection, retaining only those obligations that remain\nambiguous. This may be helpful in pushing type inference\nalong. Once all type inference constraints have been generated, the\nmethod `select_all_or_error` can be used to report any remaining\nambiguous cases as errors."],[5,"supertraits","",""],[6,"Supertraits","",""],[4,"MethodMatchResult","",""],[13,"MethodMatched","","",194],[13,"MethodAmbiguous","","",194],[13,"MethodDidNotMatch","","",194],[4,"MethodMatchedData","",""],[13,"PreciseMethodMatch","","",189],[13,"CoerciveMethodMatch","","",189],[0,"ty","rustc_typeck::middle",""],[6,"Disr","rustc_typeck::middle::ty",""],[17,"INITIAL_DISCRIMINANT_VALUE","",""],[3,"CrateAnalysis","","The complete set of all analyses described in this module. This is\nproduced by the driver and fed to trans and later passes."],[12,"export_map","","",406],[12,"exported_items","","",406],[12,"public_items","","",406],[12,"ty_cx","","",406],[12,"reachable","","",406],[12,"name","","",406],[12,"glob_map","","",406],[3,"field","",""],[12,"name","","",209],[12,"mt","","",209],[4,"ImplOrTraitItemContainer","",""],[13,"TraitContainer","","",210],[13,"ImplContainer","","",210],[4,"ImplOrTraitItem","",""],[13,"MethodTraitItem","","",211],[13,"TypeTraitItem","","",211],[4,"ImplOrTraitItemId","",""],[13,"MethodTraitItemId","","",212],[13,"TypeTraitItemId","","",212],[3,"Method","",""],[12,"name","","",213],[12,"generics","","",213],[12,"predicates","","",213],[12,"fty","","",213],[12,"explicit_self","","",213],[12,"vis","","",213],[12,"def_id","","",213],[12,"container","","",213],[12,"provided_source","","",213],[3,"AssociatedType","",""],[12,"name","","",214],[12,"vis","","",214],[12,"def_id","","",214],[12,"container","","",214],[3,"mt","",""],[12,"ty","","",215],[12,"mutbl","","",215],[3,"field_ty","",""],[12,"name","","",216],[12,"id","","",216],[12,"vis","","",216],[12,"origin","","",216],[3,"creader_cache_key","",""],[12,"cnum","","",217],[12,"pos","","",217],[12,"len","","",217],[3,"ItemVariances","",""],[12,"types","","",218],[12,"regions","","",218],[4,"Variance","",""],[13,"Covariant","","",219],[13,"Invariant","","",219],[13,"Contravariant","","",219],[13,"Bivariant","","",219],[4,"AutoAdjustment","",""],[13,"AdjustReifyFnPointer","","",220],[13,"AdjustDerefRef","","",220],[4,"UnsizeKind","",""],[13,"UnsizeLength","","",221],[13,"UnsizeStruct","","",221],[13,"UnsizeVtable","","",221],[3,"AutoDerefRef","",""],[12,"autoderefs","","",222],[12,"autoref","","",222],[4,"AutoRef","",""],[13,"AutoPtr","","Convert from T to &T\nThe third field allows us to wrap other AutoRef adjustments.",223],[13,"AutoUnsize","","Convert [T, ..n] to [T] (or similar, depending on the kind)",223],[13,"AutoUnsizeUniq","","Convert Box<[T, ..n]> to Box<[T]> or something similar in a Box.\nWith DST and Box a library type, this should be replaced by UnsizeStruct.",223],[13,"AutoUnsafe","","Convert from T to *T\nValue to thin pointer\nThe second field allows us to wrap other AutoRef adjustments.",223],[5,"adjusted_object_region","",""],[5,"adjust_is_object","",""],[5,"type_of_adjust","",""],[3,"param_index","",""],[12,"space","","",224],[12,"index","","",224],[4,"MethodOrigin","",""],[13,"MethodStatic","","",25],[13,"MethodStaticClosure","","",25],[13,"MethodTypeParam","","",25],[13,"MethodTraitObject","","",25],[3,"MethodParam","",""],[12,"trait_ref","","",225],[12,"method_num","","",225],[12,"impl_def_id","","The impl for the trait from which the method comes. This\nshould only be used for certain linting/heuristic purposes\nsince there is no guarantee that this is Some in every\nsituation that it could/should be.",225],[3,"MethodObject","",""],[12,"trait_ref","","",226],[12,"object_trait_id","","",226],[12,"method_num","","",226],[12,"vtable_index","","",226],[3,"MethodCallee","",""],[12,"origin","","",227],[12,"ty","","",227],[12,"substs","","",227],[3,"MethodCall","","With method calls, we store some extra information in\nside tables (i.e method_map). We use\nMethodCall as a key to index into these tables instead of\njust directly using the expression's NodeId. The reason\nfor this being that we may apply adjustments (coercions)\nwith the resulting expression also needing to use the\nside tables. The problem with this is that we don't\nassign a separate NodeId to this new expression\nand so it would clash with the base expression if both\nneeded to add to the side tables. Thus to disambiguate\nwe also keep track of whether there's an adjustment in\nour key."],[12,"expr_id","","",228],[12,"adjustment","","",228],[4,"ExprAdjustment","",""],[13,"NoAdjustment","","",229],[13,"AutoDeref","","",229],[13,"AutoObject","","",229],[6,"MethodMap","",""],[6,"vtable_param_res","",""],[6,"vtable_res","",""],[4,"vtable_origin","",""],[13,"vtable_static","","",230],[13,"vtable_param","","",230],[13,"vtable_closure","","",230],[13,"vtable_error","","",230],[6,"ObjectCastMap","",""],[3,"TransmuteRestriction","","A restriction that certain types must be the same size. The use of\n`transmute` gives rise to these restrictions. These generally\ncannot be checked until trans; therefore, each call to `transmute`\nwill push one or more such restriction into the\n`transmute_restrictions` vector during `intrinsicck`. They are\nthen checked during `trans` by the fn `check_intrinsics`."],[12,"span","","The span whence the restriction comes.",80],[12,"original_from","","The type being transmuted from.",80],[12,"original_to","","The type being transmuted to.",80],[12,"substituted_from","","The type being transmuted from, with all type parameters\nsubstituted for an arbitrary representative. Not to be shown\nto the end user.",80],[12,"substituted_to","","The type being transmuted to, with all type parameters\nsubstituted for an arbitrary representative. Not to be shown\nto the end user.",80],[12,"id","","NodeId of the transmute intrinsic.",80],[3,"CtxtArenas","","Internal storage"],[3,"CommonTypes","",""],[12,"bool","","",407],[12,"char","","",407],[12,"int","","",407],[12,"i8","","",407],[12,"i16","","",407],[12,"i32","","",407],[12,"i64","","",407],[12,"uint","","",407],[12,"u8","","",407],[12,"u16","","",407],[12,"u32","","",407],[12,"u64","","",407],[12,"f32","","",407],[12,"f64","","",407],[12,"err","","",407],[3,"ctxt","","The data structure to keep track of all the information that typechecker\ngenerates so that so that it can be reused and doesn't have to be redone\nlater on."],[12,"types","","Common types, pre-interned for your convenience.",233],[12,"sess","","",233],[12,"def_map","","",233],[12,"named_region_map","","",233],[12,"region_maps","","",233],[12,"node_types","","Stores the types for various nodes in the AST.  Note that this table\nis not guaranteed to be populated until after typeck.  See\ntypeck::check::fn_ctxt for details.",233],[12,"item_substs","","Stores the type parameters which were substituted to obtain the type\nof this node.  This only applies to nodes that refer to entities\nparameterized by type parameters, such as generic fns, types, or\nother items.",233],[12,"impl_or_trait_items","","Maps from a trait item to the trait item \"descriptor\"",233],[12,"trait_item_def_ids","","Maps from a trait def-id to a list of the def-ids of its trait items",233],[12,"trait_items_cache","","A cache for the trait_items() routine",233],[12,"impl_trait_cache","","",233],[12,"impl_trait_refs","","",233],[12,"trait_defs","","",233],[12,"predicates","","Maps from the def-id of an item (trait/struct/enum/fn) to its\nassociated predicates.",233],[12,"super_predicates","","Maps from the def-id of a trait to the list of\nsuper-predicates. This is a subset of the full list of\npredicates. We store these in a separate map because we must\nevaluate them even during type conversion, often before the\nfull predicates are available (note that supertraits have\nadditional acyclicity requirements).",233],[12,"object_cast_map","","Maps from node-id of a trait object cast (like `foo as\nBox<Trait>`) to the trait reference.",233],[12,"map","","",233],[12,"intrinsic_defs","","",233],[12,"freevars","","",233],[12,"tcache","","",233],[12,"rcache","","",233],[12,"short_names_cache","","",233],[12,"tc_cache","","",233],[12,"ast_ty_to_ty_cache","","",233],[12,"enum_var_cache","","",233],[12,"ty_param_defs","","",233],[12,"adjustments","","",233],[12,"normalized_cache","","",233],[12,"lang_items","","",233],[12,"provided_method_sources","","A mapping of fake provided method def_ids to the default implementation",233],[12,"struct_fields","","",233],[12,"item_variance_map","","Maps from def-id of a type or region parameter to its\n(inferred) variance.",233],[12,"variance_computed","","True if the variance has been computed yet; false otherwise.",233],[12,"destructor_for_type","","A mapping from the def ID of an enum or struct type to the def ID\nof the method that implements its destructor. If the type is not\npresent in this map, it does not have a destructor. This map is\npopulated during the coherence phase of typechecking.",233],[12,"destructors","","A method will be in this list if and only if it is a destructor.",233],[12,"trait_impls","","Maps a trait onto a list of impls of that trait.",233],[12,"inherent_impls","","Maps a DefId of a type to a list of its inherent impls.\nContains implementations of methods that are inherent to a type.\nMethods in these implementations don't need to be exported.",233],[12,"impl_items","","Maps a DefId of an impl to a list of its items.\nNote that this contains all of the impls that we know about,\nincluding ones in other crates. It's not clear that this is the best\nway to do it.",233],[12,"used_unsafe","","Set of used unsafe nodes (functions or blocks). Unsafe nodes not\npresent in this set can be warned about.",233],[12,"used_mut_nodes","","Set of nodes which mark locals as mutable which end up getting used at\nsome point. Local variable definitions not in this set can be warned\nabout.",233],[12,"populated_external_types","","The set of external nominal types whose implementations have been read.\nThis is used for lazy resolution of methods.",233],[12,"populated_external_traits","","The set of external traits whose implementations have been read. This\nis used for lazy resolution of traits.",233],[12,"upvar_capture_map","","Borrows",233],[12,"extern_const_statics","","These two caches are used by const_eval when decoding external statics\nand variants that are found.",233],[12,"extern_const_variants","","",233],[12,"method_map","","",233],[12,"dependency_formats","","",233],[12,"closure_kinds","","Records the type of each closure. The def ID is the ID of the\nexpression defining the closure.",233],[12,"closure_tys","","Records the type of each closure. The def ID is the ID of the\nexpression defining the closure.",233],[12,"node_lint_levels","","",233],[12,"transmute_restrictions","","The types that must be asserted to be the same size for `transmute`\nto be valid. We gather up these restrictions in the intrinsicck pass\nand check them in trans.",233],[12,"stability","","Maps any item's def-id to its stability index.",233],[12,"associated_types","","Maps def IDs to true if and only if they're associated types.",233],[12,"selection_cache","","Caches the results of trait selection. This cache is used\nfor things that do not have to do with the parameters in scope.",233],[12,"repr_hint_cache","","Caches the representation hints for struct definitions.",233],[12,"type_impls_copy_cache","","Caches whether types are known to impl Copy. Note that type\nparameters are never placed into this cache, because their\nresults are dependent on the parameter environment.",233],[12,"type_impls_sized_cache","","Caches whether types are known to impl Sized. Note that type\nparameters are never placed into this cache, because their\nresults are dependent on the parameter environment.",233],[12,"object_safety_cache","","Caches whether traits are object safe",233],[12,"const_qualif_map","","Maps Expr NodeId's to their constant qualification.",233],[3,"TypeFlags","",""],[17,"NO_TYPE_FLAGS","",""],[17,"HAS_PARAMS","",""],[17,"HAS_SELF","",""],[17,"HAS_TY_INFER","",""],[17,"HAS_RE_INFER","",""],[17,"HAS_RE_LATE_BOUND","",""],[17,"HAS_REGIONS","",""],[17,"HAS_TY_ERR","",""],[17,"HAS_PROJECTION","",""],[17,"NEEDS_SUBST","",""],[3,"TyS","",""],[12,"sty","","",234],[12,"flags","","",234],[6,"Ty","",""],[3,"InternedTy","","An entry in the type interner."],[5,"type_has_params","",""],[5,"type_has_self","",""],[5,"type_has_ty_infer","",""],[5,"type_needs_infer","",""],[5,"type_has_projection","",""],[5,"type_has_late_bound_regions","",""],[5,"type_has_escaping_regions","","An \"escaping region\" is a bound region whose binder is not part of `t`."],[5,"type_escapes_depth","",""],[3,"BareFnTy","",""],[12,"unsafety","","",236],[12,"abi","","",236],[12,"sig","","",236],[3,"ClosureTy","",""],[12,"unsafety","","",237],[12,"abi","","",237],[12,"sig","","",237],[4,"FnOutput","",""],[13,"FnConverging","","",238],[13,"FnDiverging","","",238],[6,"PolyFnOutput","",""],[3,"FnSig","","Signature of a function type, which I have arbitrarily\ndecided to use to refer to the input/output types."],[12,"inputs","","",85],[12,"output","","",85],[12,"variadic","","",85],[6,"PolyFnSig","",""],[3,"ParamTy","",""],[12,"space","","",239],[12,"idx","","",239],[12,"name","","",239],[3,"DebruijnIndex","","A [De Bruijn index][dbi] is a standard means of representing\nregions (and perhaps later types) in a higher-ranked setting. In\nparticular, imagine a type like this:"],[12,"depth","","",240],[4,"Region","","Representation of regions:"],[13,"ReEarlyBound","","",16],[13,"ReLateBound","","",16],[13,"ReFree","","When checking a function body, the types of all arguments and so forth\nthat refer to bound region parameters are modified to refer to free\nregion parameters.",16],[13,"ReScope","","A concrete region naming some statically determined extent\n(e.g. an expression or sequence of statements) within the\ncurrent function.",16],[13,"ReStatic","","Static data that has an \"infinite\" lifetime. Top in the region lattice.",16],[13,"ReInfer","","A region variable.  Should not exist after typeck.",16],[13,"ReEmpty","","Empty lifetime is for data that is never accessed.\nBottom in the region lattice. We treat ReEmpty somewhat\nspecially; at least right now, we do not generate instances of\nit during the GLB computations, but rather\ngenerate an error instead. This is to improve error messages.\nThe only way to get an instance of ReEmpty is to have a region\nvariable with no constraints.",16],[3,"UpvarId","","Upvars do not get their own node-id. Instead, we use the pair of\nthe original var id (that is, the root variable that is referenced\nby the upvar) and the id of the closure expression."],[12,"var_id","","",241],[12,"closure_expr_id","","",241],[4,"BorrowKind","",""],[13,"ImmBorrow","","Data must be immutable and is aliasable.",242],[13,"UniqueImmBorrow","","Data must be immutable but not aliasable.  This kind of borrow\ncannot currently be expressed by the user and is used only in\nimplicit closure bindings. It is needed when you the closure\nis borrowing or mutating a mutable referent, e.g.:",242],[13,"MutBorrow","","Data is mutable and not aliasable.",242],[4,"UpvarCapture","","Information describing the capture of an upvar. This is computed\nduring `typeck`, specifically by `regionck`."],[13,"ByValue","","Upvar is captured by value. This is always true when the\nclosure is labeled `move`, but can also be true in other cases\ndepending on inference.",24],[13,"ByRef","","Upvar is captured by reference.",24],[3,"UpvarBorrow","",""],[12,"kind","","The kind of borrow: by-ref upvars have access to shared\nimmutable borrows, which are not part of the normal language\nsyntax.",23],[12,"region","","Region of the resulting reference.",23],[6,"UpvarCaptureMap","",""],[3,"FreeRegion","","A \"free\" region `fr` can be interpreted as \"some region\nat least as big as the scope `fr.scope`\"."],[12,"scope","","",17],[12,"bound_region","","",17],[4,"BoundRegion","",""],[13,"BrAnon","","An anonymous region parameter for a given fn (&T)",20],[13,"BrNamed","","Named region parameters for functions (a in &'a T)",20],[13,"BrFresh","","Fresh bound identifiers created during GLB computations.",20],[13,"BrEnv","","",20],[4,"sty","",""],[13,"ty_bool","","",243],[13,"ty_char","","",243],[13,"ty_int","","",243],[13,"ty_uint","","",243],[13,"ty_float","","",243],[13,"ty_enum","","Substs here, possibly against intuition, *may* contain `ty_param`s.\nThat is, even after substitution it is possible that there are type\nvariables. This happens when the `ty_enum` corresponds to an enum\ndefinition and not a concrete use of it. To get the correct `ty_enum`\nfrom the tcx, use the `NodeId` from the `ast::Ty` and look it up in\nthe `ast_ty_to_ty_cache`. This is probably true for `ty_struct` as\nwell.",243],[13,"ty_uniq","","",243],[13,"ty_str","","",243],[13,"ty_vec","","",243],[13,"ty_ptr","","",243],[13,"ty_rptr","","",243],[13,"ty_bare_fn","","",243],[13,"ty_trait","","",243],[13,"ty_struct","","",243],[13,"ty_closure","","",243],[13,"ty_tup","","",243],[13,"ty_projection","","",243],[13,"ty_param","","",243],[13,"ty_infer","","",243],[13,"ty_err","","",243],[3,"TyTrait","",""],[12,"principal","","",244],[12,"bounds","","",244],[3,"TraitRef","","A complete reference to a trait. These take numerous guises in syntax,\nbut perhaps the most recognizable form is in a where clause:"],[12,"def_id","","",83],[12,"substs","","",83],[6,"PolyTraitRef","",""],[3,"Binder","","Binder is a binder for higher-ranked lifetimes. It is part of the\ncompiler's representation for things like `for<'a> Fn(&'a int)`\n(which would be represented by the type `PolyTraitRef ==\nBinder<TraitRef>`). Note that when we skolemize, instantiate,\nerase, or otherwise \"discharge\" these bound regions, we change the\ntype from `Binder<T>` to just `T` (see\ne.g. `liberate_late_bound_regions`)."],[4,"IntVarValue","",""],[13,"IntType","","",120],[13,"UintType","","",120],[4,"terr_vstore_kind","",""],[13,"terr_vec","","",245],[13,"terr_str","","",245],[13,"terr_fn","","",245],[13,"terr_trait","","",245],[3,"expected_found","",""],[12,"expected","","",246],[12,"found","","",246],[4,"type_err","",""],[13,"terr_mismatch","","",247],[13,"terr_unsafety_mismatch","","",247],[13,"terr_abi_mismatch","","",247],[13,"terr_mutability","","",247],[13,"terr_box_mutability","","",247],[13,"terr_ptr_mutability","","",247],[13,"terr_ref_mutability","","",247],[13,"terr_vec_mutability","","",247],[13,"terr_tuple_size","","",247],[13,"terr_fixed_array_size","","",247],[13,"terr_ty_param_size","","",247],[13,"terr_arg_count","","",247],[13,"terr_regions_does_not_outlive","","",247],[13,"terr_regions_not_same","","",247],[13,"terr_regions_no_overlap","","",247],[13,"terr_regions_insufficiently_polymorphic","","",247],[13,"terr_regions_overly_polymorphic","","",247],[13,"terr_sorts","","",247],[13,"terr_integer_as_char","","",247],[13,"terr_int_mismatch","","",247],[13,"terr_float_mismatch","","",247],[13,"terr_traits","","",247],[13,"terr_builtin_bounds","","",247],[13,"terr_variadic_mismatch","","",247],[13,"terr_cyclic_ty","","",247],[13,"terr_convergence_mismatch","","",247],[13,"terr_projection_name_mismatched","","",247],[13,"terr_projection_bounds_length","","",247],[3,"ParamBounds","","Bounds suitable for a named type parameter like `A` in `fn foo<A>`\nas well as the existential type parameter in an object type."],[12,"region_bounds","","",248],[12,"builtin_bounds","","",248],[12,"trait_bounds","","",248],[12,"projection_bounds","","",248],[3,"ExistentialBounds","","Bounds suitable for an existentially quantified type parameter\nsuch as those that appear in object types or closure types. The\nmajor difference between this case and `ParamBounds` is that\ngeneral purpose trait bounds are omitted and there must be\n*exactly one* region."],[12,"region_bound","","",249],[12,"builtin_bounds","","",249],[12,"projection_bounds","","",249],[6,"BuiltinBounds","",""],[4,"BuiltinBound","",""],[13,"BoundSend","","",250],[13,"BoundSized","","",250],[13,"BoundCopy","","",250],[13,"BoundSync","","",250],[5,"empty_builtin_bounds","",""],[5,"all_builtin_bounds","",""],[5,"region_existential_bound","","An existential bound that does not implement any traits."],[3,"TyVid","",""],[12,"index","","",251],[3,"IntVid","",""],[12,"index","","",119],[3,"FloatVid","",""],[12,"index","","",121],[3,"RegionVid","",""],[12,"index","","",252],[4,"InferTy","",""],[13,"TyVar","","",253],[13,"IntVar","","",253],[13,"FloatVar","","",253],[13,"FreshTy","","A `FreshTy` is one that is generated as a replacement for an\nunbound type variable. This is convenient for caching etc. See\n`middle::infer::freshen` for more details.",253],[13,"FreshIntTy","","",253],[4,"UnconstrainedNumeric","",""],[13,"UnconstrainedFloat","","",254],[13,"UnconstrainedInt","","",254],[13,"Neither","","",254],[4,"InferRegion","",""],[13,"ReVar","","",255],[13,"ReSkolemized","","",255],[4,"ObjectLifetimeDefault","","Default region to use for the bound of objects that are\nsupplied as the value for this type parameter. This is derived\nfrom `T:'a` annotations appearing in the type definition.  If\nthis is `None`, then the default is inherited from the\nsurrounding context. See RFC #599 for details."],[13,"Ambiguous","","Require an explicit annotation. Occurs when multiple\n`T:'a` constraints are found.",256],[13,"Specific","","Use the given region as the default.",256],[3,"TypeParameterDef","",""],[12,"name","","",257],[12,"def_id","","",257],[12,"space","","",257],[12,"index","","",257],[12,"default","","",257],[12,"object_lifetime_default","","",257],[3,"RegionParameterDef","",""],[12,"name","","",258],[12,"def_id","","",258],[12,"space","","",258],[12,"index","","",258],[12,"bounds","","",258],[3,"Generics","","Information about the formal type/lifetime parameters associated\nwith an item or method. Analogous to ast::Generics."],[12,"types","","",259],[12,"regions","","",259],[3,"GenericPredicates","","Bounds on generics."],[12,"predicates","","",260],[4,"Predicate","",""],[13,"Trait","","Corresponds to `where Foo : Bar<A,B,C>`. `Foo` here would be\nthe `Self` type of the trait reference and `A`, `B`, and `C`\nwould be the parameters in the `TypeSpace`.",261],[13,"Equate","","where `T1 == T2`.",261],[13,"RegionOutlives","","where 'a : 'b",261],[13,"TypeOutlives","","where T : 'a",261],[13,"Projection","","where <T as TraitRef>::Name == X, approximately.\nSee `ProjectionPredicate` struct for details.",261],[3,"TraitPredicate","",""],[12,"trait_ref","","",262],[6,"PolyTraitPredicate","",""],[3,"EquatePredicate","",""],[6,"PolyEquatePredicate","",""],[3,"OutlivesPredicate","",""],[6,"PolyOutlivesPredicate","",""],[6,"PolyRegionOutlivesPredicate","",""],[6,"PolyTypeOutlivesPredicate","",""],[3,"ProjectionPredicate","","This kind of predicate has no *direct* correspondent in the\nsyntax, but it roughly corresponds to the syntactic forms:"],[12,"projection_ty","","",84],[12,"ty","","",84],[6,"PolyProjectionPredicate","",""],[3,"ProjectionTy","","Represents the projection of an associated type. In explicit UFCS\nform this would be written `<T as Trait<..>>::N`."],[12,"trait_ref","","The trait reference `T as Trait<..>`.",265],[12,"item_name","","The name `N` of the associated type.",265],[8,"ToPolyTraitRef","",""],[10,"to_poly_trait_ref","","",408],[8,"AsPredicate","",""],[10,"as_predicate","","",409],[3,"InstantiatedPredicates","","Represents the bounds declared on a particular set of type\nparameters.  Should eventually be generalized into a flag list of\nwhere clauses.  You can obtain a `InstantiatedPredicates` list from a\n`GenericPredicates` by using the `instantiate` method. Note that this method\nreflects an important semantic invariant of `InstantiatedPredicates`: while\nthe `GenericPredicates` are expressed in terms of the bound type\nparameters of the impl/trait/whatever, an `InstantiatedPredicates` instance\nrepresented a set of bounds for some particular instantiation,\nmeaning that the generic parameters have been substituted with\ntheir values."],[12,"predicates","","",266],[3,"ParameterEnvironment","","When type checking, we use the `ParameterEnvironment` to track\ndetails about the type/lifetime parameters that are in scope.\nIt primarily stores the bounds information."],[12,"tcx","","",267],[12,"free_substs","","See `construct_free_substs` for details.",267],[12,"implicit_region_bound","","Each type parameter has an implicit region bound that\nindicates it must outlive at least the function body (the user\nmay specify stronger requirements). This field indicates the\nregion of the callee.",267],[12,"caller_bounds","","Obligations that the caller must satisfy. This is basically\nthe set of bounds on the in-scope type parameters, translated\ninto Obligations.",267],[12,"selection_cache","","Caches the results of trait selection. This cache is used\nfor things that have to do with the parameters in scope.",267],[3,"TypeScheme","","A \"type scheme\", in ML terminology, is a type combined with some\nset of generic types that the type is, well, generic over. In Rust\nterms, it is the \"type\" of a fn item or struct -- this type will\ninclude various generic parameters that must be substituted when\nthe item/struct is referenced. That is called converting the type\nscheme to a monotype."],[12,"generics","","",268],[12,"ty","","",268],[3,"TraitDef","","As `TypeScheme` but for a trait ref."],[12,"unsafety","","",339],[12,"paren_sugar","","If `true`, then this trait had the `#[rustc_paren_sugar]`\nattribute, indicating that it should be used with `Foo()`\nsugar. This is a temporary thing -- eventually any trait wil\nbe usable with the sugar (or without it).",339],[12,"generics","","Generic type definitions. Note that `Self` is listed in here\nas having a single bound, the trait itself (e.g., in the trait\n`Eq`, there is a single bound `Self : Eq`). This is so that\ndefault methods get to assume that the `Self` parameters\nimplements the trait.",339],[12,"trait_ref","","",339],[12,"associated_type_names","","A list of the associated types defined in this trait. Useful\nfor resolving `X::Foo` type markers.",339],[3,"ItemSubsts","","Records the substitutions used to translate the polytype for an\nitem into the monotype of an item reference."],[12,"substs","","",269],[4,"ClosureKind","",""],[13,"FnClosureKind","","",155],[13,"FnMutClosureKind","","",155],[13,"FnOnceClosureKind","","",155],[8,"ClosureTyper","",""],[10,"tcx","","",410],[10,"param_env","","",410],[10,"closure_kind","","Is this a `Fn`, `FnMut` or `FnOnce` closure? During typeck,\nreturns `None` if the kind of this closure has not yet been\ninferred.",410],[10,"closure_type","","Returns the argument/return types of this closure.",410],[10,"closure_upvars","","Returns the set of all upvars and their transformed\ntypes. During typeck, maybe return `None` if the upvar types\nhave not yet been inferred.",410],[5,"mk_ctxt","",""],[5,"mk_t","",""],[5,"mk_mach_int","",""],[5,"mk_mach_uint","",""],[5,"mk_mach_float","",""],[5,"mk_str","",""],[5,"mk_str_slice","",""],[5,"mk_enum","",""],[5,"mk_uniq","",""],[5,"mk_ptr","",""],[5,"mk_rptr","",""],[5,"mk_mut_rptr","",""],[5,"mk_imm_rptr","",""],[5,"mk_mut_ptr","",""],[5,"mk_imm_ptr","",""],[5,"mk_nil_ptr","",""],[5,"mk_vec","",""],[5,"mk_slice","",""],[5,"mk_tup","",""],[5,"mk_nil","",""],[5,"mk_bare_fn","",""],[5,"mk_ctor_fn","",""],[5,"mk_trait","",""],[5,"sort_bounds_list","",""],[5,"mk_projection","",""],[5,"mk_struct","",""],[5,"mk_closure","",""],[5,"mk_var","",""],[5,"mk_int_var","",""],[5,"mk_float_var","",""],[5,"mk_infer","",""],[5,"mk_param","",""],[5,"mk_self_type","",""],[5,"mk_param_from_def","",""],[5,"walk_ty","",""],[5,"maybe_walk_ty","","Walks `ty` and any types appearing within `ty`, invoking the\ncallback `f` on each type. If the callback returns false, then the\nchildren of the current type are ignored."],[5,"fold_ty","",""],[5,"type_is_nil","",""],[5,"type_is_error","",""],[5,"type_needs_subst","",""],[5,"trait_ref_contains_error","",""],[5,"type_is_ty_var","",""],[5,"type_is_bool","",""],[5,"type_is_self","",""],[5,"type_is_vec","",""],[5,"type_is_structural","",""],[5,"type_is_simd","",""],[5,"sequence_element_type","",""],[5,"simd_type","",""],[5,"simd_size","",""],[5,"type_is_region_ptr","",""],[5,"type_is_unsafe_ptr","",""],[5,"type_is_unique","",""],[5,"type_is_scalar","",""],[5,"type_is_floating_point","","Returns true if this type is a floating point type and false otherwise."],[3,"TypeContents","","Type contents is how the type checker reasons about kinds.\nThey track what kinds of things are found within a type.  You can\nthink of them as kind of an \"anti-kind\".  They track the kinds of values\nand thinks that are contained in types.  Having a larger contents for\na type tends to rule that type *out* from various kinds.  For example,\na type that contains a reference is not sendable."],[12,"bits","","",270],[5,"type_interior_is_unsafe","",""],[5,"type_contents","",""],[5,"type_moves_by_default","",""],[5,"type_is_sized","",""],[5,"is_ffi_safe","",""],[5,"is_instantiable","",""],[4,"Representability","","Describes whether a type is representable. For types that are not\nrepresentable, 'SelfRecursive' and 'ContainsRecursive' are used to\ndistinguish between types that are recursive with themselves and types that\ncontain a different recursive type. These cases can therefore be treated\ndifferently when reporting errors."],[13,"Representable","","",271],[13,"ContainsRecursive","","",271],[13,"SelfRecursive","","",271],[5,"is_type_representable","","Check whether a type is representable. This means it cannot contain unboxed\nstructural recursion. This check is needed for structs and enums."],[5,"type_is_trait","",""],[5,"type_trait_info","",""],[5,"type_is_integral","",""],[5,"type_is_fresh","",""],[5,"type_is_uint","",""],[5,"type_is_char","",""],[5,"type_is_bare_fn","",""],[5,"type_is_bare_fn_item","",""],[5,"type_is_fp","",""],[5,"type_is_numeric","",""],[5,"type_is_signed","",""],[5,"type_is_machine","",""],[5,"type_is_c_like_enum","",""],[5,"deref","",""],[5,"type_content","",""],[5,"index","",""],[5,"array_element_ty","",""],[5,"positional_element_ty","","Returns the type of element at index `i` in tuple or tuple-like type `t`.\nFor an enum `t`, `variant` is None only if `t` is a univariant enum."],[5,"named_element_ty","","Returns the type of element at field `n` in struct or struct-like type `t`.\nFor an enum `t`, `variant` must be some def id."],[5,"impl_id_to_trait_ref","",""],[5,"node_id_to_type","",""],[5,"node_id_to_type_opt","",""],[5,"node_id_item_substs","",""],[5,"fn_is_variadic","",""],[5,"ty_fn_sig","",""],[5,"ty_fn_abi","","Returns the ABI of the given function."],[5,"ty_fn_args","",""],[5,"ty_fn_ret","",""],[5,"is_fn_ty","",""],[5,"ty_region","",""],[5,"free_region_from_def","",""],[5,"pat_ty","",""],[5,"pat_ty_opt","",""],[5,"expr_ty","",""],[5,"expr_ty_opt","",""],[5,"expr_ty_adjusted","","Returns the type of `expr`, considering any `AutoAdjustment`\nentry recorded for that expression."],[5,"expr_span","",""],[5,"local_var_name_str","",""],[5,"adjust_ty","","See `expr_ty_adjusted`"],[5,"adjust_ty_for_autoref","",""],[5,"unsize_ty","",""],[5,"resolve_expr","",""],[5,"expr_is_lval","",""],[4,"ExprKind","","We categorize expressions into three kinds.  The distinction between\nlvalue/rvalue is fundamental to the language.  The distinction between the\ntwo kinds of rvalues is an artifact of trans which reflects how we will\ngenerate code for that kind of expression.  See trans/expr.rs for more\ninformation."],[13,"LvalueExpr","","",411],[13,"RvalueDpsExpr","","",411],[13,"RvalueDatumExpr","","",411],[13,"RvalueStmtExpr","","",411],[5,"expr_kind","",""],[5,"stmt_node_id","",""],[5,"field_idx_strict","",""],[5,"impl_or_trait_item_idx","",""],[5,"ty_sort_string","",""],[5,"type_err_to_str","","Explains the source of a type err in a short, human readable way. This is meant to be placed\nin parentheses after some larger message. You should also invoke `note_and_explain_type_err()`\nafterwards to present additional details, particularly when it comes to lifetime-related\nerrors."],[5,"note_and_explain_type_err","",""],[5,"provided_source","",""],[5,"provided_trait_methods","",""],[5,"trait_item","",""],[5,"trait_items","",""],[5,"trait_impl_polarity","",""],[5,"impl_or_trait_item","",""],[5,"is_associated_type","","Returns true if the given ID refers to an associated type and false if it\nrefers to anything else."],[5,"associated_type_parameter_index","","Returns the parameter index that the given associated type corresponds to."],[5,"trait_item_def_ids","",""],[5,"impl_trait_ref","",""],[5,"trait_ref_to_def_id","",""],[5,"try_add_builtin_trait","","Checks whether `trait_ref` refers to one of the builtin\ntraits, like `Send`, and adds the corresponding\nbound to the set `builtin_bounds` if so. Returns true if `trait_ref`\nis a builtin trait."],[5,"ty_to_def_id","",""],[3,"VariantInfo","",""],[12,"args","","",272],[12,"arg_names","","",272],[12,"ctor_ty","","",272],[12,"name","","",272],[12,"id","","",272],[12,"disr_val","","",272],[12,"vis","","",272],[5,"substd_enum_variants","",""],[5,"item_path_str","",""],[4,"DtorKind","",""],[13,"NoDtor","","",273],[13,"TraitDtor","","",273],[5,"ty_dtor","",""],[5,"has_dtor","",""],[5,"with_path","",""],[5,"enum_is_univariant","",""],[5,"type_is_empty","",""],[5,"enum_variants","",""],[5,"enum_variant_with_id","",""],[5,"lookup_item_type","",""],[5,"lookup_trait_def","","Given the did of a trait, returns its canonical trait ref."],[5,"lookup_predicates","","Given the did of an item, returns its full set of predicates."],[5,"lookup_super_predicates","","Given the did of a trait, returns its superpredicates."],[5,"predicates","",""],[5,"get_attrs","","Get the attributes of a definition."],[5,"has_attr","","Determine whether an item is annotated with an attribute"],[5,"lookup_packed","","Determine whether an item is annotated with `#[repr(packed)]`"],[5,"lookup_simd","","Determine whether an item is annotated with `#[simd]`"],[5,"lookup_repr_hints","","Obtain the representation annotation for a struct definition."],[5,"lookup_field_type","",""],[5,"lookup_struct_fields","",""],[5,"is_tuple_struct","",""],[5,"struct_fields","",""],[5,"tup_fields","",""],[3,"ClosureUpvar","",""],[12,"def","","",274],[12,"span","","",274],[12,"ty","","",274],[5,"closure_upvars","",""],[5,"is_binopable","",""],[5,"eval_repeat_count","",""],[5,"each_bound_trait_and_supertraits","",""],[5,"required_region_bounds","","Given a set of predicates that apply to an object type, returns\nthe region bounds that the (erased) `Self` type must\noutlive. Precisely *because* the `Self` type is erased, the\nparameter `erased_self_ty` must be supplied to indicate what type\nhas been used to represent `Self` in the predicates\nthemselves. This should really be a unique type; `FreshTy(0)` is a\npopular choice."],[5,"get_tydesc_ty","",""],[5,"item_variances","",""],[5,"trait_has_default_impl","",""],[5,"record_trait_has_default_impl","","Records a trait-to-implementation mapping."],[5,"record_trait_implementation","","Records a trait-to-implementation mapping."],[5,"populate_implementations_for_type_if_necessary","","Populates the type context with all the implementations for the given type\nif necessary."],[5,"populate_implementations_for_trait_if_necessary","","Populates the type context with all the implementations for the given\ntrait if necessary."],[5,"trait_id_of_impl","","Given the def_id of an impl, return the def_id of the trait it implements.\nIf it implements no trait, return `None`."],[5,"impl_of_method","","If the given def ID describes a method belonging to an impl, return the\nID of the impl that the method belongs to. Otherwise, return `None`."],[5,"trait_of_item","","If the given def ID describes an item belonging to a trait (either a\ndefault method or an implementation of a trait method), return the ID of\nthe trait that the method belongs to. Otherwise, return `None`."],[5,"trait_item_of_item","","If the given def ID describes an item belonging to a trait, (either a\ndefault method or an implementation of a trait method), return the ID of\nthe method inside trait definition (this means that if the given def ID\nis already that of the original trait method, then the return value is\nthe same).\nOtherwise, return `None`."],[5,"hash_crate_independent","","Creates a hash of the type `Ty` which will be the same no matter what crate\ncontext it's calculated within. This is used by the `type_id` intrinsic."],[5,"empty_parameter_environment","","Construct a parameter environment suitable for static contexts or other contexts where there\nare no free type/lifetime parameters in scope."],[5,"construct_free_substs","","Constructs and returns a substitution that can be applied to move from\nthe \"outer\" view of a type or method to the \"inner\" view.\nIn general, this means converting from bound parameters to\nfree parameters. Since we currently represent bound/free type\nparameters in the same way, this only has an effect on regions."],[5,"construct_parameter_environment","","See `ParameterEnvironment` struct def'n for details"],[4,"ExplicitSelfCategory","","The category of explicit self."],[13,"StaticExplicitSelfCategory","","",275],[13,"ByValueExplicitSelfCategory","","",275],[13,"ByReferenceExplicitSelfCategory","","",275],[13,"ByBoxExplicitSelfCategory","","",275],[5,"accumulate_lifetimes_in_type","","Pushes all the lifetimes in the given type onto the given list. A\n\"lifetime in a type\" is a lifetime specified by a reference or a lifetime\nin a list of type substitutions. This does *not* traverse into nominal\ntypes, nor does it resolve fictitious types."],[3,"Freevar","","A free variable referred to in a function."],[12,"def","","The variable being accessed free.",22],[12,"span","","",22],[6,"FreevarMap","",""],[6,"CaptureModeMap","",""],[6,"TraitMap","",""],[6,"GlobMap","",""],[5,"with_freevars","",""],[5,"liberate_late_bound_regions","","Replace any late-bound regions bound in `value` with free variants attached to scope-id\n`scope_id`."],[5,"count_late_bound_regions","",""],[5,"binds_late_bound_regions","",""],[5,"no_late_bound_regions","",""],[5,"erase_late_bound_regions","","Replace any late-bound regions bound in `value` with `'static`. Useful in trans but also\nmethod lookup and a few other places where precise region relationships are not required."],[5,"anonymize_late_bound_regions","","Rewrite any late-bound regions so that they are anonymous.  Region numbers are\nassigned starting at 1 and increasing monotonically in the order traversed\nby the fold operation."],[5,"replace_late_bound_regions","","Replaces the late-bound-regions in `value` that are bound by `value`."],[5,"make_substs_for_receiver_types","","Substitutes the values for the receiver's type parameters\nthat are found in method, leaving the method's type parameters\nintact."],[4,"CopyImplementationError","",""],[13,"FieldDoesNotImplementCopy","","",412],[13,"VariantDoesNotImplementCopy","","",412],[13,"TypeIsStructural","","",412],[13,"TypeHasDestructor","","",412],[5,"can_type_implement_copy","",""],[8,"RegionEscape","",""],[10,"has_escaping_regions","","",413],[10,"has_regions_escaping_depth","","",413],[8,"HasProjectionTypes","",""],[10,"has_projection_types","","",414],[8,"ReferencesError","",""],[10,"references_error","","",415],[0,"ty_fold","rustc_typeck::middle","Generalized type folding mechanism. The setup is a bit convoluted\nbut allows for convenient usage. Let T be an instance of some\n\"foldable type\" (one which implements `TypeFoldable`) and F be an\ninstance of a \"folder\" (a type which implements `TypeFolder`). Then\nthe setup is intended to be:"],[8,"TypeFoldable","rustc_typeck::middle::ty_fold","The TypeFoldable trait is implemented for every type that can be folded.\nBasically, every type that has a corresponding method in TypeFolder."],[10,"fold_with","","",416],[8,"TypeFolder","","The TypeFolder trait defines the actual *folding*. There is a\nmethod defined for every foldable type. Each of these has a\ndefault implementation that does an \"identity\" fold. Within each\nidentity fold, it should invoke `foo.fold_with(self)` to fold each\nsub-item."],[10,"tcx","","",417],[10,"enter_region_binder","","Invoked by the `super_*` routines when we enter a region\nbinding level (for example, when entering a function\nsignature). This is used by clients that want to track the\nDebruijn index nesting level.",417],[10,"exit_region_binder","","Invoked by the `super_*` routines when we exit a region\nbinding level. This is used by clients that want to\ntrack the Debruijn index nesting level.",417],[10,"fold_binder","","",417],[10,"fold_ty","","",417],[10,"fold_mt","","",417],[10,"fold_trait_ref","","",417],[10,"fold_substs","","",417],[10,"fold_fn_sig","","",417],[10,"fold_output","","",417],[10,"fold_bare_fn_ty","","",417],[10,"fold_closure_ty","","",417],[10,"fold_region","","",417],[10,"fold_existential_bounds","","",417],[10,"fold_autoref","","",417],[10,"fold_item_substs","","",417],[5,"super_fold_binder","",""],[5,"super_fold_ty","",""],[5,"super_fold_substs","",""],[5,"super_fold_fn_sig","",""],[5,"super_fold_output","",""],[5,"super_fold_bare_fn_ty","",""],[5,"super_fold_closure_ty","",""],[5,"super_fold_trait_ref","",""],[5,"super_fold_mt","",""],[5,"super_fold_existential_bounds","",""],[5,"super_fold_autoref","",""],[5,"super_fold_item_substs","",""],[3,"BottomUpFolder","",""],[12,"tcx","","",280],[12,"fldop","","",280],[3,"RegionFolder","","Folds over the substructure of a type, visiting its component\ntypes and all regions that occur *free* within it."],[5,"collect_regions","",""],[5,"fold_regions","",""],[3,"RegionEraser","",""],[5,"erase_regions","",""],[5,"shift_region","",""],[5,"shift_regions","",""],[0,"ty_walk","rustc_typeck::middle","An iterator over the type substructure."],[3,"TypeWalker","rustc_typeck::middle::ty_walk",""],[0,"weak_lang_items","rustc_typeck::middle","Validity checking for weak lang items"],[5,"check_crate","rustc_typeck::middle::weak_lang_items","Checks the crate for usage of weak lang items, returning a vector of all the\nlanguage items required by this crate, but not defined yet."],[5,"link_name","",""],[0,"session","rustc_typeck",""],[0,"config","rustc_typeck::session","Contains infrastructure for configuring the compiler, including parsing\ncommand line options."],[3,"Config","rustc_typeck::session::config",""],[12,"target","","",418],[12,"int_type","","",418],[12,"uint_type","","",418],[4,"OptLevel","",""],[13,"No","","",306],[13,"Less","","",306],[13,"Default","","",306],[13,"Aggressive","","",306],[4,"DebugInfoLevel","",""],[13,"NoDebugInfo","","",307],[13,"LimitedDebugInfo","","",307],[13,"FullDebugInfo","","",307],[4,"OutputType","",""],[13,"OutputTypeBitcode","","",308],[13,"OutputTypeAssembly","","",308],[13,"OutputTypeLlvmAssembly","","",308],[13,"OutputTypeObject","","",308],[13,"OutputTypeExe","","",308],[13,"OutputTypeDepInfo","","",308],[3,"Options","",""],[12,"crate_types","","",309],[12,"gc","","",309],[12,"optimize","","",309],[12,"debug_assertions","","",309],[12,"debuginfo","","",309],[12,"lint_opts","","",309],[12,"describe_lints","","",309],[12,"output_types","","",309],[12,"search_paths","","",309],[12,"libs","","",309],[12,"maybe_sysroot","","",309],[12,"target_triple","","",309],[12,"cfg","","",309],[12,"test","","",309],[12,"parse_only","","",309],[12,"no_trans","","",309],[12,"treat_err_as_bug","","",309],[12,"no_analysis","","",309],[12,"debugging_opts","","",309],[12,"write_dependency_info","","Whether to write dependency files. It's (enabled, optional filename).",309],[12,"prints","","",309],[12,"cg","","",309],[12,"color","","",309],[12,"show_span","","",309],[12,"externs","","",309],[12,"crate_name","","",309],[12,"alt_std_name","","An optional name to use as the crate for std during std injection,\nwritten `extern crate std = \"name\"`. Default to \"std\". Used by\nout-of-tree drivers.",309],[12,"unstable_features","","Indicates how the compiler should treat unstable features",309],[4,"UnstableFeatures","",""],[13,"Disallow","","Hard errors for unstable features are active, as on\nbeta/stable channels.",310],[13,"Default","","Use the default lint levels",310],[13,"Cheat","","Errors are bypassed for bootstrapping. This is required any time\nduring the build that feature-related lints are set to warn or above\nbecause the build turns on warnings-as-errors and uses lots of unstable\nfeatures. As a result, this this is always required for building Rust\nitself.",310],[4,"PrintRequest","",""],[13,"FileNames","","",311],[13,"Sysroot","","",311],[13,"CrateName","","",311],[4,"Input","",""],[13,"File","","Load source from file",312],[13,"Str","","The string is the source",312],[3,"OutputFilenames","",""],[12,"out_directory","","",313],[12,"out_filestem","","",313],[12,"single_output_file","","",313],[12,"extra","","",313],[5,"host_triple","",""],[5,"basic_options","","Some reasonable defaults"],[4,"EntryFnType","",""],[13,"EntryMain","","",314],[13,"EntryStart","","",314],[13,"EntryNone","","",314],[4,"CrateType","",""],[13,"CrateTypeExecutable","","",315],[13,"CrateTypeDylib","","",315],[13,"CrateTypeRlib","","",315],[13,"CrateTypeStaticlib","","",315],[4,"Passes","",""],[13,"SomePasses","","",316],[13,"AllPasses","","",316],[3,"CodegenOptions","",""],[12,"ar","","",317],[12,"linker","","",317],[12,"link_args","","",317],[12,"lto","","",317],[12,"target_cpu","","",317],[12,"target_feature","","",317],[12,"passes","","",317],[12,"llvm_args","","",317],[12,"save_temps","","",317],[12,"rpath","","",317],[12,"no_prepopulate_passes","","",317],[12,"no_vectorize_loops","","",317],[12,"no_vectorize_slp","","",317],[12,"soft_float","","",317],[12,"prefer_dynamic","","",317],[12,"no_integrated_as","","",317],[12,"no_redzone","","",317],[12,"relocation_model","","",317],[12,"code_model","","",317],[12,"metadata","","",317],[12,"extra_filename","","",317],[12,"codegen_units","","",317],[12,"remark","","",317],[12,"no_stack_check","","",317],[12,"debuginfo","","",317],[12,"opt_level","","",317],[12,"debug_assertions","","",317],[5,"basic_codegen_options","",""],[5,"build_codegen_options","",""],[6,"CodegenSetter","",""],[17,"CG_OPTIONS","",""],[3,"DebuggingOptions","",""],[12,"verbose","","",318],[12,"time_passes","","",318],[12,"count_llvm_insns","","",318],[12,"time_llvm_passes","","",318],[12,"trans_stats","","",318],[12,"asm_comments","","",318],[12,"no_verify","","",318],[12,"borrowck_stats","","",318],[12,"no_landing_pads","","",318],[12,"debug_llvm","","",318],[12,"count_type_sizes","","",318],[12,"meta_stats","","",318],[12,"print_link_args","","",318],[12,"gc","","",318],[12,"print_llvm_passes","","",318],[12,"ast_json","","",318],[12,"ast_json_noexpand","","",318],[12,"ls","","",318],[12,"save_analysis","","",318],[12,"print_move_fragments","","",318],[12,"flowgraph_print_loans","","",318],[12,"flowgraph_print_moves","","",318],[12,"flowgraph_print_assigns","","",318],[12,"flowgraph_print_all","","",318],[12,"print_region_graph","","",318],[12,"parse_only","","",318],[12,"no_trans","","",318],[12,"treat_err_as_bug","","",318],[12,"no_analysis","","",318],[12,"extra_plugins","","",318],[12,"unstable_options","","",318],[12,"print_enum_sizes","","",318],[12,"force_overflow_checks","","",318],[5,"basic_debugging_options","",""],[5,"build_debugging_options","",""],[6,"DebuggingSetter","",""],[17,"DB_OPTIONS","",""],[5,"default_lib_output","",""],[5,"default_configuration","",""],[5,"append_configuration","",""],[5,"build_configuration","",""],[5,"build_target_config","",""],[5,"short_optgroups","","Returns the \"short\" subset of the stable rustc command line options."],[5,"optgroups","","Returns all of the stable rustc command line options."],[4,"OptionStability","",""],[13,"Stable","","",319],[13,"Unstable","","",319],[3,"RustcOptGroup","",""],[12,"opt_group","","",320],[12,"stability","","",320],[5,"rustc_short_optgroups","","Returns the \"short\" subset of the rustc command line options,\nincluding metadata for each option, such as whether the option is\npart of the stable long-term interface for rustc."],[5,"rustc_optgroups","","Returns all rustc command line options, including metadata for\neach option, such as whether the option is part of the stable\nlong-term interface for rustc."],[5,"parse_cfgspecs","",""],[5,"build_session_options","",""],[5,"get_unstable_features_setting","",""],[5,"parse_crate_types_from_list","",""],[0,"search_paths","rustc_typeck::session",""],[3,"SearchPaths","rustc_typeck::session::search_paths",""],[3,"Iter","",""],[4,"PathKind","",""],[13,"Native","","",322],[13,"Crate","","",322],[13,"Dependency","","",322],[13,"Framework","","",322],[13,"ExternFlag","","",322],[13,"All","","",322],[3,"Session","rustc_typeck::session",""],[12,"target","","",324],[12,"host","","",324],[12,"opts","","",324],[12,"cstore","","",324],[12,"parse_sess","","",324],[12,"entry_fn","","",324],[12,"entry_type","","",324],[12,"plugin_registrar_fn","","",324],[12,"default_sysroot","","",324],[12,"local_crate_source_file","","",324],[12,"working_dir","","",324],[12,"lint_store","","",324],[12,"lints","","",324],[12,"crate_types","","",324],[12,"crate_metadata","","",324],[12,"features","","",324],[12,"recursion_limit","","The maximum recursion limit for potentially infinitely recursive\noperations such as auto-dereference and monomorphization.",324],[12,"can_print_warnings","","",324],[5,"build_session","",""],[5,"build_session_","",""],[5,"expect","",""],[5,"early_error","",""],[5,"early_warn","",""],[0,"util","rustc_typeck",""],[0,"common","rustc_typeck::util",""],[17,"FN_OUTPUT_NAME","rustc_typeck::util::common",""],[3,"ErrorReported","",""],[5,"time","",""],[5,"indent","",""],[3,"Indenter","",""],[5,"indenter","",""],[5,"loop_query","",""],[5,"block_query","",""],[5,"can_reach","","K: Eq + Hash<S>, V, S, H: Hasher<S>"],[5,"memoized","","Memoizes a one-argument closure using the given RefCell containing\na type implementing MutableMap to serve as a cache."],[5,"path2cstr","",""],[0,"ppaux","rustc_typeck::util",""],[8,"Repr","rustc_typeck::util::ppaux","Produces a string suitable for debugging output."],[10,"repr","","",419],[8,"UserString","","Produces a string suitable for showing to the user."],[10,"user_string","","",420],[5,"note_and_explain_region","",""],[5,"explain_region_and_span","",""],[5,"bound_region_ptr_to_string","",""],[5,"bound_region_to_string","",""],[5,"region_ptr_to_string","",""],[5,"region_to_string","",""],[5,"mutability_to_string","",""],[5,"mt_to_string","",""],[5,"vec_map_to_string","",""],[5,"ty_to_string","",""],[5,"explicit_self_category_to_str","",""],[5,"parameterized","",""],[5,"ty_to_short_str","",""],[0,"nodemap","rustc_typeck::util","An efficient hash map for node IDs"],[6,"FnvHashMap","rustc_typeck::util::nodemap",""],[6,"FnvHashSet","",""],[6,"NodeMap","",""],[6,"DefIdMap","",""],[6,"NodeSet","",""],[6,"DefIdSet","",""],[5,"FnvHashMap","",""],[5,"FnvHashSet","",""],[5,"NodeMap","",""],[5,"DefIdMap","",""],[5,"NodeSet","",""],[5,"DefIdSet","",""],[3,"FnvHasher","","A speedy hash algorithm for node ids and def ids. The hashmap in\nlibcollections by default uses SipHash which isn't quite as speedy as we\nwant. In the compiler we're not really worried about DOS attempts, so we\njust default to a non-cryptographic hash."],[0,"snapshot_vec","rustc_typeck::util","A utility class for implementing \"snapshottable\" things; a snapshottable data structure permits\nyou to take a snapshot (via `start_snapshot`) and then, after making some changes, elect either\nto rollback to the start of the snapshot or commit those changes."],[4,"UndoLog","rustc_typeck::util::snapshot_vec",""],[13,"OpenSnapshot","","Indicates where a snapshot started.",421],[13,"CommittedSnapshot","","Indicates a snapshot that has been committed.",421],[13,"NewElem","","New variable with given index was created.",421],[13,"SetElem","","Variable with given index was changed *from* the given value.",421],[13,"Other","","Extensible set of actions",421],[3,"SnapshotVec","",""],[3,"Snapshot","",""],[8,"SnapshotVecDelegate","",""],[16,"Value","rustc_typeck::util::snapshot_vec::SnapshotVecDelegate",""],[16,"Undo","",""],[10,"reverse","rustc_typeck::util::snapshot_vec","",422],[0,"lev_distance","rustc_typeck::util",""],[5,"lev_distance","rustc_typeck::util::lev_distance",""],[0,"fs","rustc_typeck::util",""],[5,"realpath","rustc_typeck::util::fs","Returns an absolute path in the filesystem that `path` points to. The\nreturned path does not contain any symlinks in its hierarchy."],[0,"sha2","rustc_typeck::util","This module implements only the Sha256 function since that is all that is needed for internal\nuse. This implementation is not intended for external use or for any use where security is\nimportant."],[8,"Digest","rustc_typeck::util::sha2","The Digest trait specifies an interface common to digest functions, such as SHA-1 and the SHA-2\nfamily of digest functions."],[10,"input","","Provide message data.",423],[10,"result","","Retrieve the digest result. This method may be called multiple times.",423],[10,"reset","","Reset the digest. This method must be called after result() and before supplying more\ndata.",423],[10,"output_bits","","Get the output size in bits.",423],[10,"input_str","","Convenience function that feeds a string into a digest.",423],[10,"result_bytes","","Convenience function that retrieves the result of a digest as a\nnewly allocated vec of bytes.",423],[10,"result_str","","Convenience function that retrieves the result of a digest as a\nString in hexadecimal format.",423],[11,"new_in","rustc_back::tempdir","Attempts to make a temporary directory inside of `tmpdir` whose name\nwill have the prefix `prefix`. The directory will be automatically\ndeleted once the returned wrapper is destroyed.",424],[11,"new","","Attempts to make a temporary directory inside of `env::temp_dir()` whose\nname will have the prefix `prefix`. The directory will be automatically\ndeleted once the returned wrapper is destroyed.",424],[11,"into_path","","Unwrap the wrapped `std::path::Path` from the `TempDir` wrapper.\nThis discards the wrapper so that the automatic deletion of the\ntemporary directory is prevented.",424],[11,"path","","Access the wrapped `std::path::Path` to the temporary directory.",424],[11,"close","","Close and remove the temporary directory",424],[11,"drop","","",424],[11,"to_string","rustc_back::target::apple_ios_base","",425],[11,"fmt","rustc_back::target","",426],[11,"clone","","",426],[11,"fmt","","",427],[11,"clone","","",427],[11,"default","","Create a set of \"sane defaults\" for any target. This is still incomplete, and if used for\ncompilation, will certainly not work.",427],[11,"adjust_abi","","Given a function ABI, turn \"System\" into the correct ABI for this target.",426],[11,"from_json","","Load a target descriptor from a JSON object.",426],[11,"search","","Search RUST_TARGET_PATH for a JSON file specifying the given target\ntriple. Note that it could also just be a bare filename already, so also\ncheck for that. If one of the hardcoded targets we know about, just\nreturn it directly.",426],[3,"Sha256","rustc_typeck::util::sha2","The SHA-256 hash algorithm"],[5,"check_crate","rustc_typeck",""],[0,"diagnostics","",""],[7,"DIAGNOSTICS","rustc_typeck::diagnostics",""]],"paths":[[3,"Lint"],[3,"Archive"],[3,"ArchiveBuilder"],[3,"Svh"],[4,"SawAbiComponent"],[4,"SawExprComponent"],[4,"SawStmtComponent"],[3,"Ident"],[3,"Name"],[3,"StrictVersionHashVisitor"],[3,"DecodeContext"],[3,"DefId"],[4,"Option"],[3,"Span"],[3,"NestedItemsDropper"],[4,"Def"],[4,"Region"],[3,"FreeRegion"],[4,"CodeExtent"],[3,"DestructionScopeData"],[4,"BoundRegion"],[3,"Decoder"],[3,"Freevar"],[3,"UpvarBorrow"],[4,"UpvarCapture"],[4,"MethodOrigin"],[3,"EncodeContext"],[3,"Encoder"],[3,"SideTableEncodingIdVisitor"],[3,"Doc"],[3,"LabelledCFG"],[4,"CFGNodeData"],[3,"CFG"],[3,"ConstQualif"],[4,"Mode"],[3,"CheckCrateVisitor"],[3,"CheckCrateVisitor"],[3,"CheckItemRecursionVisitor"],[4,"Context"],[3,"CheckLoopVisitor"],[3,"Matrix"],[4,"Constructor"],[4,"Usefulness"],[3,"MatchCheckCtxt"],[3,"StaticInliner"],[3,"RenamingRecorder"],[3,"MutationChecker"],[3,"AtBindingPatternVisitor"],[3,"RvalueContext"],[3,"RvalueContextDelegate"],[4,"const_val"],[3,"ConstEvalErr"],[4,"ErrKind"],[4,"EntryOrExit"],[3,"DataFlowContext"],[3,"Union"],[3,"Subtract"],[3,"MarkSymbolVisitor"],[3,"LifeSeeder"],[3,"DeadVisitor"],[3,"PathResolution"],[4,"MethodProvenance"],[4,"UnsafeContext"],[3,"EffectCheckVisitor"],[3,"EntryContext"],[4,"LoanCause"],[4,"ConsumeMode"],[4,"MoveReason"],[4,"MatchMode"],[4,"TrackMatchMode"],[4,"MutateMode"],[3,"ExprUseVisitor"],[4,"SimplifiedType"],[3,"Edge"],[3,"NodeIndex"],[3,"EdgeIndex"],[3,"Direction"],[3,"Graph"],[3,"DepthFirstTraversal"],[3,"IntrinsicCheckingVisitor"],[3,"TransmuteRestriction"],[3,"Bivariate"],[3,"Rc"],[3,"TraitRef"],[3,"ProjectionPredicate"],[3,"FnSig"],[3,"CombineFields"],[3,"Generalizer"],[3,"Equate"],[3,"InferCtxt"],[3,"Binder"],[3,"Glb"],[3,"Lub"],[4,"Node"],[4,"Edge"],[3,"ConstraintGraph"],[4,"Constraint"],[4,"GenericKind"],[3,"TwoRegions"],[4,"UndoLogEntry"],[4,"CombineMapType"],[4,"RegionResolutionError"],[3,"SameRegions"],[3,"RegionSnapshot"],[3,"RegionVarBindings"],[4,"Classification"],[4,"Verify"],[4,"VarValue"],[3,"RegionAndOrigin"],[3,"OpportunisticTypeResolver"],[3,"FullTypeResolver"],[3,"TypeFreshener"],[3,"Sub"],[4,"RelationDir"],[3,"TypeVariableTable"],[3,"Delegate"],[4,"VarValue"],[3,"UnificationTable"],[3,"Delegate"],[3,"IntVid"],[4,"IntVarValue"],[3,"FloatVid"],[4,"FloatTy"],[4,"TypeOrigin"],[4,"ValuePairs"],[3,"TypeTrace"],[4,"SubregionOrigin"],[4,"LateBoundRegionConversionTime"],[4,"RegionVariableOrigin"],[4,"fixup_err"],[4,"Result"],[4,"LangItem"],[3,"LanguageItems"],[3,"LanguageItemCollector"],[3,"Variable"],[3,"LiveNode"],[4,"LiveNodeKind"],[3,"IrMaps"],[3,"LocalInfo"],[4,"VarKind"],[3,"Liveness"],[3,"Users"],[4,"categorization"],[3,"Upvar"],[4,"PointerKind"],[4,"InteriorKind"],[4,"FieldName"],[4,"InteriorOffsetKind"],[4,"ElementKind"],[4,"MutabilityCategory"],[4,"Note"],[3,"cmt_"],[3,"Expr"],[3,"Pat"],[3,"MemCategorizationContext"],[4,"ClosureKind"],[4,"LastPrivate"],[4,"PrivateDep"],[4,"ImportUse"],[3,"ReachableContext"],[3,"BlockRemainder"],[4,"InnermostDeclaringBlock"],[3,"DeclaringStatementContext"],[4,"InnermostEnclosingExpr"],[3,"Context"],[3,"RegionMaps"],[3,"RegionResolutionVisitor"],[4,"DefRegion"],[3,"LifetimeContext"],[4,"ScopeChain"],[3,"Annotator"],[3,"Index"],[3,"Checker"],[3,"Substs"],[4,"RegionSubsts"],[4,"ParamSpace"],[3,"VecPerParamSpace"],[3,"EnumeratedItems"],[3,"SubstFolder"],[3,"RegionObligation"],[3,"FulfillmentContext"],[3,"MismatchedProjectionTypes"],[4,"ProjectionTyCandidate"],[3,"AssociatedTypeNormalizer"],[3,"Normalized"],[4,"ProjectionTyError"],[4,"MethodViolationCode"],[4,"ObjectSafetyViolation"],[3,"SelectionCache"],[4,"MethodMatchedData"],[4,"SelectionCandidate"],[4,"EvaluationResult"],[3,"SelectionContext"],[3,"TraitObligationStack"],[4,"MethodMatchResult"],[3,"Elaborator"],[3,"FilterToTraits"],[3,"VtableImplData"],[3,"VtableObjectData"],[3,"Obligation"],[4,"Vtable"],[3,"VtableBuiltinData"],[3,"VtableDefaultImplData"],[4,"SelectionError"],[3,"FulfillmentError"],[4,"FulfillmentErrorCode"],[3,"ObligationCause"],[4,"ObligationCauseCode"],[3,"DerivedObligationCause"],[3,"field"],[4,"ImplOrTraitItemContainer"],[4,"ImplOrTraitItem"],[4,"ImplOrTraitItemId"],[3,"Method"],[3,"AssociatedType"],[3,"mt"],[3,"field_ty"],[3,"creader_cache_key"],[3,"ItemVariances"],[4,"Variance"],[4,"AutoAdjustment"],[4,"UnsizeKind"],[3,"AutoDerefRef"],[4,"AutoRef"],[3,"param_index"],[3,"MethodParam"],[3,"MethodObject"],[3,"MethodCallee"],[3,"MethodCall"],[4,"ExprAdjustment"],[4,"vtable_origin"],[3,"CtxtArenas"],[3,"TypeFlags"],[3,"ctxt"],[3,"TyS"],[3,"InternedTy"],[3,"BareFnTy"],[3,"ClosureTy"],[4,"FnOutput"],[3,"ParamTy"],[3,"DebruijnIndex"],[3,"UpvarId"],[4,"BorrowKind"],[4,"sty"],[3,"TyTrait"],[4,"terr_vstore_kind"],[3,"expected_found"],[4,"type_err"],[3,"ParamBounds"],[3,"ExistentialBounds"],[4,"BuiltinBound"],[3,"TyVid"],[3,"RegionVid"],[4,"InferTy"],[4,"UnconstrainedNumeric"],[4,"InferRegion"],[4,"ObjectLifetimeDefault"],[3,"TypeParameterDef"],[3,"RegionParameterDef"],[3,"Generics"],[3,"GenericPredicates"],[4,"Predicate"],[3,"TraitPredicate"],[3,"EquatePredicate"],[3,"OutlivesPredicate"],[3,"ProjectionTy"],[3,"InstantiatedPredicates"],[3,"ParameterEnvironment"],[3,"TypeScheme"],[3,"ItemSubsts"],[3,"TypeContents"],[4,"Representability"],[3,"VariantInfo"],[4,"DtorKind"],[3,"ClosureUpvar"],[4,"ExplicitSelfCategory"],[3,"Vec"],[3,"Box"],[3,"OwnedSlice"],[3,"EnumSet"],[3,"BottomUpFolder"],[3,"RegionFolder"],[3,"RegionEraser"],[3,"TypeWalker"],[3,"Context"],[4,"astencode_tag"],[3,"LinkMeta"],[4,"DefIdSource"],[3,"entry"],[3,"EncodeVisitor"],[3,"ImplVisitor"],[4,"Family"],[4,"DefLike"],[3,"CrateDep"],[3,"CrateReader"],[4,"PMDSource"],[4,"LinkagePreference"],[4,"NativeLibraryKind"],[3,"CrateSource"],[3,"CStore"],[3,"crate_metadata"],[4,"MetadataBlob"],[3,"Context"],[3,"ArchiveMetadata"],[3,"FileSearch"],[3,"MacroLoader"],[4,"OptLevel"],[4,"DebugInfoLevel"],[4,"OutputType"],[3,"Options"],[4,"UnstableFeatures"],[4,"PrintRequest"],[4,"Input"],[3,"OutputFilenames"],[4,"EntryFnType"],[4,"CrateType"],[4,"Passes"],[3,"CodegenOptions"],[3,"DebuggingOptions"],[4,"OptionStability"],[3,"RustcOptGroup"],[3,"SearchPaths"],[4,"PathKind"],[3,"Iter"],[3,"Session"],[3,"Registry"],[3,"RegistrarFinder"],[3,"LintId"],[4,"Level"],[4,"LintSource"],[3,"HardwiredLints"],[3,"LintStore"],[3,"Context"],[3,"GatherNodeLevels"],[3,"ErrorReported"],[3,"Indenter"],[3,"LoopQueryVisitor"],[3,"BlockQueryVisitor"],[3,"P"],[3,"TraitDef"],[4,"TraitItem"],[3,"Path"],[3,"Ty"],[3,"Item"],[3,"Lifetime"],[3,"Spanned"],[4,"ExplicitSelf_"],[4,"Visibility"],[4,"Abi"],[4,"Mutability"],[4,"IntTy"],[4,"UintTy"],[3,"HashMap"],[3,"FnvHasher"],[3,"SnapshotVec"],[3,"FixedBuffer64"],[3,"Sha256"],[3,"ArchiveRO"],[4,"OptimizationDiagnosticKind"],[4,"Diagnostic"],[4,"CallConv"],[4,"DiagnosticSeverity"],[3,"Attribute"],[4,"OtherAttribute"],[4,"SpecialAttribute"],[3,"AttrBuilder"],[4,"TypeKind"],[4,"CodeGenOptLevel"],[4,"RelocMode"],[3,"TargetData"],[3,"ObjectFile"],[3,"SectionIter"],[8,"LintPass"],[3,"ctxt"],[4,"InlinedItemRef"],[3,"EncodeParams"],[3,"ImportedFileMap"],[3,"MethodInfo"],[4,"FoundAst"],[3,"Library"],[3,"CratePaths"],[4,"FileMatch"],[8,"vtable_decoder_helpers"],[3,"CFGEdgeData"],[8,"BitwiseOperator"],[8,"DataFlowOperator"],[3,"Export"],[8,"Delegate"],[3,"Node"],[8,"Combine"],[8,"Combineable"],[8,"ErrorReporting"],[8,"Resolvable"],[8,"LatticeDir"],[8,"UnifyKey"],[3,"Node"],[8,"SimplyUnifiable"],[8,"InferCtxtMethodsForSimplyUnifiableTypes"],[4,"deref_kind"],[8,"ast_node"],[8,"Typer"],[4,"InteriorSafety"],[4,"AliasableReason"],[3,"SeparateVecsPerParamSpace"],[8,"Subst"],[4,"OrphanCheckErr"],[3,"CrateAnalysis"],[3,"CommonTypes"],[8,"ToPolyTraitRef"],[8,"AsPredicate"],[8,"ClosureTyper"],[4,"ExprKind"],[4,"CopyImplementationError"],[8,"RegionEscape"],[8,"HasProjectionTypes"],[8,"ReferencesError"],[8,"TypeFoldable"],[8,"TypeFolder"],[3,"Config"],[8,"Repr"],[8,"UserString"],[4,"UndoLog"],[8,"SnapshotVecDelegate"],[8,"Digest"],[3,"TempDir"],[4,"Arch"],[3,"Target"],[3,"TargetOptions"]]};
searchIndex['rustc_resolve'] = {"items":[[0,"","rustc_resolve",""],[3,"DefModifiers","",""],[3,"CrateMap","",""],[12,"def_map","","",0],[12,"freevars","","",0],[12,"export_map","","",0],[12,"trait_map","","",0],[12,"external_exports","","",0],[12,"glob_map","","",0],[4,"MakeGlobMap","",""],[13,"Yes","","",1],[13,"No","","",1],[5,"resolve_crate","","Entry point to crate resolution."],[0,"diagnostics","",""],[7,"DIAGNOSTICS","rustc_resolve::diagnostics",""],[17,"PUBLIC","rustc_resolve",""],[17,"IMPORTABLE","",""],[11,"hash","","",2],[11,"cmp","","",2],[11,"partial_cmp","","",2],[11,"lt","","",2],[11,"le","","",2],[11,"gt","","",2],[11,"ge","","",2],[11,"clone","","",2],[11,"eq","","",2],[11,"ne","","",2],[11,"fmt","","",2],[11,"empty","","Returns an empty set of flags.",2],[11,"all","","Returns the set containing all flags.",2],[11,"bits","","Returns the raw value of the flags currently stored.",2],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",2],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",2],[11,"is_empty","","Returns `true` if no flags are currently stored.",2],[11,"is_all","","Returns `true` if all flags are currently set.",2],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",2],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",2],[11,"insert","","Inserts the specified flags in-place.",2],[11,"remove","","Removes the specified flags in-place.",2],[11,"toggle","","Toggles the specified flags in-place.",2],[6,"Output","",""],[11,"bitor","","Returns the union of the two sets of flags.",2],[6,"Output","",""],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",2],[6,"Output","",""],[11,"bitand","","Returns the intersection between the two sets of flags.",2],[6,"Output","",""],[11,"sub","","Returns the set difference of the two sets of flags.",2],[6,"Output","",""],[11,"not","","Returns the complement of this set of flags.",2],[11,"eq","","",1],[11,"ne","","",1]],"paths":[[3,"CrateMap"],[4,"MakeGlobMap"],[3,"DefModifiers"]]};
searchIndex['rustc_borrowck'] = {"items":[[0,"","rustc_borrowck",""],[3,"FnPartsWithCFG","","This and a `ty::ctxt` is all you need to run the dataflow analyses\nused in the borrow checker."],[12,"fn_parts","","",0],[12,"cfg","","",0],[5,"check_crate","",""],[5,"build_borrowck_dataflow_data_for_fn","","Accessor for introspective clients inspecting `AnalysisData` and\nthe `BorrowckCtxt` itself , e.g. the flowgraph visualizer."],[11,"from_fn_like","","",0],[0,"graphviz","","This module provides linkage between rustc::middle::graph and\nlibgraphviz traits, specialized to attaching borrowck analysis\ndata to rendered labels."],[11,"open","rustc_back::archive","Opens an existing static archive",1],[11,"remove_file","","Removes a file from this archive",1],[11,"files","","Lists all files in an archive",1],[11,"extend","","Creates an `ArchiveBuilder` for adding files to this archive.",1],[11,"create","","Create a new static archive, ready for adding files.",2],[11,"add_native_library","","Adds all of the contents of a native library to this archive. This will\nsearch in the relevant locations for a library named `name`.",2],[11,"add_rlib","","Adds all of the contents of the rlib at the specified path to this\narchive.",2],[11,"add_file","","Adds an arbitrary file to this archive",2],[11,"update_symbols","","Indicate that the next call to `build` should updates all symbols in\nthe archive (run 'ar s' over it).",2],[11,"build","","Combine the provided files, rlibs, and native libraries into a single\n`Archive`.",2],[11,"fmt","rustc_back::svh","",3],[11,"eq","","",3],[11,"ne","","",3],[11,"clone","","",3],[11,"new","","",3],[11,"as_str","","",3],[11,"calculate","","",3],[11,"fmt","","",3],[11,"hash","rustc_back::svh::svh_visitor","",4],[11,"hash","","",5],[11,"hash","","",6],[11,"get_content","syntax::ast","",7],[11,"get_content","","",8],[11,"visit_mac","rustc_back::svh::svh_visitor","",9],[11,"visit_struct_def","","",9],[11,"visit_variant","","",9],[11,"visit_opt_lifetime_ref","","",9],[11,"visit_ident","","",9],[11,"visit_lifetime_ref","","",9],[11,"visit_lifetime_def","","",9],[11,"visit_expr","","",9],[11,"visit_stmt","","",9],[11,"visit_foreign_item","","",9],[11,"visit_item","","",9],[11,"visit_mod","","",9],[11,"visit_decl","","",9],[11,"visit_ty","","",9],[11,"visit_generics","","",9],[11,"visit_fn","","",9],[11,"visit_ty_method","","",9],[11,"visit_trait_item","","",9],[11,"visit_struct_field","","",9],[11,"visit_explicit_self","","",9],[11,"visit_path","","",9],[11,"visit_block","","",9],[11,"visit_pat","","",9],[11,"visit_local","","",9],[11,"visit_arm","","",9],[11,"tr_id","rustc::middle::astencode","Translates an internal id, meaning a node id that is known to refer to some part of the\nitem currently being inlined, such as a local variable or argument.  All naked node-ids\nthat appear in types have this property, since if something might refer to an external item\nwe would use a def-id to allow for the possibility that the item resides in another crate.",10],[11,"tr_def_id","","Translates an EXTERNAL def-id, converting the crate number from the one used in the encoded\ndata to the current crate numbers..  By external, I mean that it be translated to a\nreference to the item in its original crate, as opposed to being translated to a reference\nto the inlined version of the item.  This is typically, but not always, what you want,\nbecause most def-ids refer to external things like types or other fns that may or may not\nbe inlined.  Note that even when the inlined function is referencing itself recursively, we\nwould want `tr_def_id` for that reference--- conceptually the function calls the original,\nnon-inlined version, and trans deals with linking that recursive call to the inlined copy.",10],[11,"tr_intern_def_id","","Translates an INTERNAL def-id, meaning a def-id that is\nknown to refer to some part of the item currently being\ninlined.  In that case, we want to convert the def-id to\nrefer to the current crate and to the new, inlined node-id.",10],[11,"tr_span","","Translates a `Span` from an extern crate to the corresponding `Span`\nwithin the local crate's codemap. `creader::import_codemap()` will\nalready have allocated any additionally needed FileMaps in the local\ncodemap as a side-effect of creating the crate_metadata's\n`codemap_import_info`.",10],[11,"tr_intern","syntax::ast","",11],[11,"tr","","",11],[11,"tr","core::option","",12],[11,"tr","syntax::codemap","",13],[11,"fold_block","rustc::middle::astencode","",14],[11,"tr","rustc::middle::def","",15],[11,"tr","rustc::middle::ty","",16],[11,"tr","","",17],[11,"tr","rustc::middle::region","",18],[11,"tr","","",19],[11,"tr","rustc::middle::ty","",20],[11,"read_freevar_entry","rbml::reader","",21],[11,"read_capture_mode","","",21],[11,"tr","rustc::middle::ty","",22],[11,"tr","","",23],[11,"tr","","",24],[11,"read_method_callee","rbml::reader","",21],[11,"tr","rustc::middle::ty","",25],[11,"read_vec_per_param_space","rbml::reader","",21],[11,"read_vtable_res_with_key","","",21],[11,"read_vtable_res","","",21],[11,"read_vtable_param_res","","",21],[11,"read_vtable_origin","","",21],[11,"ty_str_ctxt","rustc::metadata::encoder","",26],[11,"emit_closure_type","rbml::writer","",27],[11,"emit_method_origin","","",27],[11,"emit_ty","","",27],[11,"emit_tys","","",27],[11,"emit_trait_ref","","",27],[11,"emit_type_param_def","","",27],[11,"emit_predicate","","",27],[11,"emit_type_scheme","","",27],[11,"emit_existential_bounds","","",27],[11,"emit_builtin_bounds","","",27],[11,"emit_substs","","",27],[11,"emit_auto_adjustment","","",27],[11,"emit_autoref","","",27],[11,"emit_auto_deref_ref","","",27],[11,"emit_unsize_kind","","",27],[11,"tag","","",27],[11,"id","","",27],[11,"visit_id","rustc::middle::astencode","",28],[11,"as_int","rbml","",29],[11,"opt_child","","",29],[11,"read_ty_nodcx","rbml::reader","",21],[11,"read_tys_nodcx","","",21],[11,"read_substs_nodcx","","",21],[11,"read_method_origin","","",21],[11,"read_ty","","",21],[11,"read_tys","","",21],[11,"read_trait_ref","","",21],[11,"read_poly_trait_ref","","",21],[11,"read_type_param_def","","",21],[11,"read_predicate","","",21],[11,"read_type_scheme","","",21],[11,"read_existential_bounds","","",21],[11,"read_substs","","",21],[11,"read_auto_adjustment","","",21],[11,"read_auto_deref_ref","","",21],[11,"read_autoref","","",21],[11,"read_unsize_kind","","",21],[11,"read_closure_kind","","",21],[11,"read_closure_ty","","",21],[11,"convert_def_id","","Converts a def-id that appears in a type.  The correct\ntranslation will depend on what kind of def-id this is.\nThis is a subtle point: type definitions are not\ninlined into the current crate, so if the def-id names\na nominal type or type alias, then it should be\ntranslated to refer to the source crate.",21],[11,"graph_id","rustc::middle::cfg::graphviz","",30],[11,"node_id","","",30],[11,"node_label","","",30],[11,"edge_label","","",30],[11,"nodes","","",30],[11,"edges","","",30],[11,"source","","",30],[11,"target","","",30],[11,"eq","rustc::middle::cfg","",31],[11,"ne","","",31],[11,"id","","",31],[11,"new","","",32],[11,"node_is_reachable","","",32],[11,"hash","rustc::middle::check_const","",33],[11,"cmp","","",33],[11,"partial_cmp","","",33],[11,"lt","","",33],[11,"le","","",33],[11,"gt","","",33],[11,"ge","","",33],[11,"clone","","",33],[11,"eq","","",33],[11,"ne","","",33],[11,"decode","","",33],[11,"encode","","",33],[11,"empty","","Returns an empty set of flags.",33],[11,"all","","Returns the set containing all flags.",33],[11,"bits","","Returns the raw value of the flags currently stored.",33],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",33],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",33],[11,"is_empty","","Returns `true` if no flags are currently stored.",33],[11,"is_all","","Returns `true` if all flags are currently set.",33],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",33],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",33],[11,"insert","","Inserts the specified flags in-place.",33],[11,"remove","","Removes the specified flags in-place.",33],[11,"toggle","","Toggles the specified flags in-place.",33],[6,"Output","rustc_borrowck::graphviz",""],[11,"bitor","rustc::middle::check_const","Returns the union of the two sets of flags.",33],[6,"Output","rustc_borrowck::graphviz",""],[11,"bitxor","rustc::middle::check_const","Returns the left flags, but with all the right flags toggled.",33],[6,"Output","rustc_borrowck::graphviz",""],[11,"bitand","rustc::middle::check_const","Returns the intersection between the two sets of flags.",33],[6,"Output","rustc_borrowck::graphviz",""],[11,"sub","rustc::middle::check_const","Returns the set difference of the two sets of flags.",33],[6,"Output","rustc_borrowck::graphviz",""],[11,"not","rustc::middle::check_const","Returns the complement of this set of flags.",33],[11,"eq","","",34],[11,"ne","","",34],[11,"visit_item","","",35],[11,"visit_fn","","",35],[11,"visit_pat","","",35],[11,"visit_expr","","",35],[11,"consume","","",35],[11,"borrow","","",35],[11,"decl_without_init","","",35],[11,"mutate","","",35],[11,"matched_pat","","",35],[11,"consume_pat","","",35],[11,"visit_item","rustc::middle::check_static_recursion","",36],[11,"visit_item","","",37],[11,"visit_expr","","",37],[11,"eq","rustc::middle::check_loop","",38],[11,"ne","","",38],[11,"clone","","",38],[11,"visit_item","","",39],[11,"visit_expr","","",39],[11,"fmt","rustc::middle::check_match","",40],[11,"from_iter","","",40],[11,"eq","","",41],[11,"ne","","",41],[11,"clone","","",41],[11,"eq","","",42],[11,"ne","","",42],[11,"clone","","",42],[11,"visit_expr","","",43],[11,"visit_local","","",43],[11,"visit_fn","","",43],[11,"new","","",44],[11,"visit_id","","",45],[11,"fold_pat","","",44],[11,"matched_pat","","",46],[11,"consume","","",46],[11,"consume_pat","","",46],[11,"borrow","","",46],[11,"decl_without_init","","",46],[11,"mutate","","",46],[11,"visit_pat","","",47],[11,"visit_fn","rustc::middle::check_rvalues","",48],[11,"consume","","",49],[11,"matched_pat","","",49],[11,"consume_pat","","",49],[11,"borrow","","",49],[11,"decl_without_init","","",49],[11,"mutate","","",49],[11,"eq","rustc::middle::const_eval","",50],[11,"ne","","",50],[11,"clone","","",50],[11,"clone","","",51],[11,"clone","","",52],[11,"description","","",51],[11,"fmt","rustc::middle::dataflow","",53],[11,"clone","","",54],[11,"pre","","",54],[11,"new","","",54],[11,"add_gen","","Indicates that `id` generates `bit`",54],[11,"add_kill","","Indicates that `id` kills `bit`",54],[11,"each_bit_on_entry","","Iterates through each bit that is set on entry to `id`.\nOnly useful after `propagate()` has been called.",54],[11,"each_bit_for_node","","Iterates through each bit that is set on entry/exit to `cfgidx`.\nOnly useful after `propagate()` has been called.",54],[11,"each_gen_bit","","Iterates through each bit in the gen set for `id`.",54],[11,"add_kills_from_flow_exits","","Whenever you have a `break` or `continue` statement, flow\nexits through any number of enclosing scopes on its way to\nthe new destination. This function infers the kill bits of\nthose control operators based on the kill bits associated\nwith those scopes.",54],[11,"propagate","","Performs the data flow analysis.",54],[11,"join","","",55],[11,"join","","",56],[11,"visit_struct_def","rustc::middle::dead","",57],[11,"visit_expr","","",57],[11,"visit_pat","","",57],[11,"visit_path","","",57],[11,"visit_item","","",57],[11,"visit_item","","",58],[11,"visit_fn","","",58],[11,"visit_item","","",59],[11,"visit_foreign_item","","",59],[11,"visit_fn","","",59],[11,"visit_struct_field","","",59],[11,"visit_trait_item","","",59],[11,"fmt","rustc::middle::def","",15],[11,"hash","","",15],[11,"decode","","",15],[11,"encode","","",15],[11,"eq","","",15],[11,"ne","","",15],[11,"clone","","",15],[11,"fmt","","",60],[11,"full_def","","Get the definition, if fully resolved, otherwise panic.",60],[11,"def_id","","Get the DefId, if fully resolved, otherwise panic.",60],[11,"fmt","","",61],[11,"hash","","",61],[11,"decode","","",61],[11,"encode","","",61],[11,"eq","","",61],[11,"ne","","",61],[11,"clone","","",61],[11,"map","","",61],[11,"local_node_id","","",15],[11,"def_id","","",15],[11,"variant_def_ids","","",15],[11,"eq","rustc::middle::effect","",62],[11,"ne","","",62],[11,"visit_fn","","",63],[11,"visit_block","","",63],[11,"visit_expr","","",63],[11,"visit_item","rustc::middle::entry","",64],[11,"fmt","rustc::middle::expr_use_visitor","",65],[11,"eq","","",65],[11,"ne","","",65],[11,"fmt","","",66],[11,"eq","","",66],[11,"ne","","",66],[11,"fmt","","",67],[11,"eq","","",67],[11,"ne","","",67],[11,"fmt","","",68],[11,"eq","","",68],[11,"ne","","",68],[11,"fmt","","",69],[11,"eq","","",69],[11,"ne","","",69],[11,"fmt","","",70],[11,"eq","","",70],[11,"ne","","",70],[11,"new","","",71],[11,"walk_fn","","",71],[11,"consume_expr","","",71],[11,"walk_expr","","",71],[11,"hash","rustc::middle::fast_reject","",72],[11,"eq","","",72],[11,"ne","","",72],[11,"clone","","",72],[11,"fmt","rustc::middle::graph","",73],[11,"fmt","","",74],[11,"eq","","",74],[11,"ne","","",74],[11,"clone","","",74],[11,"fmt","","",75],[11,"eq","","",75],[11,"ne","","",75],[11,"fmt","","",76],[11,"node_id","","Returns unique id (unique with respect to the graph holding associated node).",74],[11,"edge_id","","Returns unique id (unique with respect to the graph holding associated edge).",75],[11,"new","","",77],[11,"with_capacity","","",77],[11,"all_nodes","","",77],[11,"all_edges","","",77],[11,"next_node_index","","",77],[11,"add_node","","",77],[11,"mut_node_data","","",77],[11,"node_data","","",77],[11,"node","","",77],[11,"next_edge_index","","",77],[11,"add_edge","","",77],[11,"mut_edge_data","","",77],[11,"edge_data","","",77],[11,"edge","","",77],[11,"first_adjacent","","Accesses the index of the first edge adjacent to `node`.\nThis is useful if you wish to modify the graph while walking\nthe linked list of edges.",77],[11,"next_adjacent","","Accesses the next edge in a given direction.\nThis is useful if you wish to modify the graph while walking\nthe linked list of edges.",77],[11,"each_node","","Iterates over all edges defined in the graph.",77],[11,"each_edge","","Iterates over all edges defined in the graph",77],[11,"each_outgoing_edge","","Iterates over all outgoing edges from the node `from`",77],[11,"each_incoming_edge","","Iterates over all incoming edges to the node `target`",77],[11,"each_adjacent_edge","","Iterates over all edges adjacent to the node `node`\nin the direction `dir` (either `Outgoing` or `Incoming)",77],[11,"iterate_until_fixed_point","","",77],[11,"depth_traverse","","",77],[6,"Item","rustc_borrowck::graphviz",""],[11,"next","rustc::middle::graph","",78],[11,"source","","",73],[11,"target","","",73],[11,"visit_fn","rustc::middle::intrinsicck","",79],[11,"visit_expr","","",79],[11,"repr","rustc::middle::ty","",80],[11,"tag","rustc::middle::infer::bivariate","",81],[11,"fields","","",81],[11,"tys_with_variance","","",81],[11,"regions_with_variance","","",81],[11,"regions","","",81],[11,"mts","","",81],[11,"unsafeties","","",81],[11,"builtin_bounds","","",81],[11,"tys","","",81],[11,"binders","","",81],[11,"combine","alloc::rc","",82],[11,"combine","rustc::middle::ty","",83],[11,"combine","","",84],[11,"combine","","",85],[11,"clone","rustc::middle::infer::combine","",86],[11,"switch_expected","","",86],[11,"instantiate","","",86],[11,"tcx","","",87],[11,"fold_ty","","",87],[11,"fold_region","","",87],[11,"tag","rustc::middle::infer::equate","",88],[11,"fields","","",88],[11,"tys_with_variance","","",88],[11,"regions_with_variance","","",88],[11,"regions","","",88],[11,"mts","","",88],[11,"unsafeties","","",88],[11,"builtin_bounds","","",88],[11,"tys","","",88],[11,"binders","","",88],[11,"report_region_errors","rustc::middle::infer","",89],[11,"process_errors","","",89],[11,"report_type_error","","",89],[11,"report_and_explain_type_error","","",89],[11,"values_str","","Returns a string of the form \"expected `{}`, found `{}`\", or None if this is a derived\nerror.",89],[11,"expected_found_str","","",89],[11,"report_generic_bound_failure","","",89],[11,"report_concrete_failure","","",89],[11,"report_sub_sup_conflict","","",89],[11,"report_sup_sup_conflict","","",89],[11,"report_processed_errors","","",89],[11,"give_suggestion","","",89],[11,"give_expl_lifetime_param","","",89],[11,"report_inference_failure","","",89],[11,"note_region_origin","","",89],[11,"resolve","alloc::rc","",82],[11,"contains_error","","",82],[11,"resolve","rustc::middle::ty","",90],[11,"contains_error","","",90],[11,"tag","rustc::middle::infer::glb","",91],[11,"fields","","",91],[11,"tys_with_variance","","",91],[11,"regions_with_variance","","",91],[11,"mts","","",91],[11,"unsafeties","","",91],[11,"builtin_bounds","","",91],[11,"regions","","",91],[11,"tys","","",91],[11,"binders","","",91],[11,"tainted_regions","rustc::middle::infer","",89],[11,"region_vars_confined_to_snapshot","","Returns the set of region variables that do not affect any\ntypes/regions which existed before `snapshot` was\nstarted. This is used in the sub/lub/glb computations. The\nidea here is that when we are computing lub/glb of two\nregions, we sometimes create intermediate region variables.\nThose region variables may touch some of the skolemized or\nother \"forbidden\" regions we created to replace bound\nregions, but they don't really represent an \"external\"\nconstraint.",89],[11,"relate_bound","rustc::middle::infer::lub","",92],[11,"relate_bound","rustc::middle::infer::glb","",91],[11,"tag","rustc::middle::infer::lub","",92],[11,"fields","","",92],[11,"tys_with_variance","","",92],[11,"regions_with_variance","","",92],[11,"mts","","",92],[11,"unsafeties","","",92],[11,"builtin_bounds","","",92],[11,"regions","","",92],[11,"tys","","",92],[11,"binders","","",92],[11,"fmt","rustc::middle::infer::region_inference::graphviz","",93],[11,"eq","","",93],[11,"ne","","",93],[11,"hash","","",93],[11,"clone","","",93],[11,"fmt","","",94],[11,"eq","","",94],[11,"ne","","",94],[11,"clone","","",94],[11,"graph_id","","",95],[11,"node_id","","",95],[11,"node_label","","",95],[11,"edge_label","","",95],[11,"nodes","","",95],[11,"edges","","",95],[11,"source","","",95],[11,"target","","",95],[11,"fmt","rustc::middle::infer::region_inference","",96],[11,"hash","","",96],[11,"eq","","",96],[11,"ne","","",96],[11,"clone","","",96],[11,"eq","","",97],[11,"ne","","",97],[11,"fmt","","",97],[11,"clone","","",97],[11,"hash","","",98],[11,"eq","","",98],[11,"ne","","",98],[11,"eq","","",99],[11,"ne","","",99],[11,"eq","","",100],[11,"ne","","",100],[11,"fmt","","",101],[11,"clone","","",101],[11,"fmt","","",102],[11,"clone","","",102],[11,"contains","","",102],[11,"push","","",102],[11,"fmt","","",103],[11,"new","","",104],[11,"start_snapshot","","",104],[11,"commit","","",104],[11,"rollback_to","","",104],[11,"num_vars","","",104],[11,"new_region_var","","",104],[11,"new_skolemized","","Creates a new skolemized region. Skolemized regions are fresh\nregions used when performing higher-ranked computations. They\nmust be used in a very particular way and are never supposed\nto \"escape\" out into error messages or the code at large.",104],[11,"new_bound","","",104],[11,"add_given","","",104],[11,"make_eqregion","","",104],[11,"make_subregion","","",104],[11,"verify_generic_bound","","See `Verify::VerifyGenericBound`",104],[11,"lub_regions","","",104],[11,"glb_regions","","",104],[11,"resolve_var","","",104],[11,"combine_vars","","",104],[11,"vars_created_since_snapshot","","",104],[11,"tainted","","Computes all regions that have been related to `r0` in any way since the mark `mark` was\nmade---`r0` itself will be the first entry. This is used when checking whether skolemized\nregions are being improperly related to other regions.",104],[11,"resolve_regions","","This function performs the actual region resolution.  It must be\ncalled after all constraints have been added.  It performs a\nfixed-point iteration to find region values which satisfy all\nconstraints, assuming such values can be found; if they cannot,\nerrors are reported.",104],[11,"fmt","","",105],[11,"eq","","",105],[11,"ne","","",105],[11,"repr","","",96],[11,"repr","","",106],[11,"repr","","",107],[11,"repr","","",108],[11,"repr","","",97],[11,"user_string","","",97],[11,"to_ty","","",97],[11,"new","rustc::middle::infer::resolve","",109],[11,"tcx","","",109],[11,"fold_ty","","",109],[11,"tcx","","",110],[11,"fold_ty","","",110],[11,"fold_region","","",110],[11,"new","rustc::middle::infer::freshen","",111],[11,"tcx","","",111],[11,"fold_region","","",111],[11,"fold_ty","","",111],[11,"tag","rustc::middle::infer::sub","",112],[11,"fields","","",112],[11,"tys_with_variance","","",112],[11,"regions_with_variance","","",112],[11,"regions","","",112],[11,"mts","","",112],[11,"unsafeties","","",112],[11,"builtin_bounds","","",112],[11,"tys","","",112],[11,"binders","","",112],[11,"fmt","rustc::middle::infer::type_variable","",113],[11,"eq","","",113],[11,"ne","","",113],[11,"new","","",114],[11,"var_diverges","","",114],[11,"relate_vars","","Records that `a <: b`, `a :> b`, or `a == b`, depending on `dir`.",114],[11,"instantiate_and_push","","Instantiates `vid` with the type `ty` and then pushes an entry onto `stack` for each of the\nrelations of `vid` to other variables. The relations will have the form `(ty, dir, vid1)`\nwhere `vid1` is some other variable id.",114],[11,"new_var","","",114],[11,"probe","","",114],[11,"replace_if_possible","","",114],[11,"snapshot","","",114],[11,"rollback_to","","",114],[11,"commit","","",114],[11,"types_escaping_snapshot","","Find the set of type variables that existed *before* `s`\nbut which have only been unified since `s` started, and\nreturn the types with which they were unified. So if we had\na type variable `V0`, then we started the snapshot, then we\ncreated a type variable `V1`, unifed `V0` with `T0`, and\nunified `V1` with `T1`, this function would return `{T0}`.",114],[6,"Value","rustc_borrowck::graphviz",""],[6,"Undo","",""],[11,"reverse","rustc::middle::infer::type_variable","",115],[11,"fmt","rustc::middle::infer::unify","",116],[11,"clone","","",116],[11,"eq","","",116],[11,"ne","","",116],[11,"new","","",117],[11,"snapshot","","Starts a new snapshot. Each snapshot must be either\nrolled back or committed in a \"LIFO\" (stack) order.",117],[11,"rollback_to","","Reverses all changes since the last snapshot. Also\nremoves any keys that have been created since then.",117],[11,"commit","","Commits all changes since the last snapshot. Of course, they\ncan still be undone if there is a snapshot further out.",117],[11,"new_key","","",117],[11,"get","","Find the root node for `vid`. This uses the standard union-find algorithm with path\ncompression: http://en.wikipedia.org/wiki/Disjoint-set_data_structure",117],[11,"set","","Sets the value for `vid` to `new_value`. `vid` MUST be a root node! Also, we must be in the\nmiddle of a snapshot.",117],[11,"unify","","Either redirects node_a to node_b or vice versa, depending on the relative rank. Returns\nthe new root and rank. You should then update the value of the new root to something\nsuitable.",117],[6,"Value","rustc_borrowck::graphviz",""],[6,"Undo","",""],[11,"reverse","rustc::middle::infer::unify","",118],[11,"simple_vars","rustc::middle::infer","Unifies two simple keys. Because simple keys do not have any subtyping relationships, if\nboth keys have already been associated with a value, then those two values must be the\nsame.",89],[11,"simple_var_t","","Sets the value of the key `a_id` to `b`. Because simple keys do not have any subtyping\nrelationships, if `a_id` already has a value, it must be the same as `b`.",89],[11,"probe_var","","",89],[6,"Value","rustc_borrowck::graphviz",""],[11,"index","rustc::middle::ty","",119],[11,"from_index","","",119],[11,"unification_table","","",119],[11,"tag","","",119],[11,"to_type","","",120],[11,"to_type_err","","",120],[6,"Value","rustc_borrowck::graphviz",""],[11,"index","rustc::middle::ty","",121],[11,"from_index","","",121],[11,"unification_table","","",121],[11,"tag","","",121],[11,"to_type","syntax::ast","",122],[11,"to_type_err","","",122],[11,"fmt","rustc::middle::infer","",123],[11,"clone","","",123],[11,"fmt","","",124],[11,"clone","","",124],[11,"fmt","","",125],[11,"clone","","",125],[11,"fmt","","",126],[11,"clone","","",126],[11,"fmt","","",127],[11,"clone","","",127],[11,"fmt","","",128],[11,"clone","","",128],[11,"fmt","","",129],[11,"then","core::result","",130],[11,"to_ures","","",130],[11,"compare","","",130],[11,"freshen","rustc::middle::infer","",89],[11,"type_var_diverges","","",89],[11,"freshener","","",89],[11,"type_is_unconstrained_numeric","","",89],[11,"combine_fields","","",89],[11,"equate","","",89],[11,"sub","","",89],[11,"lub","","",89],[11,"commit_unconditionally","","Execute `f` and commit the bindings",89],[11,"commit_if_ok","","Execute `f` and commit the bindings if successful",89],[11,"commit_regions_if_ok","","Execute `f` and commit only the region bindings if successful.\nThe function f must be very careful not to leak any non-region\nvariables that get created.",89],[11,"try","","Execute `f`, unroll bindings on panic",89],[11,"probe","","Execute `f` then unroll any bindings it creates",89],[11,"add_given","","",89],[11,"sub_types","","",89],[11,"eq_types","","",89],[11,"sub_trait_refs","","",89],[11,"sub_poly_trait_refs","","",89],[11,"skolemize_late_bound_regions","","See `higher_ranked::skolemize_late_bound_regions`",89],[11,"leak_check","","See `higher_ranked::leak_check`",89],[11,"plug_leaks","","See `higher_ranked::plug_leaks`",89],[11,"equality_predicate","","",89],[11,"region_outlives_predicate","","",89],[11,"next_ty_var_id","","",89],[11,"next_ty_var","","",89],[11,"next_diverging_ty_var","","",89],[11,"next_ty_vars","","",89],[11,"next_int_var_id","","",89],[11,"next_float_var_id","","",89],[11,"next_region_var","","",89],[11,"region_vars_for_defs","","",89],[11,"fresh_substs_for_generics","","Given a set of generics defined on a type or impl, returns a substitution mapping each\ntype/region parameter to a fresh inference variable.",89],[11,"fresh_substs_for_trait","","Given a set of generics defined on a trait, returns a substitution mapping each output\ntype/region parameter to a fresh inference variable, and mapping the self type to\n`self_ty`.",89],[11,"fresh_bound_region","","",89],[11,"resolve_regions_and_report_errors","","",89],[11,"ty_to_string","","",89],[11,"tys_to_string","","",89],[11,"trait_ref_to_string","","",89],[11,"shallow_resolve","","",89],[11,"resolve_type_vars_if_possible","","Where possible, replaces type/int/float variables in\n`value` with their final value. Note that region variables\nare unaffected. If a type variable has not been unified, it\nis left as is.  This is an idempotent operation that does\nnot affect inference state in any way and so you can do it\nat will.",89],[11,"fully_resolve","","Attempts to resolve all type/region variables in\n`value`. Region inference must have been run already (e.g.,\nby calling `resolve_regions_and_report_errors`).  If some\nvariable was never unified, an `Err` results.",89],[11,"type_error_message_str","","",89],[11,"type_error_message_str_with_expected","","",89],[11,"type_error_message","","",89],[11,"report_mismatched_types","","",89],[11,"replace_late_bound_regions_with_fresh_var","","",89],[11,"verify_generic_bound","","See `verify_generic_bound` method in `region_inference`",89],[11,"can_equate","","",89],[11,"span","","",125],[11,"types","","",125],[11,"dummy","","",125],[11,"repr","","",125],[11,"span","","",123],[11,"repr","","",123],[11,"span","","",126],[11,"repr","","",126],[11,"span","","",128],[11,"repr","","",128],[11,"hash","rustc::middle::lang_items","",131],[11,"eq","","",131],[11,"ne","","",131],[11,"from_i64","","",131],[11,"from_u64","","",131],[11,"new","","",132],[11,"items","","",132],[11,"item_name","","",132],[11,"require","","",132],[11,"from_builtin_kind","","",132],[11,"to_builtin_kind","","",132],[11,"fn_trait_kind","","",132],[11,"send_trait","","",132],[11,"sized_trait","","",132],[11,"copy_trait","","",132],[11,"sync_trait","","",132],[11,"drop_trait","","",132],[11,"add_trait","","",132],[11,"sub_trait","","",132],[11,"mul_trait","","",132],[11,"div_trait","","",132],[11,"rem_trait","","",132],[11,"neg_trait","","",132],[11,"not_trait","","",132],[11,"bitxor_trait","","",132],[11,"bitand_trait","","",132],[11,"bitor_trait","","",132],[11,"shl_trait","","",132],[11,"shr_trait","","",132],[11,"index_trait","","",132],[11,"index_mut_trait","","",132],[11,"range_struct","","",132],[11,"range_from_struct","","",132],[11,"range_to_struct","","",132],[11,"range_full_struct","","",132],[11,"unsafe_cell_type","","",132],[11,"deref_trait","","",132],[11,"deref_mut_trait","","",132],[11,"fn_trait","","",132],[11,"fn_mut_trait","","",132],[11,"fn_once_trait","","",132],[11,"eq_trait","","",132],[11,"ord_trait","","",132],[11,"str_eq_fn","","",132],[11,"panic_fn","","",132],[11,"panic_bounds_check_fn","","",132],[11,"panic_fmt","","",132],[11,"exchange_malloc_fn","","",132],[11,"exchange_free_fn","","",132],[11,"strdup_uniq_fn","","",132],[11,"start_fn","","",132],[11,"ty_desc","","",132],[11,"opaque","","",132],[11,"eh_personality","","",132],[11,"exchange_heap","","",132],[11,"owned_box","","",132],[11,"phantom_fn","","",132],[11,"phantom_data","","",132],[11,"covariant_type","","",132],[11,"contravariant_type","","",132],[11,"invariant_type","","",132],[11,"covariant_lifetime","","",132],[11,"contravariant_lifetime","","",132],[11,"invariant_lifetime","","",132],[11,"no_copy_bound","","",132],[11,"managed_bound","","",132],[11,"non_zero","","",132],[11,"stack_exhausted","","",132],[11,"debug_trait","","",132],[11,"visit_item","","",133],[11,"new","","",133],[11,"collect_item","","",133],[11,"collect_local_language_items","","",133],[11,"collect_external_language_items","","",133],[11,"collect","","",133],[11,"eq","rustc::middle::liveness","",134],[11,"ne","","",134],[11,"eq","","",135],[11,"ne","","",135],[11,"clone","","",135],[11,"fmt","","",136],[11,"eq","","",136],[11,"ne","","",136],[11,"visit_fn","","",137],[11,"visit_local","","",137],[11,"visit_expr","","",137],[11,"visit_arm","","",137],[11,"fmt","","",135],[11,"fmt","","",134],[11,"fmt","","",138],[11,"fmt","","",139],[11,"visit_fn","","",140],[11,"visit_local","","",140],[11,"visit_expr","","",140],[11,"visit_arm","","",140],[11,"clone","","",141],[11,"fmt","rustc::middle::mem_categorization","",142],[11,"eq","","",142],[11,"ne","","",142],[11,"clone","","",142],[11,"fmt","","",143],[11,"eq","","",143],[11,"ne","","",143],[11,"clone","","",143],[11,"fmt","","",144],[11,"hash","","",144],[11,"eq","","",144],[11,"ne","","",144],[11,"clone","","",144],[11,"fmt","","",145],[11,"hash","","",145],[11,"eq","","",145],[11,"ne","","",145],[11,"clone","","",145],[11,"fmt","","",146],[11,"hash","","",146],[11,"eq","","",146],[11,"ne","","",146],[11,"clone","","",146],[11,"fmt","","",147],[11,"hash","","",147],[11,"eq","","",147],[11,"ne","","",147],[11,"clone","","",147],[11,"fmt","","",148],[11,"hash","","",148],[11,"eq","","",148],[11,"ne","","",148],[11,"clone","","",148],[11,"fmt","","",149],[11,"hash","","",149],[11,"eq","","",149],[11,"ne","","",149],[11,"clone","","",149],[11,"fmt","","",150],[11,"eq","","",150],[11,"ne","","",150],[11,"clone","","",150],[11,"fmt","","",151],[11,"eq","","",151],[11,"ne","","",151],[11,"clone","","",151],[11,"id","syntax::ast","",152],[11,"span","","",152],[11,"id","","",153],[11,"span","","",153],[11,"from_mutbl","rustc::middle::mem_categorization","",149],[11,"from_borrow_kind","","",149],[11,"from_pointer_kind","","",149],[11,"inherit","","",149],[11,"is_mutable","","",149],[11,"is_immutable","","",149],[11,"to_user_str","","",149],[11,"new","","",154],[11,"cat_expr","","",154],[11,"cat_expr_autoderefd","","",154],[11,"cat_expr_unadjusted","","",154],[11,"cat_def","","",154],[11,"cat_rvalue_node","","",154],[11,"cat_rvalue","","",154],[11,"cat_field","","",154],[11,"cat_tup_field","","",154],[11,"cat_index","","Creates a cmt for an indexing operation (`[]`).",154],[11,"cat_slice_pattern","","Given a pattern P like: `[_, ..Q, _]`, where `vec_cmt` is the cmt for `P`, `slice_pat` is\nthe pattern `Q`, returns:",154],[11,"cat_imm_interior","","",154],[11,"cat_downcast","","",154],[11,"cat_pattern","","",154],[11,"guarantor","","Returns `self` after stripping away any owned pointer derefs or\ninterior content. The return value is basically the `cmt` which\ndetermines how long the value in `self` remains live.",151],[11,"freely_aliasable","","Returns `Some(_)` if this lvalue represents a freely aliasable pointer type.",151],[11,"upvar","","",151],[11,"descriptive_string","","",151],[11,"repr","","",151],[11,"repr","","",142],[11,"repr","","",144],[11,"repr","","",145],[11,"repr","rustc::middle::ty","",155],[11,"repr","rustc::middle::mem_categorization","",143],[11,"user_string","","",143],[11,"fmt","rustc::middle::privacy","",156],[11,"fmt","","",157],[11,"fmt","","",158],[11,"eq","","",158],[11,"ne","","",158],[11,"or","","",156],[11,"visit_expr","rustc::middle::reachable","",159],[11,"visit_item","","",159],[11,"fmt","rustc::middle::region","",18],[11,"decode","","",18],[11,"encode","","",18],[11,"hash","","",18],[11,"cmp","","",18],[11,"partial_cmp","","",18],[11,"lt","","",18],[11,"le","","",18],[11,"gt","","",18],[11,"ge","","",18],[11,"eq","","",18],[11,"ne","","",18],[11,"clone","","",18],[11,"fmt","","",19],[11,"decode","","",19],[11,"encode","","",19],[11,"hash","","",19],[11,"cmp","","",19],[11,"partial_cmp","","",19],[11,"lt","","",19],[11,"le","","",19],[11,"gt","","",19],[11,"ge","","",19],[11,"eq","","",19],[11,"ne","","",19],[11,"clone","","",19],[11,"new","","",19],[11,"to_code_extent","","",19],[11,"fmt","","",160],[11,"decode","","",160],[11,"encode","","",160],[11,"hash","","",160],[11,"cmp","","",160],[11,"partial_cmp","","",160],[11,"lt","","",160],[11,"le","","",160],[11,"gt","","",160],[11,"ge","","",160],[11,"eq","","",160],[11,"ne","","",160],[11,"clone","","",160],[11,"from_node_id","","Creates a scope that represents the dynamic extent associated\nwith `node_id`.",18],[11,"node_id","","Returns a node id associated with this scope.",18],[11,"map_id","","Maps this scope to a potentially new one according to the\nNodeId transformer `f_id`.",18],[11,"span","","Returns the span of this CodeExtent.  Note that in general the\nreturned span may not correspond to the span of any node id in\nthe AST.",18],[11,"fmt","","",161],[11,"eq","","",161],[11,"ne","","",161],[11,"fmt","","",162],[11,"eq","","",162],[11,"ne","","",162],[11,"fmt","","",163],[11,"eq","","",163],[11,"ne","","",163],[11,"fmt","","",164],[11,"each_encl_scope","","",165],[11,"each_var_scope","","",165],[11,"each_encl_free_region","","",165],[11,"each_rvalue_scope","","",165],[11,"each_terminating_scope","","",165],[11,"relate_free_regions","","",165],[11,"record_encl_scope","","",165],[11,"record_var_scope","","",165],[11,"record_rvalue_scope","","",165],[11,"mark_as_terminating_scope","","Records that a scope is a TERMINATING SCOPE. Whenever we create automatic temporaries --\ne.g. by an expression like `a().f` -- they will be freed within the innermost terminating\nscope.",165],[11,"opt_encl_scope","","Returns the narrowest scope that encloses `id`, if any.",165],[11,"encl_scope","","Returns the narrowest scope that encloses `id`, if any.",165],[11,"var_scope","","Returns the lifetime of the local variable `var_id`",165],[11,"temporary_scope","","Returns the scope when temp created by expr_id will be cleaned up",165],[11,"var_region","","Returns the lifetime of the variable `id`.",165],[11,"scopes_intersect","","",165],[11,"is_subscope_of","","Returns true if `subscope` is equal to or is lexically nested inside `superscope` and false\notherwise.",165],[11,"sub_free_region","","Determines whether two free regions have a subregion relationship\nby walking the graph encoded in `free_region_map`.  Note that\nit is possible that `sub != sup` and `sub <= sup` and `sup <= sub`\n(that is, the user can give two different names to the same lifetime).",165],[11,"is_subregion_of","","Determines whether one region is a subregion of another.  This is intended to run *after\ninference* and sadly the logic is somewhat duplicated with the code in infer.rs.",165],[11,"nearest_common_ancestor","","Finds the nearest common ancestor (if any) of two scopes.  That is, finds the smallest\nscope which is greater than or equal to both `scope_a` and `scope_b`.",165],[11,"visit_block","","",166],[11,"visit_item","","",166],[11,"visit_fn","","",166],[11,"visit_arm","","",166],[11,"visit_pat","","",166],[11,"visit_stmt","","",166],[11,"visit_expr","","",166],[11,"visit_local","","",166],[11,"fmt","rustc::middle::resolve_lifetime","",167],[11,"decode","","",167],[11,"encode","","",167],[11,"hash","","",167],[11,"eq","","",167],[11,"ne","","",167],[11,"clone","","",167],[11,"visit_item","","",168],[11,"visit_fn","","",168],[11,"visit_ty","","",168],[11,"visit_ty_method","","",168],[11,"visit_block","","",168],[11,"visit_lifetime_ref","","",168],[11,"visit_generics","","",168],[11,"visit_poly_trait_ref","","",168],[11,"fmt","","",169],[11,"visit_item","rustc::middle::stability","",170],[11,"visit_fn","","",170],[11,"visit_trait_item","","",170],[11,"visit_variant","","",170],[11,"visit_struct_field","","",170],[11,"visit_foreign_item","","",170],[11,"build","","Construct the stability index for a crate being compiled.",171],[11,"new","","",171],[11,"visit_item","","",172],[11,"visit_expr","","",172],[11,"visit_path","","",172],[11,"visit_pat","","",172],[11,"fmt","rustc::middle::subst","",173],[11,"hash","","",173],[11,"eq","","",173],[11,"ne","","",173],[11,"clone","","",173],[11,"fmt","","",174],[11,"hash","","",174],[11,"eq","","",174],[11,"ne","","",174],[11,"clone","","",174],[11,"new","","",173],[11,"new_type","","",173],[11,"new_trait","","",173],[11,"erased","","",173],[11,"empty","","",173],[11,"trans_empty","","",173],[11,"is_noop","","",173],[11,"type_for_def","","",173],[11,"has_regions_escaping_depth","","",173],[11,"self_ty","","",173],[11,"with_self_ty","","",173],[11,"erase_regions","","",173],[11,"regions","","Since ErasedRegions are only to be used in trans, most of the compiler can use this method\nto easily access the set of region substitutions.",173],[11,"mut_regions","","Since ErasedRegions are only to be used in trans, most of the compiler can use this method\nto easily access the set of region substitutions.",173],[11,"with_method","","",173],[11,"is_erased","","",174],[11,"fmt","","",175],[11,"decode","","",175],[11,"encode","","",175],[11,"hash","","",175],[11,"clone","","",175],[11,"eq","","",175],[11,"ne","","",175],[11,"cmp","","",175],[11,"partial_cmp","","",175],[11,"lt","","",175],[11,"le","","",175],[11,"gt","","",175],[11,"ge","","",175],[11,"all","","",175],[11,"to_uint","","",175],[11,"from_uint","","",175],[11,"decode","","",176],[11,"encode","","",176],[11,"hash","","",176],[11,"clone","","",176],[11,"eq","","",176],[11,"ne","","",176],[11,"fmt","","",176],[11,"empty","","",176],[11,"params_from_type","","",176],[11,"new","","`t` is the type space.\n`s` is the self space.\n`a` is the assoc space.\n`f` is the fn space.",176],[11,"push","","Appends `value` to the vector associated with `space`.",176],[11,"extend","","Appends `values` to the vector associated with `space`.",176],[11,"pop","","",176],[11,"truncate","","",176],[11,"replace","","",176],[11,"get_self","","",176],[11,"len","","",176],[11,"is_empty_in","","",176],[11,"get_slice","","",176],[11,"get_mut_slice","","",176],[11,"opt_get","","",176],[11,"get","","",176],[11,"iter","","",176],[11,"into_iter","","",176],[11,"iter_enumerated","","",176],[11,"as_slice","","",176],[11,"into_vec","","",176],[11,"all_vecs","","",176],[11,"all","","",176],[11,"any","","",176],[11,"is_empty","","",176],[11,"map","","",176],[11,"map_enumerated","","",176],[11,"map_move","","",176],[11,"split","","",176],[11,"with_vec","","",176],[11,"clone","","",177],[6,"Item","rustc_borrowck::graphviz",""],[11,"next","rustc::middle::subst","",177],[6,"Item","rustc_borrowck::graphviz",""],[6,"IntoIter","",""],[11,"into_iter","rustc::middle::subst","",176],[6,"Item","rustc_borrowck::graphviz",""],[6,"IntoIter","",""],[11,"tcx","rustc::middle::subst","",178],[11,"enter_region_binder","","",178],[11,"exit_region_binder","","",178],[11,"fold_region","","",178],[11,"fold_ty","","",178],[11,"clone","rustc::middle::traits::fulfill","",179],[11,"new","","",180],[11,"normalize_projection_type","","\"Normalize\" a projection type `<SomeType as SomeTrait>::X` by\ncreating a fresh type variable `$0` as well as a projection\npredicate `<SomeType as SomeTrait>::X == $0`. When the\ninference engine runs, it will attempt to find an impl of\n`SomeTrait` or a where clause that lets us unify `$0` with\nsomething concrete. If this fails, we'll unify `$0` with\n`projection_ty` again.",180],[11,"register_builtin_bound","","",180],[11,"register_region_obligation","","",180],[11,"register_predicate_obligation","","",180],[11,"region_obligations","","",180],[11,"select_all_or_error","","",180],[11,"select_new_obligations","","Attempts to select obligations that were registered since the call to a selection routine.\nThis is used by the type checker to eagerly attempt to resolve obligations in hopes of\ngaining type information. It'd be equally valid to use `select_where_possible` but it\nresults in `O(n^2)` performance (#18208).",180],[11,"select_where_possible","","",180],[11,"pending_obligations","","",180],[11,"repr","","",179],[11,"clone","rustc::middle::traits::project","",181],[11,"eq","","",182],[11,"ne","","",182],[11,"tcx","","",183],[11,"fold_ty","","",183],[11,"with","","",184],[11,"repr","","",185],[11,"repr","","",182],[11,"fold_with","","",184],[11,"repr","","",184],[11,"fmt","rustc::middle::traits::object_safety","",186],[11,"clone","","",186],[11,"repr","","",187],[11,"clone","rustc::middle::traits::select","",188],[11,"fmt","","",189],[11,"clone","","",190],[11,"fmt","","",190],[11,"eq","","",190],[11,"ne","","",190],[11,"fmt","","",191],[11,"new","","",192],[11,"intercrate","","",192],[11,"infcx","","",192],[11,"tcx","","",192],[11,"param_env","","",192],[11,"closure_typer","","",192],[11,"select","","Attempts to satisfy the obligation. If successful, this will affect the surrounding\ntype environment by performing unification.",192],[11,"evaluate_obligation","","Evaluates whether the obligation `obligation` can be satisfied (by any means).",192],[11,"evaluate_impl","","Evaluates whether the impl with id `impl_def_id` could be applied to the self type\n`obligation_self_ty`. This can be used either for trait or inherent impls.",192],[11,"repr","","",190],[11,"new","","",188],[6,"Item","rustc_borrowck::graphviz",""],[11,"next","core::option","",12],[11,"repr","rustc::middle::traits::select","",193],[11,"may_apply","","",194],[11,"filter_to_traits","rustc::middle::traits::util","",195],[6,"Item","rustc_borrowck::graphviz",""],[11,"next","rustc::middle::traits::util","",195],[6,"Item","rustc_borrowck::graphviz",""],[11,"next","rustc::middle::traits::util","",196],[11,"fmt","rustc::middle::traits","",197],[11,"fmt","","",198],[11,"repr","","",199],[11,"repr","","",200],[11,"repr","","",197],[11,"repr","","",201],[11,"repr","","",202],[11,"repr","","",198],[11,"repr","","",203],[11,"repr","","",204],[11,"repr","","",205],[11,"fmt","","",205],[11,"repr","rustc::middle::traits::project","",181],[11,"fmt","","",181],[11,"eq","rustc::middle::traits","",199],[11,"ne","","",199],[11,"clone","","",199],[11,"eq","","",206],[11,"ne","","",206],[11,"clone","","",206],[11,"eq","","",207],[11,"ne","","",207],[11,"clone","","",207],[11,"eq","","",208],[11,"ne","","",208],[11,"clone","","",208],[11,"fmt","","",203],[11,"clone","","",203],[11,"clone","","",205],[11,"clone","","",200],[11,"fmt","","",200],[11,"eq","","",197],[11,"ne","","",197],[11,"clone","","",197],[11,"clone","","",202],[11,"fmt","","",202],[11,"clone","","",201],[11,"fmt","","",201],[11,"clone","","",198],[11,"eq","","",198],[11,"ne","","",198],[11,"new","","",199],[11,"misc","","",199],[11,"with","","",199],[11,"new","","",206],[11,"misc","","",206],[11,"dummy","","",206],[11,"iter_nested","","",200],[11,"map_nested","","",200],[11,"map_move_nested","","",200],[11,"iter_nested","","",197],[11,"map_nested","","",197],[11,"map_move_nested","","",197],[11,"iter_nested","","",202],[11,"map_nested","","",202],[11,"map_move_nested","","",202],[11,"iter_nested","","",201],[11,"map_nested","","",201],[11,"map_move_nested","","",201],[11,"is_overflow","","",204],[11,"hash","rustc::middle::ty","",209],[11,"eq","","",209],[11,"ne","","",209],[11,"clone","","",209],[11,"fmt","","",210],[11,"clone","","",210],[11,"id","","",210],[11,"fmt","","",211],[11,"clone","","",211],[11,"def_id","","",211],[11,"name","","",211],[11,"container","","",211],[11,"as_opt_method","","",211],[11,"fmt","","",212],[11,"clone","","",212],[11,"def_id","","",212],[11,"fmt","","",213],[11,"clone","","",213],[11,"new","","",213],[11,"container_id","","",213],[11,"fmt","","",214],[11,"clone","","",214],[11,"fmt","","",215],[11,"hash","","",215],[11,"eq","","",215],[11,"ne","","",215],[11,"clone","","",215],[11,"fmt","","",216],[11,"clone","","",216],[11,"hash","","",217],[11,"eq","","",217],[11,"ne","","",217],[11,"encode","","",218],[11,"decode","","",218],[11,"eq","","",218],[11,"ne","","",218],[11,"clone","","",218],[11,"fmt","","",219],[11,"encode","","",219],[11,"decode","","",219],[11,"eq","","",219],[11,"ne","","",219],[11,"clone","","",219],[11,"fmt","","",220],[11,"clone","","",220],[11,"fmt","","",221],[11,"eq","","",221],[11,"ne","","",221],[11,"clone","","",221],[11,"fmt","","",222],[11,"clone","","",222],[11,"fmt","","",223],[11,"eq","","",223],[11,"ne","","",223],[11,"clone","","",223],[11,"fmt","","",224],[11,"partial_cmp","","",224],[11,"lt","","",224],[11,"le","","",224],[11,"gt","","",224],[11,"ge","","",224],[11,"eq","","",224],[11,"ne","","",224],[11,"decode","","",224],[11,"encode","","",224],[11,"clone","","",224],[11,"fmt","","",25],[11,"clone","","",25],[11,"fmt","","",225],[11,"clone","","",225],[11,"fmt","","",226],[11,"clone","","",226],[11,"clone","","",227],[11,"fmt","","",228],[11,"hash","","",228],[11,"eq","","",228],[11,"ne","","",228],[11,"clone","","",228],[11,"decode","","",229],[11,"encode","","",229],[11,"fmt","","",229],[11,"hash","","",229],[11,"eq","","",229],[11,"ne","","",229],[11,"clone","","",229],[11,"expr","","",228],[11,"autoobject","","",228],[11,"autoderef","","",228],[11,"clone","","",230],[11,"new","","",231],[11,"hash","","",232],[11,"cmp","","",232],[11,"partial_cmp","","",232],[11,"lt","","",232],[11,"le","","",232],[11,"gt","","",232],[11,"ge","","",232],[11,"clone","","",232],[11,"eq","","",232],[11,"ne","","",232],[11,"empty","","Returns an empty set of flags.",232],[11,"all","","Returns the set containing all flags.",232],[11,"bits","","Returns the raw value of the flags currently stored.",232],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",232],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",232],[11,"is_empty","","Returns `true` if no flags are currently stored.",232],[11,"is_all","","Returns `true` if all flags are currently set.",232],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",232],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",232],[11,"insert","","Inserts the specified flags in-place.",232],[11,"remove","","Removes the specified flags in-place.",232],[11,"toggle","","Toggles the specified flags in-place.",232],[6,"Output","rustc_borrowck::graphviz",""],[11,"bitor","rustc::middle::ty","Returns the union of the two sets of flags.",232],[6,"Output","rustc_borrowck::graphviz",""],[11,"bitxor","rustc::middle::ty","Returns the left flags, but with all the right flags toggled.",232],[6,"Output","rustc_borrowck::graphviz",""],[11,"bitand","rustc::middle::ty","Returns the intersection between the two sets of flags.",232],[6,"Output","rustc_borrowck::graphviz",""],[11,"sub","rustc::middle::ty","Returns the set difference of the two sets of flags.",232],[6,"Output","rustc_borrowck::graphviz",""],[11,"not","rustc::middle::ty","Returns the complement of this set of flags.",232],[11,"print_debug_stats","","",233],[11,"fmt","","",234],[11,"fmt","","",232],[11,"eq","","",234],[11,"hash","","",234],[11,"eq","","",235],[11,"hash","","",235],[11,"borrow","","",235],[11,"fmt","","",236],[11,"hash","","",236],[11,"eq","","",236],[11,"ne","","",236],[11,"clone","","",236],[11,"fmt","","",237],[11,"hash","","",237],[11,"eq","","",237],[11,"ne","","",237],[11,"clone","","",237],[11,"fmt","","",238],[11,"hash","","",238],[11,"eq","","",238],[11,"ne","","",238],[11,"clone","","",238],[11,"diverges","","",238],[11,"unwrap","","",238],[11,"diverges","","",90],[11,"hash","","",85],[11,"eq","","",85],[11,"ne","","",85],[11,"clone","","",85],[11,"inputs","","",90],[11,"input","","",90],[11,"output","","",90],[11,"variadic","","",90],[11,"fmt","","",239],[11,"hash","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"clone","","",239],[11,"fmt","","",240],[11,"decode","","",240],[11,"encode","","",240],[11,"hash","","",240],[11,"eq","","",240],[11,"ne","","",240],[11,"clone","","",240],[11,"fmt","","",16],[11,"decode","","",16],[11,"encode","","",16],[11,"hash","","",16],[11,"eq","","",16],[11,"ne","","",16],[11,"clone","","",16],[11,"fmt","","",241],[11,"hash","","",241],[11,"eq","","",241],[11,"ne","","",241],[11,"clone","","",241],[11,"decode","","",242],[11,"encode","","",242],[11,"fmt","","",242],[11,"hash","","",242],[11,"eq","","",242],[11,"ne","","",242],[11,"clone","","",242],[11,"fmt","","",24],[11,"decode","","",24],[11,"encode","","",24],[11,"clone","","",24],[11,"eq","","",24],[11,"ne","","",24],[11,"fmt","","",23],[11,"decode","","",23],[11,"encode","","",23],[11,"clone","","",23],[11,"eq","","",23],[11,"ne","","",23],[11,"is_bound","","",16],[11,"escapes_depth","","",16],[11,"fmt","","",17],[11,"decode","","",17],[11,"encode","","",17],[11,"hash","","",17],[11,"cmp","","",17],[11,"partial_cmp","","",17],[11,"lt","","",17],[11,"le","","",17],[11,"gt","","",17],[11,"ge","","",17],[11,"eq","","",17],[11,"ne","","",17],[11,"clone","","",17],[11,"fmt","","",20],[11,"decode","","",20],[11,"encode","","",20],[11,"hash","","",20],[11,"cmp","","",20],[11,"partial_cmp","","",20],[11,"lt","","",20],[11,"le","","",20],[11,"gt","","",20],[11,"ge","","",20],[11,"eq","","",20],[11,"ne","","",20],[11,"clone","","",20],[11,"fmt","","",243],[11,"hash","","",243],[11,"eq","","",243],[11,"ne","","",243],[11,"clone","","",243],[11,"fmt","","",244],[11,"hash","","",244],[11,"eq","","",244],[11,"ne","","",244],[11,"clone","","",244],[11,"principal_def_id","","",244],[11,"principal_trait_ref_with_self_ty","","Object types don't have a self-type specified. Therefore, when\nwe convert the principal trait-ref into a normal trait-ref,\nyou must give *some* self-type. A common choice is `mk_err()`\nor some skolemized type.",244],[11,"projection_bounds_with_self_ty","","",244],[11,"fmt","","",83],[11,"hash","","",83],[11,"eq","","",83],[11,"ne","","",83],[11,"clone","","",83],[11,"self_ty","","",90],[11,"def_id","","",90],[11,"substs","","",90],[11,"input_types","","",90],[11,"to_poly_trait_predicate","","",90],[11,"fmt","","",90],[11,"hash","","",90],[11,"eq","","",90],[11,"ne","","",90],[11,"clone","","",90],[11,"skip_binder","","Skips the binder and returns the \"bound\" value. This is a\nrisky thing to do because it's easy to get confused about\ndebruijn indices and the like. It is usually better to\ndischarge the binder using `no_late_bound_regions` or\n`replace_late_bound_regions` or something like\nthat. `skip_binder` is only valid when you are either\nextracting data that has nothing to do with bound regions, you\nare doing some sort of test that does not involve bound\nregions, or you are being very careful about your depth\naccounting.",90],[11,"eq","","",120],[11,"ne","","",120],[11,"clone","","",120],[11,"fmt","","",245],[11,"clone","","",245],[11,"fmt","","",246],[11,"clone","","",246],[11,"fmt","","",247],[11,"clone","","",247],[11,"fmt","","",248],[11,"clone","","",248],[11,"hash","","",248],[11,"eq","","",248],[11,"ne","","",248],[11,"fmt","","",249],[11,"clone","","",249],[11,"hash","","",249],[11,"eq","","",249],[11,"ne","","",249],[11,"fmt","","",250],[11,"hash","","",250],[11,"decode","","",250],[11,"eq","","",250],[11,"ne","","",250],[11,"encode","","",250],[11,"clone","","",250],[11,"to_usize","","",250],[11,"from_usize","","",250],[11,"hash","","",251],[11,"eq","","",251],[11,"ne","","",251],[11,"clone","","",251],[11,"hash","","",119],[11,"eq","","",119],[11,"ne","","",119],[11,"clone","","",119],[11,"hash","","",121],[11,"eq","","",121],[11,"ne","","",121],[11,"clone","","",121],[11,"hash","","",252],[11,"decode","","",252],[11,"encode","","",252],[11,"eq","","",252],[11,"ne","","",252],[11,"clone","","",252],[11,"hash","","",253],[11,"eq","","",253],[11,"ne","","",253],[11,"clone","","",253],[11,"fmt","","",254],[11,"hash","","",254],[11,"eq","","",254],[11,"ne","","",254],[11,"decode","","",254],[11,"encode","","",254],[11,"clone","","",254],[11,"fmt","","",255],[11,"hash","","",255],[11,"decode","","",255],[11,"encode","","",255],[11,"clone","","",255],[11,"eq","","",255],[11,"ne","","",255],[11,"fmt","","",251],[11,"fmt","","",119],[11,"fmt","","",121],[11,"fmt","","",252],[11,"fmt","","",85],[11,"fmt","","",253],[11,"fmt","","",120],[11,"fmt","","",256],[11,"clone","","",256],[11,"fmt","","",257],[11,"clone","","",257],[11,"fmt","","",258],[11,"clone","","",258],[11,"decode","","",258],[11,"encode","","",258],[11,"to_early_bound_region","","",258],[11,"fmt","","",259],[11,"clone","","",259],[11,"empty","","",259],[11,"is_empty","","",259],[11,"has_type_params","","",259],[11,"has_region_params","","",259],[11,"fmt","","",260],[11,"clone","","",260],[11,"empty","","",260],[11,"instantiate","","",260],[11,"instantiate_supertrait","","",260],[11,"fmt","","",261],[11,"hash","","",261],[11,"eq","","",261],[11,"ne","","",261],[11,"clone","","",261],[11,"subst_supertrait","","Performs a substituion suitable for going from a\npoly-trait-ref to supertraits that must hold if that\npoly-trait-ref holds. This is slightly different from a normal\nsubstitution in terms of what happens with bound regions.  See\nlengthy comment below for details.",261],[11,"fmt","","",262],[11,"hash","","",262],[11,"eq","","",262],[11,"ne","","",262],[11,"clone","","",262],[11,"def_id","","",262],[11,"input_types","","",262],[11,"self_ty","","",262],[11,"def_id","","",90],[11,"fmt","","",263],[11,"hash","","",263],[11,"eq","","",263],[11,"ne","","",263],[11,"clone","","",263],[11,"fmt","","",264],[11,"hash","","",264],[11,"eq","","",264],[11,"ne","","",264],[11,"clone","","",264],[11,"fmt","","",84],[11,"hash","","",84],[11,"eq","","",84],[11,"ne","","",84],[11,"clone","","",84],[11,"item_name","","",90],[11,"sort_key","","",90],[11,"fmt","","",265],[11,"hash","","",265],[11,"eq","","",265],[11,"ne","","",265],[11,"clone","","",265],[11,"sort_key","","",265],[11,"to_poly_trait_ref","alloc::rc","",82],[11,"to_poly_trait_ref","rustc::middle::ty","",90],[11,"to_poly_trait_ref","","",90],[11,"as_predicate","alloc::rc","",82],[11,"as_predicate","rustc::middle::ty","",90],[11,"as_predicate","","",90],[11,"as_predicate","","",90],[11,"as_predicate","","",90],[11,"as_predicate","","",90],[11,"walk_tys","","Iterates over the types in this predicate. Note that in all\ncases this is skipping over a binder, so late-bound regions\nwith depth 0 are bound by the predicate.",261],[11,"has_escaping_regions","","",261],[11,"to_opt_poly_trait_ref","","",261],[11,"fmt","","",266],[11,"clone","","",266],[11,"empty","","",266],[11,"has_escaping_regions","","",266],[11,"is_empty","","",266],[11,"new","","",83],[11,"self_ty","","",83],[11,"input_types","","",83],[11,"clone","","",267],[11,"with_caller_bounds","","",267],[11,"for_item","","",267],[11,"fmt","","",268],[11,"clone","","",268],[11,"clone","","",269],[11,"decode","","",155],[11,"encode","","",155],[11,"fmt","","",155],[11,"eq","","",155],[11,"ne","","",155],[11,"clone","","",155],[11,"trait_did","","",155],[11,"mk_substs","","",233],[11,"mk_bare_fn","","",233],[11,"mk_region","","",233],[11,"closure_kind","","",233],[11,"closure_type","","",233],[11,"type_parameter_def","","",233],[11,"walk","","Iterator that walks `self` and any types reachable from\n`self`, in depth-first order. Note that just walks the types\nthat appear in `self`, it does not descend into the fields of\nstructs or variants. For example:",234],[11,"walk_children","","Iterator that walks types reachable from `self`, in\ndepth-first order. Note that this is a shallow walk. For\nexample:",234],[11,"as_opt_param_ty","","",234],[11,"is_param","","",234],[11,"new","","",239],[11,"for_self","","",239],[11,"for_def","","",239],[11,"to_ty","","",239],[11,"is_self","","",239],[11,"empty","","",269],[11,"is_noop","","",269],[11,"empty","","",248],[11,"clone","","",270],[11,"when","","",270],[11,"intersects","","",270],[11,"owns_managed","","",270],[11,"owns_owned","","",270],[11,"is_sized","","",270],[11,"interior_param","","",270],[11,"interior_unsafe","","",270],[11,"interior_unsized","","",270],[11,"needs_drop","","",270],[11,"owned_pointer","","Includes only those bits that still apply when indirected through a `Box` pointer",270],[11,"reference","","Includes only those bits that still apply when indirected through a reference (`&`)",270],[11,"managed_pointer","","Includes only those bits that still apply when indirected through a managed pointer (`@`)",270],[11,"unsafe_pointer","","Includes only those bits that still apply when indirected through an unsafe pointer (`*`)",270],[11,"union","","",270],[11,"has_dtor","","",270],[6,"Output","rustc_borrowck::graphviz",""],[11,"bitor","rustc::middle::ty","",270],[6,"Output","rustc_borrowck::graphviz",""],[11,"bitand","rustc::middle::ty","",270],[6,"Output","rustc_borrowck::graphviz",""],[11,"sub","rustc::middle::ty","",270],[11,"fmt","","",270],[11,"fmt","","",271],[11,"eq","","",271],[11,"ne","","",271],[11,"cmp","","",271],[11,"partial_cmp","","",271],[11,"lt","","",271],[11,"le","","",271],[11,"gt","","",271],[11,"ge","","",271],[11,"repr","","",247],[11,"clone","","",272],[11,"from_ast_variant","","Creates a new VariantInfo from the corresponding ast representation.",272],[11,"is_present","","",273],[11,"has_drop_flag","","",273],[11,"clone","","",274],[11,"to_string","","",219],[11,"from_mutbl","","",242],[11,"to_mutbl_lossy","","Returns a mutability `m` such that an `&m T` pointer could be used to obtain this borrow\nkind. Because borrow kinds are richer than mutabilities, we sometimes have to pick a\nmutability that is stronger than necessary so that it at least *would permit* the borrow in\nquestion.",242],[11,"to_user_str","","",242],[11,"is_method_call","","",233],[11,"upvar_capture","","",233],[11,"node_ty","","",267],[11,"expr_ty_adjusted","","",267],[11,"node_method_ty","","",267],[11,"node_method_origin","","",267],[11,"adjustments","","",267],[11,"is_method_call","","",267],[11,"temporary_scope","","",267],[11,"upvar_capture","","",267],[11,"type_moves_by_default","","",267],[11,"param_env","","",267],[11,"closure_kind","","",267],[11,"closure_type","","",267],[11,"closure_upvars","","",267],[11,"fmt","","",275],[11,"eq","","",275],[11,"ne","","",275],[11,"clone","","",275],[11,"decode","","",22],[11,"encode","","",22],[11,"clone","","",22],[11,"is_identity","","",220],[11,"is_identity","","",222],[11,"new","","",240],[11,"shifted","","",240],[11,"repr","","",220],[11,"repr","","",221],[11,"repr","","",222],[11,"repr","","",223],[11,"repr","","",244],[11,"repr","","",261],[11,"repr","","",230],[11,"has_regions_escaping_depth","rustc::middle::subst","",173],[11,"has_regions_escaping_depth","","",176],[11,"has_regions_escaping_depth","rustc::middle::ty","",268],[11,"has_regions_escaping_depth","","",16],[11,"has_regions_escaping_depth","","",260],[11,"has_regions_escaping_depth","","",261],[11,"has_regions_escaping_depth","","",83],[11,"has_regions_escaping_depth","rustc::middle::subst","",174],[11,"has_regions_escaping_depth","rustc::middle::ty","",90],[11,"has_regions_escaping_depth","","",263],[11,"has_regions_escaping_depth","","",262],[11,"has_regions_escaping_depth","","",264],[11,"has_regions_escaping_depth","","",84],[11,"has_regions_escaping_depth","","",265],[11,"repr","","",84],[11,"has_projection_types","collections::vec","",276],[11,"has_projection_types","rustc::middle::subst","",176],[11,"has_projection_types","rustc::middle::ty","",237],[11,"has_projection_types","","",274],[11,"has_projection_types","","",266],[11,"has_projection_types","","",261],[11,"has_projection_types","","",262],[11,"has_projection_types","","",263],[11,"has_projection_types","","",16],[11,"has_projection_types","","",264],[11,"has_projection_types","","",84],[11,"has_projection_types","","",265],[11,"has_projection_types","","",83],[11,"has_projection_types","rustc::middle::subst","",173],[11,"has_projection_types","core::option","",12],[11,"has_projection_types","alloc::rc","",82],[11,"has_projection_types","alloc::boxed","",277],[11,"has_projection_types","rustc::middle::ty","",90],[11,"has_projection_types","","",238],[11,"has_projection_types","","",85],[11,"has_projection_types","","",209],[11,"has_projection_types","","",236],[11,"references_error","","",90],[11,"references_error","alloc::rc","",82],[11,"references_error","rustc::middle::ty","",262],[11,"references_error","","",84],[11,"references_error","","",83],[11,"references_error","","",261],[11,"references_error","","",264],[11,"references_error","","",263],[11,"references_error","","",16],[11,"repr","","",237],[11,"repr","","",274],[11,"repr","","",209],[11,"repr","","",267],[11,"repr","","",256],[11,"fold_with","core::option","",12],[11,"fold_with","alloc::rc","",82],[11,"fold_with","alloc::boxed","",277],[11,"fold_with","collections::vec","",276],[11,"fold_with","rustc::middle::ty","",90],[11,"fold_with","syntax::owned_slice","",278],[11,"fold_with","rustc::middle::subst","",176],[11,"fold_with","rustc::middle::ty","",236],[11,"fold_with","","",237],[11,"fold_with","","",215],[11,"fold_with","","",238],[11,"fold_with","","",85],[11,"fold_with","","",83],[11,"fold_with","","",209],[11,"fold_with","","",16],[11,"fold_with","rustc::middle::subst","",173],[11,"fold_with","rustc::middle::ty","",269],[11,"fold_with","","",223],[11,"fold_with","","",25],[11,"fold_with","","",230],[11,"fold_with","collections::enum_set","",279],[11,"fold_with","rustc::middle::ty","",249],[11,"fold_with","","",248],[11,"fold_with","","",257],[11,"fold_with","","",256],[11,"fold_with","","",258],[11,"fold_with","","",259],[11,"fold_with","","",260],[11,"fold_with","","",261],[11,"fold_with","","",84],[11,"fold_with","","",265],[11,"fold_with","","",266],[11,"fold_with","","",221],[11,"fold_with","rustc::middle::traits","",199],[11,"fold_with","","",197],[11,"fold_with","","",202],[11,"fold_with","","",201],[11,"fold_with","","",200],[11,"fold_with","","",198],[11,"fold_with","rustc::middle::ty","",263],[11,"fold_with","","",262],[11,"fold_with","","",264],[11,"fold_with","","",274],[11,"fold_with","","",267],[11,"tcx","rustc::middle::ty_fold","",280],[11,"fold_ty","","",280],[11,"new","","",281],[11,"tcx","","",281],[11,"enter_region_binder","","",281],[11,"exit_region_binder","","",281],[11,"fold_region","","",281],[11,"tcx","","",282],[11,"fold_region","","",282],[11,"new","rustc::middle::ty_walk","",283],[11,"skip_current_subtree","","Skips the subtree of types corresponding to the last type\nreturned by `next()`.",283],[6,"Item","rustc_borrowck::graphviz",""],[11,"next","rustc::middle::ty_walk","",283],[11,"visit_foreign_item","rustc::middle::weak_lang_items","",284],[11,"from_i64","rustc::metadata::common","",285],[11,"from_u64","","",285],[11,"eq","","",285],[11,"ne","","",285],[11,"fmt","","",286],[11,"clone","","",286],[11,"fmt","rustc::metadata::tydecode","",287],[11,"clone","rustc::metadata::encoder","",288],[11,"visit_expr","","",289],[11,"visit_item","","",289],[11,"visit_foreign_item","","",289],[11,"visit_item","","",290],[11,"eq","rustc::metadata::decoder","",291],[11,"ne","","",291],[11,"fmt","","",292],[11,"clone","","",292],[11,"clone","","",293],[11,"visit_item","rustc::metadata::creader","",294],[11,"as_slice","","",295],[11,"new","","",294],[11,"read_crates","","",294],[11,"read_exported_macros","","Read exported macros.",294],[11,"find_plugin_registrar","","Look for a plugin registrar. Returns library path and symbol name.",294],[11,"clone","rustc::metadata::cstore","",296],[11,"eq","","",296],[11,"ne","","",296],[11,"fmt","","",296],[11,"from_i64","","",297],[11,"from_u64","","",297],[11,"eq","","",297],[11,"ne","","",297],[11,"clone","","",297],[11,"clone","","",298],[11,"eq","","",298],[11,"ne","","",298],[11,"new","","",299],[11,"next_crate_num","","",299],[11,"get_crate_data","","",299],[11,"get_crate_hash","","",299],[11,"set_crate_data","","",299],[11,"iter_crate_data","","",299],[11,"iter_crate_data_origins","","Like `iter_crate_data`, but passes source paths (if available) as well.",299],[11,"add_used_crate_source","","",299],[11,"get_used_crate_source","","",299],[11,"reset","","",299],[11,"get_used_crates","","",299],[11,"add_used_library","","",299],[11,"get_used_libraries","","",299],[11,"add_used_link_args","","",299],[11,"get_used_link_args","","",299],[11,"add_extern_mod_stmt_cnum","","",299],[11,"find_extern_mod_stmt_cnum","","",299],[11,"data","","",300],[11,"name","","",300],[11,"hash","","",300],[11,"as_slice","","",301],[11,"maybe_load_library_crate","rustc::metadata::loader","",302],[11,"load_library_crate","","",302],[11,"report_load_errs","","",302],[11,"as_slice","","",303],[11,"for_each_lib_search_path","rustc::metadata::filesearch","",304],[11,"get_lib_path","","",304],[11,"search","","",304],[11,"new","","",304],[11,"get_dylib_search_paths","","",304],[11,"get_tools_search_paths","","",304],[11,"visit_item","rustc::metadata::macro_import","",305],[11,"visit_mac","","",305],[11,"eq","rustc::session::config","",306],[11,"ne","","",306],[11,"clone","","",306],[11,"eq","","",307],[11,"ne","","",307],[11,"clone","","",307],[11,"cmp","","",308],[11,"partial_cmp","","",308],[11,"lt","","",308],[11,"le","","",308],[11,"gt","","",308],[11,"ge","","",308],[11,"eq","","",308],[11,"ne","","",308],[11,"clone","","",308],[11,"clone","","",309],[11,"clone","","",310],[11,"eq","","",311],[11,"ne","","",311],[11,"clone","","",311],[11,"filestem","","",312],[11,"clone","","",313],[11,"path","","",313],[11,"temp_path","","",313],[11,"with_extension","","",313],[11,"filestem","","",313],[11,"eq","","",314],[11,"ne","","",314],[11,"fmt","","",315],[11,"hash","","",315],[11,"cmp","","",315],[11,"clone","","",315],[11,"partial_cmp","","",315],[11,"lt","","",315],[11,"le","","",315],[11,"gt","","",315],[11,"ge","","",315],[11,"eq","","",315],[11,"ne","","",315],[11,"clone","","",316],[11,"is_empty","","",316],[11,"clone","","",317],[11,"clone","","",318],[11,"fmt","","",319],[11,"eq","","",319],[11,"ne","","",319],[11,"clone","","",319],[11,"eq","","",320],[11,"ne","","",320],[11,"clone","","",320],[11,"is_stable","","",320],[11,"fmt","","",315],[11,"fmt","rustc::session::search_paths","",321],[11,"clone","","",321],[11,"fmt","","",322],[11,"clone","","",322],[11,"eq","","",322],[11,"ne","","",322],[11,"new","","",321],[11,"add_path","","",321],[11,"iter","","",321],[6,"Item","rustc_borrowck::graphviz",""],[11,"next","rustc::session::search_paths","",323],[11,"span_fatal","rustc::session","",324],[11,"span_fatal_with_code","","",324],[11,"fatal","","",324],[11,"span_err","","",324],[11,"span_err_with_code","","",324],[11,"err","","",324],[11,"err_count","","",324],[11,"has_errors","","",324],[11,"abort_if_errors","","",324],[11,"span_warn","","",324],[11,"span_warn_with_code","","",324],[11,"warn","","",324],[11,"opt_span_warn","","",324],[11,"span_note","","",324],[11,"span_end_note","","",324],[11,"span_help","","",324],[11,"fileline_note","","",324],[11,"fileline_help","","",324],[11,"note","","",324],[11,"help","","",324],[11,"opt_span_bug","","",324],[11,"span_bug","","",324],[11,"bug","","",324],[11,"span_unimpl","","",324],[11,"unimpl","","",324],[11,"add_lint","","",324],[11,"next_node_id","","",324],[11,"reserve_node_ids","","",324],[11,"diagnostic","","",324],[11,"codemap","","",324],[11,"impossible_case","","",324],[11,"verbose","","",324],[11,"time_passes","","",324],[11,"count_llvm_insns","","",324],[11,"count_type_sizes","","",324],[11,"time_llvm_passes","","",324],[11,"trans_stats","","",324],[11,"meta_stats","","",324],[11,"asm_comments","","",324],[11,"no_verify","","",324],[11,"borrowck_stats","","",324],[11,"print_llvm_passes","","",324],[11,"lto","","",324],[11,"no_landing_pads","","",324],[11,"unstable_options","","",324],[11,"print_enum_sizes","","",324],[11,"sysroot","","",324],[11,"target_filesearch","","",324],[11,"host_filesearch","","",324],[11,"args","rustc::plugin::registry","Get the plugin's arguments, if any.",325],[11,"register_syntax_extension","","Register a syntax extension of any kind.",325],[11,"register_macro","","Register a macro of the usual kind.",325],[11,"register_lint_pass","","Register a compiler lint pass.",325],[11,"register_lint_group","","Register a lint group.",325],[11,"visit_item","rustc::plugin::build","",326],[11,"fmt","rustc::lint","",327],[11,"name_lower","","Get the lint's name, with ASCII letters converted to lowercase.",327],[11,"clone","","",328],[11,"eq","","",328],[11,"hash","","",328],[11,"of","","Get the `LintId` for a `Lint`.",328],[11,"as_str","","Get the name of the lint.",328],[11,"fmt","","",329],[11,"cmp","","",329],[11,"partial_cmp","","",329],[11,"lt","","",329],[11,"le","","",329],[11,"gt","","",329],[11,"ge","","",329],[11,"eq","","",329],[11,"ne","","",329],[11,"clone","","",329],[11,"as_str","","Convert a level to a lower-case string.",329],[11,"from_str","","Convert a lower-case string to a level.",329],[11,"eq","","",330],[11,"ne","","",330],[11,"clone","","",330],[11,"get_lints","rustc::lint::builtin","",331],[11,"new","rustc::lint::context","",332],[11,"get_lints","","",332],[11,"get_lint_groups","","",332],[11,"register_pass","","",332],[11,"register_group","","",332],[11,"register_renamed","","",332],[11,"process_command_line","","",332],[11,"sess","","Get the overall compiler `Session` object.",333],[11,"current_level","","Get the level of `lint` at the current position of the lint\ntraversal.",333],[11,"lint","","Emit a lint at the appropriate level, with no associated span.",333],[11,"span_lint","","Emit a lint at the appropriate level, for a particular span.",333],[11,"visit_item","","",333],[11,"visit_foreign_item","","",333],[11,"visit_pat","","",333],[11,"visit_expr","","",333],[11,"visit_stmt","","",333],[11,"visit_fn","","",333],[11,"visit_ty_method","","",333],[11,"visit_struct_def","","",333],[11,"visit_struct_field","","",333],[11,"visit_variant","","",333],[11,"visit_ty","","",333],[11,"visit_ident","","",333],[11,"visit_mod","","",333],[11,"visit_local","","",333],[11,"visit_block","","",333],[11,"visit_arm","","",333],[11,"visit_decl","","",333],[11,"visit_expr_post","","",333],[11,"visit_generics","","",333],[11,"visit_trait_item","","",333],[11,"visit_opt_lifetime_ref","","",333],[11,"visit_lifetime_ref","","",333],[11,"visit_lifetime_def","","",333],[11,"visit_explicit_self","","",333],[11,"visit_mac","","",333],[11,"visit_path","","",333],[11,"visit_attribute","","",333],[11,"visit_id","","",333],[11,"get_lints","","",334],[11,"check_item","","",334],[11,"fmt","rustc::util::common","",335],[11,"clone","","",335],[11,"drop","","",336],[11,"visit_expr","","",337],[11,"visit_expr","","",338],[11,"repr","core::option","",12],[11,"repr","syntax::ptr","",339],[11,"repr","core::result","",130],[11,"repr","alloc::rc","",82],[11,"repr","alloc::boxed","",277],[11,"repr","syntax::owned_slice","",278],[11,"repr","collections::vec","",276],[11,"user_string","","",276],[11,"repr","rustc::middle::def","",15],[11,"user_string","rustc::middle::ty","",244],[11,"repr","","",257],[11,"repr","","",258],[11,"repr","","",234],[11,"repr","","",215],[11,"repr","rustc::middle::subst","",173],[11,"repr","","",176],[11,"repr","rustc::middle::ty","",269],[11,"repr","rustc::middle::subst","",174],[11,"repr","collections::enum_set","",279],[11,"repr","rustc::middle::ty","",248],[11,"repr","","",83],[11,"repr","","",340],[11,"repr","syntax::ast","",341],[11,"repr","","",152],[11,"repr","","",342],[11,"user_string","","",342],[11,"repr","","",343],[11,"repr","","",344],[11,"repr","","",345],[11,"repr","syntax::codemap","",346],[11,"repr","syntax::ast","",153],[11,"repr","rustc::middle::ty","",20],[11,"repr","","",16],[11,"user_string","","",16],[11,"repr","","",17],[11,"repr","rustc::middle::region","",18],[11,"repr","","",19],[11,"repr","syntax::ast","",11],[11,"repr","rustc::middle::ty","",268],[11,"repr","","",259],[11,"repr","","",260],[11,"repr","","",266],[11,"repr","","",218],[11,"repr","","",219],[11,"repr","","",213],[11,"repr","syntax::ast","",8],[11,"user_string","","",8],[11,"repr","","",7],[11,"repr","","",347],[11,"repr","","",348],[11,"repr","rustc::middle::ty","",236],[11,"repr","","",85],[11,"repr","","",238],[11,"repr","","",227],[11,"repr","","",25],[11,"repr","","",225],[11,"repr","","",226],[11,"repr","","",250],[11,"user_string","","",250],[11,"repr","syntax::codemap","",13],[11,"user_string","alloc::rc","",82],[11,"user_string","rustc::middle::ty","",248],[11,"repr","","",249],[11,"user_string","collections::enum_set","",279],[11,"user_string","rustc::middle::ty","",90],[11,"user_string","","",83],[11,"user_string","syntax::ast","",7],[11,"repr","syntax::abi","",349],[11,"user_string","","",349],[11,"repr","rustc::middle::ty","",241],[11,"repr","syntax::ast","",350],[11,"repr","rustc::middle::ty","",242],[11,"repr","","",23],[11,"repr","","",24],[11,"repr","","",119],[11,"repr","","",121],[11,"repr","","",252],[11,"repr","","",251],[11,"repr","","",120],[11,"repr","syntax::ast","",351],[11,"repr","","",352],[11,"repr","","",122],[11,"repr","rustc::middle::ty","",275],[11,"user_string","","",239],[11,"repr","","",239],[11,"repr","","",90],[11,"repr","std::collections::hash::map","",353],[11,"repr","rustc::middle::ty","",264],[11,"user_string","","",264],[11,"repr","","",263],[11,"user_string","","",263],[11,"repr","","",262],[11,"user_string","","",262],[11,"user_string","","",84],[11,"repr","","",265],[11,"user_string","","",265],[11,"user_string","","",261],[11,"default","rustc::util::nodemap","",354],[11,"write","","",354],[11,"finish","","",354],[11,"new","rustc::util::snapshot_vec","",355],[11,"record","","",355],[11,"push","","",355],[11,"get","","",355],[11,"get_mut","","Returns a mutable pointer into the vec; whatever changes you make here cannot be undone\nautomatically, so you should be sure call `record()` with some sort of suitable undo\naction.",355],[11,"set","","Updates the element at the given index. The old value will saved (and perhaps restored) if\na snapshot is active.",355],[11,"start_snapshot","","",355],[11,"actions_since_snapshot","","",355],[11,"rollback_to","","",355],[11,"commit","","Commits all changes since the last snapshot. Of course, they\ncan still be undone if there is a snapshot further out.",355],[11,"input","rustc_back::sha2","",356],[11,"reset","","",356],[11,"zero_until","","",356],[11,"next","","",356],[11,"full_buffer","","",356],[11,"position","","",356],[11,"remaining","","",356],[11,"size","","",356],[11,"new","","Construct a new instance of a SHA-256 digest.",357],[11,"input","","",357],[11,"result","","",357],[11,"reset","","",357],[11,"output_bits","","",357],[11,"open","rustc_llvm::archive_ro","Opens a static archive for read-only purposes. This is more optimized\nthan the `open` method because it uses LLVM's internal `Archive` class\nrather than shelling out to `ar` for everything.",358],[11,"read","","Reads a file in the archive",358],[11,"drop","","",358],[11,"describe","rustc_llvm::diagnostic","",359],[11,"unpack","","",360],[11,"eq","rustc_llvm","",361],[11,"ne","","",361],[11,"fmt","","",362],[11,"hash","","",363],[11,"cmp","","",363],[11,"partial_cmp","","",363],[11,"lt","","",363],[11,"le","","",363],[11,"gt","","",363],[11,"ge","","",363],[11,"clone","","",363],[11,"eq","","",363],[11,"ne","","",363],[11,"empty","","Returns an empty set of flags.",363],[11,"all","","Returns the set containing all flags.",363],[11,"bits","","Returns the raw value of the flags currently stored.",363],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",363],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",363],[11,"is_empty","","Returns `true` if no flags are currently stored.",363],[11,"is_all","","Returns `true` if all flags are currently set.",363],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",363],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",363],[11,"insert","","Inserts the specified flags in-place.",363],[11,"remove","","Removes the specified flags in-place.",363],[11,"toggle","","Toggles the specified flags in-place.",363],[6,"Output","rustc_borrowck::graphviz",""],[11,"bitor","rustc_llvm","Returns the union of the two sets of flags.",363],[6,"Output","rustc_borrowck::graphviz",""],[11,"bitxor","rustc_llvm","Returns the left flags, but with all the right flags toggled.",363],[6,"Output","rustc_borrowck::graphviz",""],[11,"bitand","rustc_llvm","Returns the intersection between the two sets of flags.",363],[6,"Output","rustc_borrowck::graphviz",""],[11,"sub","rustc_llvm","Returns the set difference of the two sets of flags.",363],[6,"Output","rustc_borrowck::graphviz",""],[11,"not","rustc_llvm","Returns the complement of this set of flags.",363],[11,"apply_llfn","","",363],[11,"apply_callsite","","",363],[11,"apply_llfn","","",364],[11,"apply_callsite","","",364],[11,"apply_llfn","","",365],[11,"apply_callsite","","",365],[11,"new","","",366],[11,"arg","","",366],[11,"ret","","",366],[11,"apply_llfn","","",366],[11,"apply_callsite","","",366],[11,"fmt","","",367],[11,"eq","","",367],[11,"ne","","",367],[11,"clone","","",368],[11,"eq","","",368],[11,"ne","","",368],[11,"eq","","",369],[11,"ne","","",369],[11,"drop","","",370],[11,"new","","",371],[11,"drop","","",371],[11,"drop","","",372],[6,"Node","rustc_borrowck::graphviz",""],[6,"Edge","",""],[3,"DataflowLabeller","",""],[12,"inner","","",373],[12,"variants","","",373],[12,"borrowck_ctxt","","",373],[12,"analysis_data","","",373],[4,"Variant","",""],[13,"Loans","","",374],[13,"Moves","","",374],[13,"Assigns","","",374],[11,"fmt","","",374],[11,"short_name","","",374],[11,"graph_id","","",373],[11,"node_id","","",373],[11,"node_label","","",373],[11,"edge_label","","",373],[11,"nodes","","",373],[11,"edges","","",373],[11,"source","","",373],[11,"target","","",373]],"paths":[[3,"FnPartsWithCFG"],[3,"Archive"],[3,"ArchiveBuilder"],[3,"Svh"],[4,"SawAbiComponent"],[4,"SawExprComponent"],[4,"SawStmtComponent"],[3,"Ident"],[3,"Name"],[3,"StrictVersionHashVisitor"],[3,"DecodeContext"],[3,"DefId"],[4,"Option"],[3,"Span"],[3,"NestedItemsDropper"],[4,"Def"],[4,"Region"],[3,"FreeRegion"],[4,"CodeExtent"],[3,"DestructionScopeData"],[4,"BoundRegion"],[3,"Decoder"],[3,"Freevar"],[3,"UpvarBorrow"],[4,"UpvarCapture"],[4,"MethodOrigin"],[3,"EncodeContext"],[3,"Encoder"],[3,"SideTableEncodingIdVisitor"],[3,"Doc"],[3,"LabelledCFG"],[4,"CFGNodeData"],[3,"CFG"],[3,"ConstQualif"],[4,"Mode"],[3,"CheckCrateVisitor"],[3,"CheckCrateVisitor"],[3,"CheckItemRecursionVisitor"],[4,"Context"],[3,"CheckLoopVisitor"],[3,"Matrix"],[4,"Constructor"],[4,"Usefulness"],[3,"MatchCheckCtxt"],[3,"StaticInliner"],[3,"RenamingRecorder"],[3,"MutationChecker"],[3,"AtBindingPatternVisitor"],[3,"RvalueContext"],[3,"RvalueContextDelegate"],[4,"const_val"],[3,"ConstEvalErr"],[4,"ErrKind"],[4,"EntryOrExit"],[3,"DataFlowContext"],[3,"Union"],[3,"Subtract"],[3,"MarkSymbolVisitor"],[3,"LifeSeeder"],[3,"DeadVisitor"],[3,"PathResolution"],[4,"MethodProvenance"],[4,"UnsafeContext"],[3,"EffectCheckVisitor"],[3,"EntryContext"],[4,"LoanCause"],[4,"ConsumeMode"],[4,"MoveReason"],[4,"MatchMode"],[4,"TrackMatchMode"],[4,"MutateMode"],[3,"ExprUseVisitor"],[4,"SimplifiedType"],[3,"Edge"],[3,"NodeIndex"],[3,"EdgeIndex"],[3,"Direction"],[3,"Graph"],[3,"DepthFirstTraversal"],[3,"IntrinsicCheckingVisitor"],[3,"TransmuteRestriction"],[3,"Bivariate"],[3,"Rc"],[3,"TraitRef"],[3,"ProjectionPredicate"],[3,"FnSig"],[3,"CombineFields"],[3,"Generalizer"],[3,"Equate"],[3,"InferCtxt"],[3,"Binder"],[3,"Glb"],[3,"Lub"],[4,"Node"],[4,"Edge"],[3,"ConstraintGraph"],[4,"Constraint"],[4,"GenericKind"],[3,"TwoRegions"],[4,"UndoLogEntry"],[4,"CombineMapType"],[4,"RegionResolutionError"],[3,"SameRegions"],[3,"RegionSnapshot"],[3,"RegionVarBindings"],[4,"Classification"],[4,"Verify"],[4,"VarValue"],[3,"RegionAndOrigin"],[3,"OpportunisticTypeResolver"],[3,"FullTypeResolver"],[3,"TypeFreshener"],[3,"Sub"],[4,"RelationDir"],[3,"TypeVariableTable"],[3,"Delegate"],[4,"VarValue"],[3,"UnificationTable"],[3,"Delegate"],[3,"IntVid"],[4,"IntVarValue"],[3,"FloatVid"],[4,"FloatTy"],[4,"TypeOrigin"],[4,"ValuePairs"],[3,"TypeTrace"],[4,"SubregionOrigin"],[4,"LateBoundRegionConversionTime"],[4,"RegionVariableOrigin"],[4,"fixup_err"],[4,"Result"],[4,"LangItem"],[3,"LanguageItems"],[3,"LanguageItemCollector"],[3,"Variable"],[3,"LiveNode"],[4,"LiveNodeKind"],[3,"IrMaps"],[3,"LocalInfo"],[4,"VarKind"],[3,"Liveness"],[3,"Users"],[4,"categorization"],[3,"Upvar"],[4,"PointerKind"],[4,"InteriorKind"],[4,"FieldName"],[4,"InteriorOffsetKind"],[4,"ElementKind"],[4,"MutabilityCategory"],[4,"Note"],[3,"cmt_"],[3,"Expr"],[3,"Pat"],[3,"MemCategorizationContext"],[4,"ClosureKind"],[4,"LastPrivate"],[4,"PrivateDep"],[4,"ImportUse"],[3,"ReachableContext"],[3,"BlockRemainder"],[4,"InnermostDeclaringBlock"],[3,"DeclaringStatementContext"],[4,"InnermostEnclosingExpr"],[3,"Context"],[3,"RegionMaps"],[3,"RegionResolutionVisitor"],[4,"DefRegion"],[3,"LifetimeContext"],[4,"ScopeChain"],[3,"Annotator"],[3,"Index"],[3,"Checker"],[3,"Substs"],[4,"RegionSubsts"],[4,"ParamSpace"],[3,"VecPerParamSpace"],[3,"EnumeratedItems"],[3,"SubstFolder"],[3,"RegionObligation"],[3,"FulfillmentContext"],[3,"MismatchedProjectionTypes"],[4,"ProjectionTyCandidate"],[3,"AssociatedTypeNormalizer"],[3,"Normalized"],[4,"ProjectionTyError"],[4,"MethodViolationCode"],[4,"ObjectSafetyViolation"],[3,"SelectionCache"],[4,"MethodMatchedData"],[4,"SelectionCandidate"],[4,"EvaluationResult"],[3,"SelectionContext"],[3,"TraitObligationStack"],[4,"MethodMatchResult"],[3,"Elaborator"],[3,"FilterToTraits"],[3,"VtableImplData"],[3,"VtableObjectData"],[3,"Obligation"],[4,"Vtable"],[3,"VtableBuiltinData"],[3,"VtableDefaultImplData"],[4,"SelectionError"],[3,"FulfillmentError"],[4,"FulfillmentErrorCode"],[3,"ObligationCause"],[4,"ObligationCauseCode"],[3,"DerivedObligationCause"],[3,"field"],[4,"ImplOrTraitItemContainer"],[4,"ImplOrTraitItem"],[4,"ImplOrTraitItemId"],[3,"Method"],[3,"AssociatedType"],[3,"mt"],[3,"field_ty"],[3,"creader_cache_key"],[3,"ItemVariances"],[4,"Variance"],[4,"AutoAdjustment"],[4,"UnsizeKind"],[3,"AutoDerefRef"],[4,"AutoRef"],[3,"param_index"],[3,"MethodParam"],[3,"MethodObject"],[3,"MethodCallee"],[3,"MethodCall"],[4,"ExprAdjustment"],[4,"vtable_origin"],[3,"CtxtArenas"],[3,"TypeFlags"],[3,"ctxt"],[3,"TyS"],[3,"InternedTy"],[3,"BareFnTy"],[3,"ClosureTy"],[4,"FnOutput"],[3,"ParamTy"],[3,"DebruijnIndex"],[3,"UpvarId"],[4,"BorrowKind"],[4,"sty"],[3,"TyTrait"],[4,"terr_vstore_kind"],[3,"expected_found"],[4,"type_err"],[3,"ParamBounds"],[3,"ExistentialBounds"],[4,"BuiltinBound"],[3,"TyVid"],[3,"RegionVid"],[4,"InferTy"],[4,"UnconstrainedNumeric"],[4,"InferRegion"],[4,"ObjectLifetimeDefault"],[3,"TypeParameterDef"],[3,"RegionParameterDef"],[3,"Generics"],[3,"GenericPredicates"],[4,"Predicate"],[3,"TraitPredicate"],[3,"EquatePredicate"],[3,"OutlivesPredicate"],[3,"ProjectionTy"],[3,"InstantiatedPredicates"],[3,"ParameterEnvironment"],[3,"TypeScheme"],[3,"ItemSubsts"],[3,"TypeContents"],[4,"Representability"],[3,"VariantInfo"],[4,"DtorKind"],[3,"ClosureUpvar"],[4,"ExplicitSelfCategory"],[3,"Vec"],[3,"Box"],[3,"OwnedSlice"],[3,"EnumSet"],[3,"BottomUpFolder"],[3,"RegionFolder"],[3,"RegionEraser"],[3,"TypeWalker"],[3,"Context"],[4,"astencode_tag"],[3,"LinkMeta"],[4,"DefIdSource"],[3,"entry"],[3,"EncodeVisitor"],[3,"ImplVisitor"],[4,"Family"],[4,"DefLike"],[3,"CrateDep"],[3,"CrateReader"],[4,"PMDSource"],[4,"LinkagePreference"],[4,"NativeLibraryKind"],[3,"CrateSource"],[3,"CStore"],[3,"crate_metadata"],[4,"MetadataBlob"],[3,"Context"],[3,"ArchiveMetadata"],[3,"FileSearch"],[3,"MacroLoader"],[4,"OptLevel"],[4,"DebugInfoLevel"],[4,"OutputType"],[3,"Options"],[4,"UnstableFeatures"],[4,"PrintRequest"],[4,"Input"],[3,"OutputFilenames"],[4,"EntryFnType"],[4,"CrateType"],[4,"Passes"],[3,"CodegenOptions"],[3,"DebuggingOptions"],[4,"OptionStability"],[3,"RustcOptGroup"],[3,"SearchPaths"],[4,"PathKind"],[3,"Iter"],[3,"Session"],[3,"Registry"],[3,"RegistrarFinder"],[3,"Lint"],[3,"LintId"],[4,"Level"],[4,"LintSource"],[3,"HardwiredLints"],[3,"LintStore"],[3,"Context"],[3,"GatherNodeLevels"],[3,"ErrorReported"],[3,"Indenter"],[3,"LoopQueryVisitor"],[3,"BlockQueryVisitor"],[3,"P"],[3,"TraitDef"],[4,"TraitItem"],[3,"Path"],[3,"Ty"],[3,"Item"],[3,"Lifetime"],[3,"Spanned"],[4,"ExplicitSelf_"],[4,"Visibility"],[4,"Abi"],[4,"Mutability"],[4,"IntTy"],[4,"UintTy"],[3,"HashMap"],[3,"FnvHasher"],[3,"SnapshotVec"],[3,"FixedBuffer64"],[3,"Sha256"],[3,"ArchiveRO"],[4,"OptimizationDiagnosticKind"],[4,"Diagnostic"],[4,"CallConv"],[4,"DiagnosticSeverity"],[3,"Attribute"],[4,"OtherAttribute"],[4,"SpecialAttribute"],[3,"AttrBuilder"],[4,"TypeKind"],[4,"CodeGenOptLevel"],[4,"RelocMode"],[3,"TargetData"],[3,"ObjectFile"],[3,"SectionIter"],[3,"DataflowLabeller"],[4,"Variant"]]};
searchIndex['rustc_trans'] = {"items":[[0,"","rustc_trans","The Rust compiler."],[0,"session","",""],[0,"config","rustc_trans::session","Contains infrastructure for configuring the compiler, including parsing\ncommand line options."],[11,"open","rustc_back::archive","Opens an existing static archive",0],[11,"remove_file","","Removes a file from this archive",0],[11,"files","","Lists all files in an archive",0],[11,"extend","","Creates an `ArchiveBuilder` for adding files to this archive.",0],[11,"create","","Create a new static archive, ready for adding files.",1],[11,"add_native_library","","Adds all of the contents of a native library to this archive. This will\nsearch in the relevant locations for a library named `name`.",1],[11,"add_rlib","","Adds all of the contents of the rlib at the specified path to this\narchive.",1],[11,"add_file","","Adds an arbitrary file to this archive",1],[11,"update_symbols","","Indicate that the next call to `build` should updates all symbols in\nthe archive (run 'ar s' over it).",1],[11,"build","","Combine the provided files, rlibs, and native libraries into a single\n`Archive`.",1],[11,"fmt","rustc_back::svh","",2],[11,"eq","","",2],[11,"ne","","",2],[11,"clone","","",2],[11,"new","","",2],[11,"as_str","","",2],[11,"calculate","","",2],[11,"fmt","","",2],[11,"hash","rustc_back::svh::svh_visitor","",3],[11,"hash","","",4],[11,"hash","","",5],[11,"get_content","syntax::ast","",6],[11,"get_content","","",7],[11,"visit_mac","rustc_back::svh::svh_visitor","",8],[11,"visit_struct_def","","",8],[11,"visit_variant","","",8],[11,"visit_opt_lifetime_ref","","",8],[11,"visit_ident","","",8],[11,"visit_lifetime_ref","","",8],[11,"visit_lifetime_def","","",8],[11,"visit_expr","","",8],[11,"visit_stmt","","",8],[11,"visit_foreign_item","","",8],[11,"visit_item","","",8],[11,"visit_mod","","",8],[11,"visit_decl","","",8],[11,"visit_ty","","",8],[11,"visit_generics","","",8],[11,"visit_fn","","",8],[11,"visit_ty_method","","",8],[11,"visit_trait_item","","",8],[11,"visit_struct_field","","",8],[11,"visit_explicit_self","","",8],[11,"visit_path","","",8],[11,"visit_block","","",8],[11,"visit_pat","","",8],[11,"visit_local","","",8],[11,"visit_arm","","",8],[11,"tr_id","rustc::middle::astencode","Translates an internal id, meaning a node id that is known to refer to some part of the\nitem currently being inlined, such as a local variable or argument.  All naked node-ids\nthat appear in types have this property, since if something might refer to an external item\nwe would use a def-id to allow for the possibility that the item resides in another crate.",9],[11,"tr_def_id","","Translates an EXTERNAL def-id, converting the crate number from the one used in the encoded\ndata to the current crate numbers..  By external, I mean that it be translated to a\nreference to the item in its original crate, as opposed to being translated to a reference\nto the inlined version of the item.  This is typically, but not always, what you want,\nbecause most def-ids refer to external things like types or other fns that may or may not\nbe inlined.  Note that even when the inlined function is referencing itself recursively, we\nwould want `tr_def_id` for that reference--- conceptually the function calls the original,\nnon-inlined version, and trans deals with linking that recursive call to the inlined copy.",9],[11,"tr_intern_def_id","","Translates an INTERNAL def-id, meaning a def-id that is\nknown to refer to some part of the item currently being\ninlined.  In that case, we want to convert the def-id to\nrefer to the current crate and to the new, inlined node-id.",9],[11,"tr_span","","Translates a `Span` from an extern crate to the corresponding `Span`\nwithin the local crate's codemap. `creader::import_codemap()` will\nalready have allocated any additionally needed FileMaps in the local\ncodemap as a side-effect of creating the crate_metadata's\n`codemap_import_info`.",9],[11,"tr_intern","syntax::ast","",10],[11,"tr","","",10],[11,"tr","core::option","",11],[11,"tr","syntax::codemap","",12],[11,"fold_block","rustc::middle::astencode","",13],[11,"tr","rustc::middle::def","",14],[11,"tr","rustc::middle::ty","",15],[11,"tr","","",16],[11,"tr","rustc::middle::region","",17],[11,"tr","","",18],[11,"tr","rustc::middle::ty","",19],[11,"read_freevar_entry","rbml::reader","",20],[11,"read_capture_mode","","",20],[11,"tr","rustc::middle::ty","",21],[11,"tr","","",22],[11,"tr","","",23],[11,"read_method_callee","rbml::reader","",20],[11,"tr","rustc::middle::ty","",24],[11,"read_vec_per_param_space","rbml::reader","",20],[11,"read_vtable_res_with_key","","",20],[11,"read_vtable_res","","",20],[11,"read_vtable_param_res","","",20],[11,"read_vtable_origin","","",20],[11,"ty_str_ctxt","rustc::metadata::encoder","",25],[11,"emit_closure_type","rbml::writer","",26],[11,"emit_method_origin","","",26],[11,"emit_ty","","",26],[11,"emit_tys","","",26],[11,"emit_trait_ref","","",26],[11,"emit_type_param_def","","",26],[11,"emit_predicate","","",26],[11,"emit_type_scheme","","",26],[11,"emit_existential_bounds","","",26],[11,"emit_builtin_bounds","","",26],[11,"emit_substs","","",26],[11,"emit_auto_adjustment","","",26],[11,"emit_autoref","","",26],[11,"emit_auto_deref_ref","","",26],[11,"emit_unsize_kind","","",26],[11,"tag","","",26],[11,"id","","",26],[11,"visit_id","rustc::middle::astencode","",27],[11,"as_int","rbml","",28],[11,"opt_child","","",28],[11,"read_ty_nodcx","rbml::reader","",20],[11,"read_tys_nodcx","","",20],[11,"read_substs_nodcx","","",20],[11,"read_method_origin","","",20],[11,"read_ty","","",20],[11,"read_tys","","",20],[11,"read_trait_ref","","",20],[11,"read_poly_trait_ref","","",20],[11,"read_type_param_def","","",20],[11,"read_predicate","","",20],[11,"read_type_scheme","","",20],[11,"read_existential_bounds","","",20],[11,"read_substs","","",20],[11,"read_auto_adjustment","","",20],[11,"read_auto_deref_ref","","",20],[11,"read_autoref","","",20],[11,"read_unsize_kind","","",20],[11,"read_closure_kind","","",20],[11,"read_closure_ty","","",20],[11,"convert_def_id","","Converts a def-id that appears in a type.  The correct\ntranslation will depend on what kind of def-id this is.\nThis is a subtle point: type definitions are not\ninlined into the current crate, so if the def-id names\na nominal type or type alias, then it should be\ntranslated to refer to the source crate.",20],[11,"graph_id","rustc::middle::cfg::graphviz","",29],[11,"node_id","","",29],[11,"node_label","","",29],[11,"edge_label","","",29],[11,"nodes","","",29],[11,"edges","","",29],[11,"source","","",29],[11,"target","","",29],[11,"eq","rustc::middle::cfg","",30],[11,"ne","","",30],[11,"id","","",30],[11,"new","","",31],[11,"node_is_reachable","","",31],[11,"hash","rustc::middle::check_const","",32],[11,"cmp","","",32],[11,"partial_cmp","","",32],[11,"lt","","",32],[11,"le","","",32],[11,"gt","","",32],[11,"ge","","",32],[11,"clone","","",32],[11,"eq","","",32],[11,"ne","","",32],[11,"decode","","",32],[11,"encode","","",32],[11,"empty","","Returns an empty set of flags.",32],[11,"all","","Returns the set containing all flags.",32],[11,"bits","","Returns the raw value of the flags currently stored.",32],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",32],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",32],[11,"is_empty","","Returns `true` if no flags are currently stored.",32],[11,"is_all","","Returns `true` if all flags are currently set.",32],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",32],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",32],[11,"insert","","Inserts the specified flags in-place.",32],[11,"remove","","Removes the specified flags in-place.",32],[11,"toggle","","Toggles the specified flags in-place.",32],[6,"Output","rustc_trans::session::config",""],[11,"bitor","rustc::middle::check_const","Returns the union of the two sets of flags.",32],[6,"Output","rustc_trans::session::config",""],[11,"bitxor","rustc::middle::check_const","Returns the left flags, but with all the right flags toggled.",32],[6,"Output","rustc_trans::session::config",""],[11,"bitand","rustc::middle::check_const","Returns the intersection between the two sets of flags.",32],[6,"Output","rustc_trans::session::config",""],[11,"sub","rustc::middle::check_const","Returns the set difference of the two sets of flags.",32],[6,"Output","rustc_trans::session::config",""],[11,"not","rustc::middle::check_const","Returns the complement of this set of flags.",32],[11,"eq","","",33],[11,"ne","","",33],[11,"visit_item","","",34],[11,"visit_fn","","",34],[11,"visit_pat","","",34],[11,"visit_expr","","",34],[11,"consume","","",34],[11,"borrow","","",34],[11,"decl_without_init","","",34],[11,"mutate","","",34],[11,"matched_pat","","",34],[11,"consume_pat","","",34],[11,"visit_item","rustc::middle::check_static_recursion","",35],[11,"visit_item","","",36],[11,"visit_expr","","",36],[11,"eq","rustc::middle::check_loop","",37],[11,"ne","","",37],[11,"clone","","",37],[11,"visit_item","","",38],[11,"visit_expr","","",38],[11,"fmt","rustc::middle::check_match","",39],[11,"from_iter","","",39],[11,"eq","","",40],[11,"ne","","",40],[11,"clone","","",40],[11,"eq","","",41],[11,"ne","","",41],[11,"clone","","",41],[11,"visit_expr","","",42],[11,"visit_local","","",42],[11,"visit_fn","","",42],[11,"new","","",43],[11,"visit_id","","",44],[11,"fold_pat","","",43],[11,"matched_pat","","",45],[11,"consume","","",45],[11,"consume_pat","","",45],[11,"borrow","","",45],[11,"decl_without_init","","",45],[11,"mutate","","",45],[11,"visit_pat","","",46],[11,"visit_fn","rustc::middle::check_rvalues","",47],[11,"consume","","",48],[11,"matched_pat","","",48],[11,"consume_pat","","",48],[11,"borrow","","",48],[11,"decl_without_init","","",48],[11,"mutate","","",48],[11,"eq","rustc::middle::const_eval","",49],[11,"ne","","",49],[11,"clone","","",49],[11,"clone","","",50],[11,"clone","","",51],[11,"description","","",50],[11,"fmt","rustc::middle::dataflow","",52],[11,"clone","","",53],[11,"pre","","",53],[11,"new","","",53],[11,"add_gen","","Indicates that `id` generates `bit`",53],[11,"add_kill","","Indicates that `id` kills `bit`",53],[11,"each_bit_on_entry","","Iterates through each bit that is set on entry to `id`.\nOnly useful after `propagate()` has been called.",53],[11,"each_bit_for_node","","Iterates through each bit that is set on entry/exit to `cfgidx`.\nOnly useful after `propagate()` has been called.",53],[11,"each_gen_bit","","Iterates through each bit in the gen set for `id`.",53],[11,"add_kills_from_flow_exits","","Whenever you have a `break` or `continue` statement, flow\nexits through any number of enclosing scopes on its way to\nthe new destination. This function infers the kill bits of\nthose control operators based on the kill bits associated\nwith those scopes.",53],[11,"propagate","","Performs the data flow analysis.",53],[11,"join","","",54],[11,"join","","",55],[11,"visit_struct_def","rustc::middle::dead","",56],[11,"visit_expr","","",56],[11,"visit_pat","","",56],[11,"visit_path","","",56],[11,"visit_item","","",56],[11,"visit_item","","",57],[11,"visit_fn","","",57],[11,"visit_item","","",58],[11,"visit_foreign_item","","",58],[11,"visit_fn","","",58],[11,"visit_struct_field","","",58],[11,"visit_trait_item","","",58],[11,"fmt","rustc::middle::def","",14],[11,"hash","","",14],[11,"decode","","",14],[11,"encode","","",14],[11,"eq","","",14],[11,"ne","","",14],[11,"clone","","",14],[11,"fmt","","",59],[11,"full_def","","Get the definition, if fully resolved, otherwise panic.",59],[11,"def_id","","Get the DefId, if fully resolved, otherwise panic.",59],[11,"fmt","","",60],[11,"hash","","",60],[11,"decode","","",60],[11,"encode","","",60],[11,"eq","","",60],[11,"ne","","",60],[11,"clone","","",60],[11,"map","","",60],[11,"local_node_id","","",14],[11,"def_id","","",14],[11,"variant_def_ids","","",14],[11,"eq","rustc::middle::effect","",61],[11,"ne","","",61],[11,"visit_fn","","",62],[11,"visit_block","","",62],[11,"visit_expr","","",62],[11,"visit_item","rustc::middle::entry","",63],[11,"fmt","rustc::middle::expr_use_visitor","",64],[11,"eq","","",64],[11,"ne","","",64],[11,"fmt","","",65],[11,"eq","","",65],[11,"ne","","",65],[11,"fmt","","",66],[11,"eq","","",66],[11,"ne","","",66],[11,"fmt","","",67],[11,"eq","","",67],[11,"ne","","",67],[11,"fmt","","",68],[11,"eq","","",68],[11,"ne","","",68],[11,"fmt","","",69],[11,"eq","","",69],[11,"ne","","",69],[11,"new","","",70],[11,"walk_fn","","",70],[11,"consume_expr","","",70],[11,"walk_expr","","",70],[11,"hash","rustc::middle::fast_reject","",71],[11,"eq","","",71],[11,"ne","","",71],[11,"clone","","",71],[11,"fmt","rustc::middle::graph","",72],[11,"fmt","","",73],[11,"eq","","",73],[11,"ne","","",73],[11,"clone","","",73],[11,"fmt","","",74],[11,"eq","","",74],[11,"ne","","",74],[11,"fmt","","",75],[11,"node_id","","Returns unique id (unique with respect to the graph holding associated node).",73],[11,"edge_id","","Returns unique id (unique with respect to the graph holding associated edge).",74],[11,"new","","",76],[11,"with_capacity","","",76],[11,"all_nodes","","",76],[11,"all_edges","","",76],[11,"next_node_index","","",76],[11,"add_node","","",76],[11,"mut_node_data","","",76],[11,"node_data","","",76],[11,"node","","",76],[11,"next_edge_index","","",76],[11,"add_edge","","",76],[11,"mut_edge_data","","",76],[11,"edge_data","","",76],[11,"edge","","",76],[11,"first_adjacent","","Accesses the index of the first edge adjacent to `node`.\nThis is useful if you wish to modify the graph while walking\nthe linked list of edges.",76],[11,"next_adjacent","","Accesses the next edge in a given direction.\nThis is useful if you wish to modify the graph while walking\nthe linked list of edges.",76],[11,"each_node","","Iterates over all edges defined in the graph.",76],[11,"each_edge","","Iterates over all edges defined in the graph",76],[11,"each_outgoing_edge","","Iterates over all outgoing edges from the node `from`",76],[11,"each_incoming_edge","","Iterates over all incoming edges to the node `target`",76],[11,"each_adjacent_edge","","Iterates over all edges adjacent to the node `node`\nin the direction `dir` (either `Outgoing` or `Incoming)",76],[11,"iterate_until_fixed_point","","",76],[11,"depth_traverse","","",76],[6,"Item","rustc_trans::session::config",""],[11,"next","rustc::middle::graph","",77],[11,"source","","",72],[11,"target","","",72],[11,"visit_fn","rustc::middle::intrinsicck","",78],[11,"visit_expr","","",78],[11,"repr","rustc::middle::ty","",79],[11,"tag","rustc::middle::infer::bivariate","",80],[11,"fields","","",80],[11,"tys_with_variance","","",80],[11,"regions_with_variance","","",80],[11,"regions","","",80],[11,"mts","","",80],[11,"unsafeties","","",80],[11,"builtin_bounds","","",80],[11,"tys","","",80],[11,"binders","","",80],[11,"combine","alloc::rc","",81],[11,"combine","rustc::middle::ty","",82],[11,"combine","","",83],[11,"combine","","",84],[11,"clone","rustc::middle::infer::combine","",85],[11,"switch_expected","","",85],[11,"instantiate","","",85],[11,"tcx","","",86],[11,"fold_ty","","",86],[11,"fold_region","","",86],[11,"tag","rustc::middle::infer::equate","",87],[11,"fields","","",87],[11,"tys_with_variance","","",87],[11,"regions_with_variance","","",87],[11,"regions","","",87],[11,"mts","","",87],[11,"unsafeties","","",87],[11,"builtin_bounds","","",87],[11,"tys","","",87],[11,"binders","","",87],[11,"report_region_errors","rustc::middle::infer","",88],[11,"process_errors","","",88],[11,"report_type_error","","",88],[11,"report_and_explain_type_error","","",88],[11,"values_str","","Returns a string of the form \"expected `{}`, found `{}`\", or None if this is a derived\nerror.",88],[11,"expected_found_str","","",88],[11,"report_generic_bound_failure","","",88],[11,"report_concrete_failure","","",88],[11,"report_sub_sup_conflict","","",88],[11,"report_sup_sup_conflict","","",88],[11,"report_processed_errors","","",88],[11,"give_suggestion","","",88],[11,"give_expl_lifetime_param","","",88],[11,"report_inference_failure","","",88],[11,"note_region_origin","","",88],[11,"resolve","alloc::rc","",81],[11,"contains_error","","",81],[11,"resolve","rustc::middle::ty","",89],[11,"contains_error","","",89],[11,"tag","rustc::middle::infer::glb","",90],[11,"fields","","",90],[11,"tys_with_variance","","",90],[11,"regions_with_variance","","",90],[11,"mts","","",90],[11,"unsafeties","","",90],[11,"builtin_bounds","","",90],[11,"regions","","",90],[11,"tys","","",90],[11,"binders","","",90],[11,"tainted_regions","rustc::middle::infer","",88],[11,"region_vars_confined_to_snapshot","","Returns the set of region variables that do not affect any\ntypes/regions which existed before `snapshot` was\nstarted. This is used in the sub/lub/glb computations. The\nidea here is that when we are computing lub/glb of two\nregions, we sometimes create intermediate region variables.\nThose region variables may touch some of the skolemized or\nother \"forbidden\" regions we created to replace bound\nregions, but they don't really represent an \"external\"\nconstraint.",88],[11,"relate_bound","rustc::middle::infer::lub","",91],[11,"relate_bound","rustc::middle::infer::glb","",90],[11,"tag","rustc::middle::infer::lub","",91],[11,"fields","","",91],[11,"tys_with_variance","","",91],[11,"regions_with_variance","","",91],[11,"mts","","",91],[11,"unsafeties","","",91],[11,"builtin_bounds","","",91],[11,"regions","","",91],[11,"tys","","",91],[11,"binders","","",91],[11,"fmt","rustc::middle::infer::region_inference::graphviz","",92],[11,"eq","","",92],[11,"ne","","",92],[11,"hash","","",92],[11,"clone","","",92],[11,"fmt","","",93],[11,"eq","","",93],[11,"ne","","",93],[11,"clone","","",93],[11,"graph_id","","",94],[11,"node_id","","",94],[11,"node_label","","",94],[11,"edge_label","","",94],[11,"nodes","","",94],[11,"edges","","",94],[11,"source","","",94],[11,"target","","",94],[11,"fmt","rustc::middle::infer::region_inference","",95],[11,"hash","","",95],[11,"eq","","",95],[11,"ne","","",95],[11,"clone","","",95],[11,"eq","","",96],[11,"ne","","",96],[11,"fmt","","",96],[11,"clone","","",96],[11,"hash","","",97],[11,"eq","","",97],[11,"ne","","",97],[11,"eq","","",98],[11,"ne","","",98],[11,"eq","","",99],[11,"ne","","",99],[11,"fmt","","",100],[11,"clone","","",100],[11,"fmt","","",101],[11,"clone","","",101],[11,"contains","","",101],[11,"push","","",101],[11,"fmt","","",102],[11,"new","","",103],[11,"start_snapshot","","",103],[11,"commit","","",103],[11,"rollback_to","","",103],[11,"num_vars","","",103],[11,"new_region_var","","",103],[11,"new_skolemized","","Creates a new skolemized region. Skolemized regions are fresh\nregions used when performing higher-ranked computations. They\nmust be used in a very particular way and are never supposed\nto \"escape\" out into error messages or the code at large.",103],[11,"new_bound","","",103],[11,"add_given","","",103],[11,"make_eqregion","","",103],[11,"make_subregion","","",103],[11,"verify_generic_bound","","See `Verify::VerifyGenericBound`",103],[11,"lub_regions","","",103],[11,"glb_regions","","",103],[11,"resolve_var","","",103],[11,"combine_vars","","",103],[11,"vars_created_since_snapshot","","",103],[11,"tainted","","Computes all regions that have been related to `r0` in any way since the mark `mark` was\nmade---`r0` itself will be the first entry. This is used when checking whether skolemized\nregions are being improperly related to other regions.",103],[11,"resolve_regions","","This function performs the actual region resolution.  It must be\ncalled after all constraints have been added.  It performs a\nfixed-point iteration to find region values which satisfy all\nconstraints, assuming such values can be found; if they cannot,\nerrors are reported.",103],[11,"fmt","","",104],[11,"eq","","",104],[11,"ne","","",104],[11,"repr","","",95],[11,"repr","","",105],[11,"repr","","",106],[11,"repr","","",107],[11,"repr","","",96],[11,"user_string","","",96],[11,"to_ty","","",96],[11,"new","rustc::middle::infer::resolve","",108],[11,"tcx","","",108],[11,"fold_ty","","",108],[11,"tcx","","",109],[11,"fold_ty","","",109],[11,"fold_region","","",109],[11,"new","rustc::middle::infer::freshen","",110],[11,"tcx","","",110],[11,"fold_region","","",110],[11,"fold_ty","","",110],[11,"tag","rustc::middle::infer::sub","",111],[11,"fields","","",111],[11,"tys_with_variance","","",111],[11,"regions_with_variance","","",111],[11,"regions","","",111],[11,"mts","","",111],[11,"unsafeties","","",111],[11,"builtin_bounds","","",111],[11,"tys","","",111],[11,"binders","","",111],[11,"fmt","rustc::middle::infer::type_variable","",112],[11,"eq","","",112],[11,"ne","","",112],[11,"new","","",113],[11,"var_diverges","","",113],[11,"relate_vars","","Records that `a <: b`, `a :> b`, or `a == b`, depending on `dir`.",113],[11,"instantiate_and_push","","Instantiates `vid` with the type `ty` and then pushes an entry onto `stack` for each of the\nrelations of `vid` to other variables. The relations will have the form `(ty, dir, vid1)`\nwhere `vid1` is some other variable id.",113],[11,"new_var","","",113],[11,"probe","","",113],[11,"replace_if_possible","","",113],[11,"snapshot","","",113],[11,"rollback_to","","",113],[11,"commit","","",113],[11,"types_escaping_snapshot","","Find the set of type variables that existed *before* `s`\nbut which have only been unified since `s` started, and\nreturn the types with which they were unified. So if we had\na type variable `V0`, then we started the snapshot, then we\ncreated a type variable `V1`, unifed `V0` with `T0`, and\nunified `V1` with `T1`, this function would return `{T0}`.",113],[6,"Value","rustc_trans::session::config",""],[6,"Undo","",""],[11,"reverse","rustc::middle::infer::type_variable","",114],[11,"fmt","rustc::middle::infer::unify","",115],[11,"clone","","",115],[11,"eq","","",115],[11,"ne","","",115],[11,"new","","",116],[11,"snapshot","","Starts a new snapshot. Each snapshot must be either\nrolled back or committed in a \"LIFO\" (stack) order.",116],[11,"rollback_to","","Reverses all changes since the last snapshot. Also\nremoves any keys that have been created since then.",116],[11,"commit","","Commits all changes since the last snapshot. Of course, they\ncan still be undone if there is a snapshot further out.",116],[11,"new_key","","",116],[11,"get","","Find the root node for `vid`. This uses the standard union-find algorithm with path\ncompression: http://en.wikipedia.org/wiki/Disjoint-set_data_structure",116],[11,"set","","Sets the value for `vid` to `new_value`. `vid` MUST be a root node! Also, we must be in the\nmiddle of a snapshot.",116],[11,"unify","","Either redirects node_a to node_b or vice versa, depending on the relative rank. Returns\nthe new root and rank. You should then update the value of the new root to something\nsuitable.",116],[6,"Value","rustc_trans::session::config",""],[6,"Undo","",""],[11,"reverse","rustc::middle::infer::unify","",117],[11,"simple_vars","rustc::middle::infer","Unifies two simple keys. Because simple keys do not have any subtyping relationships, if\nboth keys have already been associated with a value, then those two values must be the\nsame.",88],[11,"simple_var_t","","Sets the value of the key `a_id` to `b`. Because simple keys do not have any subtyping\nrelationships, if `a_id` already has a value, it must be the same as `b`.",88],[11,"probe_var","","",88],[6,"Value","rustc_trans::session::config",""],[11,"index","rustc::middle::ty","",118],[11,"from_index","","",118],[11,"unification_table","","",118],[11,"tag","","",118],[11,"to_type","","",119],[11,"to_type_err","","",119],[6,"Value","rustc_trans::session::config",""],[11,"index","rustc::middle::ty","",120],[11,"from_index","","",120],[11,"unification_table","","",120],[11,"tag","","",120],[11,"to_type","syntax::ast","",121],[11,"to_type_err","","",121],[11,"fmt","rustc::middle::infer","",122],[11,"clone","","",122],[11,"fmt","","",123],[11,"clone","","",123],[11,"fmt","","",124],[11,"clone","","",124],[11,"fmt","","",125],[11,"clone","","",125],[11,"fmt","","",126],[11,"clone","","",126],[11,"fmt","","",127],[11,"clone","","",127],[11,"fmt","","",128],[11,"then","core::result","",129],[11,"to_ures","","",129],[11,"compare","","",129],[11,"freshen","rustc::middle::infer","",88],[11,"type_var_diverges","","",88],[11,"freshener","","",88],[11,"type_is_unconstrained_numeric","","",88],[11,"combine_fields","","",88],[11,"equate","","",88],[11,"sub","","",88],[11,"lub","","",88],[11,"commit_unconditionally","","Execute `f` and commit the bindings",88],[11,"commit_if_ok","","Execute `f` and commit the bindings if successful",88],[11,"commit_regions_if_ok","","Execute `f` and commit only the region bindings if successful.\nThe function f must be very careful not to leak any non-region\nvariables that get created.",88],[11,"try","","Execute `f`, unroll bindings on panic",88],[11,"probe","","Execute `f` then unroll any bindings it creates",88],[11,"add_given","","",88],[11,"sub_types","","",88],[11,"eq_types","","",88],[11,"sub_trait_refs","","",88],[11,"sub_poly_trait_refs","","",88],[11,"skolemize_late_bound_regions","","See `higher_ranked::skolemize_late_bound_regions`",88],[11,"leak_check","","See `higher_ranked::leak_check`",88],[11,"plug_leaks","","See `higher_ranked::plug_leaks`",88],[11,"equality_predicate","","",88],[11,"region_outlives_predicate","","",88],[11,"next_ty_var_id","","",88],[11,"next_ty_var","","",88],[11,"next_diverging_ty_var","","",88],[11,"next_ty_vars","","",88],[11,"next_int_var_id","","",88],[11,"next_float_var_id","","",88],[11,"next_region_var","","",88],[11,"region_vars_for_defs","","",88],[11,"fresh_substs_for_generics","","Given a set of generics defined on a type or impl, returns a substitution mapping each\ntype/region parameter to a fresh inference variable.",88],[11,"fresh_substs_for_trait","","Given a set of generics defined on a trait, returns a substitution mapping each output\ntype/region parameter to a fresh inference variable, and mapping the self type to\n`self_ty`.",88],[11,"fresh_bound_region","","",88],[11,"resolve_regions_and_report_errors","","",88],[11,"ty_to_string","","",88],[11,"tys_to_string","","",88],[11,"trait_ref_to_string","","",88],[11,"shallow_resolve","","",88],[11,"resolve_type_vars_if_possible","","Where possible, replaces type/int/float variables in\n`value` with their final value. Note that region variables\nare unaffected. If a type variable has not been unified, it\nis left as is.  This is an idempotent operation that does\nnot affect inference state in any way and so you can do it\nat will.",88],[11,"fully_resolve","","Attempts to resolve all type/region variables in\n`value`. Region inference must have been run already (e.g.,\nby calling `resolve_regions_and_report_errors`).  If some\nvariable was never unified, an `Err` results.",88],[11,"type_error_message_str","","",88],[11,"type_error_message_str_with_expected","","",88],[11,"type_error_message","","",88],[11,"report_mismatched_types","","",88],[11,"replace_late_bound_regions_with_fresh_var","","",88],[11,"verify_generic_bound","","See `verify_generic_bound` method in `region_inference`",88],[11,"can_equate","","",88],[11,"span","","",124],[11,"types","","",124],[11,"dummy","","",124],[11,"repr","","",124],[11,"span","","",122],[11,"repr","","",122],[11,"span","","",125],[11,"repr","","",125],[11,"span","","",127],[11,"repr","","",127],[11,"hash","rustc::middle::lang_items","",130],[11,"eq","","",130],[11,"ne","","",130],[11,"from_i64","","",130],[11,"from_u64","","",130],[11,"new","","",131],[11,"items","","",131],[11,"item_name","","",131],[11,"require","","",131],[11,"from_builtin_kind","","",131],[11,"to_builtin_kind","","",131],[11,"fn_trait_kind","","",131],[11,"send_trait","","",131],[11,"sized_trait","","",131],[11,"copy_trait","","",131],[11,"sync_trait","","",131],[11,"drop_trait","","",131],[11,"add_trait","","",131],[11,"sub_trait","","",131],[11,"mul_trait","","",131],[11,"div_trait","","",131],[11,"rem_trait","","",131],[11,"neg_trait","","",131],[11,"not_trait","","",131],[11,"bitxor_trait","","",131],[11,"bitand_trait","","",131],[11,"bitor_trait","","",131],[11,"shl_trait","","",131],[11,"shr_trait","","",131],[11,"index_trait","","",131],[11,"index_mut_trait","","",131],[11,"range_struct","","",131],[11,"range_from_struct","","",131],[11,"range_to_struct","","",131],[11,"range_full_struct","","",131],[11,"unsafe_cell_type","","",131],[11,"deref_trait","","",131],[11,"deref_mut_trait","","",131],[11,"fn_trait","","",131],[11,"fn_mut_trait","","",131],[11,"fn_once_trait","","",131],[11,"eq_trait","","",131],[11,"ord_trait","","",131],[11,"str_eq_fn","","",131],[11,"panic_fn","","",131],[11,"panic_bounds_check_fn","","",131],[11,"panic_fmt","","",131],[11,"exchange_malloc_fn","","",131],[11,"exchange_free_fn","","",131],[11,"strdup_uniq_fn","","",131],[11,"start_fn","","",131],[11,"ty_desc","","",131],[11,"opaque","","",131],[11,"eh_personality","","",131],[11,"exchange_heap","","",131],[11,"owned_box","","",131],[11,"phantom_fn","","",131],[11,"phantom_data","","",131],[11,"covariant_type","","",131],[11,"contravariant_type","","",131],[11,"invariant_type","","",131],[11,"covariant_lifetime","","",131],[11,"contravariant_lifetime","","",131],[11,"invariant_lifetime","","",131],[11,"no_copy_bound","","",131],[11,"managed_bound","","",131],[11,"non_zero","","",131],[11,"stack_exhausted","","",131],[11,"debug_trait","","",131],[11,"visit_item","","",132],[11,"new","","",132],[11,"collect_item","","",132],[11,"collect_local_language_items","","",132],[11,"collect_external_language_items","","",132],[11,"collect","","",132],[11,"eq","rustc::middle::liveness","",133],[11,"ne","","",133],[11,"eq","","",134],[11,"ne","","",134],[11,"clone","","",134],[11,"fmt","","",135],[11,"eq","","",135],[11,"ne","","",135],[11,"visit_fn","","",136],[11,"visit_local","","",136],[11,"visit_expr","","",136],[11,"visit_arm","","",136],[11,"fmt","","",134],[11,"fmt","","",133],[11,"fmt","","",137],[11,"fmt","","",138],[11,"visit_fn","","",139],[11,"visit_local","","",139],[11,"visit_expr","","",139],[11,"visit_arm","","",139],[11,"clone","","",140],[11,"fmt","rustc::middle::mem_categorization","",141],[11,"eq","","",141],[11,"ne","","",141],[11,"clone","","",141],[11,"fmt","","",142],[11,"eq","","",142],[11,"ne","","",142],[11,"clone","","",142],[11,"fmt","","",143],[11,"hash","","",143],[11,"eq","","",143],[11,"ne","","",143],[11,"clone","","",143],[11,"fmt","","",144],[11,"hash","","",144],[11,"eq","","",144],[11,"ne","","",144],[11,"clone","","",144],[11,"fmt","","",145],[11,"hash","","",145],[11,"eq","","",145],[11,"ne","","",145],[11,"clone","","",145],[11,"fmt","","",146],[11,"hash","","",146],[11,"eq","","",146],[11,"ne","","",146],[11,"clone","","",146],[11,"fmt","","",147],[11,"hash","","",147],[11,"eq","","",147],[11,"ne","","",147],[11,"clone","","",147],[11,"fmt","","",148],[11,"hash","","",148],[11,"eq","","",148],[11,"ne","","",148],[11,"clone","","",148],[11,"fmt","","",149],[11,"eq","","",149],[11,"ne","","",149],[11,"clone","","",149],[11,"fmt","","",150],[11,"eq","","",150],[11,"ne","","",150],[11,"clone","","",150],[11,"id","syntax::ast","",151],[11,"span","","",151],[11,"id","","",152],[11,"span","","",152],[11,"from_mutbl","rustc::middle::mem_categorization","",148],[11,"from_borrow_kind","","",148],[11,"from_pointer_kind","","",148],[11,"inherit","","",148],[11,"is_mutable","","",148],[11,"is_immutable","","",148],[11,"to_user_str","","",148],[11,"new","","",153],[11,"cat_expr","","",153],[11,"cat_expr_autoderefd","","",153],[11,"cat_expr_unadjusted","","",153],[11,"cat_def","","",153],[11,"cat_rvalue_node","","",153],[11,"cat_rvalue","","",153],[11,"cat_field","","",153],[11,"cat_tup_field","","",153],[11,"cat_index","","Creates a cmt for an indexing operation (`[]`).",153],[11,"cat_slice_pattern","","Given a pattern P like: `[_, ..Q, _]`, where `vec_cmt` is the cmt for `P`, `slice_pat` is\nthe pattern `Q`, returns:",153],[11,"cat_imm_interior","","",153],[11,"cat_downcast","","",153],[11,"cat_pattern","","",153],[11,"guarantor","","Returns `self` after stripping away any owned pointer derefs or\ninterior content. The return value is basically the `cmt` which\ndetermines how long the value in `self` remains live.",150],[11,"freely_aliasable","","Returns `Some(_)` if this lvalue represents a freely aliasable pointer type.",150],[11,"upvar","","",150],[11,"descriptive_string","","",150],[11,"repr","","",150],[11,"repr","","",141],[11,"repr","","",143],[11,"repr","","",144],[11,"repr","rustc::middle::ty","",154],[11,"repr","rustc::middle::mem_categorization","",142],[11,"user_string","","",142],[11,"fmt","rustc::middle::privacy","",155],[11,"fmt","","",156],[11,"fmt","","",157],[11,"eq","","",157],[11,"ne","","",157],[11,"or","","",155],[11,"visit_expr","rustc::middle::reachable","",158],[11,"visit_item","","",158],[11,"fmt","rustc::middle::region","",17],[11,"decode","","",17],[11,"encode","","",17],[11,"hash","","",17],[11,"cmp","","",17],[11,"partial_cmp","","",17],[11,"lt","","",17],[11,"le","","",17],[11,"gt","","",17],[11,"ge","","",17],[11,"eq","","",17],[11,"ne","","",17],[11,"clone","","",17],[11,"fmt","","",18],[11,"decode","","",18],[11,"encode","","",18],[11,"hash","","",18],[11,"cmp","","",18],[11,"partial_cmp","","",18],[11,"lt","","",18],[11,"le","","",18],[11,"gt","","",18],[11,"ge","","",18],[11,"eq","","",18],[11,"ne","","",18],[11,"clone","","",18],[11,"new","","",18],[11,"to_code_extent","","",18],[11,"fmt","","",159],[11,"decode","","",159],[11,"encode","","",159],[11,"hash","","",159],[11,"cmp","","",159],[11,"partial_cmp","","",159],[11,"lt","","",159],[11,"le","","",159],[11,"gt","","",159],[11,"ge","","",159],[11,"eq","","",159],[11,"ne","","",159],[11,"clone","","",159],[11,"from_node_id","","Creates a scope that represents the dynamic extent associated\nwith `node_id`.",17],[11,"node_id","","Returns a node id associated with this scope.",17],[11,"map_id","","Maps this scope to a potentially new one according to the\nNodeId transformer `f_id`.",17],[11,"span","","Returns the span of this CodeExtent.  Note that in general the\nreturned span may not correspond to the span of any node id in\nthe AST.",17],[11,"fmt","","",160],[11,"eq","","",160],[11,"ne","","",160],[11,"fmt","","",161],[11,"eq","","",161],[11,"ne","","",161],[11,"fmt","","",162],[11,"eq","","",162],[11,"ne","","",162],[11,"fmt","","",163],[11,"each_encl_scope","","",164],[11,"each_var_scope","","",164],[11,"each_encl_free_region","","",164],[11,"each_rvalue_scope","","",164],[11,"each_terminating_scope","","",164],[11,"relate_free_regions","","",164],[11,"record_encl_scope","","",164],[11,"record_var_scope","","",164],[11,"record_rvalue_scope","","",164],[11,"mark_as_terminating_scope","","Records that a scope is a TERMINATING SCOPE. Whenever we create automatic temporaries --\ne.g. by an expression like `a().f` -- they will be freed within the innermost terminating\nscope.",164],[11,"opt_encl_scope","","Returns the narrowest scope that encloses `id`, if any.",164],[11,"encl_scope","","Returns the narrowest scope that encloses `id`, if any.",164],[11,"var_scope","","Returns the lifetime of the local variable `var_id`",164],[11,"temporary_scope","","Returns the scope when temp created by expr_id will be cleaned up",164],[11,"var_region","","Returns the lifetime of the variable `id`.",164],[11,"scopes_intersect","","",164],[11,"is_subscope_of","","Returns true if `subscope` is equal to or is lexically nested inside `superscope` and false\notherwise.",164],[11,"sub_free_region","","Determines whether two free regions have a subregion relationship\nby walking the graph encoded in `free_region_map`.  Note that\nit is possible that `sub != sup` and `sub <= sup` and `sup <= sub`\n(that is, the user can give two different names to the same lifetime).",164],[11,"is_subregion_of","","Determines whether one region is a subregion of another.  This is intended to run *after\ninference* and sadly the logic is somewhat duplicated with the code in infer.rs.",164],[11,"nearest_common_ancestor","","Finds the nearest common ancestor (if any) of two scopes.  That is, finds the smallest\nscope which is greater than or equal to both `scope_a` and `scope_b`.",164],[11,"visit_block","","",165],[11,"visit_item","","",165],[11,"visit_fn","","",165],[11,"visit_arm","","",165],[11,"visit_pat","","",165],[11,"visit_stmt","","",165],[11,"visit_expr","","",165],[11,"visit_local","","",165],[11,"fmt","rustc::middle::resolve_lifetime","",166],[11,"decode","","",166],[11,"encode","","",166],[11,"hash","","",166],[11,"eq","","",166],[11,"ne","","",166],[11,"clone","","",166],[11,"visit_item","","",167],[11,"visit_fn","","",167],[11,"visit_ty","","",167],[11,"visit_ty_method","","",167],[11,"visit_block","","",167],[11,"visit_lifetime_ref","","",167],[11,"visit_generics","","",167],[11,"visit_poly_trait_ref","","",167],[11,"fmt","","",168],[11,"visit_item","rustc::middle::stability","",169],[11,"visit_fn","","",169],[11,"visit_trait_item","","",169],[11,"visit_variant","","",169],[11,"visit_struct_field","","",169],[11,"visit_foreign_item","","",169],[11,"build","","Construct the stability index for a crate being compiled.",170],[11,"new","","",170],[11,"visit_item","","",171],[11,"visit_expr","","",171],[11,"visit_path","","",171],[11,"visit_pat","","",171],[11,"fmt","rustc::middle::subst","",172],[11,"hash","","",172],[11,"eq","","",172],[11,"ne","","",172],[11,"clone","","",172],[11,"fmt","","",173],[11,"hash","","",173],[11,"eq","","",173],[11,"ne","","",173],[11,"clone","","",173],[11,"new","","",172],[11,"new_type","","",172],[11,"new_trait","","",172],[11,"erased","","",172],[11,"empty","","",172],[11,"trans_empty","","",172],[11,"is_noop","","",172],[11,"type_for_def","","",172],[11,"has_regions_escaping_depth","","",172],[11,"self_ty","","",172],[11,"with_self_ty","","",172],[11,"erase_regions","","",172],[11,"regions","","Since ErasedRegions are only to be used in trans, most of the compiler can use this method\nto easily access the set of region substitutions.",172],[11,"mut_regions","","Since ErasedRegions are only to be used in trans, most of the compiler can use this method\nto easily access the set of region substitutions.",172],[11,"with_method","","",172],[11,"is_erased","","",173],[11,"fmt","","",174],[11,"decode","","",174],[11,"encode","","",174],[11,"hash","","",174],[11,"clone","","",174],[11,"eq","","",174],[11,"ne","","",174],[11,"cmp","","",174],[11,"partial_cmp","","",174],[11,"lt","","",174],[11,"le","","",174],[11,"gt","","",174],[11,"ge","","",174],[11,"all","","",174],[11,"to_uint","","",174],[11,"from_uint","","",174],[11,"decode","","",175],[11,"encode","","",175],[11,"hash","","",175],[11,"clone","","",175],[11,"eq","","",175],[11,"ne","","",175],[11,"fmt","","",175],[11,"empty","","",175],[11,"params_from_type","","",175],[11,"new","","`t` is the type space.\n`s` is the self space.\n`a` is the assoc space.\n`f` is the fn space.",175],[11,"push","","Appends `value` to the vector associated with `space`.",175],[11,"extend","","Appends `values` to the vector associated with `space`.",175],[11,"pop","","",175],[11,"truncate","","",175],[11,"replace","","",175],[11,"get_self","","",175],[11,"len","","",175],[11,"is_empty_in","","",175],[11,"get_slice","","",175],[11,"get_mut_slice","","",175],[11,"opt_get","","",175],[11,"get","","",175],[11,"iter","","",175],[11,"into_iter","","",175],[11,"iter_enumerated","","",175],[11,"as_slice","","",175],[11,"into_vec","","",175],[11,"all_vecs","","",175],[11,"all","","",175],[11,"any","","",175],[11,"is_empty","","",175],[11,"map","","",175],[11,"map_enumerated","","",175],[11,"map_move","","",175],[11,"split","","",175],[11,"with_vec","","",175],[11,"clone","","",176],[6,"Item","rustc_trans::session::config",""],[11,"next","rustc::middle::subst","",176],[6,"Item","rustc_trans::session::config",""],[6,"IntoIter","",""],[11,"into_iter","rustc::middle::subst","",175],[6,"Item","rustc_trans::session::config",""],[6,"IntoIter","",""],[11,"tcx","rustc::middle::subst","",177],[11,"enter_region_binder","","",177],[11,"exit_region_binder","","",177],[11,"fold_region","","",177],[11,"fold_ty","","",177],[11,"clone","rustc::middle::traits::fulfill","",178],[11,"new","","",179],[11,"normalize_projection_type","","\"Normalize\" a projection type `<SomeType as SomeTrait>::X` by\ncreating a fresh type variable `$0` as well as a projection\npredicate `<SomeType as SomeTrait>::X == $0`. When the\ninference engine runs, it will attempt to find an impl of\n`SomeTrait` or a where clause that lets us unify `$0` with\nsomething concrete. If this fails, we'll unify `$0` with\n`projection_ty` again.",179],[11,"register_builtin_bound","","",179],[11,"register_region_obligation","","",179],[11,"register_predicate_obligation","","",179],[11,"region_obligations","","",179],[11,"select_all_or_error","","",179],[11,"select_new_obligations","","Attempts to select obligations that were registered since the call to a selection routine.\nThis is used by the type checker to eagerly attempt to resolve obligations in hopes of\ngaining type information. It'd be equally valid to use `select_where_possible` but it\nresults in `O(n^2)` performance (#18208).",179],[11,"select_where_possible","","",179],[11,"pending_obligations","","",179],[11,"repr","","",178],[11,"clone","rustc::middle::traits::project","",180],[11,"eq","","",181],[11,"ne","","",181],[11,"tcx","","",182],[11,"fold_ty","","",182],[11,"with","","",183],[11,"repr","","",184],[11,"repr","","",181],[11,"fold_with","","",183],[11,"repr","","",183],[11,"fmt","rustc::middle::traits::object_safety","",185],[11,"clone","","",185],[11,"repr","","",186],[11,"clone","rustc::middle::traits::select","",187],[11,"fmt","","",188],[11,"clone","","",189],[11,"fmt","","",189],[11,"eq","","",189],[11,"ne","","",189],[11,"fmt","","",190],[11,"new","","",191],[11,"intercrate","","",191],[11,"infcx","","",191],[11,"tcx","","",191],[11,"param_env","","",191],[11,"closure_typer","","",191],[11,"select","","Attempts to satisfy the obligation. If successful, this will affect the surrounding\ntype environment by performing unification.",191],[11,"evaluate_obligation","","Evaluates whether the obligation `obligation` can be satisfied (by any means).",191],[11,"evaluate_impl","","Evaluates whether the impl with id `impl_def_id` could be applied to the self type\n`obligation_self_ty`. This can be used either for trait or inherent impls.",191],[11,"repr","","",189],[11,"new","","",187],[6,"Item","rustc_trans::session::config",""],[11,"next","core::option","",11],[11,"repr","rustc::middle::traits::select","",192],[11,"may_apply","","",193],[11,"filter_to_traits","rustc::middle::traits::util","",194],[6,"Item","rustc_trans::session::config",""],[11,"next","rustc::middle::traits::util","",194],[6,"Item","rustc_trans::session::config",""],[11,"next","rustc::middle::traits::util","",195],[11,"fmt","rustc::middle::traits","",196],[11,"fmt","","",197],[11,"repr","","",198],[11,"repr","","",199],[11,"repr","","",196],[11,"repr","","",200],[11,"repr","","",201],[11,"repr","","",197],[11,"repr","","",202],[11,"repr","","",203],[11,"repr","","",204],[11,"fmt","","",204],[11,"repr","rustc::middle::traits::project","",180],[11,"fmt","","",180],[11,"eq","rustc::middle::traits","",198],[11,"ne","","",198],[11,"clone","","",198],[11,"eq","","",205],[11,"ne","","",205],[11,"clone","","",205],[11,"eq","","",206],[11,"ne","","",206],[11,"clone","","",206],[11,"eq","","",207],[11,"ne","","",207],[11,"clone","","",207],[11,"fmt","","",202],[11,"clone","","",202],[11,"clone","","",204],[11,"clone","","",199],[11,"fmt","","",199],[11,"eq","","",196],[11,"ne","","",196],[11,"clone","","",196],[11,"clone","","",201],[11,"fmt","","",201],[11,"clone","","",200],[11,"fmt","","",200],[11,"clone","","",197],[11,"eq","","",197],[11,"ne","","",197],[11,"new","","",198],[11,"misc","","",198],[11,"with","","",198],[11,"new","","",205],[11,"misc","","",205],[11,"dummy","","",205],[11,"iter_nested","","",199],[11,"map_nested","","",199],[11,"map_move_nested","","",199],[11,"iter_nested","","",196],[11,"map_nested","","",196],[11,"map_move_nested","","",196],[11,"iter_nested","","",201],[11,"map_nested","","",201],[11,"map_move_nested","","",201],[11,"iter_nested","","",200],[11,"map_nested","","",200],[11,"map_move_nested","","",200],[11,"is_overflow","","",203],[11,"hash","rustc::middle::ty","",208],[11,"eq","","",208],[11,"ne","","",208],[11,"clone","","",208],[11,"fmt","","",209],[11,"clone","","",209],[11,"id","","",209],[11,"fmt","","",210],[11,"clone","","",210],[11,"def_id","","",210],[11,"name","","",210],[11,"container","","",210],[11,"as_opt_method","","",210],[11,"fmt","","",211],[11,"clone","","",211],[11,"def_id","","",211],[11,"fmt","","",212],[11,"clone","","",212],[11,"new","","",212],[11,"container_id","","",212],[11,"fmt","","",213],[11,"clone","","",213],[11,"fmt","","",214],[11,"hash","","",214],[11,"eq","","",214],[11,"ne","","",214],[11,"clone","","",214],[11,"fmt","","",215],[11,"clone","","",215],[11,"hash","","",216],[11,"eq","","",216],[11,"ne","","",216],[11,"encode","","",217],[11,"decode","","",217],[11,"eq","","",217],[11,"ne","","",217],[11,"clone","","",217],[11,"fmt","","",218],[11,"encode","","",218],[11,"decode","","",218],[11,"eq","","",218],[11,"ne","","",218],[11,"clone","","",218],[11,"fmt","","",219],[11,"clone","","",219],[11,"fmt","","",220],[11,"eq","","",220],[11,"ne","","",220],[11,"clone","","",220],[11,"fmt","","",221],[11,"clone","","",221],[11,"fmt","","",222],[11,"eq","","",222],[11,"ne","","",222],[11,"clone","","",222],[11,"fmt","","",223],[11,"partial_cmp","","",223],[11,"lt","","",223],[11,"le","","",223],[11,"gt","","",223],[11,"ge","","",223],[11,"eq","","",223],[11,"ne","","",223],[11,"decode","","",223],[11,"encode","","",223],[11,"clone","","",223],[11,"fmt","","",24],[11,"clone","","",24],[11,"fmt","","",224],[11,"clone","","",224],[11,"fmt","","",225],[11,"clone","","",225],[11,"clone","","",226],[11,"fmt","","",227],[11,"hash","","",227],[11,"eq","","",227],[11,"ne","","",227],[11,"clone","","",227],[11,"decode","","",228],[11,"encode","","",228],[11,"fmt","","",228],[11,"hash","","",228],[11,"eq","","",228],[11,"ne","","",228],[11,"clone","","",228],[11,"expr","","",227],[11,"autoobject","","",227],[11,"autoderef","","",227],[11,"clone","","",229],[11,"new","","",230],[11,"hash","","",231],[11,"cmp","","",231],[11,"partial_cmp","","",231],[11,"lt","","",231],[11,"le","","",231],[11,"gt","","",231],[11,"ge","","",231],[11,"clone","","",231],[11,"eq","","",231],[11,"ne","","",231],[11,"empty","","Returns an empty set of flags.",231],[11,"all","","Returns the set containing all flags.",231],[11,"bits","","Returns the raw value of the flags currently stored.",231],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",231],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",231],[11,"is_empty","","Returns `true` if no flags are currently stored.",231],[11,"is_all","","Returns `true` if all flags are currently set.",231],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",231],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",231],[11,"insert","","Inserts the specified flags in-place.",231],[11,"remove","","Removes the specified flags in-place.",231],[11,"toggle","","Toggles the specified flags in-place.",231],[6,"Output","rustc_trans::session::config",""],[11,"bitor","rustc::middle::ty","Returns the union of the two sets of flags.",231],[6,"Output","rustc_trans::session::config",""],[11,"bitxor","rustc::middle::ty","Returns the left flags, but with all the right flags toggled.",231],[6,"Output","rustc_trans::session::config",""],[11,"bitand","rustc::middle::ty","Returns the intersection between the two sets of flags.",231],[6,"Output","rustc_trans::session::config",""],[11,"sub","rustc::middle::ty","Returns the set difference of the two sets of flags.",231],[6,"Output","rustc_trans::session::config",""],[11,"not","rustc::middle::ty","Returns the complement of this set of flags.",231],[11,"print_debug_stats","","",232],[11,"fmt","","",233],[11,"fmt","","",231],[11,"eq","","",233],[11,"hash","","",233],[11,"eq","","",234],[11,"hash","","",234],[11,"borrow","","",234],[11,"fmt","","",235],[11,"hash","","",235],[11,"eq","","",235],[11,"ne","","",235],[11,"clone","","",235],[11,"fmt","","",236],[11,"hash","","",236],[11,"eq","","",236],[11,"ne","","",236],[11,"clone","","",236],[11,"fmt","","",237],[11,"hash","","",237],[11,"eq","","",237],[11,"ne","","",237],[11,"clone","","",237],[11,"diverges","","",237],[11,"unwrap","","",237],[11,"diverges","","",89],[11,"hash","","",84],[11,"eq","","",84],[11,"ne","","",84],[11,"clone","","",84],[11,"inputs","","",89],[11,"input","","",89],[11,"output","","",89],[11,"variadic","","",89],[11,"fmt","","",238],[11,"hash","","",238],[11,"eq","","",238],[11,"ne","","",238],[11,"clone","","",238],[11,"fmt","","",239],[11,"decode","","",239],[11,"encode","","",239],[11,"hash","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"clone","","",239],[11,"fmt","","",15],[11,"decode","","",15],[11,"encode","","",15],[11,"hash","","",15],[11,"eq","","",15],[11,"ne","","",15],[11,"clone","","",15],[11,"fmt","","",240],[11,"hash","","",240],[11,"eq","","",240],[11,"ne","","",240],[11,"clone","","",240],[11,"decode","","",241],[11,"encode","","",241],[11,"fmt","","",241],[11,"hash","","",241],[11,"eq","","",241],[11,"ne","","",241],[11,"clone","","",241],[11,"fmt","","",23],[11,"decode","","",23],[11,"encode","","",23],[11,"clone","","",23],[11,"eq","","",23],[11,"ne","","",23],[11,"fmt","","",22],[11,"decode","","",22],[11,"encode","","",22],[11,"clone","","",22],[11,"eq","","",22],[11,"ne","","",22],[11,"is_bound","","",15],[11,"escapes_depth","","",15],[11,"fmt","","",16],[11,"decode","","",16],[11,"encode","","",16],[11,"hash","","",16],[11,"cmp","","",16],[11,"partial_cmp","","",16],[11,"lt","","",16],[11,"le","","",16],[11,"gt","","",16],[11,"ge","","",16],[11,"eq","","",16],[11,"ne","","",16],[11,"clone","","",16],[11,"fmt","","",19],[11,"decode","","",19],[11,"encode","","",19],[11,"hash","","",19],[11,"cmp","","",19],[11,"partial_cmp","","",19],[11,"lt","","",19],[11,"le","","",19],[11,"gt","","",19],[11,"ge","","",19],[11,"eq","","",19],[11,"ne","","",19],[11,"clone","","",19],[11,"fmt","","",242],[11,"hash","","",242],[11,"eq","","",242],[11,"ne","","",242],[11,"clone","","",242],[11,"fmt","","",243],[11,"hash","","",243],[11,"eq","","",243],[11,"ne","","",243],[11,"clone","","",243],[11,"principal_def_id","","",243],[11,"principal_trait_ref_with_self_ty","","Object types don't have a self-type specified. Therefore, when\nwe convert the principal trait-ref into a normal trait-ref,\nyou must give *some* self-type. A common choice is `mk_err()`\nor some skolemized type.",243],[11,"projection_bounds_with_self_ty","","",243],[11,"fmt","","",82],[11,"hash","","",82],[11,"eq","","",82],[11,"ne","","",82],[11,"clone","","",82],[11,"self_ty","","",89],[11,"def_id","","",89],[11,"substs","","",89],[11,"input_types","","",89],[11,"to_poly_trait_predicate","","",89],[11,"fmt","","",89],[11,"hash","","",89],[11,"eq","","",89],[11,"ne","","",89],[11,"clone","","",89],[11,"skip_binder","","Skips the binder and returns the \"bound\" value. This is a\nrisky thing to do because it's easy to get confused about\ndebruijn indices and the like. It is usually better to\ndischarge the binder using `no_late_bound_regions` or\n`replace_late_bound_regions` or something like\nthat. `skip_binder` is only valid when you are either\nextracting data that has nothing to do with bound regions, you\nare doing some sort of test that does not involve bound\nregions, or you are being very careful about your depth\naccounting.",89],[11,"eq","","",119],[11,"ne","","",119],[11,"clone","","",119],[11,"fmt","","",244],[11,"clone","","",244],[11,"fmt","","",245],[11,"clone","","",245],[11,"fmt","","",246],[11,"clone","","",246],[11,"fmt","","",247],[11,"clone","","",247],[11,"hash","","",247],[11,"eq","","",247],[11,"ne","","",247],[11,"fmt","","",248],[11,"clone","","",248],[11,"hash","","",248],[11,"eq","","",248],[11,"ne","","",248],[11,"fmt","","",249],[11,"hash","","",249],[11,"decode","","",249],[11,"eq","","",249],[11,"ne","","",249],[11,"encode","","",249],[11,"clone","","",249],[11,"to_usize","","",249],[11,"from_usize","","",249],[11,"hash","","",250],[11,"eq","","",250],[11,"ne","","",250],[11,"clone","","",250],[11,"hash","","",118],[11,"eq","","",118],[11,"ne","","",118],[11,"clone","","",118],[11,"hash","","",120],[11,"eq","","",120],[11,"ne","","",120],[11,"clone","","",120],[11,"hash","","",251],[11,"decode","","",251],[11,"encode","","",251],[11,"eq","","",251],[11,"ne","","",251],[11,"clone","","",251],[11,"hash","","",252],[11,"eq","","",252],[11,"ne","","",252],[11,"clone","","",252],[11,"fmt","","",253],[11,"hash","","",253],[11,"eq","","",253],[11,"ne","","",253],[11,"decode","","",253],[11,"encode","","",253],[11,"clone","","",253],[11,"fmt","","",254],[11,"hash","","",254],[11,"decode","","",254],[11,"encode","","",254],[11,"clone","","",254],[11,"eq","","",254],[11,"ne","","",254],[11,"fmt","","",250],[11,"fmt","","",118],[11,"fmt","","",120],[11,"fmt","","",251],[11,"fmt","","",84],[11,"fmt","","",252],[11,"fmt","","",119],[11,"fmt","","",255],[11,"clone","","",255],[11,"fmt","","",256],[11,"clone","","",256],[11,"fmt","","",257],[11,"clone","","",257],[11,"decode","","",257],[11,"encode","","",257],[11,"to_early_bound_region","","",257],[11,"fmt","","",258],[11,"clone","","",258],[11,"empty","","",258],[11,"is_empty","","",258],[11,"has_type_params","","",258],[11,"has_region_params","","",258],[11,"fmt","","",259],[11,"clone","","",259],[11,"empty","","",259],[11,"instantiate","","",259],[11,"instantiate_supertrait","","",259],[11,"fmt","","",260],[11,"hash","","",260],[11,"eq","","",260],[11,"ne","","",260],[11,"clone","","",260],[11,"subst_supertrait","","Performs a substituion suitable for going from a\npoly-trait-ref to supertraits that must hold if that\npoly-trait-ref holds. This is slightly different from a normal\nsubstitution in terms of what happens with bound regions.  See\nlengthy comment below for details.",260],[11,"fmt","","",261],[11,"hash","","",261],[11,"eq","","",261],[11,"ne","","",261],[11,"clone","","",261],[11,"def_id","","",261],[11,"input_types","","",261],[11,"self_ty","","",261],[11,"def_id","","",89],[11,"fmt","","",262],[11,"hash","","",262],[11,"eq","","",262],[11,"ne","","",262],[11,"clone","","",262],[11,"fmt","","",263],[11,"hash","","",263],[11,"eq","","",263],[11,"ne","","",263],[11,"clone","","",263],[11,"fmt","","",83],[11,"hash","","",83],[11,"eq","","",83],[11,"ne","","",83],[11,"clone","","",83],[11,"item_name","","",89],[11,"sort_key","","",89],[11,"fmt","","",264],[11,"hash","","",264],[11,"eq","","",264],[11,"ne","","",264],[11,"clone","","",264],[11,"sort_key","","",264],[11,"to_poly_trait_ref","alloc::rc","",81],[11,"to_poly_trait_ref","rustc::middle::ty","",89],[11,"to_poly_trait_ref","","",89],[11,"as_predicate","alloc::rc","",81],[11,"as_predicate","rustc::middle::ty","",89],[11,"as_predicate","","",89],[11,"as_predicate","","",89],[11,"as_predicate","","",89],[11,"as_predicate","","",89],[11,"walk_tys","","Iterates over the types in this predicate. Note that in all\ncases this is skipping over a binder, so late-bound regions\nwith depth 0 are bound by the predicate.",260],[11,"has_escaping_regions","","",260],[11,"to_opt_poly_trait_ref","","",260],[11,"fmt","","",265],[11,"clone","","",265],[11,"empty","","",265],[11,"has_escaping_regions","","",265],[11,"is_empty","","",265],[11,"new","","",82],[11,"self_ty","","",82],[11,"input_types","","",82],[11,"clone","","",266],[11,"with_caller_bounds","","",266],[11,"for_item","","",266],[11,"fmt","","",267],[11,"clone","","",267],[11,"clone","","",268],[11,"decode","","",154],[11,"encode","","",154],[11,"fmt","","",154],[11,"eq","","",154],[11,"ne","","",154],[11,"clone","","",154],[11,"trait_did","","",154],[11,"mk_substs","","",232],[11,"mk_bare_fn","","",232],[11,"mk_region","","",232],[11,"closure_kind","","",232],[11,"closure_type","","",232],[11,"type_parameter_def","","",232],[11,"walk","","Iterator that walks `self` and any types reachable from\n`self`, in depth-first order. Note that just walks the types\nthat appear in `self`, it does not descend into the fields of\nstructs or variants. For example:",233],[11,"walk_children","","Iterator that walks types reachable from `self`, in\ndepth-first order. Note that this is a shallow walk. For\nexample:",233],[11,"as_opt_param_ty","","",233],[11,"is_param","","",233],[11,"new","","",238],[11,"for_self","","",238],[11,"for_def","","",238],[11,"to_ty","","",238],[11,"is_self","","",238],[11,"empty","","",268],[11,"is_noop","","",268],[11,"empty","","",247],[11,"clone","","",269],[11,"when","","",269],[11,"intersects","","",269],[11,"owns_managed","","",269],[11,"owns_owned","","",269],[11,"is_sized","","",269],[11,"interior_param","","",269],[11,"interior_unsafe","","",269],[11,"interior_unsized","","",269],[11,"needs_drop","","",269],[11,"owned_pointer","","Includes only those bits that still apply when indirected through a `Box` pointer",269],[11,"reference","","Includes only those bits that still apply when indirected through a reference (`&`)",269],[11,"managed_pointer","","Includes only those bits that still apply when indirected through a managed pointer (`@`)",269],[11,"unsafe_pointer","","Includes only those bits that still apply when indirected through an unsafe pointer (`*`)",269],[11,"union","","",269],[11,"has_dtor","","",269],[6,"Output","rustc_trans::session::config",""],[11,"bitor","rustc::middle::ty","",269],[6,"Output","rustc_trans::session::config",""],[11,"bitand","rustc::middle::ty","",269],[6,"Output","rustc_trans::session::config",""],[11,"sub","rustc::middle::ty","",269],[11,"fmt","","",269],[11,"fmt","","",270],[11,"eq","","",270],[11,"ne","","",270],[11,"cmp","","",270],[11,"partial_cmp","","",270],[11,"lt","","",270],[11,"le","","",270],[11,"gt","","",270],[11,"ge","","",270],[11,"repr","","",246],[11,"clone","","",271],[11,"from_ast_variant","","Creates a new VariantInfo from the corresponding ast representation.",271],[11,"is_present","","",272],[11,"has_drop_flag","","",272],[11,"clone","","",273],[11,"to_string","","",218],[11,"from_mutbl","","",241],[11,"to_mutbl_lossy","","Returns a mutability `m` such that an `&m T` pointer could be used to obtain this borrow\nkind. Because borrow kinds are richer than mutabilities, we sometimes have to pick a\nmutability that is stronger than necessary so that it at least *would permit* the borrow in\nquestion.",241],[11,"to_user_str","","",241],[11,"is_method_call","","",232],[11,"upvar_capture","","",232],[11,"node_ty","","",266],[11,"expr_ty_adjusted","","",266],[11,"node_method_ty","","",266],[11,"node_method_origin","","",266],[11,"adjustments","","",266],[11,"is_method_call","","",266],[11,"temporary_scope","","",266],[11,"upvar_capture","","",266],[11,"type_moves_by_default","","",266],[11,"param_env","","",266],[11,"closure_kind","","",266],[11,"closure_type","","",266],[11,"closure_upvars","","",266],[11,"fmt","","",274],[11,"eq","","",274],[11,"ne","","",274],[11,"clone","","",274],[11,"decode","","",21],[11,"encode","","",21],[11,"clone","","",21],[11,"is_identity","","",219],[11,"is_identity","","",221],[11,"new","","",239],[11,"shifted","","",239],[11,"repr","","",219],[11,"repr","","",220],[11,"repr","","",221],[11,"repr","","",222],[11,"repr","","",243],[11,"repr","","",260],[11,"repr","","",229],[11,"has_regions_escaping_depth","rustc::middle::subst","",172],[11,"has_regions_escaping_depth","","",175],[11,"has_regions_escaping_depth","rustc::middle::ty","",267],[11,"has_regions_escaping_depth","","",15],[11,"has_regions_escaping_depth","","",259],[11,"has_regions_escaping_depth","","",260],[11,"has_regions_escaping_depth","","",82],[11,"has_regions_escaping_depth","rustc::middle::subst","",173],[11,"has_regions_escaping_depth","rustc::middle::ty","",89],[11,"has_regions_escaping_depth","","",262],[11,"has_regions_escaping_depth","","",261],[11,"has_regions_escaping_depth","","",263],[11,"has_regions_escaping_depth","","",83],[11,"has_regions_escaping_depth","","",264],[11,"repr","","",83],[11,"has_projection_types","collections::vec","",275],[11,"has_projection_types","rustc::middle::subst","",175],[11,"has_projection_types","rustc::middle::ty","",236],[11,"has_projection_types","","",273],[11,"has_projection_types","","",265],[11,"has_projection_types","","",260],[11,"has_projection_types","","",261],[11,"has_projection_types","","",262],[11,"has_projection_types","","",15],[11,"has_projection_types","","",263],[11,"has_projection_types","","",83],[11,"has_projection_types","","",264],[11,"has_projection_types","","",82],[11,"has_projection_types","rustc::middle::subst","",172],[11,"has_projection_types","core::option","",11],[11,"has_projection_types","alloc::rc","",81],[11,"has_projection_types","alloc::boxed","",276],[11,"has_projection_types","rustc::middle::ty","",89],[11,"has_projection_types","","",237],[11,"has_projection_types","","",84],[11,"has_projection_types","","",208],[11,"has_projection_types","","",235],[11,"references_error","","",89],[11,"references_error","alloc::rc","",81],[11,"references_error","rustc::middle::ty","",261],[11,"references_error","","",83],[11,"references_error","","",82],[11,"references_error","","",260],[11,"references_error","","",263],[11,"references_error","","",262],[11,"references_error","","",15],[11,"repr","","",236],[11,"repr","","",273],[11,"repr","","",208],[11,"repr","","",266],[11,"repr","","",255],[11,"fold_with","core::option","",11],[11,"fold_with","alloc::rc","",81],[11,"fold_with","alloc::boxed","",276],[11,"fold_with","collections::vec","",275],[11,"fold_with","rustc::middle::ty","",89],[11,"fold_with","syntax::owned_slice","",277],[11,"fold_with","rustc::middle::subst","",175],[11,"fold_with","rustc::middle::ty","",235],[11,"fold_with","","",236],[11,"fold_with","","",214],[11,"fold_with","","",237],[11,"fold_with","","",84],[11,"fold_with","","",82],[11,"fold_with","","",208],[11,"fold_with","","",15],[11,"fold_with","rustc::middle::subst","",172],[11,"fold_with","rustc::middle::ty","",268],[11,"fold_with","","",222],[11,"fold_with","","",24],[11,"fold_with","","",229],[11,"fold_with","collections::enum_set","",278],[11,"fold_with","rustc::middle::ty","",248],[11,"fold_with","","",247],[11,"fold_with","","",256],[11,"fold_with","","",255],[11,"fold_with","","",257],[11,"fold_with","","",258],[11,"fold_with","","",259],[11,"fold_with","","",260],[11,"fold_with","","",83],[11,"fold_with","","",264],[11,"fold_with","","",265],[11,"fold_with","","",220],[11,"fold_with","rustc::middle::traits","",198],[11,"fold_with","","",196],[11,"fold_with","","",201],[11,"fold_with","","",200],[11,"fold_with","","",199],[11,"fold_with","","",197],[11,"fold_with","rustc::middle::ty","",262],[11,"fold_with","","",261],[11,"fold_with","","",263],[11,"fold_with","","",273],[11,"fold_with","","",266],[11,"tcx","rustc::middle::ty_fold","",279],[11,"fold_ty","","",279],[11,"new","","",280],[11,"tcx","","",280],[11,"enter_region_binder","","",280],[11,"exit_region_binder","","",280],[11,"fold_region","","",280],[11,"tcx","","",281],[11,"fold_region","","",281],[11,"new","rustc::middle::ty_walk","",282],[11,"skip_current_subtree","","Skips the subtree of types corresponding to the last type\nreturned by `next()`.",282],[6,"Item","rustc_trans::session::config",""],[11,"next","rustc::middle::ty_walk","",282],[11,"visit_foreign_item","rustc::middle::weak_lang_items","",283],[11,"from_i64","rustc::metadata::common","",284],[11,"from_u64","","",284],[11,"eq","","",284],[11,"ne","","",284],[11,"fmt","","",285],[11,"clone","","",285],[11,"fmt","rustc::metadata::tydecode","",286],[11,"clone","rustc::metadata::encoder","",287],[11,"visit_expr","","",288],[11,"visit_item","","",288],[11,"visit_foreign_item","","",288],[11,"visit_item","","",289],[11,"eq","rustc::metadata::decoder","",290],[11,"ne","","",290],[11,"fmt","","",291],[11,"clone","","",291],[11,"clone","","",292],[11,"visit_item","rustc::metadata::creader","",293],[11,"as_slice","","",294],[11,"new","","",293],[11,"read_crates","","",293],[11,"read_exported_macros","","Read exported macros.",293],[11,"find_plugin_registrar","","Look for a plugin registrar. Returns library path and symbol name.",293],[11,"clone","rustc::metadata::cstore","",295],[11,"eq","","",295],[11,"ne","","",295],[11,"fmt","","",295],[11,"from_i64","","",296],[11,"from_u64","","",296],[11,"eq","","",296],[11,"ne","","",296],[11,"clone","","",296],[11,"clone","","",297],[11,"eq","","",297],[11,"ne","","",297],[11,"new","","",298],[11,"next_crate_num","","",298],[11,"get_crate_data","","",298],[11,"get_crate_hash","","",298],[11,"set_crate_data","","",298],[11,"iter_crate_data","","",298],[11,"iter_crate_data_origins","","Like `iter_crate_data`, but passes source paths (if available) as well.",298],[11,"add_used_crate_source","","",298],[11,"get_used_crate_source","","",298],[11,"reset","","",298],[11,"get_used_crates","","",298],[11,"add_used_library","","",298],[11,"get_used_libraries","","",298],[11,"add_used_link_args","","",298],[11,"get_used_link_args","","",298],[11,"add_extern_mod_stmt_cnum","","",298],[11,"find_extern_mod_stmt_cnum","","",298],[11,"data","","",299],[11,"name","","",299],[11,"hash","","",299],[11,"as_slice","","",300],[11,"maybe_load_library_crate","rustc::metadata::loader","",301],[11,"load_library_crate","","",301],[11,"report_load_errs","","",301],[11,"as_slice","","",302],[11,"for_each_lib_search_path","rustc::metadata::filesearch","",303],[11,"get_lib_path","","",303],[11,"search","","",303],[11,"new","","",303],[11,"get_dylib_search_paths","","",303],[11,"get_tools_search_paths","","",303],[11,"visit_item","rustc::metadata::macro_import","",304],[11,"visit_mac","","",304],[11,"eq","rustc::session::config","",305],[11,"ne","","",305],[11,"clone","","",305],[11,"eq","","",306],[11,"ne","","",306],[11,"clone","","",306],[11,"cmp","","",307],[11,"partial_cmp","","",307],[11,"lt","","",307],[11,"le","","",307],[11,"gt","","",307],[11,"ge","","",307],[11,"eq","","",307],[11,"ne","","",307],[11,"clone","","",307],[11,"clone","","",308],[11,"clone","","",309],[11,"eq","","",310],[11,"ne","","",310],[11,"clone","","",310],[11,"filestem","","",311],[11,"clone","","",312],[11,"path","","",312],[11,"temp_path","","",312],[11,"with_extension","","",312],[11,"filestem","","",312],[11,"eq","","",313],[11,"ne","","",313],[11,"fmt","","",314],[11,"hash","","",314],[11,"cmp","","",314],[11,"clone","","",314],[11,"partial_cmp","","",314],[11,"lt","","",314],[11,"le","","",314],[11,"gt","","",314],[11,"ge","","",314],[11,"eq","","",314],[11,"ne","","",314],[11,"clone","","",315],[11,"is_empty","","",315],[11,"clone","","",316],[11,"clone","","",317],[11,"fmt","","",318],[11,"eq","","",318],[11,"ne","","",318],[11,"clone","","",318],[11,"eq","","",319],[11,"ne","","",319],[11,"clone","","",319],[11,"is_stable","","",319],[11,"fmt","","",314],[11,"fmt","rustc::session::search_paths","",320],[11,"clone","","",320],[11,"fmt","","",321],[11,"clone","","",321],[11,"eq","","",321],[11,"ne","","",321],[11,"new","","",320],[11,"add_path","","",320],[11,"iter","","",320],[6,"Item","rustc_trans::session::config",""],[11,"next","rustc::session::search_paths","",322],[11,"span_fatal","rustc::session","",323],[11,"span_fatal_with_code","","",323],[11,"fatal","","",323],[11,"span_err","","",323],[11,"span_err_with_code","","",323],[11,"err","","",323],[11,"err_count","","",323],[11,"has_errors","","",323],[11,"abort_if_errors","","",323],[11,"span_warn","","",323],[11,"span_warn_with_code","","",323],[11,"warn","","",323],[11,"opt_span_warn","","",323],[11,"span_note","","",323],[11,"span_end_note","","",323],[11,"span_help","","",323],[11,"fileline_note","","",323],[11,"fileline_help","","",323],[11,"note","","",323],[11,"help","","",323],[11,"opt_span_bug","","",323],[11,"span_bug","","",323],[11,"bug","","",323],[11,"span_unimpl","","",323],[11,"unimpl","","",323],[11,"add_lint","","",323],[11,"next_node_id","","",323],[11,"reserve_node_ids","","",323],[11,"diagnostic","","",323],[11,"codemap","","",323],[11,"impossible_case","","",323],[11,"verbose","","",323],[11,"time_passes","","",323],[11,"count_llvm_insns","","",323],[11,"count_type_sizes","","",323],[11,"time_llvm_passes","","",323],[11,"trans_stats","","",323],[11,"meta_stats","","",323],[11,"asm_comments","","",323],[11,"no_verify","","",323],[11,"borrowck_stats","","",323],[11,"print_llvm_passes","","",323],[11,"lto","","",323],[11,"no_landing_pads","","",323],[11,"unstable_options","","",323],[11,"print_enum_sizes","","",323],[11,"sysroot","","",323],[11,"target_filesearch","","",323],[11,"host_filesearch","","",323],[11,"args","rustc::plugin::registry","Get the plugin's arguments, if any.",324],[11,"register_syntax_extension","","Register a syntax extension of any kind.",324],[11,"register_macro","","Register a macro of the usual kind.",324],[11,"register_lint_pass","","Register a compiler lint pass.",324],[11,"register_lint_group","","Register a lint group.",324],[11,"visit_item","rustc::plugin::build","",325],[11,"fmt","rustc::lint","",326],[11,"name_lower","","Get the lint's name, with ASCII letters converted to lowercase.",326],[11,"clone","","",327],[11,"eq","","",327],[11,"hash","","",327],[11,"of","","Get the `LintId` for a `Lint`.",327],[11,"as_str","","Get the name of the lint.",327],[11,"fmt","","",328],[11,"cmp","","",328],[11,"partial_cmp","","",328],[11,"lt","","",328],[11,"le","","",328],[11,"gt","","",328],[11,"ge","","",328],[11,"eq","","",328],[11,"ne","","",328],[11,"clone","","",328],[11,"as_str","","Convert a level to a lower-case string.",328],[11,"from_str","","Convert a lower-case string to a level.",328],[11,"eq","","",329],[11,"ne","","",329],[11,"clone","","",329],[11,"get_lints","rustc::lint::builtin","",330],[11,"new","rustc::lint::context","",331],[11,"get_lints","","",331],[11,"get_lint_groups","","",331],[11,"register_pass","","",331],[11,"register_group","","",331],[11,"register_renamed","","",331],[11,"process_command_line","","",331],[11,"sess","","Get the overall compiler `Session` object.",332],[11,"current_level","","Get the level of `lint` at the current position of the lint\ntraversal.",332],[11,"lint","","Emit a lint at the appropriate level, with no associated span.",332],[11,"span_lint","","Emit a lint at the appropriate level, for a particular span.",332],[11,"visit_item","","",332],[11,"visit_foreign_item","","",332],[11,"visit_pat","","",332],[11,"visit_expr","","",332],[11,"visit_stmt","","",332],[11,"visit_fn","","",332],[11,"visit_ty_method","","",332],[11,"visit_struct_def","","",332],[11,"visit_struct_field","","",332],[11,"visit_variant","","",332],[11,"visit_ty","","",332],[11,"visit_ident","","",332],[11,"visit_mod","","",332],[11,"visit_local","","",332],[11,"visit_block","","",332],[11,"visit_arm","","",332],[11,"visit_decl","","",332],[11,"visit_expr_post","","",332],[11,"visit_generics","","",332],[11,"visit_trait_item","","",332],[11,"visit_opt_lifetime_ref","","",332],[11,"visit_lifetime_ref","","",332],[11,"visit_lifetime_def","","",332],[11,"visit_explicit_self","","",332],[11,"visit_mac","","",332],[11,"visit_path","","",332],[11,"visit_attribute","","",332],[11,"visit_id","","",332],[11,"get_lints","","",333],[11,"check_item","","",333],[11,"fmt","rustc::util::common","",334],[11,"clone","","",334],[11,"drop","","",335],[11,"visit_expr","","",336],[11,"visit_expr","","",337],[11,"repr","core::option","",11],[11,"repr","syntax::ptr","",338],[11,"repr","core::result","",129],[11,"repr","alloc::rc","",81],[11,"repr","alloc::boxed","",276],[11,"repr","syntax::owned_slice","",277],[11,"repr","collections::vec","",275],[11,"user_string","","",275],[11,"repr","rustc::middle::def","",14],[11,"user_string","rustc::middle::ty","",243],[11,"repr","","",256],[11,"repr","","",257],[11,"repr","","",233],[11,"repr","","",214],[11,"repr","rustc::middle::subst","",172],[11,"repr","","",175],[11,"repr","rustc::middle::ty","",268],[11,"repr","rustc::middle::subst","",173],[11,"repr","collections::enum_set","",278],[11,"repr","rustc::middle::ty","",247],[11,"repr","","",82],[11,"repr","","",339],[11,"repr","syntax::ast","",340],[11,"repr","","",151],[11,"repr","","",341],[11,"user_string","","",341],[11,"repr","","",342],[11,"repr","","",343],[11,"repr","","",344],[11,"repr","syntax::codemap","",345],[11,"repr","syntax::ast","",152],[11,"repr","rustc::middle::ty","",19],[11,"repr","","",15],[11,"user_string","","",15],[11,"repr","","",16],[11,"repr","rustc::middle::region","",17],[11,"repr","","",18],[11,"repr","syntax::ast","",10],[11,"repr","rustc::middle::ty","",267],[11,"repr","","",258],[11,"repr","","",259],[11,"repr","","",265],[11,"repr","","",217],[11,"repr","","",218],[11,"repr","","",212],[11,"repr","syntax::ast","",7],[11,"user_string","","",7],[11,"repr","","",6],[11,"repr","","",346],[11,"repr","","",347],[11,"repr","rustc::middle::ty","",235],[11,"repr","","",84],[11,"repr","","",237],[11,"repr","","",226],[11,"repr","","",24],[11,"repr","","",224],[11,"repr","","",225],[11,"repr","","",249],[11,"user_string","","",249],[11,"repr","syntax::codemap","",12],[11,"user_string","alloc::rc","",81],[11,"user_string","rustc::middle::ty","",247],[11,"repr","","",248],[11,"user_string","collections::enum_set","",278],[11,"user_string","rustc::middle::ty","",89],[11,"user_string","","",82],[11,"user_string","syntax::ast","",6],[11,"repr","syntax::abi","",348],[11,"user_string","","",348],[11,"repr","rustc::middle::ty","",240],[11,"repr","syntax::ast","",349],[11,"repr","rustc::middle::ty","",241],[11,"repr","","",22],[11,"repr","","",23],[11,"repr","","",118],[11,"repr","","",120],[11,"repr","","",251],[11,"repr","","",250],[11,"repr","","",119],[11,"repr","syntax::ast","",350],[11,"repr","","",351],[11,"repr","","",121],[11,"repr","rustc::middle::ty","",274],[11,"user_string","","",238],[11,"repr","","",238],[11,"repr","","",89],[11,"repr","std::collections::hash::map","",352],[11,"repr","rustc::middle::ty","",263],[11,"user_string","","",263],[11,"repr","","",262],[11,"user_string","","",262],[11,"repr","","",261],[11,"user_string","","",261],[11,"user_string","","",83],[11,"repr","","",264],[11,"user_string","","",264],[11,"user_string","","",260],[11,"default","rustc::util::nodemap","",353],[11,"write","","",353],[11,"finish","","",353],[11,"new","rustc::util::snapshot_vec","",354],[11,"record","","",354],[11,"push","","",354],[11,"get","","",354],[11,"get_mut","","Returns a mutable pointer into the vec; whatever changes you make here cannot be undone\nautomatically, so you should be sure call `record()` with some sort of suitable undo\naction.",354],[11,"set","","Updates the element at the given index. The old value will saved (and perhaps restored) if\na snapshot is active.",354],[11,"start_snapshot","","",354],[11,"actions_since_snapshot","","",354],[11,"rollback_to","","",354],[11,"commit","","Commits all changes since the last snapshot. Of course, they\ncan still be undone if there is a snapshot further out.",354],[11,"input","rustc_back::sha2","",355],[11,"reset","","",355],[11,"zero_until","","",355],[11,"next","","",355],[11,"full_buffer","","",355],[11,"position","","",355],[11,"remaining","","",355],[11,"size","","",355],[11,"new","","Construct a new instance of a SHA-256 digest.",356],[11,"input","","",356],[11,"result","","",356],[11,"reset","","",356],[11,"output_bits","","",356],[11,"open","rustc_llvm::archive_ro","Opens a static archive for read-only purposes. This is more optimized\nthan the `open` method because it uses LLVM's internal `Archive` class\nrather than shelling out to `ar` for everything.",357],[11,"read","","Reads a file in the archive",357],[11,"drop","","",357],[11,"describe","rustc_llvm::diagnostic","",358],[11,"unpack","","",359],[11,"eq","rustc_llvm","",360],[11,"ne","","",360],[11,"fmt","","",361],[11,"hash","","",362],[11,"cmp","","",362],[11,"partial_cmp","","",362],[11,"lt","","",362],[11,"le","","",362],[11,"gt","","",362],[11,"ge","","",362],[11,"clone","","",362],[11,"eq","","",362],[11,"ne","","",362],[11,"empty","","Returns an empty set of flags.",362],[11,"all","","Returns the set containing all flags.",362],[11,"bits","","Returns the raw value of the flags currently stored.",362],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",362],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",362],[11,"is_empty","","Returns `true` if no flags are currently stored.",362],[11,"is_all","","Returns `true` if all flags are currently set.",362],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",362],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",362],[11,"insert","","Inserts the specified flags in-place.",362],[11,"remove","","Removes the specified flags in-place.",362],[11,"toggle","","Toggles the specified flags in-place.",362],[6,"Output","rustc_trans::session::config",""],[11,"bitor","rustc_llvm","Returns the union of the two sets of flags.",362],[6,"Output","rustc_trans::session::config",""],[11,"bitxor","rustc_llvm","Returns the left flags, but with all the right flags toggled.",362],[6,"Output","rustc_trans::session::config",""],[11,"bitand","rustc_llvm","Returns the intersection between the two sets of flags.",362],[6,"Output","rustc_trans::session::config",""],[11,"sub","rustc_llvm","Returns the set difference of the two sets of flags.",362],[6,"Output","rustc_trans::session::config",""],[11,"not","rustc_llvm","Returns the complement of this set of flags.",362],[11,"apply_llfn","","",362],[11,"apply_callsite","","",362],[11,"apply_llfn","","",363],[11,"apply_callsite","","",363],[11,"apply_llfn","","",364],[11,"apply_callsite","","",364],[11,"new","","",365],[11,"arg","","",365],[11,"ret","","",365],[11,"apply_llfn","","",365],[11,"apply_callsite","","",365],[11,"fmt","","",366],[11,"eq","","",366],[11,"ne","","",366],[11,"clone","","",367],[11,"eq","","",367],[11,"ne","","",367],[11,"eq","","",368],[11,"ne","","",368],[11,"drop","","",369],[11,"new","","",370],[11,"drop","","",370],[11,"drop","","",371],[3,"Config","rustc_trans::session::config",""],[12,"target","","",372],[12,"int_type","","",372],[12,"uint_type","","",372],[4,"OptLevel","",""],[13,"No","","",305],[13,"Less","","",305],[13,"Default","","",305],[13,"Aggressive","","",305],[4,"DebugInfoLevel","",""],[13,"NoDebugInfo","","",306],[13,"LimitedDebugInfo","","",306],[13,"FullDebugInfo","","",306],[4,"OutputType","",""],[13,"OutputTypeBitcode","","",307],[13,"OutputTypeAssembly","","",307],[13,"OutputTypeLlvmAssembly","","",307],[13,"OutputTypeObject","","",307],[13,"OutputTypeExe","","",307],[13,"OutputTypeDepInfo","","",307],[3,"Options","",""],[12,"crate_types","","",308],[12,"gc","","",308],[12,"optimize","","",308],[12,"debug_assertions","","",308],[12,"debuginfo","","",308],[12,"lint_opts","","",308],[12,"describe_lints","","",308],[12,"output_types","","",308],[12,"search_paths","","",308],[12,"libs","","",308],[12,"maybe_sysroot","","",308],[12,"target_triple","","",308],[12,"cfg","","",308],[12,"test","","",308],[12,"parse_only","","",308],[12,"no_trans","","",308],[12,"treat_err_as_bug","","",308],[12,"no_analysis","","",308],[12,"debugging_opts","","",308],[12,"write_dependency_info","","Whether to write dependency files. It's (enabled, optional filename).",308],[12,"prints","","",308],[12,"cg","","",308],[12,"color","","",308],[12,"show_span","","",308],[12,"externs","","",308],[12,"crate_name","","",308],[12,"alt_std_name","","An optional name to use as the crate for std during std injection,\nwritten `extern crate std = \"name\"`. Default to \"std\". Used by\nout-of-tree drivers.",308],[12,"unstable_features","","Indicates how the compiler should treat unstable features",308],[4,"UnstableFeatures","",""],[13,"Disallow","","Hard errors for unstable features are active, as on\nbeta/stable channels.",309],[13,"Default","","Use the default lint levels",309],[13,"Cheat","","Errors are bypassed for bootstrapping. This is required any time\nduring the build that feature-related lints are set to warn or above\nbecause the build turns on warnings-as-errors and uses lots of unstable\nfeatures. As a result, this this is always required for building Rust\nitself.",309],[4,"PrintRequest","",""],[13,"FileNames","","",310],[13,"Sysroot","","",310],[13,"CrateName","","",310],[4,"Input","",""],[13,"File","","Load source from file",311],[13,"Str","","The string is the source",311],[3,"OutputFilenames","",""],[12,"out_directory","","",312],[12,"out_filestem","","",312],[12,"single_output_file","","",312],[12,"extra","","",312],[5,"host_triple","",""],[5,"basic_options","","Some reasonable defaults"],[4,"EntryFnType","",""],[13,"EntryMain","","",313],[13,"EntryStart","","",313],[13,"EntryNone","","",313],[4,"CrateType","",""],[13,"CrateTypeExecutable","","",314],[13,"CrateTypeDylib","","",314],[13,"CrateTypeRlib","","",314],[13,"CrateTypeStaticlib","","",314],[4,"Passes","",""],[13,"SomePasses","","",315],[13,"AllPasses","","",315],[3,"CodegenOptions","",""],[12,"ar","","",316],[12,"linker","","",316],[12,"link_args","","",316],[12,"lto","","",316],[12,"target_cpu","","",316],[12,"target_feature","","",316],[12,"passes","","",316],[12,"llvm_args","","",316],[12,"save_temps","","",316],[12,"rpath","","",316],[12,"no_prepopulate_passes","","",316],[12,"no_vectorize_loops","","",316],[12,"no_vectorize_slp","","",316],[12,"soft_float","","",316],[12,"prefer_dynamic","","",316],[12,"no_integrated_as","","",316],[12,"no_redzone","","",316],[12,"relocation_model","","",316],[12,"code_model","","",316],[12,"metadata","","",316],[12,"extra_filename","","",316],[12,"codegen_units","","",316],[12,"remark","","",316],[12,"no_stack_check","","",316],[12,"debuginfo","","",316],[12,"opt_level","","",316],[12,"debug_assertions","","",316],[5,"basic_codegen_options","",""],[5,"build_codegen_options","",""],[6,"CodegenSetter","",""],[17,"CG_OPTIONS","",""],[3,"DebuggingOptions","",""],[12,"verbose","","",317],[12,"time_passes","","",317],[12,"count_llvm_insns","","",317],[12,"time_llvm_passes","","",317],[12,"trans_stats","","",317],[12,"asm_comments","","",317],[12,"no_verify","","",317],[12,"borrowck_stats","","",317],[12,"no_landing_pads","","",317],[12,"debug_llvm","","",317],[12,"count_type_sizes","","",317],[12,"meta_stats","","",317],[12,"print_link_args","","",317],[12,"gc","","",317],[12,"print_llvm_passes","","",317],[12,"ast_json","","",317],[12,"ast_json_noexpand","","",317],[12,"ls","","",317],[12,"save_analysis","","",317],[12,"print_move_fragments","","",317],[12,"flowgraph_print_loans","","",317],[12,"flowgraph_print_moves","","",317],[12,"flowgraph_print_assigns","","",317],[12,"flowgraph_print_all","","",317],[12,"print_region_graph","","",317],[12,"parse_only","","",317],[12,"no_trans","","",317],[12,"treat_err_as_bug","","",317],[12,"no_analysis","","",317],[12,"extra_plugins","","",317],[12,"unstable_options","","",317],[12,"print_enum_sizes","","",317],[12,"force_overflow_checks","","",317],[5,"basic_debugging_options","",""],[5,"build_debugging_options","",""],[6,"DebuggingSetter","",""],[17,"DB_OPTIONS","",""],[5,"default_lib_output","",""],[5,"default_configuration","",""],[5,"append_configuration","",""],[5,"build_configuration","",""],[5,"build_target_config","",""],[5,"short_optgroups","","Returns the \"short\" subset of the stable rustc command line options."],[5,"optgroups","","Returns all of the stable rustc command line options."],[4,"OptionStability","",""],[13,"Stable","","",318],[13,"Unstable","","",318],[3,"RustcOptGroup","",""],[12,"opt_group","","",319],[12,"stability","","",319],[5,"rustc_short_optgroups","","Returns the \"short\" subset of the rustc command line options,\nincluding metadata for each option, such as whether the option is\npart of the stable long-term interface for rustc."],[5,"rustc_optgroups","","Returns all rustc command line options, including metadata for\neach option, such as whether the option is part of the stable\nlong-term interface for rustc."],[5,"parse_cfgspecs","",""],[5,"build_session_options","",""],[5,"get_unstable_features_setting","",""],[5,"parse_crate_types_from_list","",""],[0,"search_paths","rustc_trans::session",""],[3,"SearchPaths","rustc_trans::session::search_paths",""],[3,"Iter","",""],[4,"PathKind","",""],[13,"Native","","",321],[13,"Crate","","",321],[13,"Dependency","","",321],[13,"Framework","","",321],[13,"ExternFlag","","",321],[13,"All","","",321],[3,"Session","rustc_trans::session",""],[12,"target","","",323],[12,"host","","",323],[12,"opts","","",323],[12,"cstore","","",323],[12,"parse_sess","","",323],[12,"entry_fn","","",323],[12,"entry_type","","",323],[12,"plugin_registrar_fn","","",323],[12,"default_sysroot","","",323],[12,"local_crate_source_file","","",323],[12,"working_dir","","",323],[12,"lint_store","","",323],[12,"lints","","",323],[12,"crate_types","","",323],[12,"crate_metadata","","",323],[12,"features","","",323],[12,"recursion_limit","","The maximum recursion limit for potentially infinitely recursive\noperations such as auto-dereference and monomorphization.",323],[12,"can_print_warnings","","",323],[5,"build_session","",""],[5,"build_session_","",""],[5,"expect","",""],[5,"early_error","",""],[5,"early_warn","",""],[0,"metadata","rustc_trans",""],[0,"common","rustc_trans::metadata",""],[17,"tag_items","rustc_trans::metadata::common",""],[17,"tag_paths_data_name","",""],[17,"tag_def_id","",""],[17,"tag_items_data","",""],[17,"tag_items_data_item","",""],[17,"tag_items_data_item_family","",""],[17,"tag_items_data_item_type","",""],[17,"tag_items_data_item_symbol","",""],[17,"tag_items_data_item_variant","",""],[17,"tag_items_data_parent_item","",""],[17,"tag_items_data_item_is_tuple_struct_ctor","",""],[17,"tag_index","",""],[17,"tag_index_buckets","",""],[17,"tag_index_buckets_bucket","",""],[17,"tag_index_buckets_bucket_elt","",""],[17,"tag_index_table","",""],[17,"tag_meta_item_name_value","",""],[17,"tag_meta_item_name","",""],[17,"tag_meta_item_value","",""],[17,"tag_attributes","",""],[17,"tag_attribute","",""],[17,"tag_meta_item_word","",""],[17,"tag_meta_item_list","",""],[17,"tag_crate_deps","",""],[17,"tag_crate_dep","",""],[17,"tag_crate_hash","",""],[17,"tag_crate_crate_name","",""],[17,"tag_crate_dep_crate_name","",""],[17,"tag_crate_dep_hash","",""],[17,"tag_mod_impl","",""],[17,"tag_item_trait_item","",""],[17,"tag_item_trait_ref","",""],[17,"tag_disr_val","",""],[17,"tag_path","",""],[17,"tag_path_len","",""],[17,"tag_path_elem_mod","",""],[17,"tag_path_elem_name","",""],[17,"tag_item_field","",""],[17,"tag_item_field_origin","",""],[17,"tag_item_variances","",""],[17,"tag_item_impl_item","",""],[17,"tag_item_trait_method_explicit_self","",""],[17,"tag_items_data_item_reexport","",""],[17,"tag_items_data_item_reexport_def_id","",""],[17,"tag_items_data_item_reexport_name","",""],[4,"astencode_tag","",""],[13,"tag_ast","","",284],[13,"tag_tree","","",284],[13,"tag_id_range","","",284],[13,"tag_table","","",284],[13,"tag_table_def","","",284],[13,"tag_table_node_type","","",284],[13,"tag_table_item_subst","","",284],[13,"tag_table_freevars","","",284],[13,"tag_table_tcache","","",284],[13,"tag_table_param_defs","","",284],[13,"tag_table_mutbl","","",284],[13,"tag_table_last_use","","",284],[13,"tag_table_spill","","",284],[13,"tag_table_method_map","","",284],[13,"tag_table_vtable_map","","",284],[13,"tag_table_adjustments","","",284],[13,"tag_table_moves_map","","",284],[13,"tag_table_capture_map","","",284],[13,"tag_table_closure_tys","","",284],[13,"tag_table_closure_kinds","","",284],[13,"tag_table_upvar_capture_map","","",284],[13,"tag_table_capture_modes","","",284],[13,"tag_table_object_cast_map","","",284],[13,"tag_table_const_qualif","","",284],[17,"tag_item_trait_item_sort","",""],[17,"tag_item_trait_parent_sort","",""],[17,"tag_item_impl_type_basename","",""],[17,"tag_crate_triple","",""],[17,"tag_dylib_dependency_formats","",""],[17,"tag_lang_items","",""],[17,"tag_lang_items_item","",""],[17,"tag_lang_items_item_id","",""],[17,"tag_lang_items_item_node_id","",""],[17,"tag_lang_items_missing","",""],[17,"tag_item_unnamed_field","",""],[17,"tag_items_data_item_visibility","",""],[17,"tag_item_method_tps","",""],[17,"tag_item_method_fty","",""],[17,"tag_mod_child","",""],[17,"tag_misc_info","",""],[17,"tag_misc_info_crate_items","",""],[17,"tag_item_method_provided_source","",""],[17,"tag_item_impl_vtables","",""],[17,"tag_impls","",""],[17,"tag_impls_impl","",""],[17,"tag_items_data_item_inherent_impl","",""],[17,"tag_items_data_item_extension_impl","",""],[17,"tag_native_libraries","",""],[17,"tag_native_libraries_lib","",""],[17,"tag_native_libraries_name","",""],[17,"tag_native_libraries_kind","",""],[17,"tag_plugin_registrar_fn","",""],[17,"tag_method_argument_names","",""],[17,"tag_method_argument_name","",""],[17,"tag_reachable_extern_fns","",""],[17,"tag_reachable_extern_fn_id","",""],[17,"tag_items_data_item_stability","",""],[17,"tag_items_data_item_repr","",""],[3,"LinkMeta","",""],[12,"crate_name","","",285],[12,"crate_hash","","",285],[17,"tag_struct_fields","",""],[17,"tag_struct_field","",""],[17,"tag_struct_field_id","",""],[17,"tag_attribute_is_sugared_doc","",""],[17,"tag_items_data_region","",""],[17,"tag_region_param_def","",""],[17,"tag_region_param_def_ident","",""],[17,"tag_region_param_def_def_id","",""],[17,"tag_region_param_def_space","",""],[17,"tag_region_param_def_index","",""],[17,"tag_type_param_def","",""],[17,"tag_item_generics","",""],[17,"tag_method_ty_generics","",""],[17,"tag_predicate","",""],[17,"tag_predicate_space","",""],[17,"tag_predicate_data","",""],[17,"tag_unsafety","",""],[17,"tag_associated_type_names","",""],[17,"tag_associated_type_name","",""],[17,"tag_polarity","",""],[17,"tag_macro_defs","",""],[17,"tag_macro_def","",""],[17,"tag_macro_def_body","",""],[17,"tag_paren_sugar","",""],[17,"tag_codemap","",""],[17,"tag_codemap_filemap","",""],[17,"tag_item_super_predicates","",""],[17,"tag_defaulted_trait","",""],[0,"tyencode","rustc_trans::metadata",""],[3,"ctxt","rustc_trans::metadata::tyencode",""],[12,"diag","","",373],[12,"ds","","",373],[12,"tcx","","",373],[12,"abbrevs","","",373],[3,"ty_abbrev","",""],[6,"abbrev_map","",""],[5,"enc_ty","",""],[5,"enc_substs","",""],[5,"enc_region","",""],[5,"enc_trait_ref","",""],[5,"enc_bare_fn_ty","",""],[5,"enc_closure_ty","",""],[5,"enc_builtin_bounds","",""],[5,"enc_existential_bounds","",""],[5,"enc_bounds","",""],[5,"enc_region_bounds","",""],[5,"enc_type_param_def","",""],[5,"enc_predicate","",""],[0,"tydecode","rustc_trans::metadata",""],[4,"DefIdSource","rustc_trans::metadata::tydecode",""],[13,"NominalType","","",286],[13,"TypeWithId","","",286],[13,"TypeParameter","","",286],[13,"RegionParameter","","",286],[13,"ClosureSource","","",286],[3,"PState","",""],[5,"parse_ident","",""],[5,"parse_name","",""],[5,"parse_state_from_data","",""],[5,"parse_ty_closure_data","",""],[5,"parse_ty_data","",""],[5,"parse_region_data","",""],[5,"parse_bare_fn_ty_data","",""],[5,"parse_trait_ref_data","",""],[5,"parse_substs_data","",""],[5,"parse_bounds_data","",""],[5,"parse_existential_bounds_data","",""],[5,"parse_builtin_bounds_data","",""],[5,"parse_def_id","",""],[5,"parse_predicate_data","",""],[5,"parse_predicate","",""],[5,"parse_type_param_def_data","",""],[0,"encoder","rustc_trans::metadata",""],[4,"InlinedItemRef","rustc_trans::metadata::encoder","A borrowed version of `ast::InlinedItem`."],[13,"IIItemRef","","",374],[13,"IITraitItemRef","","",374],[13,"IIImplItemRef","","",374],[13,"IIForeignRef","","",374],[6,"EncodeInlinedItem","",""],[3,"EncodeParams","",""],[12,"diag","","",375],[12,"tcx","","",375],[12,"reexports","","",375],[12,"item_symbols","","",375],[12,"link_meta","","",375],[12,"cstore","","",375],[12,"encode_inlined_item","","",375],[12,"reachable","","",375],[3,"EncodeContext","",""],[12,"diag","","",25],[12,"tcx","","",25],[12,"reexports","","",25],[12,"item_symbols","","",25],[12,"link_meta","","",25],[12,"cstore","","",25],[12,"encode_inlined_item","","",25],[12,"type_abbrevs","","",25],[12,"reachable","","",25],[5,"encode_def_id","",""],[5,"def_to_string","",""],[5,"write_closure_type","",""],[5,"write_type","",""],[5,"write_trait_ref","",""],[5,"write_region","",""],[17,"metadata_encoding_version","",""],[5,"encode_metadata","",""],[5,"encoded_ty","",""],[0,"decoder","rustc_trans::metadata",""],[6,"Cmd","rustc_trans::metadata::decoder",""],[5,"maybe_find_item","",""],[5,"item_type","",""],[5,"get_trait_def","",""],[5,"get_predicates","",""],[5,"get_super_predicates","",""],[5,"get_type","",""],[5,"get_stability","",""],[5,"get_repr_attrs","",""],[5,"get_impl_polarity","",""],[5,"get_impl_trait","",""],[5,"get_impl_vtables","",""],[5,"get_symbol","",""],[4,"DefLike","",""],[13,"DlDef","","",291],[13,"DlImpl","","",291],[13,"DlField","","",291],[5,"each_lang_item","","Iterates over the language items in the given crate."],[5,"each_child_of_item","","Iterates over each child of the given item."],[5,"each_top_level_item_of_crate","","Iterates over all the top-level crate items."],[5,"get_item_path","",""],[6,"DecodeInlinedItem","",""],[5,"maybe_get_item_ast","",""],[5,"get_enum_variant_defs","",""],[5,"get_enum_variants","",""],[5,"get_impl_items","","Returns the def IDs of all the items in the given implementation."],[5,"get_trait_name","",""],[5,"is_static_method","",""],[5,"get_impl_or_trait_item","",""],[5,"get_trait_item_def_ids","",""],[5,"get_item_variances","",""],[5,"get_provided_trait_methods","",""],[5,"get_type_name_if_impl","",""],[5,"get_methods_if_impl","",""],[5,"get_tuple_struct_definition_if_ctor","","If node_id is the constructor of a tuple struct, retrieve the NodeId of\nthe actual type definition, otherwise, return None"],[5,"get_item_attrs","",""],[5,"get_struct_field_attrs","",""],[5,"get_struct_fields","",""],[5,"get_crate_attributes","",""],[3,"CrateDep","",""],[12,"cnum","","",292],[12,"name","","",292],[12,"hash","","",292],[5,"get_crate_deps","",""],[5,"maybe_get_crate_hash","",""],[5,"get_crate_hash","",""],[5,"maybe_get_crate_name","",""],[5,"get_crate_triple","",""],[5,"get_crate_name","",""],[5,"list_crate_metadata","",""],[5,"translate_def_id","",""],[5,"each_impl","",""],[5,"each_implementation_for_type","",""],[5,"each_implementation_for_trait","",""],[5,"get_trait_of_item","",""],[5,"get_native_libraries","",""],[5,"get_plugin_registrar_fn","",""],[5,"each_exported_macro","",""],[5,"get_dylib_dependency_formats","",""],[5,"get_missing_lang_items","",""],[5,"get_method_arg_names","",""],[5,"get_reachable_extern_fns","",""],[5,"is_typedef","",""],[5,"is_associated_type","",""],[5,"is_defaulted_trait","",""],[5,"get_imported_filemaps","",""],[0,"creader","rustc_trans::metadata","Validates all used crates and extern libraries and loads their metadata"],[3,"CrateReader","rustc_trans::metadata::creader",""],[5,"validate_crate_name","",""],[0,"cstore","rustc_trans::metadata",""],[6,"cnum_map","rustc_trans::metadata::cstore",""],[4,"MetadataBlob","",""],[13,"MetadataVec","","",300],[13,"MetadataArchive","","",300],[3,"ImportedFileMap","","Holds information about a codemap::FileMap imported from another crate.\nSee creader::import_codemap() for more information."],[12,"original_start_pos","","This FileMap's byte-offset within the codemap of its original crate",376],[12,"original_end_pos","","The end of this FileMap within the codemap of its original crate",376],[12,"translated_filemap","","The imported FileMap's representation within the local codemap",376],[3,"crate_metadata","",""],[12,"name","","",299],[12,"data","","",299],[12,"cnum_map","","",299],[12,"cnum","","",299],[12,"codemap_import_info","","",299],[12,"span","","",299],[4,"LinkagePreference","",""],[13,"RequireDynamic","","",295],[13,"RequireStatic","","",295],[4,"NativeLibraryKind","",""],[13,"NativeStatic","","",296],[13,"NativeFramework","","",296],[13,"NativeUnknown","","",296],[3,"CrateSource","",""],[12,"dylib","","",297],[12,"rlib","","",297],[12,"cnum","","",297],[3,"CStore","",""],[12,"intr","","",298],[0,"csearch","rustc_trans::metadata",""],[3,"MethodInfo","rustc_trans::metadata::csearch",""],[12,"name","","",377],[12,"def_id","","",377],[12,"vis","","",377],[5,"get_symbol","",""],[5,"each_lang_item","","Iterates over all the language items in the given crate."],[5,"each_child_of_item","","Iterates over each child of the given item."],[5,"each_top_level_item_of_crate","","Iterates over each top-level crate item."],[5,"get_item_path","",""],[4,"FoundAst","",""],[13,"Found","","",378],[13,"FoundParent","","",378],[13,"NotFound","","",378],[5,"maybe_get_item_ast","",""],[5,"get_enum_variant_defs","",""],[5,"get_enum_variants","",""],[5,"get_impl_items","","Returns information about the given implementation."],[5,"get_impl_or_trait_item","",""],[5,"get_trait_name","",""],[5,"is_static_method","",""],[5,"get_trait_item_def_ids","",""],[5,"get_item_variances","",""],[5,"get_provided_trait_methods","",""],[5,"get_type_name_if_impl","",""],[5,"get_methods_if_impl","",""],[5,"get_item_attrs","",""],[5,"get_struct_fields","",""],[5,"get_struct_field_attrs","",""],[5,"get_type","",""],[5,"get_trait_def","",""],[5,"get_predicates","",""],[5,"get_super_predicates","",""],[5,"get_field_type","",""],[5,"get_impl_polarity","",""],[5,"get_impl_trait","",""],[5,"get_impl_vtables","",""],[5,"get_native_libraries","",""],[5,"each_impl","",""],[5,"each_implementation_for_type","",""],[5,"each_implementation_for_trait","",""],[5,"get_trait_of_item","","If the given def ID describes an item belonging to a trait (either a\ndefault method or an implementation of a trait method), returns the ID of\nthe trait that the method belongs to. Otherwise, returns `None`."],[5,"get_tuple_struct_definition_if_ctor","",""],[5,"get_dylib_dependency_formats","",""],[5,"get_missing_lang_items","",""],[5,"get_method_arg_names","",""],[5,"get_reachable_extern_fns","",""],[5,"is_typedef","",""],[5,"get_stability","",""],[5,"is_staged_api","",""],[5,"get_repr_attrs","",""],[5,"is_associated_type","",""],[5,"is_defaulted_trait","",""],[0,"loader","rustc_trans::metadata","Finds crate binaries and loads their metadata"],[3,"CrateMismatch","rustc_trans::metadata::loader",""],[3,"Context","",""],[12,"sess","","",301],[12,"span","","",301],[12,"ident","","",301],[12,"crate_name","","",301],[12,"hash","","",301],[12,"target","","",301],[12,"triple","","",301],[12,"filesearch","","",301],[12,"root","","",301],[12,"rejected_via_hash","","",301],[12,"rejected_via_triple","","",301],[12,"rejected_via_kind","","",301],[12,"should_match_name","","",301],[3,"Library","",""],[12,"dylib","","",379],[12,"rlib","","",379],[12,"metadata","","",379],[3,"ArchiveMetadata","",""],[3,"CratePaths","",""],[12,"ident","","",380],[12,"dylib","","",380],[12,"rlib","","",380],[5,"note_crate_name","",""],[5,"meta_section_name","",""],[5,"read_meta_section_name","",""],[5,"list_file_metadata","",""],[0,"filesearch","rustc_trans::metadata",""],[4,"FileMatch","rustc_trans::metadata::filesearch",""],[13,"FileMatches","","",381],[13,"FileDoesntMatch","","",381],[3,"FileSearch","",""],[12,"sysroot","","",303],[12,"search_paths","","",303],[12,"triple","","",303],[12,"kind","","",303],[5,"relative_target_lib_path","",""],[5,"get_or_default_sysroot","",""],[5,"get_rust_path","","Returns RUST_PATH as a string, without default paths added"],[5,"rust_path","","Returns the value of RUST_PATH, as a list\nof Paths. Includes default entries for, if they exist:\n$HOME/.rust\nDIR/.rust for any DIR that's the current working directory\nor an ancestor of it"],[5,"rustlibdir","",""],[0,"macro_import","rustc_trans::metadata","Used by `rustc` when loading a crate with exported macros."],[5,"read_macro_defs","rustc_trans::metadata::macro_import","Read exported macros."],[6,"MacroSelection","",""],[0,"middle","rustc_trans",""],[0,"astconv_util","rustc_trans::middle","This module contains a simple utility routine\nused by both `typeck` and `const_eval`.\nAlmost certainly this could (and should) be refactored out of existence."],[17,"NO_REGIONS","rustc_trans::middle::astconv_util",""],[17,"NO_TPS","",""],[5,"check_path_args","",""],[5,"prim_ty_to_ty","",""],[5,"ast_ty_to_prim_ty","",""],[0,"astencode","rustc_trans::middle",""],[5,"encode_inlined_item","rustc_trans::middle::astencode",""],[5,"decode_inlined_item","","Decodes an item from its AST in the cdata's metadata and adds it to the\nast-map."],[5,"encode_closure_kind","",""],[8,"vtable_decoder_helpers","",""],[10,"read_vec_per_param_space","","",382],[10,"read_vtable_res_with_key","","",382],[10,"read_vtable_res","","",382],[10,"read_vtable_param_res","","",382],[10,"read_vtable_origin","","",382],[0,"cfg","rustc_trans::middle","Module that constructs a control-flow graph representing an item.\nUses `Graph` as the underlying representation."],[0,"graphviz","rustc_trans::middle::cfg",""],[6,"Node","rustc_trans::middle::cfg::graphviz",""],[6,"Edge","",""],[3,"LabelledCFG","",""],[12,"ast_map","","",29],[12,"cfg","","",29],[12,"name","","",29],[12,"labelled_edges","","`labelled_edges` controls whether we emit labels on the edges",29],[3,"CFG","rustc_trans::middle::cfg",""],[12,"graph","","",31],[12,"entry","","",31],[12,"exit","","",31],[4,"CFGNodeData","",""],[13,"AST","","",30],[13,"Entry","","",30],[13,"Exit","","",30],[13,"Dummy","","",30],[13,"Unreachable","","",30],[3,"CFGEdgeData","",""],[12,"exiting_scopes","","",383],[6,"CFGIndex","",""],[6,"CFGGraph","",""],[6,"CFGNode","",""],[6,"CFGEdge","",""],[0,"check_const","rustc_trans::middle",""],[3,"ConstQualif","rustc_trans::middle::check_const",""],[17,"PURE_CONST","",""],[17,"MUTABLE_MEM","",""],[17,"NEEDS_DROP","",""],[17,"PREFER_IN_PLACE","",""],[17,"NON_ZERO_SIZED","",""],[17,"HAS_STATIC_BORROWS","",""],[17,"NOT_CONST","",""],[17,"NON_STATIC_BORROWS","",""],[5,"check_crate","",""],[0,"check_static_recursion","rustc_trans::middle",""],[5,"check_crate","rustc_trans::middle::check_static_recursion",""],[5,"check_item_recursion","",""],[0,"check_loop","rustc_trans::middle",""],[5,"check_crate","rustc_trans::middle::check_loop",""],[0,"check_match","rustc_trans::middle",""],[17,"DUMMY_WILD_PAT","rustc_trans::middle::check_match",""],[3,"MatchCheckCtxt","",""],[12,"tcx","","",42],[12,"param_env","","",42],[4,"Constructor","",""],[13,"Single","","The constructor of all patterns that don't vary by constructor,\ne.g. struct patterns and fixed-length arrays.",40],[13,"Variant","","Enum variants.",40],[13,"ConstantValue","","Literal values.",40],[13,"ConstantRange","","Ranges of literal values (2..5).",40],[13,"Slice","","Array patterns of length n.",40],[13,"SliceWithSubslice","","Array patterns with a subslice.",40],[5,"check_crate","",""],[3,"StaticInliner","",""],[12,"tcx","","",43],[12,"failed","","",43],[12,"renaming_map","","",43],[5,"constructor_arity","","This computes the arity of a constructor. The arity of a constructor\nis how many subpattern patterns of that constructor should be expanded to."],[5,"specialize","","This is the main specialization step. It expands the first pattern in the given row\ninto `arity` patterns based on the constructor. For most patterns, the step is trivial,\nfor instance tuple patterns are flattened and box patterns expand into their inner pattern."],[0,"check_rvalues","rustc_trans::middle",""],[5,"check_crate","rustc_trans::middle::check_rvalues",""],[0,"const_eval","rustc_trans::middle",""],[5,"lookup_const_by_id","rustc_trans::middle::const_eval",""],[4,"const_val","",""],[13,"const_float","","",49],[13,"const_int","","",49],[13,"const_uint","","",49],[13,"const_str","","",49],[13,"const_binary","","",49],[13,"const_bool","","",49],[5,"const_expr_to_pat","",""],[5,"eval_const_expr","",""],[3,"ConstEvalErr","",""],[12,"span","","",50],[12,"kind","","",50],[4,"ErrKind","",""],[13,"CannotCast","","",51],[13,"CannotCastTo","","",51],[13,"InvalidOpForBools","","",51],[13,"InvalidOpForFloats","","",51],[13,"InvalidOpForIntUint","","",51],[13,"InvalidOpForUintInt","","",51],[13,"NegateOnString","","",51],[13,"NegateOnBoolean","","",51],[13,"NegateOnBinary","","",51],[13,"NotOnFloat","","",51],[13,"NotOnString","","",51],[13,"NotOnBinary","","",51],[13,"AddiWithOverflow","","",51],[13,"SubiWithOverflow","","",51],[13,"MuliWithOverflow","","",51],[13,"AdduWithOverflow","","",51],[13,"SubuWithOverflow","","",51],[13,"MuluWithOverflow","","",51],[13,"DivideByZero","","",51],[13,"DivideWithOverflow","","",51],[13,"ModuloByZero","","",51],[13,"ModuloWithOverflow","","",51],[13,"MissingStructField","","",51],[13,"NonConstPath","","",51],[13,"NonConstStruct","","",51],[13,"TupleIndexOutOfBounds","","",51],[13,"MiscBinaryOp","","",51],[13,"MiscCatchAll","","",51],[5,"eval_const_expr_partial","",""],[5,"compare_const_vals","",""],[5,"compare_lit_exprs","",""],[0,"dataflow","rustc_trans::middle","A module for propagating forward dataflow information. The analysis\nassumes that the items to be propagated can be represented as bits\nand thus uses bitvectors. Your job is simply to specify the so-called\nGEN and KILL bits for each expression."],[4,"EntryOrExit","rustc_trans::middle::dataflow",""],[13,"Entry","","",52],[13,"Exit","","",52],[3,"DataFlowContext","",""],[8,"BitwiseOperator","",""],[10,"join","","Joins two predecessor bits together, typically either `|` or `&`",384],[8,"DataFlowOperator","","Parameterization for the precise form of data flow that is used."],[10,"initial_value","","Specifies the initial value for each bit in the `on_entry` set",385],[0,"dead","rustc_trans::middle",""],[5,"check_crate","rustc_trans::middle::dead",""],[0,"def","rustc_trans::middle",""],[4,"Def","rustc_trans::middle::def",""],[13,"DefFn","","",14],[13,"DefSelfTy","","",14],[13,"DefMod","","",14],[13,"DefForeignMod","","",14],[13,"DefStatic","","",14],[13,"DefConst","","",14],[13,"DefLocal","","",14],[13,"DefVariant","","",14],[13,"DefTy","","",14],[13,"DefAssociatedTy","","",14],[13,"DefTrait","","",14],[13,"DefPrimTy","","",14],[13,"DefTyParam","","",14],[13,"DefUse","","",14],[13,"DefUpvar","","",14],[13,"DefStruct","","Note that if it's a tuple struct's definition, the node id of the ast::DefId\nmay either refer to the item definition's id or the StructDef.ctor_id.",14],[13,"DefRegion","","",14],[13,"DefLabel","","",14],[13,"DefMethod","","",14],[3,"PathResolution","","The result of resolving a path.\nBefore type checking completes, `depth` represents the number of\ntrailing segments which are yet unresolved. Afterwards, if there\nwere no errors, all paths should be fully resolved, with `depth`\nset to `0` and `base_def` representing the final resolution."],[12,"base_def","","",59],[12,"last_private","","",59],[12,"depth","","",59],[6,"DefMap","",""],[6,"ExportMap","",""],[3,"Export","",""],[12,"name","","",386],[12,"def_id","","",386],[4,"MethodProvenance","",""],[13,"FromTrait","","",60],[13,"FromImpl","","",60],[0,"dependency_format","rustc_trans::middle","Resolution of mixing rlibs and dylibs"],[6,"DependencyList","rustc_trans::middle::dependency_format",""],[6,"Dependencies","",""],[5,"calculate","",""],[0,"effect","rustc_trans::middle","Enforces the Rust effect system. Currently there is just one effect,\n`unsafe`."],[5,"check_crate","rustc_trans::middle::effect",""],[0,"entry","rustc_trans::middle",""],[5,"find_entry_point","rustc_trans::middle::entry",""],[0,"expr_use_visitor","rustc_trans::middle","A different sort of visitor for walking fn bodies.  Unlike the\nnormal visitor, which just walks the entire body in one shot, the\n`ExprUseVisitor` determines how expressions are being used."],[8,"Delegate","rustc_trans::middle::expr_use_visitor","This trait defines the callbacks you can expect to receive when\nemploying the ExprUseVisitor."],[10,"consume","","",387],[10,"matched_pat","","",387],[10,"consume_pat","","",387],[10,"borrow","","",387],[10,"decl_without_init","","",387],[10,"mutate","","",387],[4,"LoanCause","",""],[13,"ClosureCapture","","",64],[13,"AddrOf","","",64],[13,"AutoRef","","",64],[13,"RefBinding","","",64],[13,"OverloadedOperator","","",64],[13,"ClosureInvocation","","",64],[13,"ForLoop","","",64],[13,"MatchDiscriminant","","",64],[4,"ConsumeMode","",""],[13,"Copy","","",65],[13,"Move","","",65],[4,"MoveReason","",""],[13,"DirectRefMove","","",66],[13,"PatBindingMove","","",66],[13,"CaptureMove","","",66],[4,"MatchMode","",""],[13,"NonBindingMatch","","",67],[13,"BorrowingMatch","","",67],[13,"CopyingMatch","","",67],[13,"MovingMatch","","",67],[4,"MutateMode","",""],[13,"Init","","",69],[13,"JustWrite","","",69],[13,"WriteAndRead","","",69],[3,"ExprUseVisitor","",""],[0,"fast_reject","rustc_trans::middle",""],[4,"SimplifiedType","rustc_trans::middle::fast_reject","See `simplify_type"],[13,"BoolSimplifiedType","","",71],[13,"CharSimplifiedType","","",71],[13,"IntSimplifiedType","","",71],[13,"UintSimplifiedType","","",71],[13,"FloatSimplifiedType","","",71],[13,"EnumSimplifiedType","","",71],[13,"StrSimplifiedType","","",71],[13,"VecSimplifiedType","","",71],[13,"PtrSimplifiedType","","",71],[13,"TupleSimplifiedType","","",71],[13,"TraitSimplifiedType","","",71],[13,"StructSimplifiedType","","",71],[13,"ClosureSimplifiedType","","",71],[13,"FunctionSimplifiedType","","",71],[13,"ParameterSimplifiedType","","",71],[5,"simplify_type","","Tries to simplify a type by dropping type parameters, deref'ing away any reference types, etc.\nThe idea is to get something simple that we can use to quickly decide if two types could unify\nduring method lookup."],[0,"graph","rustc_trans::middle","A graph module for use in dataflow, region resolution, and elsewhere."],[3,"Graph","rustc_trans::middle::graph",""],[3,"Node","",""],[12,"data","","",388],[3,"Edge","",""],[12,"data","","",72],[3,"NodeIndex","",""],[17,"InvalidNodeIndex","",""],[3,"EdgeIndex","",""],[17,"InvalidEdgeIndex","",""],[3,"Direction","",""],[17,"Outgoing","",""],[17,"Incoming","",""],[3,"DepthFirstTraversal","",""],[5,"each_edge_index","",""],[0,"intrinsicck","rustc_trans::middle",""],[5,"check_crate","rustc_trans::middle::intrinsicck",""],[0,"infer","rustc_trans::middle","See the Book for more information."],[0,"bivariate","rustc_trans::middle::infer","Applies the \"bivariance relationship\" to two types and/or regions.\nIf (A,B) are bivariant then either A <: B or B <: A. It occurs\nwhen type/lifetime parameters are unconstrained. Usually this is\nan error, but we permit it in the specific case where a type\nparameter is constrained in a where-clause via an associated type."],[3,"Bivariate","rustc_trans::middle::infer::bivariate",""],[5,"Bivariate","",""],[0,"combine","rustc_trans::middle::infer",""],[8,"Combine","rustc_trans::middle::infer::combine",""],[10,"tcx","","",389],[10,"tag","","",389],[10,"fields","","",389],[10,"infcx","","",389],[10,"a_is_expected","","",389],[10,"trace","","",389],[10,"equate","","",389],[10,"bivariate","","",389],[10,"sub","","",389],[10,"lub","","",389],[10,"glb","","",389],[10,"mts","","",389],[10,"tys_with_variance","","",389],[10,"tys","","",389],[10,"regions_with_variance","","",389],[10,"regions","","",389],[10,"substs","","",389],[10,"substs_variances","","",389],[10,"bare_fn_tys","","",389],[10,"fn_sigs","","",389],[10,"args","","",389],[10,"unsafeties","","",389],[10,"abi","","",389],[10,"projection_tys","","",389],[10,"projection_predicates","","",389],[10,"projection_bounds","","",389],[10,"existential_bounds","","",389],[10,"builtin_bounds","","",389],[10,"trait_refs","","",389],[10,"binders","","",389],[8,"Combineable","",""],[10,"combine","","",390],[3,"CombineFields","",""],[12,"infcx","","",85],[12,"a_is_expected","","",85],[12,"trace","","",85],[5,"expected_found","",""],[5,"super_tys","",""],[0,"equate","rustc_trans::middle::infer",""],[3,"Equate","rustc_trans::middle::infer::equate",""],[5,"Equate","",""],[0,"error_reporting","rustc_trans::middle::infer","Error Reporting Code for the inference engine"],[8,"ErrorReporting","rustc_trans::middle::infer::error_reporting",""],[10,"report_region_errors","","",391],[10,"process_errors","","",391],[10,"report_type_error","","",391],[10,"report_and_explain_type_error","","",391],[10,"values_str","","",391],[10,"expected_found_str","","",391],[10,"report_concrete_failure","","",391],[10,"report_generic_bound_failure","","",391],[10,"report_sub_sup_conflict","","",391],[10,"report_sup_sup_conflict","","",391],[10,"report_processed_errors","","",391],[10,"give_suggestion","","",391],[8,"Resolvable","",""],[10,"resolve","","",392],[10,"contains_error","","",392],[0,"glb","rustc_trans::middle::infer",""],[3,"Glb","rustc_trans::middle::infer::glb","\"Greatest lower bound\" (common subtype)"],[5,"Glb","",""],[0,"lattice","rustc_trans::middle::infer","# Lattice Variables"],[8,"LatticeDir","rustc_trans::middle::infer::lattice",""],[10,"relate_bound","","",393],[5,"super_lattice_tys","",""],[0,"lub","rustc_trans::middle::infer",""],[3,"Lub","rustc_trans::middle::infer::lub","\"Least upper bound\" (common supertype)"],[5,"Lub","",""],[0,"region_inference","rustc_trans::middle::infer","See README.md"],[4,"Constraint","rustc_trans::middle::infer::region_inference",""],[13,"ConstrainVarSubVar","","",95],[13,"ConstrainRegSubVar","","",95],[13,"ConstrainVarSubReg","","",95],[4,"Verify","",""],[13,"VerifyRegSubReg","","",105],[13,"VerifyGenericBound","","",105],[4,"GenericKind","",""],[13,"Param","","",96],[13,"Projection","","",96],[3,"TwoRegions","",""],[4,"UndoLogEntry","",""],[13,"OpenSnapshot","","",98],[13,"CommitedSnapshot","","",98],[13,"AddVar","","",98],[13,"AddConstraint","","",98],[13,"AddVerify","","",98],[13,"AddGiven","","",98],[13,"AddCombination","","",98],[4,"CombineMapType","",""],[13,"Lub","","",99],[13,"Glb","","",99],[4,"RegionResolutionError","",""],[13,"ConcreteFailure","","`ConcreteFailure(o, a, b)`:",100],[13,"GenericBoundFailure","","`GenericBoundFailure(p, s, a, bs)",100],[13,"SubSupConflict","","`SubSupConflict(v, sub_origin, sub_r, sup_origin, sup_r)`:",100],[13,"SupSupConflict","","`SupSupConflict(v, origin1, r1, origin2, r2)`:",100],[13,"ProcessedErrors","","For subsets of `ConcreteFailure` and `SubSupConflict`, we can derive\nmore specific errors message by suggesting to the user where they\nshould put a lifetime. In those cases we process and put those errors\ninto `ProcessedErrors` before we do any reporting.",100],[3,"SameRegions","","SameRegions is used to group regions that we think are the same and would\nlike to indicate so to the user.\nFor example, the following function\n```\nstruct Foo { bar: int }\nfn foo2<'a, 'b>(x: &'a Foo) -> &'b int {\n   &x.bar\n}\n```\nwould report an error because we expect 'a and 'b to match, and so we group\n'a and 'b together inside a SameRegions struct"],[12,"scope_id","","",101],[12,"regions","","",101],[6,"CombineMap","",""],[3,"RegionVarBindings","",""],[3,"RegionSnapshot","",""],[4,"VarValue","",""],[13,"NoValue","","",106],[13,"Value","","",106],[13,"ErrorValue","","",106],[0,"resolve","rustc_trans::middle::infer",""],[3,"OpportunisticTypeResolver","rustc_trans::middle::infer::resolve","The opportunistic type resolver can be used at any time. It simply replaces\ntype variables that have been unified with the things they have\nbeen unified with (similar to `shallow_resolve`, but deep). This is\nuseful for printing messages etc but also required at various\npoints for correctness."],[5,"fully_resolve","","Full type resolution replaces all type and region variables with\ntheir concrete results. If any variable cannot be replaced (never unified, etc)\nthen an `Err` result is returned."],[0,"sub","rustc_trans::middle::infer",""],[3,"Sub","rustc_trans::middle::infer::sub","\"Greatest lower bound\" (common subtype)"],[5,"Sub","",""],[0,"type_variable","rustc_trans::middle::infer",""],[3,"TypeVariableTable","rustc_trans::middle::infer::type_variable",""],[3,"Snapshot","",""],[4,"RelationDir","",""],[13,"SubtypeOf","","",112],[13,"SupertypeOf","","",112],[13,"EqTo","","",112],[13,"BiTo","","",112],[0,"unify","rustc_trans::middle::infer",""],[8,"UnifyKey","rustc_trans::middle::infer::unify","This trait is implemented by any type that can serve as a type\nvariable. We call such variables *unification keys*. For example,\nthis trait is implemented by `IntVid`, which represents integral\nvariables."],[16,"Value","rustc_trans::middle::infer::unify::UnifyKey",""],[10,"index","rustc_trans::middle::infer::unify","",394],[10,"from_index","","",394],[10,"unification_table","","",394],[10,"tag","","",394],[8,"UnifyValue","","Trait for valid types that a type variable can be set to. Note that\nthis is typically not the end type that the value will take on, but\nrather an `Option` wrapper (where `None` represents a variable\nwhose value is not yet set)."],[4,"VarValue","","Value of a unification key. We implement Tarjan's union-find\nalgorithm: when two keys are unified, one of them is converted\ninto a \"redirect\" pointing at the other. These redirects form a\nDAG: the roots of the DAG (nodes that are not redirected) are each\nassociated with a value of type `V` and a rank. The rank is used\nto keep the DAG relatively balanced, which helps keep the running\ntime of the algorithm under control. For more information, see\n<http://en.wikipedia.org/wiki/Disjoint-set_data_structure>."],[13,"Redirect","","",115],[13,"Root","","",115],[3,"UnificationTable","","Table of unification keys and their values."],[3,"Snapshot","","At any time, users may snapshot a unification table.  The changes\nmade during the snapshot may either be *committed* or *rolled back*."],[3,"Node","","Internal type used to represent the result of a `get()` operation.\nConveys the current root and value of the key."],[12,"key","","",395],[12,"value","","",395],[12,"rank","","",395],[3,"Delegate","",""],[8,"SimplyUnifiable","","Indicates a type that does not have any kind of subtyping\nrelationship."],[10,"to_type","","",396],[10,"to_type_err","","",396],[5,"err","",""],[8,"InferCtxtMethodsForSimplyUnifiableTypes","",""],[10,"simple_vars","","",397],[10,"simple_var_t","","",397],[10,"probe_var","","",397],[6,"Bound","rustc_trans::middle::infer",""],[6,"cres","",""],[6,"ures","",""],[6,"fres","",""],[3,"InferCtxt","",""],[12,"tcx","","",88],[6,"SkolemizationMap","",""],[4,"TypeOrigin","","Why did we require that the two types be related?"],[13,"Misc","","",122],[13,"MethodCompatCheck","","",122],[13,"ExprAssignable","","",122],[13,"RelateTraitRefs","","",122],[13,"RelateSelfType","","",122],[13,"RelateOutputImplTypes","","",122],[13,"MatchExpressionArm","","",122],[13,"IfExpression","","",122],[13,"IfExpressionWithNoElse","","",122],[13,"RangeExpression","","",122],[13,"EquatePredicate","","",122],[4,"ValuePairs","","See `error_reporting.rs` for more details"],[13,"Types","","",123],[13,"TraitRefs","","",123],[13,"PolyTraitRefs","","",123],[3,"TypeTrace","","The trace designates the path through inference that we took to\nencounter an error or subtyping constraint."],[4,"SubregionOrigin","","The origin of a `r1 <= r2` constraint."],[13,"Subtype","","",125],[13,"InfStackClosure","","",125],[13,"InvokeClosure","","",125],[13,"DerefPointer","","",125],[13,"FreeVariable","","",125],[13,"IndexSlice","","",125],[13,"RelateObjectBound","","",125],[13,"RelateParamBound","","",125],[13,"RelateRegionParamBound","","",125],[13,"RelateDefaultParamBound","","",125],[13,"Reborrow","","",125],[13,"ReborrowUpvar","","",125],[13,"ReferenceOutlivesReferent","","",125],[13,"ExprTypeIsNotInScope","","",125],[13,"BindingTypeIsNotValidAtDecl","","",125],[13,"CallRcvr","","",125],[13,"CallArg","","",125],[13,"CallReturn","","",125],[13,"Operand","","",125],[13,"AddrOf","","",125],[13,"AutoBorrow","","",125],[13,"SafeDestructor","","",125],[4,"LateBoundRegionConversionTime","","Times when we replace late-bound regions with variables:"],[13,"FnCall","","when a fn is called",126],[13,"HigherRankedType","","when two higher-ranked types are compared",126],[13,"AssocTypeProjection","","when projecting an associated type",126],[4,"RegionVariableOrigin","","Reasons to create a region inference variable"],[13,"MiscVariable","","",127],[13,"PatternRegion","","",127],[13,"AddrOfRegion","","",127],[13,"Autoref","","",127],[13,"Coercion","","",127],[13,"EarlyBoundRegion","","",127],[13,"LateBoundRegion","","",127],[13,"UpvarRegion","","",127],[13,"BoundRegionInCoherence","","",127],[4,"fixup_err","",""],[13,"unresolved_int_ty","","",128],[13,"unresolved_float_ty","","",128],[13,"unresolved_ty","","",128],[5,"fixup_err_to_string","",""],[5,"new_infer_ctxt","",""],[5,"common_supertype","","Computes the least upper-bound of `a` and `b`. If this is not possible, reports an error and\nreturns ty::err."],[5,"mk_subty","",""],[5,"can_mk_subty","",""],[5,"can_mk_eqty","",""],[5,"mk_subr","",""],[5,"mk_eqty","",""],[5,"mk_sub_poly_trait_refs","",""],[5,"uok","",""],[3,"CombinedSnapshot","",""],[4,"IntVarValue","",""],[13,"IntType","","",119],[13,"UintType","","",119],[4,"GenericKind","",""],[13,"Param","","",96],[13,"Projection","","",96],[3,"TypeFreshener","",""],[0,"lang_items","rustc_trans::middle",""],[4,"LangItem","rustc_trans::middle::lang_items",""],[13,"SendTraitLangItem","","",130],[13,"SizedTraitLangItem","","",130],[13,"CopyTraitLangItem","","",130],[13,"SyncTraitLangItem","","",130],[13,"DropTraitLangItem","","",130],[13,"AddTraitLangItem","","",130],[13,"SubTraitLangItem","","",130],[13,"MulTraitLangItem","","",130],[13,"DivTraitLangItem","","",130],[13,"RemTraitLangItem","","",130],[13,"NegTraitLangItem","","",130],[13,"NotTraitLangItem","","",130],[13,"BitXorTraitLangItem","","",130],[13,"BitAndTraitLangItem","","",130],[13,"BitOrTraitLangItem","","",130],[13,"ShlTraitLangItem","","",130],[13,"ShrTraitLangItem","","",130],[13,"IndexTraitLangItem","","",130],[13,"IndexMutTraitLangItem","","",130],[13,"RangeStructLangItem","","",130],[13,"RangeFromStructLangItem","","",130],[13,"RangeToStructLangItem","","",130],[13,"RangeFullStructLangItem","","",130],[13,"UnsafeCellTypeLangItem","","",130],[13,"DerefTraitLangItem","","",130],[13,"DerefMutTraitLangItem","","",130],[13,"FnTraitLangItem","","",130],[13,"FnMutTraitLangItem","","",130],[13,"FnOnceTraitLangItem","","",130],[13,"EqTraitLangItem","","",130],[13,"OrdTraitLangItem","","",130],[13,"StrEqFnLangItem","","",130],[13,"PanicFnLangItem","","",130],[13,"PanicBoundsCheckFnLangItem","","",130],[13,"PanicFmtLangItem","","",130],[13,"ExchangeMallocFnLangItem","","",130],[13,"ExchangeFreeFnLangItem","","",130],[13,"StrDupUniqFnLangItem","","",130],[13,"StartFnLangItem","","",130],[13,"TyDescStructLangItem","","",130],[13,"OpaqueStructLangItem","","",130],[13,"EhPersonalityLangItem","","",130],[13,"ExchangeHeapLangItem","","",130],[13,"OwnedBoxLangItem","","",130],[13,"PhantomFnItem","","",130],[13,"PhantomDataItem","","",130],[13,"CovariantTypeItem","","",130],[13,"ContravariantTypeItem","","",130],[13,"InvariantTypeItem","","",130],[13,"CovariantLifetimeItem","","",130],[13,"ContravariantLifetimeItem","","",130],[13,"InvariantLifetimeItem","","",130],[13,"NoCopyItem","","",130],[13,"ManagedItem","","",130],[13,"NonZeroItem","","",130],[13,"StackExhaustedLangItem","","",130],[13,"DebugTraitLangItem","","",130],[3,"LanguageItems","",""],[12,"items","","",131],[12,"missing","","",131],[5,"extract","",""],[5,"collect_language_items","",""],[0,"liveness","rustc_trans::middle","A classic liveness analysis based on dataflow over the AST.  Computes,\nfor each local variable in a function, whether that variable is live\nat a given point.  Program execution points are identified by their\nid."],[5,"check_crate","rustc_trans::middle::liveness",""],[0,"mem_categorization","rustc_trans::middle","# Categorization"],[4,"categorization","rustc_trans::middle::mem_categorization",""],[13,"cat_rvalue","","",141],[13,"cat_static_item","","",141],[13,"cat_upvar","","",141],[13,"cat_local","","",141],[13,"cat_deref","","",141],[13,"cat_interior","","",141],[13,"cat_downcast","","",141],[3,"Upvar","",""],[12,"id","","",142],[12,"kind","","",142],[4,"PointerKind","",""],[13,"Unique","","`Box<T>`",143],[13,"BorrowedPtr","","`&T`",143],[13,"UnsafePtr","","`*T`",143],[13,"Implicit","","Implicit deref of the `&T` that results from an overloaded index `[]`.",143],[4,"InteriorKind","",""],[13,"InteriorField","","",144],[13,"InteriorElement","","",144],[4,"FieldName","",""],[13,"NamedField","","",145],[13,"PositionalField","","",145],[4,"InteriorOffsetKind","",""],[13,"Index","","",146],[13,"Pattern","","",146],[4,"ElementKind","",""],[13,"VecElement","","",147],[13,"OtherElement","","",147],[4,"MutabilityCategory","",""],[13,"McImmutable","","",148],[13,"McDeclared","","",148],[13,"McInherited","","",148],[4,"Note","",""],[13,"NoteClosureEnv","","",149],[13,"NoteUpvarRef","","",149],[13,"NoteNone","","",149],[3,"cmt_","",""],[12,"id","","",150],[12,"span","","",150],[12,"cat","","",150],[12,"mutbl","","",150],[12,"ty","","",150],[12,"note","","",150],[6,"cmt","",""],[4,"deref_kind","",""],[13,"deref_ptr","","",398],[13,"deref_interior","","",398],[8,"ast_node","",""],[10,"id","","",399],[10,"span","","",399],[3,"MemCategorizationContext","",""],[6,"McResult","",""],[8,"Typer","","The `Typer` trait provides the interface for the mem-categorization\nmodule to the results of the type check. It can be used to query\nthe type assigned to an expression node, to inquire after adjustments,\nand so on."],[10,"node_ty","","",400],[10,"expr_ty_adjusted","","",400],[10,"type_moves_by_default","","",400],[10,"node_method_ty","","",400],[10,"node_method_origin","","",400],[10,"adjustments","","",400],[10,"is_method_call","","",400],[10,"temporary_scope","","",400],[10,"upvar_capture","","",400],[4,"InteriorSafety","",""],[13,"InteriorUnsafe","","",401],[13,"InteriorSafe","","",401],[4,"AliasableReason","",""],[13,"AliasableBorrowed","","",402],[13,"AliasableClosure","","",402],[13,"AliasableOther","","",402],[13,"AliasableStatic","","",402],[13,"AliasableStaticMut","","",402],[5,"ptr_sigil","",""],[0,"pat_util","rustc_trans::middle",""],[6,"PatIdMap","rustc_trans::middle::pat_util",""],[5,"pat_id_map","",""],[5,"pat_is_refutable","",""],[5,"pat_is_variant_or_struct","",""],[5,"pat_is_const","",""],[5,"pat_is_binding","",""],[5,"pat_is_binding_or_wild","",""],[5,"pat_bindings","","Call `it` on every \"binding\" in a pattern, e.g., on `a` in\n`match foo() { Some(a) => (), None => () }`"],[5,"pat_contains_bindings","","Checks if the pattern contains any patterns that bind something to\nan ident, e.g. `foo`, or `Foo(foo)` or `foo @ Bar(..)`."],[5,"pat_contains_bindings_or_wild","","Checks if the pattern contains any patterns that bind something to\nan ident or wildcard, e.g. `foo`, or `Foo(_)`, `foo @ Bar(..)`,"],[5,"simple_identifier","",""],[5,"def_to_path","",""],[0,"privacy","rustc_trans::middle","A pass that checks to make sure private fields and methods aren't used\noutside their scopes. This pass will also generate a set of exported items\nwhich are available for use externally when compiled as a library."],[6,"ExportedItems","rustc_trans::middle::privacy",""],[6,"ExternalExports","",""],[6,"PublicItems","",""],[4,"LastPrivate","",""],[13,"LastMod","","",155],[13,"LastImport","","",155],[12,"value_priv","rustc_trans::middle::privacy::LastPrivate","",155],[12,"value_used","","",155],[12,"type_priv","","",155],[12,"type_used","","",155],[4,"PrivateDep","rustc_trans::middle::privacy",""],[13,"AllPublic","","",156],[13,"DependsOn","","",156],[4,"ImportUse","",""],[13,"Unused","","",157],[13,"Used","","",157],[0,"reachable","rustc_trans::middle",""],[5,"find_reachable","rustc_trans::middle::reachable",""],[0,"region","rustc_trans::middle","This file actually contains two passes related to regions.  The first\npass builds up the `scope_map`, which describes the parent links in\nthe region hierarchy.  The second pass infers which types must be\nregion parameterized."],[4,"CodeExtent","rustc_trans::middle::region","CodeExtent represents a statically-describable extent that can be\nused to bound the lifetime/region for values."],[13,"Misc","","",17],[13,"DestructionScope","","",17],[13,"Remainder","","",17],[3,"DestructionScopeData","","extent of destructors for temporaries of node-id"],[12,"node_id","","",18],[3,"BlockRemainder","","Represents a subscope of `block` for a binding that is introduced\nby `block.stmts[first_statement_index]`. Such subscopes represent\na suffix of the block. Note that each subscope does not include\nthe initializer expression, if any, for the statement indexed by\n`first_statement_index`."],[12,"block","","",159],[12,"first_statement_index","","",159],[3,"RegionMaps","","The region maps encode information about region relationships."],[3,"Context","",""],[5,"resolve_crate","",""],[5,"resolve_inlined_item","",""],[0,"recursion_limit","rustc_trans::middle",""],[5,"update_recursion_limit","rustc_trans::middle::recursion_limit",""],[0,"resolve_lifetime","rustc_trans::middle","Name resolution for lifetimes."],[4,"DefRegion","rustc_trans::middle::resolve_lifetime",""],[13,"DefStaticRegion","","",166],[13,"DefEarlyBoundRegion","","",166],[13,"DefLateBoundRegion","","",166],[13,"DefFreeRegion","","",166],[6,"NamedRegionMap","",""],[5,"krate","",""],[5,"early_bound_lifetimes","",""],[0,"stability","rustc_trans::middle","A pass that annotates every item and method with its stability level,\npropagating default levels lexically from parent to children ast nodes."],[3,"Index","rustc_trans::middle::stability","A stability index, giving the stability level for items and methods."],[5,"check_unstable_api_usage","","Cross-references the feature names of unstable APIs with enabled\nfeatures and possibly prints errors. Returns a list of all\nfeatures used."],[5,"check_item","","Helper for discovering nodes to check for stability"],[5,"check_expr","","Helper for discovering nodes to check for stability"],[5,"check_path","",""],[5,"check_pat","",""],[5,"lookup","","Lookup the stability for a node, loading external crate\nmetadata as necessary."],[5,"check_unused_or_stable_features","","Given the list of enabled features that were not language features (i.e. that\nwere expected to be library features), and the list of features used from\nlibraries, identify activated features that don't exist and error about them."],[0,"subst","rustc_trans::middle",""],[3,"Substs","rustc_trans::middle::subst","A substitution mapping type/region parameters to new values. We\nidentify each in-scope parameter by an *index* and a *parameter\nspace* (which indices where the parameter is defined; see\n`ParamSpace`)."],[12,"types","","",172],[12,"regions","","",172],[4,"RegionSubsts","","Represents the values to use when substituting lifetime parameters.\nIf the value is `ErasedRegions`, then this subst is occurring during\ntrans, and all region parameters will be replaced with `ty::ReStatic`."],[13,"ErasedRegions","","",173],[13,"NonerasedRegions","","",173],[4,"ParamSpace","",""],[13,"TypeSpace","","",174],[13,"SelfSpace","","",174],[13,"FnSpace","","",174],[3,"VecPerParamSpace","","Vector of things sorted by param space. Used to keep\nthe set of things declared on the type, self, or method\ndistinct."],[3,"SeparateVecsPerParamSpace","","The `split` function converts one `VecPerParamSpace` into this\n`SeparateVecsPerParamSpace` structure."],[12,"types","","",403],[12,"selfs","","",403],[12,"fns","","",403],[3,"EnumeratedItems","",""],[8,"Subst","",""],[10,"subst","","",404],[10,"subst_spanned","","",404],[0,"traits","rustc_trans::middle","Trait Resolution. See the Book for more."],[3,"Obligation","rustc_trans::middle::traits","An `Obligation` represents some trait reference (e.g. `int:Eq`) for\nwhich the vtable must be found.  The process of finding a vtable is\ncalled \"resolving\" the `Obligation`. This process consists of\neither identifying an `impl` (e.g., `impl Eq for int`) that\nprovides the required vtable, or else finding a bound that is in\nscope. The eventual result is usually a `Selection` (defined below)."],[12,"cause","","",198],[12,"recursion_depth","","",198],[12,"predicate","","",198],[6,"PredicateObligation","",""],[6,"TraitObligation","",""],[3,"ObligationCause","","Why did we incur this obligation? Used for error reporting."],[12,"span","","",205],[12,"body_id","","",205],[12,"code","","",205],[4,"ObligationCauseCode","",""],[13,"MiscObligation","","Not well classified or should be obvious from span.",206],[13,"ItemObligation","","In an impl of trait X for type Y, type Y must\nalso implement all supertraits of X.",206],[13,"ObjectCastObligation","","Obligation incurred due to an object cast.",206],[13,"AssignmentLhsSized","","Various cases where expressions must be sized/copy/etc:",206],[13,"StructInitializerSized","","",206],[13,"VariableType","","",206],[13,"ReturnType","","",206],[13,"RepeatVec","","",206],[13,"ClosureCapture","","",206],[13,"FieldSized","","",206],[13,"ObjectSized","","",206],[13,"SharedStatic","","",206],[13,"BuiltinDerivedObligation","","",206],[13,"ImplDerivedObligation","","",206],[13,"CompareImplMethodObligation","","",206],[3,"DerivedObligationCause","",""],[6,"Obligations","",""],[6,"PredicateObligations","",""],[6,"TraitObligations","",""],[6,"Selection","",""],[4,"SelectionError","",""],[13,"Unimplemented","","",202],[13,"Overflow","","",202],[13,"OutputTypeParameterMismatch","","",202],[3,"FulfillmentError","",""],[12,"obligation","","",203],[12,"code","","",203],[4,"FulfillmentErrorCode","",""],[13,"CodeSelectionError","","",204],[13,"CodeProjectionError","","",204],[13,"CodeAmbiguity","","",204],[6,"SelectionResult","",""],[4,"Vtable","","Given the successful resolution of an obligation, the `Vtable`\nindicates where the vtable comes from. Note that while we call this\na \"vtable\", it does not necessarily indicate dynamic dispatch at\nruntime. `Vtable` instances just tell the compiler where to find\nmethods, but in generic code those methods are typically statically\ndispatched -- only when an object is constructed is a `Vtable`\ninstance reified into an actual vtable."],[13,"VtableImpl","","Vtable identifying a particular impl.",199],[13,"VtableDefaultImpl","","Vtable for default trait implementations\nThis carries the information and nested obligations with regards\nto a default implementation for a trait `Trait`. The nested obligations\nensure the trait implementation holds for all the constituent types.",199],[13,"VtableParam","","Successful resolution to an obligation provided by the caller\nfor some type parameter. The `Vec<N>` represents the\nobligations incurred from normalizing the where-clause (if\nany).",199],[13,"VtableObject","","Virtual calls through an object",199],[13,"VtableBuiltin","","Successful resolution for a builtin trait.",199],[13,"VtableClosure","","Vtable automatically generated for a closure. The def ID is the ID\nof the closure expression. This is a `VtableImpl` in spirit, but the\nimpl is generated by the compiler and does not appear in the source.",199],[13,"VtableFnPointer","","Same as above, but for a fn pointer type with the given signature.",199],[3,"VtableImplData","","Identifies a particular impl in the source, along with a set of\nsubstitutions from the impl's type/lifetime parameters. The\n`nested` vector corresponds to the nested obligations attached to\nthe impl's type parameters."],[12,"impl_def_id","","",196],[12,"substs","","",196],[12,"nested","","",196],[3,"VtableDefaultImplData","",""],[12,"trait_def_id","","",201],[12,"nested","","",201],[3,"VtableBuiltinData","",""],[12,"nested","","",200],[3,"VtableObjectData","","A vtable for some object-safe trait `Foo` automatically derived\nfor the object type `Foo`."],[12,"object_ty","","the object type `Foo`.",197],[12,"upcast_trait_ref","","`Foo` upcast to the obligation trait. This will be some supertrait of `Foo`.",197],[5,"predicates_for_generics","","Creates predicate obligations from the generic bounds."],[5,"evaluate_builtin_bound","","Determines whether the type `ty` is known to meet `bound` and\nreturns true if so. Returns false if `ty` either does not meet\n`bound` or is not known to meet bound (note that this is\nconservative towards *no impl*, which is the opposite of the\n`evaluate` methods)."],[5,"type_known_to_meet_builtin_bound","",""],[5,"normalize_param_env_or_error","","Normalizes the parameter environment, reporting errors if they occur."],[5,"fully_normalize","",""],[5,"orphan_check","","Checks the coherence orphan rules. `impl_def_id` should be the\ndef-id of a trait impl. To pass, either the trait must be local, or else\ntwo conditions must be satisfied:"],[5,"is_object_safe","",""],[5,"report_fulfillment_errors","",""],[5,"object_safety_violations","",""],[4,"MethodViolationCode","","Reasons a method might not be object-safe."],[13,"StaticMethod","","e.g., `fn foo()`",185],[13,"ReferencesSelf","","e.g., `fn foo(&self, x: Self)` or `fn foo(&self) -> Self`",185],[13,"Generic","","e.g., `fn foo<A>()`",185],[5,"normalize","","Normalizes any associated type projections in `value`, replacing\nthem with a fully resolved type where possible. The return value\ncombines the normalized result and any additional obligations that\nwere incurred as result."],[3,"SelectionCache","",""],[3,"Normalized","",""],[12,"value","","",183],[12,"obligations","","",183],[3,"MismatchedProjectionTypes","",""],[12,"err","","",180],[5,"get_vtable_index_of_object_method","","Given an object of type `object_trait_ref`, returns the index of\nthe method `n_method` found in the trait `trait_def_id` (which\nshould be a supertrait of `object_trait_ref`) within the vtable\nfor `object_trait_ref`."],[4,"OrphanCheckErr","",""],[13,"NoLocalInputType","","",405],[13,"UncoveredTy","","",405],[4,"ObjectSafetyViolation","",""],[13,"SizedSelf","","Self : Sized declared on the trait",186],[13,"SupertraitSelf","","Supertrait reference references `Self` an in illegal location\n(e.g. `trait Foo : Bar<Self>`)",186],[13,"Method","","Method has something illegal",186],[3,"RegionObligation","",""],[12,"sub_region","","",178],[12,"sup_type","","",178],[12,"cause","","",178],[3,"SelectionContext","",""],[5,"transitive_bounds","",""],[5,"upcast","","Cast a trait reference into a reference to one of its super\ntraits; returns `None` if `target_trait_def_id` is not a\nsupertrait."],[5,"overlapping_impls","","True if there exist types that satisfy both of the two given impls."],[5,"trait_ref_for_builtin_bound","",""],[5,"suggest_new_overflow_limit","",""],[5,"elaborate_predicates","",""],[3,"FulfillmentContext","","The fulfillment context is used to drive trait resolution.  It\nconsists of a list of obligations that must be (eventually)\nsatisfied. The job is to track which are satisfied, which yielded\nerrors, and which are still pending. At any point, users can call\n`select_where_possible`, and the fulfilment context will try to do\nselection, retaining only those obligations that remain\nambiguous. This may be helpful in pushing type inference\nalong. Once all type inference constraints have been generated, the\nmethod `select_all_or_error` can be used to report any remaining\nambiguous cases as errors."],[5,"supertraits","",""],[6,"Supertraits","",""],[4,"MethodMatchResult","",""],[13,"MethodMatched","","",193],[13,"MethodAmbiguous","","",193],[13,"MethodDidNotMatch","","",193],[4,"MethodMatchedData","",""],[13,"PreciseMethodMatch","","",188],[13,"CoerciveMethodMatch","","",188],[0,"ty","rustc_trans::middle",""],[6,"Disr","rustc_trans::middle::ty",""],[17,"INITIAL_DISCRIMINANT_VALUE","",""],[3,"CrateAnalysis","","The complete set of all analyses described in this module. This is\nproduced by the driver and fed to trans and later passes."],[12,"export_map","","",406],[12,"exported_items","","",406],[12,"public_items","","",406],[12,"ty_cx","","",406],[12,"reachable","","",406],[12,"name","","",406],[12,"glob_map","","",406],[3,"field","",""],[12,"name","","",208],[12,"mt","","",208],[4,"ImplOrTraitItemContainer","",""],[13,"TraitContainer","","",209],[13,"ImplContainer","","",209],[4,"ImplOrTraitItem","",""],[13,"MethodTraitItem","","",210],[13,"TypeTraitItem","","",210],[4,"ImplOrTraitItemId","",""],[13,"MethodTraitItemId","","",211],[13,"TypeTraitItemId","","",211],[3,"Method","",""],[12,"name","","",212],[12,"generics","","",212],[12,"predicates","","",212],[12,"fty","","",212],[12,"explicit_self","","",212],[12,"vis","","",212],[12,"def_id","","",212],[12,"container","","",212],[12,"provided_source","","",212],[3,"AssociatedType","",""],[12,"name","","",213],[12,"vis","","",213],[12,"def_id","","",213],[12,"container","","",213],[3,"mt","",""],[12,"ty","","",214],[12,"mutbl","","",214],[3,"field_ty","",""],[12,"name","","",215],[12,"id","","",215],[12,"vis","","",215],[12,"origin","","",215],[3,"creader_cache_key","",""],[12,"cnum","","",216],[12,"pos","","",216],[12,"len","","",216],[3,"ItemVariances","",""],[12,"types","","",217],[12,"regions","","",217],[4,"Variance","",""],[13,"Covariant","","",218],[13,"Invariant","","",218],[13,"Contravariant","","",218],[13,"Bivariant","","",218],[4,"AutoAdjustment","",""],[13,"AdjustReifyFnPointer","","",219],[13,"AdjustDerefRef","","",219],[4,"UnsizeKind","",""],[13,"UnsizeLength","","",220],[13,"UnsizeStruct","","",220],[13,"UnsizeVtable","","",220],[3,"AutoDerefRef","",""],[12,"autoderefs","","",221],[12,"autoref","","",221],[4,"AutoRef","",""],[13,"AutoPtr","","Convert from T to &T\nThe third field allows us to wrap other AutoRef adjustments.",222],[13,"AutoUnsize","","Convert [T, ..n] to [T] (or similar, depending on the kind)",222],[13,"AutoUnsizeUniq","","Convert Box<[T, ..n]> to Box<[T]> or something similar in a Box.\nWith DST and Box a library type, this should be replaced by UnsizeStruct.",222],[13,"AutoUnsafe","","Convert from T to *T\nValue to thin pointer\nThe second field allows us to wrap other AutoRef adjustments.",222],[5,"adjusted_object_region","",""],[5,"adjust_is_object","",""],[5,"type_of_adjust","",""],[3,"param_index","",""],[12,"space","","",223],[12,"index","","",223],[4,"MethodOrigin","",""],[13,"MethodStatic","","",24],[13,"MethodStaticClosure","","",24],[13,"MethodTypeParam","","",24],[13,"MethodTraitObject","","",24],[3,"MethodParam","",""],[12,"trait_ref","","",224],[12,"method_num","","",224],[12,"impl_def_id","","The impl for the trait from which the method comes. This\nshould only be used for certain linting/heuristic purposes\nsince there is no guarantee that this is Some in every\nsituation that it could/should be.",224],[3,"MethodObject","",""],[12,"trait_ref","","",225],[12,"object_trait_id","","",225],[12,"method_num","","",225],[12,"vtable_index","","",225],[3,"MethodCallee","",""],[12,"origin","","",226],[12,"ty","","",226],[12,"substs","","",226],[3,"MethodCall","","With method calls, we store some extra information in\nside tables (i.e method_map). We use\nMethodCall as a key to index into these tables instead of\njust directly using the expression's NodeId. The reason\nfor this being that we may apply adjustments (coercions)\nwith the resulting expression also needing to use the\nside tables. The problem with this is that we don't\nassign a separate NodeId to this new expression\nand so it would clash with the base expression if both\nneeded to add to the side tables. Thus to disambiguate\nwe also keep track of whether there's an adjustment in\nour key."],[12,"expr_id","","",227],[12,"adjustment","","",227],[4,"ExprAdjustment","",""],[13,"NoAdjustment","","",228],[13,"AutoDeref","","",228],[13,"AutoObject","","",228],[6,"MethodMap","",""],[6,"vtable_param_res","",""],[6,"vtable_res","",""],[4,"vtable_origin","",""],[13,"vtable_static","","",229],[13,"vtable_param","","",229],[13,"vtable_closure","","",229],[13,"vtable_error","","",229],[6,"ObjectCastMap","",""],[3,"TransmuteRestriction","","A restriction that certain types must be the same size. The use of\n`transmute` gives rise to these restrictions. These generally\ncannot be checked until trans; therefore, each call to `transmute`\nwill push one or more such restriction into the\n`transmute_restrictions` vector during `intrinsicck`. They are\nthen checked during `trans` by the fn `check_intrinsics`."],[12,"span","","The span whence the restriction comes.",79],[12,"original_from","","The type being transmuted from.",79],[12,"original_to","","The type being transmuted to.",79],[12,"substituted_from","","The type being transmuted from, with all type parameters\nsubstituted for an arbitrary representative. Not to be shown\nto the end user.",79],[12,"substituted_to","","The type being transmuted to, with all type parameters\nsubstituted for an arbitrary representative. Not to be shown\nto the end user.",79],[12,"id","","NodeId of the transmute intrinsic.",79],[3,"CtxtArenas","","Internal storage"],[3,"CommonTypes","",""],[12,"bool","","",407],[12,"char","","",407],[12,"int","","",407],[12,"i8","","",407],[12,"i16","","",407],[12,"i32","","",407],[12,"i64","","",407],[12,"uint","","",407],[12,"u8","","",407],[12,"u16","","",407],[12,"u32","","",407],[12,"u64","","",407],[12,"f32","","",407],[12,"f64","","",407],[12,"err","","",407],[3,"ctxt","","The data structure to keep track of all the information that typechecker\ngenerates so that so that it can be reused and doesn't have to be redone\nlater on."],[12,"types","","Common types, pre-interned for your convenience.",232],[12,"sess","","",232],[12,"def_map","","",232],[12,"named_region_map","","",232],[12,"region_maps","","",232],[12,"node_types","","Stores the types for various nodes in the AST.  Note that this table\nis not guaranteed to be populated until after typeck.  See\ntypeck::check::fn_ctxt for details.",232],[12,"item_substs","","Stores the type parameters which were substituted to obtain the type\nof this node.  This only applies to nodes that refer to entities\nparameterized by type parameters, such as generic fns, types, or\nother items.",232],[12,"impl_or_trait_items","","Maps from a trait item to the trait item \"descriptor\"",232],[12,"trait_item_def_ids","","Maps from a trait def-id to a list of the def-ids of its trait items",232],[12,"trait_items_cache","","A cache for the trait_items() routine",232],[12,"impl_trait_cache","","",232],[12,"impl_trait_refs","","",232],[12,"trait_defs","","",232],[12,"predicates","","Maps from the def-id of an item (trait/struct/enum/fn) to its\nassociated predicates.",232],[12,"super_predicates","","Maps from the def-id of a trait to the list of\nsuper-predicates. This is a subset of the full list of\npredicates. We store these in a separate map because we must\nevaluate them even during type conversion, often before the\nfull predicates are available (note that supertraits have\nadditional acyclicity requirements).",232],[12,"object_cast_map","","Maps from node-id of a trait object cast (like `foo as\nBox<Trait>`) to the trait reference.",232],[12,"map","","",232],[12,"intrinsic_defs","","",232],[12,"freevars","","",232],[12,"tcache","","",232],[12,"rcache","","",232],[12,"short_names_cache","","",232],[12,"tc_cache","","",232],[12,"ast_ty_to_ty_cache","","",232],[12,"enum_var_cache","","",232],[12,"ty_param_defs","","",232],[12,"adjustments","","",232],[12,"normalized_cache","","",232],[12,"lang_items","","",232],[12,"provided_method_sources","","A mapping of fake provided method def_ids to the default implementation",232],[12,"struct_fields","","",232],[12,"item_variance_map","","Maps from def-id of a type or region parameter to its\n(inferred) variance.",232],[12,"variance_computed","","True if the variance has been computed yet; false otherwise.",232],[12,"destructor_for_type","","A mapping from the def ID of an enum or struct type to the def ID\nof the method that implements its destructor. If the type is not\npresent in this map, it does not have a destructor. This map is\npopulated during the coherence phase of typechecking.",232],[12,"destructors","","A method will be in this list if and only if it is a destructor.",232],[12,"trait_impls","","Maps a trait onto a list of impls of that trait.",232],[12,"inherent_impls","","Maps a DefId of a type to a list of its inherent impls.\nContains implementations of methods that are inherent to a type.\nMethods in these implementations don't need to be exported.",232],[12,"impl_items","","Maps a DefId of an impl to a list of its items.\nNote that this contains all of the impls that we know about,\nincluding ones in other crates. It's not clear that this is the best\nway to do it.",232],[12,"used_unsafe","","Set of used unsafe nodes (functions or blocks). Unsafe nodes not\npresent in this set can be warned about.",232],[12,"used_mut_nodes","","Set of nodes which mark locals as mutable which end up getting used at\nsome point. Local variable definitions not in this set can be warned\nabout.",232],[12,"populated_external_types","","The set of external nominal types whose implementations have been read.\nThis is used for lazy resolution of methods.",232],[12,"populated_external_traits","","The set of external traits whose implementations have been read. This\nis used for lazy resolution of traits.",232],[12,"upvar_capture_map","","Borrows",232],[12,"extern_const_statics","","These two caches are used by const_eval when decoding external statics\nand variants that are found.",232],[12,"extern_const_variants","","",232],[12,"method_map","","",232],[12,"dependency_formats","","",232],[12,"closure_kinds","","Records the type of each closure. The def ID is the ID of the\nexpression defining the closure.",232],[12,"closure_tys","","Records the type of each closure. The def ID is the ID of the\nexpression defining the closure.",232],[12,"node_lint_levels","","",232],[12,"transmute_restrictions","","The types that must be asserted to be the same size for `transmute`\nto be valid. We gather up these restrictions in the intrinsicck pass\nand check them in trans.",232],[12,"stability","","Maps any item's def-id to its stability index.",232],[12,"associated_types","","Maps def IDs to true if and only if they're associated types.",232],[12,"selection_cache","","Caches the results of trait selection. This cache is used\nfor things that do not have to do with the parameters in scope.",232],[12,"repr_hint_cache","","Caches the representation hints for struct definitions.",232],[12,"type_impls_copy_cache","","Caches whether types are known to impl Copy. Note that type\nparameters are never placed into this cache, because their\nresults are dependent on the parameter environment.",232],[12,"type_impls_sized_cache","","Caches whether types are known to impl Sized. Note that type\nparameters are never placed into this cache, because their\nresults are dependent on the parameter environment.",232],[12,"object_safety_cache","","Caches whether traits are object safe",232],[12,"const_qualif_map","","Maps Expr NodeId's to their constant qualification.",232],[3,"TypeFlags","",""],[17,"NO_TYPE_FLAGS","",""],[17,"HAS_PARAMS","",""],[17,"HAS_SELF","",""],[17,"HAS_TY_INFER","",""],[17,"HAS_RE_INFER","",""],[17,"HAS_RE_LATE_BOUND","",""],[17,"HAS_REGIONS","",""],[17,"HAS_TY_ERR","",""],[17,"HAS_PROJECTION","",""],[17,"NEEDS_SUBST","",""],[3,"TyS","",""],[12,"sty","","",233],[12,"flags","","",233],[6,"Ty","",""],[3,"InternedTy","","An entry in the type interner."],[5,"type_has_params","",""],[5,"type_has_self","",""],[5,"type_has_ty_infer","",""],[5,"type_needs_infer","",""],[5,"type_has_projection","",""],[5,"type_has_late_bound_regions","",""],[5,"type_has_escaping_regions","","An \"escaping region\" is a bound region whose binder is not part of `t`."],[5,"type_escapes_depth","",""],[3,"BareFnTy","",""],[12,"unsafety","","",235],[12,"abi","","",235],[12,"sig","","",235],[3,"ClosureTy","",""],[12,"unsafety","","",236],[12,"abi","","",236],[12,"sig","","",236],[4,"FnOutput","",""],[13,"FnConverging","","",237],[13,"FnDiverging","","",237],[6,"PolyFnOutput","",""],[3,"FnSig","","Signature of a function type, which I have arbitrarily\ndecided to use to refer to the input/output types."],[12,"inputs","","",84],[12,"output","","",84],[12,"variadic","","",84],[6,"PolyFnSig","",""],[3,"ParamTy","",""],[12,"space","","",238],[12,"idx","","",238],[12,"name","","",238],[3,"DebruijnIndex","","A [De Bruijn index][dbi] is a standard means of representing\nregions (and perhaps later types) in a higher-ranked setting. In\nparticular, imagine a type like this:"],[12,"depth","","",239],[4,"Region","","Representation of regions:"],[13,"ReEarlyBound","","",15],[13,"ReLateBound","","",15],[13,"ReFree","","When checking a function body, the types of all arguments and so forth\nthat refer to bound region parameters are modified to refer to free\nregion parameters.",15],[13,"ReScope","","A concrete region naming some statically determined extent\n(e.g. an expression or sequence of statements) within the\ncurrent function.",15],[13,"ReStatic","","Static data that has an \"infinite\" lifetime. Top in the region lattice.",15],[13,"ReInfer","","A region variable.  Should not exist after typeck.",15],[13,"ReEmpty","","Empty lifetime is for data that is never accessed.\nBottom in the region lattice. We treat ReEmpty somewhat\nspecially; at least right now, we do not generate instances of\nit during the GLB computations, but rather\ngenerate an error instead. This is to improve error messages.\nThe only way to get an instance of ReEmpty is to have a region\nvariable with no constraints.",15],[3,"UpvarId","","Upvars do not get their own node-id. Instead, we use the pair of\nthe original var id (that is, the root variable that is referenced\nby the upvar) and the id of the closure expression."],[12,"var_id","","",240],[12,"closure_expr_id","","",240],[4,"BorrowKind","",""],[13,"ImmBorrow","","Data must be immutable and is aliasable.",241],[13,"UniqueImmBorrow","","Data must be immutable but not aliasable.  This kind of borrow\ncannot currently be expressed by the user and is used only in\nimplicit closure bindings. It is needed when you the closure\nis borrowing or mutating a mutable referent, e.g.:",241],[13,"MutBorrow","","Data is mutable and not aliasable.",241],[4,"UpvarCapture","","Information describing the capture of an upvar. This is computed\nduring `typeck`, specifically by `regionck`."],[13,"ByValue","","Upvar is captured by value. This is always true when the\nclosure is labeled `move`, but can also be true in other cases\ndepending on inference.",23],[13,"ByRef","","Upvar is captured by reference.",23],[3,"UpvarBorrow","",""],[12,"kind","","The kind of borrow: by-ref upvars have access to shared\nimmutable borrows, which are not part of the normal language\nsyntax.",22],[12,"region","","Region of the resulting reference.",22],[6,"UpvarCaptureMap","",""],[3,"FreeRegion","","A \"free\" region `fr` can be interpreted as \"some region\nat least as big as the scope `fr.scope`\"."],[12,"scope","","",16],[12,"bound_region","","",16],[4,"BoundRegion","",""],[13,"BrAnon","","An anonymous region parameter for a given fn (&T)",19],[13,"BrNamed","","Named region parameters for functions (a in &'a T)",19],[13,"BrFresh","","Fresh bound identifiers created during GLB computations.",19],[13,"BrEnv","","",19],[4,"sty","",""],[13,"ty_bool","","",242],[13,"ty_char","","",242],[13,"ty_int","","",242],[13,"ty_uint","","",242],[13,"ty_float","","",242],[13,"ty_enum","","Substs here, possibly against intuition, *may* contain `ty_param`s.\nThat is, even after substitution it is possible that there are type\nvariables. This happens when the `ty_enum` corresponds to an enum\ndefinition and not a concrete use of it. To get the correct `ty_enum`\nfrom the tcx, use the `NodeId` from the `ast::Ty` and look it up in\nthe `ast_ty_to_ty_cache`. This is probably true for `ty_struct` as\nwell.",242],[13,"ty_uniq","","",242],[13,"ty_str","","",242],[13,"ty_vec","","",242],[13,"ty_ptr","","",242],[13,"ty_rptr","","",242],[13,"ty_bare_fn","","",242],[13,"ty_trait","","",242],[13,"ty_struct","","",242],[13,"ty_closure","","",242],[13,"ty_tup","","",242],[13,"ty_projection","","",242],[13,"ty_param","","",242],[13,"ty_infer","","",242],[13,"ty_err","","",242],[3,"TyTrait","",""],[12,"principal","","",243],[12,"bounds","","",243],[3,"TraitRef","","A complete reference to a trait. These take numerous guises in syntax,\nbut perhaps the most recognizable form is in a where clause:"],[12,"def_id","","",82],[12,"substs","","",82],[6,"PolyTraitRef","",""],[3,"Binder","","Binder is a binder for higher-ranked lifetimes. It is part of the\ncompiler's representation for things like `for<'a> Fn(&'a int)`\n(which would be represented by the type `PolyTraitRef ==\nBinder<TraitRef>`). Note that when we skolemize, instantiate,\nerase, or otherwise \"discharge\" these bound regions, we change the\ntype from `Binder<T>` to just `T` (see\ne.g. `liberate_late_bound_regions`)."],[4,"IntVarValue","",""],[13,"IntType","","",119],[13,"UintType","","",119],[4,"terr_vstore_kind","",""],[13,"terr_vec","","",244],[13,"terr_str","","",244],[13,"terr_fn","","",244],[13,"terr_trait","","",244],[3,"expected_found","",""],[12,"expected","","",245],[12,"found","","",245],[4,"type_err","",""],[13,"terr_mismatch","","",246],[13,"terr_unsafety_mismatch","","",246],[13,"terr_abi_mismatch","","",246],[13,"terr_mutability","","",246],[13,"terr_box_mutability","","",246],[13,"terr_ptr_mutability","","",246],[13,"terr_ref_mutability","","",246],[13,"terr_vec_mutability","","",246],[13,"terr_tuple_size","","",246],[13,"terr_fixed_array_size","","",246],[13,"terr_ty_param_size","","",246],[13,"terr_arg_count","","",246],[13,"terr_regions_does_not_outlive","","",246],[13,"terr_regions_not_same","","",246],[13,"terr_regions_no_overlap","","",246],[13,"terr_regions_insufficiently_polymorphic","","",246],[13,"terr_regions_overly_polymorphic","","",246],[13,"terr_sorts","","",246],[13,"terr_integer_as_char","","",246],[13,"terr_int_mismatch","","",246],[13,"terr_float_mismatch","","",246],[13,"terr_traits","","",246],[13,"terr_builtin_bounds","","",246],[13,"terr_variadic_mismatch","","",246],[13,"terr_cyclic_ty","","",246],[13,"terr_convergence_mismatch","","",246],[13,"terr_projection_name_mismatched","","",246],[13,"terr_projection_bounds_length","","",246],[3,"ParamBounds","","Bounds suitable for a named type parameter like `A` in `fn foo<A>`\nas well as the existential type parameter in an object type."],[12,"region_bounds","","",247],[12,"builtin_bounds","","",247],[12,"trait_bounds","","",247],[12,"projection_bounds","","",247],[3,"ExistentialBounds","","Bounds suitable for an existentially quantified type parameter\nsuch as those that appear in object types or closure types. The\nmajor difference between this case and `ParamBounds` is that\ngeneral purpose trait bounds are omitted and there must be\n*exactly one* region."],[12,"region_bound","","",248],[12,"builtin_bounds","","",248],[12,"projection_bounds","","",248],[6,"BuiltinBounds","",""],[4,"BuiltinBound","",""],[13,"BoundSend","","",249],[13,"BoundSized","","",249],[13,"BoundCopy","","",249],[13,"BoundSync","","",249],[5,"empty_builtin_bounds","",""],[5,"all_builtin_bounds","",""],[5,"region_existential_bound","","An existential bound that does not implement any traits."],[3,"TyVid","",""],[12,"index","","",250],[3,"IntVid","",""],[12,"index","","",118],[3,"FloatVid","",""],[12,"index","","",120],[3,"RegionVid","",""],[12,"index","","",251],[4,"InferTy","",""],[13,"TyVar","","",252],[13,"IntVar","","",252],[13,"FloatVar","","",252],[13,"FreshTy","","A `FreshTy` is one that is generated as a replacement for an\nunbound type variable. This is convenient for caching etc. See\n`middle::infer::freshen` for more details.",252],[13,"FreshIntTy","","",252],[4,"UnconstrainedNumeric","",""],[13,"UnconstrainedFloat","","",253],[13,"UnconstrainedInt","","",253],[13,"Neither","","",253],[4,"InferRegion","",""],[13,"ReVar","","",254],[13,"ReSkolemized","","",254],[4,"ObjectLifetimeDefault","","Default region to use for the bound of objects that are\nsupplied as the value for this type parameter. This is derived\nfrom `T:'a` annotations appearing in the type definition.  If\nthis is `None`, then the default is inherited from the\nsurrounding context. See RFC #599 for details."],[13,"Ambiguous","","Require an explicit annotation. Occurs when multiple\n`T:'a` constraints are found.",255],[13,"Specific","","Use the given region as the default.",255],[3,"TypeParameterDef","",""],[12,"name","","",256],[12,"def_id","","",256],[12,"space","","",256],[12,"index","","",256],[12,"default","","",256],[12,"object_lifetime_default","","",256],[3,"RegionParameterDef","",""],[12,"name","","",257],[12,"def_id","","",257],[12,"space","","",257],[12,"index","","",257],[12,"bounds","","",257],[3,"Generics","","Information about the formal type/lifetime parameters associated\nwith an item or method. Analogous to ast::Generics."],[12,"types","","",258],[12,"regions","","",258],[3,"GenericPredicates","","Bounds on generics."],[12,"predicates","","",259],[4,"Predicate","",""],[13,"Trait","","Corresponds to `where Foo : Bar<A,B,C>`. `Foo` here would be\nthe `Self` type of the trait reference and `A`, `B`, and `C`\nwould be the parameters in the `TypeSpace`.",260],[13,"Equate","","where `T1 == T2`.",260],[13,"RegionOutlives","","where 'a : 'b",260],[13,"TypeOutlives","","where T : 'a",260],[13,"Projection","","where <T as TraitRef>::Name == X, approximately.\nSee `ProjectionPredicate` struct for details.",260],[3,"TraitPredicate","",""],[12,"trait_ref","","",261],[6,"PolyTraitPredicate","",""],[3,"EquatePredicate","",""],[6,"PolyEquatePredicate","",""],[3,"OutlivesPredicate","",""],[6,"PolyOutlivesPredicate","",""],[6,"PolyRegionOutlivesPredicate","",""],[6,"PolyTypeOutlivesPredicate","",""],[3,"ProjectionPredicate","","This kind of predicate has no *direct* correspondent in the\nsyntax, but it roughly corresponds to the syntactic forms:"],[12,"projection_ty","","",83],[12,"ty","","",83],[6,"PolyProjectionPredicate","",""],[3,"ProjectionTy","","Represents the projection of an associated type. In explicit UFCS\nform this would be written `<T as Trait<..>>::N`."],[12,"trait_ref","","The trait reference `T as Trait<..>`.",264],[12,"item_name","","The name `N` of the associated type.",264],[8,"ToPolyTraitRef","",""],[10,"to_poly_trait_ref","","",408],[8,"AsPredicate","",""],[10,"as_predicate","","",409],[3,"InstantiatedPredicates","","Represents the bounds declared on a particular set of type\nparameters.  Should eventually be generalized into a flag list of\nwhere clauses.  You can obtain a `InstantiatedPredicates` list from a\n`GenericPredicates` by using the `instantiate` method. Note that this method\nreflects an important semantic invariant of `InstantiatedPredicates`: while\nthe `GenericPredicates` are expressed in terms of the bound type\nparameters of the impl/trait/whatever, an `InstantiatedPredicates` instance\nrepresented a set of bounds for some particular instantiation,\nmeaning that the generic parameters have been substituted with\ntheir values."],[12,"predicates","","",265],[3,"ParameterEnvironment","","When type checking, we use the `ParameterEnvironment` to track\ndetails about the type/lifetime parameters that are in scope.\nIt primarily stores the bounds information."],[12,"tcx","","",266],[12,"free_substs","","See `construct_free_substs` for details.",266],[12,"implicit_region_bound","","Each type parameter has an implicit region bound that\nindicates it must outlive at least the function body (the user\nmay specify stronger requirements). This field indicates the\nregion of the callee.",266],[12,"caller_bounds","","Obligations that the caller must satisfy. This is basically\nthe set of bounds on the in-scope type parameters, translated\ninto Obligations.",266],[12,"selection_cache","","Caches the results of trait selection. This cache is used\nfor things that have to do with the parameters in scope.",266],[3,"TypeScheme","","A \"type scheme\", in ML terminology, is a type combined with some\nset of generic types that the type is, well, generic over. In Rust\nterms, it is the \"type\" of a fn item or struct -- this type will\ninclude various generic parameters that must be substituted when\nthe item/struct is referenced. That is called converting the type\nscheme to a monotype."],[12,"generics","","",267],[12,"ty","","",267],[3,"TraitDef","","As `TypeScheme` but for a trait ref."],[12,"unsafety","","",339],[12,"paren_sugar","","If `true`, then this trait had the `#[rustc_paren_sugar]`\nattribute, indicating that it should be used with `Foo()`\nsugar. This is a temporary thing -- eventually any trait wil\nbe usable with the sugar (or without it).",339],[12,"generics","","Generic type definitions. Note that `Self` is listed in here\nas having a single bound, the trait itself (e.g., in the trait\n`Eq`, there is a single bound `Self : Eq`). This is so that\ndefault methods get to assume that the `Self` parameters\nimplements the trait.",339],[12,"trait_ref","","",339],[12,"associated_type_names","","A list of the associated types defined in this trait. Useful\nfor resolving `X::Foo` type markers.",339],[3,"ItemSubsts","","Records the substitutions used to translate the polytype for an\nitem into the monotype of an item reference."],[12,"substs","","",268],[4,"ClosureKind","",""],[13,"FnClosureKind","","",154],[13,"FnMutClosureKind","","",154],[13,"FnOnceClosureKind","","",154],[8,"ClosureTyper","",""],[10,"tcx","","",410],[10,"param_env","","",410],[10,"closure_kind","","Is this a `Fn`, `FnMut` or `FnOnce` closure? During typeck,\nreturns `None` if the kind of this closure has not yet been\ninferred.",410],[10,"closure_type","","Returns the argument/return types of this closure.",410],[10,"closure_upvars","","Returns the set of all upvars and their transformed\ntypes. During typeck, maybe return `None` if the upvar types\nhave not yet been inferred.",410],[5,"mk_ctxt","",""],[5,"mk_t","",""],[5,"mk_mach_int","",""],[5,"mk_mach_uint","",""],[5,"mk_mach_float","",""],[5,"mk_str","",""],[5,"mk_str_slice","",""],[5,"mk_enum","",""],[5,"mk_uniq","",""],[5,"mk_ptr","",""],[5,"mk_rptr","",""],[5,"mk_mut_rptr","",""],[5,"mk_imm_rptr","",""],[5,"mk_mut_ptr","",""],[5,"mk_imm_ptr","",""],[5,"mk_nil_ptr","",""],[5,"mk_vec","",""],[5,"mk_slice","",""],[5,"mk_tup","",""],[5,"mk_nil","",""],[5,"mk_bare_fn","",""],[5,"mk_ctor_fn","",""],[5,"mk_trait","",""],[5,"sort_bounds_list","",""],[5,"mk_projection","",""],[5,"mk_struct","",""],[5,"mk_closure","",""],[5,"mk_var","",""],[5,"mk_int_var","",""],[5,"mk_float_var","",""],[5,"mk_infer","",""],[5,"mk_param","",""],[5,"mk_self_type","",""],[5,"mk_param_from_def","",""],[5,"walk_ty","",""],[5,"maybe_walk_ty","","Walks `ty` and any types appearing within `ty`, invoking the\ncallback `f` on each type. If the callback returns false, then the\nchildren of the current type are ignored."],[5,"fold_ty","",""],[5,"type_is_nil","",""],[5,"type_is_error","",""],[5,"type_needs_subst","",""],[5,"trait_ref_contains_error","",""],[5,"type_is_ty_var","",""],[5,"type_is_bool","",""],[5,"type_is_self","",""],[5,"type_is_vec","",""],[5,"type_is_structural","",""],[5,"type_is_simd","",""],[5,"sequence_element_type","",""],[5,"simd_type","",""],[5,"simd_size","",""],[5,"type_is_region_ptr","",""],[5,"type_is_unsafe_ptr","",""],[5,"type_is_unique","",""],[5,"type_is_scalar","",""],[5,"type_is_floating_point","","Returns true if this type is a floating point type and false otherwise."],[3,"TypeContents","","Type contents is how the type checker reasons about kinds.\nThey track what kinds of things are found within a type.  You can\nthink of them as kind of an \"anti-kind\".  They track the kinds of values\nand thinks that are contained in types.  Having a larger contents for\na type tends to rule that type *out* from various kinds.  For example,\na type that contains a reference is not sendable."],[12,"bits","","",269],[5,"type_interior_is_unsafe","",""],[5,"type_contents","",""],[5,"type_moves_by_default","",""],[5,"type_is_sized","",""],[5,"is_ffi_safe","",""],[5,"is_instantiable","",""],[4,"Representability","","Describes whether a type is representable. For types that are not\nrepresentable, 'SelfRecursive' and 'ContainsRecursive' are used to\ndistinguish between types that are recursive with themselves and types that\ncontain a different recursive type. These cases can therefore be treated\ndifferently when reporting errors."],[13,"Representable","","",270],[13,"ContainsRecursive","","",270],[13,"SelfRecursive","","",270],[5,"is_type_representable","","Check whether a type is representable. This means it cannot contain unboxed\nstructural recursion. This check is needed for structs and enums."],[5,"type_is_trait","",""],[5,"type_trait_info","",""],[5,"type_is_integral","",""],[5,"type_is_fresh","",""],[5,"type_is_uint","",""],[5,"type_is_char","",""],[5,"type_is_bare_fn","",""],[5,"type_is_bare_fn_item","",""],[5,"type_is_fp","",""],[5,"type_is_numeric","",""],[5,"type_is_signed","",""],[5,"type_is_machine","",""],[5,"type_is_c_like_enum","",""],[5,"deref","",""],[5,"type_content","",""],[5,"index","",""],[5,"array_element_ty","",""],[5,"positional_element_ty","","Returns the type of element at index `i` in tuple or tuple-like type `t`.\nFor an enum `t`, `variant` is None only if `t` is a univariant enum."],[5,"named_element_ty","","Returns the type of element at field `n` in struct or struct-like type `t`.\nFor an enum `t`, `variant` must be some def id."],[5,"impl_id_to_trait_ref","",""],[5,"node_id_to_type","",""],[5,"node_id_to_type_opt","",""],[5,"node_id_item_substs","",""],[5,"fn_is_variadic","",""],[5,"ty_fn_sig","",""],[5,"ty_fn_abi","","Returns the ABI of the given function."],[5,"ty_fn_args","",""],[5,"ty_fn_ret","",""],[5,"is_fn_ty","",""],[5,"ty_region","",""],[5,"free_region_from_def","",""],[5,"pat_ty","",""],[5,"pat_ty_opt","",""],[5,"expr_ty","",""],[5,"expr_ty_opt","",""],[5,"expr_ty_adjusted","","Returns the type of `expr`, considering any `AutoAdjustment`\nentry recorded for that expression."],[5,"expr_span","",""],[5,"local_var_name_str","",""],[5,"adjust_ty","","See `expr_ty_adjusted`"],[5,"adjust_ty_for_autoref","",""],[5,"unsize_ty","",""],[5,"resolve_expr","",""],[5,"expr_is_lval","",""],[4,"ExprKind","","We categorize expressions into three kinds.  The distinction between\nlvalue/rvalue is fundamental to the language.  The distinction between the\ntwo kinds of rvalues is an artifact of trans which reflects how we will\ngenerate code for that kind of expression.  See trans/expr.rs for more\ninformation."],[13,"LvalueExpr","","",411],[13,"RvalueDpsExpr","","",411],[13,"RvalueDatumExpr","","",411],[13,"RvalueStmtExpr","","",411],[5,"expr_kind","",""],[5,"stmt_node_id","",""],[5,"field_idx_strict","",""],[5,"impl_or_trait_item_idx","",""],[5,"ty_sort_string","",""],[5,"type_err_to_str","","Explains the source of a type err in a short, human readable way. This is meant to be placed\nin parentheses after some larger message. You should also invoke `note_and_explain_type_err()`\nafterwards to present additional details, particularly when it comes to lifetime-related\nerrors."],[5,"note_and_explain_type_err","",""],[5,"provided_source","",""],[5,"provided_trait_methods","",""],[5,"trait_item","",""],[5,"trait_items","",""],[5,"trait_impl_polarity","",""],[5,"impl_or_trait_item","",""],[5,"is_associated_type","","Returns true if the given ID refers to an associated type and false if it\nrefers to anything else."],[5,"associated_type_parameter_index","","Returns the parameter index that the given associated type corresponds to."],[5,"trait_item_def_ids","",""],[5,"impl_trait_ref","",""],[5,"trait_ref_to_def_id","",""],[5,"try_add_builtin_trait","","Checks whether `trait_ref` refers to one of the builtin\ntraits, like `Send`, and adds the corresponding\nbound to the set `builtin_bounds` if so. Returns true if `trait_ref`\nis a builtin trait."],[5,"ty_to_def_id","",""],[3,"VariantInfo","",""],[12,"args","","",271],[12,"arg_names","","",271],[12,"ctor_ty","","",271],[12,"name","","",271],[12,"id","","",271],[12,"disr_val","","",271],[12,"vis","","",271],[5,"substd_enum_variants","",""],[5,"item_path_str","",""],[4,"DtorKind","",""],[13,"NoDtor","","",272],[13,"TraitDtor","","",272],[5,"ty_dtor","",""],[5,"has_dtor","",""],[5,"with_path","",""],[5,"enum_is_univariant","",""],[5,"type_is_empty","",""],[5,"enum_variants","",""],[5,"enum_variant_with_id","",""],[5,"lookup_item_type","",""],[5,"lookup_trait_def","","Given the did of a trait, returns its canonical trait ref."],[5,"lookup_predicates","","Given the did of an item, returns its full set of predicates."],[5,"lookup_super_predicates","","Given the did of a trait, returns its superpredicates."],[5,"predicates","",""],[5,"get_attrs","","Get the attributes of a definition."],[5,"has_attr","","Determine whether an item is annotated with an attribute"],[5,"lookup_packed","","Determine whether an item is annotated with `#[repr(packed)]`"],[5,"lookup_simd","","Determine whether an item is annotated with `#[simd]`"],[5,"lookup_repr_hints","","Obtain the representation annotation for a struct definition."],[5,"lookup_field_type","",""],[5,"lookup_struct_fields","",""],[5,"is_tuple_struct","",""],[5,"struct_fields","",""],[5,"tup_fields","",""],[3,"ClosureUpvar","",""],[12,"def","","",273],[12,"span","","",273],[12,"ty","","",273],[5,"closure_upvars","",""],[5,"is_binopable","",""],[5,"eval_repeat_count","",""],[5,"each_bound_trait_and_supertraits","",""],[5,"required_region_bounds","","Given a set of predicates that apply to an object type, returns\nthe region bounds that the (erased) `Self` type must\noutlive. Precisely *because* the `Self` type is erased, the\nparameter `erased_self_ty` must be supplied to indicate what type\nhas been used to represent `Self` in the predicates\nthemselves. This should really be a unique type; `FreshTy(0)` is a\npopular choice."],[5,"get_tydesc_ty","",""],[5,"item_variances","",""],[5,"trait_has_default_impl","",""],[5,"record_trait_has_default_impl","","Records a trait-to-implementation mapping."],[5,"record_trait_implementation","","Records a trait-to-implementation mapping."],[5,"populate_implementations_for_type_if_necessary","","Populates the type context with all the implementations for the given type\nif necessary."],[5,"populate_implementations_for_trait_if_necessary","","Populates the type context with all the implementations for the given\ntrait if necessary."],[5,"trait_id_of_impl","","Given the def_id of an impl, return the def_id of the trait it implements.\nIf it implements no trait, return `None`."],[5,"impl_of_method","","If the given def ID describes a method belonging to an impl, return the\nID of the impl that the method belongs to. Otherwise, return `None`."],[5,"trait_of_item","","If the given def ID describes an item belonging to a trait (either a\ndefault method or an implementation of a trait method), return the ID of\nthe trait that the method belongs to. Otherwise, return `None`."],[5,"trait_item_of_item","","If the given def ID describes an item belonging to a trait, (either a\ndefault method or an implementation of a trait method), return the ID of\nthe method inside trait definition (this means that if the given def ID\nis already that of the original trait method, then the return value is\nthe same).\nOtherwise, return `None`."],[5,"hash_crate_independent","","Creates a hash of the type `Ty` which will be the same no matter what crate\ncontext it's calculated within. This is used by the `type_id` intrinsic."],[5,"empty_parameter_environment","","Construct a parameter environment suitable for static contexts or other contexts where there\nare no free type/lifetime parameters in scope."],[5,"construct_free_substs","","Constructs and returns a substitution that can be applied to move from\nthe \"outer\" view of a type or method to the \"inner\" view.\nIn general, this means converting from bound parameters to\nfree parameters. Since we currently represent bound/free type\nparameters in the same way, this only has an effect on regions."],[5,"construct_parameter_environment","","See `ParameterEnvironment` struct def'n for details"],[4,"ExplicitSelfCategory","","The category of explicit self."],[13,"StaticExplicitSelfCategory","","",274],[13,"ByValueExplicitSelfCategory","","",274],[13,"ByReferenceExplicitSelfCategory","","",274],[13,"ByBoxExplicitSelfCategory","","",274],[5,"accumulate_lifetimes_in_type","","Pushes all the lifetimes in the given type onto the given list. A\n\"lifetime in a type\" is a lifetime specified by a reference or a lifetime\nin a list of type substitutions. This does *not* traverse into nominal\ntypes, nor does it resolve fictitious types."],[3,"Freevar","","A free variable referred to in a function."],[12,"def","","The variable being accessed free.",21],[12,"span","","",21],[6,"FreevarMap","",""],[6,"CaptureModeMap","",""],[6,"TraitMap","",""],[6,"GlobMap","",""],[5,"with_freevars","",""],[5,"liberate_late_bound_regions","","Replace any late-bound regions bound in `value` with free variants attached to scope-id\n`scope_id`."],[5,"count_late_bound_regions","",""],[5,"binds_late_bound_regions","",""],[5,"no_late_bound_regions","",""],[5,"erase_late_bound_regions","","Replace any late-bound regions bound in `value` with `'static`. Useful in trans but also\nmethod lookup and a few other places where precise region relationships are not required."],[5,"anonymize_late_bound_regions","","Rewrite any late-bound regions so that they are anonymous.  Region numbers are\nassigned starting at 1 and increasing monotonically in the order traversed\nby the fold operation."],[5,"replace_late_bound_regions","","Replaces the late-bound-regions in `value` that are bound by `value`."],[5,"make_substs_for_receiver_types","","Substitutes the values for the receiver's type parameters\nthat are found in method, leaving the method's type parameters\nintact."],[4,"CopyImplementationError","",""],[13,"FieldDoesNotImplementCopy","","",412],[13,"VariantDoesNotImplementCopy","","",412],[13,"TypeIsStructural","","",412],[13,"TypeHasDestructor","","",412],[5,"can_type_implement_copy","",""],[8,"RegionEscape","",""],[10,"has_escaping_regions","","",413],[10,"has_regions_escaping_depth","","",413],[8,"HasProjectionTypes","",""],[10,"has_projection_types","","",414],[8,"ReferencesError","",""],[10,"references_error","","",415],[0,"ty_fold","rustc_trans::middle","Generalized type folding mechanism. The setup is a bit convoluted\nbut allows for convenient usage. Let T be an instance of some\n\"foldable type\" (one which implements `TypeFoldable`) and F be an\ninstance of a \"folder\" (a type which implements `TypeFolder`). Then\nthe setup is intended to be:"],[8,"TypeFoldable","rustc_trans::middle::ty_fold","The TypeFoldable trait is implemented for every type that can be folded.\nBasically, every type that has a corresponding method in TypeFolder."],[10,"fold_with","","",416],[8,"TypeFolder","","The TypeFolder trait defines the actual *folding*. There is a\nmethod defined for every foldable type. Each of these has a\ndefault implementation that does an \"identity\" fold. Within each\nidentity fold, it should invoke `foo.fold_with(self)` to fold each\nsub-item."],[10,"tcx","","",417],[10,"enter_region_binder","","Invoked by the `super_*` routines when we enter a region\nbinding level (for example, when entering a function\nsignature). This is used by clients that want to track the\nDebruijn index nesting level.",417],[10,"exit_region_binder","","Invoked by the `super_*` routines when we exit a region\nbinding level. This is used by clients that want to\ntrack the Debruijn index nesting level.",417],[10,"fold_binder","","",417],[10,"fold_ty","","",417],[10,"fold_mt","","",417],[10,"fold_trait_ref","","",417],[10,"fold_substs","","",417],[10,"fold_fn_sig","","",417],[10,"fold_output","","",417],[10,"fold_bare_fn_ty","","",417],[10,"fold_closure_ty","","",417],[10,"fold_region","","",417],[10,"fold_existential_bounds","","",417],[10,"fold_autoref","","",417],[10,"fold_item_substs","","",417],[5,"super_fold_binder","",""],[5,"super_fold_ty","",""],[5,"super_fold_substs","",""],[5,"super_fold_fn_sig","",""],[5,"super_fold_output","",""],[5,"super_fold_bare_fn_ty","",""],[5,"super_fold_closure_ty","",""],[5,"super_fold_trait_ref","",""],[5,"super_fold_mt","",""],[5,"super_fold_existential_bounds","",""],[5,"super_fold_autoref","",""],[5,"super_fold_item_substs","",""],[3,"BottomUpFolder","",""],[12,"tcx","","",279],[12,"fldop","","",279],[3,"RegionFolder","","Folds over the substructure of a type, visiting its component\ntypes and all regions that occur *free* within it."],[5,"collect_regions","",""],[5,"fold_regions","",""],[3,"RegionEraser","",""],[5,"erase_regions","",""],[5,"shift_region","",""],[5,"shift_regions","",""],[0,"ty_walk","rustc_trans::middle","An iterator over the type substructure."],[3,"TypeWalker","rustc_trans::middle::ty_walk",""],[0,"weak_lang_items","rustc_trans::middle","Validity checking for weak lang items"],[5,"check_crate","rustc_trans::middle::weak_lang_items","Checks the crate for usage of weak lang items, returning a vector of all the\nlanguage items required by this crate, but not defined yet."],[5,"link_name","",""],[0,"lint","rustc_trans","Lints, aka compiler warnings."],[3,"Lint","rustc_trans::lint","Specification of a single lint."],[12,"name","","A string identifier for the lint.",326],[12,"default_level","","Default level for the lint.",326],[12,"desc","","Description of the lint or the issue it detects.",326],[6,"LintArray","",""],[8,"LintPass","","Trait for types providing lint checks."],[10,"get_lints","","Get descriptions of the lints this `LintPass` object can emit.",418],[10,"check_crate","","",418],[10,"check_ident","","",418],[10,"check_mod","","",418],[10,"check_foreign_item","","",418],[10,"check_item","","",418],[10,"check_local","","",418],[10,"check_block","","",418],[10,"check_stmt","","",418],[10,"check_arm","","",418],[10,"check_pat","","",418],[10,"check_decl","","",418],[10,"check_expr","","",418],[10,"check_expr_post","","",418],[10,"check_ty","","",418],[10,"check_generics","","",418],[10,"check_fn","","",418],[10,"check_ty_method","","",418],[10,"check_trait_item","","",418],[10,"check_struct_def","","",418],[10,"check_struct_def_post","","",418],[10,"check_struct_field","","",418],[10,"check_variant","","",418],[10,"check_variant_post","","",418],[10,"check_opt_lifetime_ref","","",418],[10,"check_lifetime_ref","","",418],[10,"check_lifetime_def","","",418],[10,"check_explicit_self","","",418],[10,"check_mac","","",418],[10,"check_path","","",418],[10,"check_attribute","","",418],[10,"enter_lint_attrs","","Called when entering a syntax node that can have lint attributes such\nas `#[allow(...)]`. Called with *all* the attributes of that node.",418],[10,"exit_lint_attrs","","Counterpart to `enter_lint_attrs`.",418],[6,"LintPassObject","",""],[3,"LintId","","Identifies a lint known to the compiler."],[4,"Level","","Setting for how to handle a lint."],[13,"Allow","","",328],[13,"Warn","","",328],[13,"Deny","","",328],[13,"Forbid","","",328],[4,"LintSource","","How a lint level was set."],[13,"Default","","Lint is at the default level as declared\nin rustc or a plugin.",329],[13,"Node","","Lint level was set by an attribute.",329],[13,"CommandLine","","Lint level was set by a command-line flag.",329],[13,"ReleaseChannel","","Lint level was set by the release channel.",329],[6,"LevelSource","",""],[0,"builtin","","Some lints that are built in to the compiler."],[7,"UNUSED_IMPORTS","rustc_trans::lint::builtin",""],[7,"UNUSED_EXTERN_CRATES","",""],[7,"UNUSED_QUALIFICATIONS","",""],[7,"UNKNOWN_LINTS","",""],[7,"UNUSED_VARIABLES","",""],[7,"UNUSED_ASSIGNMENTS","",""],[7,"DEAD_CODE","",""],[7,"UNREACHABLE_CODE","",""],[7,"WARNINGS","",""],[7,"UNUSED_FEATURES","",""],[7,"STABLE_FEATURES","",""],[7,"UNKNOWN_CRATE_TYPES","",""],[7,"VARIANT_SIZE_DIFFERENCES","",""],[7,"FAT_PTR_TRANSMUTES","",""],[3,"HardwiredLints","","Does nothing as a lint pass, but registers some `Lint`s\nwhich are used by other parts of the compiler."],[3,"GatherNodeLevels","rustc_trans::lint",""],[3,"Context","","Context for lint checking."],[12,"tcx","","Type context we're checking in.",332],[12,"krate","","The crate being checked.",332],[12,"exported_items","","Items exported from the crate being checked.",332],[3,"LintStore","","Information about the registered lints."],[5,"check_crate","","Perform lint checking on a crate."],[5,"raw_emit_lint","","Emit a lint as a warning or an error (or not at all)\naccording to `level`."],[5,"gather_attrs","","Parse the lint attributes into a vector, with `Err`s for malformed lint\nattributes. Writing this as an iterator is an enormous mess."],[0,"plugin","rustc_trans","Infrastructure for compiler plugins."],[0,"registry","rustc_trans::plugin","Used by plugin crates to tell `rustc` about the plugins they provide."],[3,"Registry","rustc_trans::plugin::registry","Structure used to register plugins."],[12,"sess","","Compiler session. Useful if you want to emit diagnostic messages\nfrom the plugin registrar.",324],[0,"load","rustc_trans::plugin","Used by `rustc` when loading a plugin."],[6,"PluginRegistrarFun","rustc_trans::plugin::load",""],[3,"PluginRegistrar","",""],[12,"fun","","",419],[12,"args","","",419],[5,"load_plugins","","Read plugin metadata and dynamically load registrar functions."],[0,"build","rustc_trans::plugin","Used by `rustc` when compiling a plugin crate."],[5,"find_plugin_registrar","rustc_trans::plugin::build","Find the function marked with `#[plugin_registrar]`, if any."],[3,"Registry","rustc_trans::plugin","Structure used to register plugins."],[12,"sess","","Compiler session. Useful if you want to emit diagnostic messages\nfrom the plugin registrar.",324],[0,"util","rustc_trans",""],[0,"common","rustc_trans::util",""],[17,"FN_OUTPUT_NAME","rustc_trans::util::common",""],[3,"ErrorReported","",""],[5,"time","",""],[5,"indent","",""],[3,"Indenter","",""],[5,"indenter","",""],[5,"loop_query","",""],[5,"block_query","",""],[5,"can_reach","","K: Eq + Hash<S>, V, S, H: Hasher<S>"],[5,"memoized","","Memoizes a one-argument closure using the given RefCell containing\na type implementing MutableMap to serve as a cache."],[5,"path2cstr","",""],[0,"ppaux","rustc_trans::util",""],[8,"Repr","rustc_trans::util::ppaux","Produces a string suitable for debugging output."],[10,"repr","","",420],[8,"UserString","","Produces a string suitable for showing to the user."],[10,"user_string","","",421],[5,"note_and_explain_region","",""],[5,"explain_region_and_span","",""],[5,"bound_region_ptr_to_string","",""],[5,"bound_region_to_string","",""],[5,"region_ptr_to_string","",""],[5,"region_to_string","",""],[5,"mutability_to_string","",""],[5,"mt_to_string","",""],[5,"vec_map_to_string","",""],[5,"ty_to_string","",""],[5,"explicit_self_category_to_str","",""],[5,"parameterized","",""],[5,"ty_to_short_str","",""],[0,"nodemap","rustc_trans::util","An efficient hash map for node IDs"],[6,"FnvHashMap","rustc_trans::util::nodemap",""],[6,"FnvHashSet","",""],[6,"NodeMap","",""],[6,"DefIdMap","",""],[6,"NodeSet","",""],[6,"DefIdSet","",""],[5,"FnvHashMap","",""],[5,"FnvHashSet","",""],[5,"NodeMap","",""],[5,"DefIdMap","",""],[5,"NodeSet","",""],[5,"DefIdSet","",""],[3,"FnvHasher","","A speedy hash algorithm for node ids and def ids. The hashmap in\nlibcollections by default uses SipHash which isn't quite as speedy as we\nwant. In the compiler we're not really worried about DOS attempts, so we\njust default to a non-cryptographic hash."],[0,"snapshot_vec","rustc_trans::util","A utility class for implementing \"snapshottable\" things; a snapshottable data structure permits\nyou to take a snapshot (via `start_snapshot`) and then, after making some changes, elect either\nto rollback to the start of the snapshot or commit those changes."],[4,"UndoLog","rustc_trans::util::snapshot_vec",""],[13,"OpenSnapshot","","Indicates where a snapshot started.",422],[13,"CommittedSnapshot","","Indicates a snapshot that has been committed.",422],[13,"NewElem","","New variable with given index was created.",422],[13,"SetElem","","Variable with given index was changed *from* the given value.",422],[13,"Other","","Extensible set of actions",422],[3,"SnapshotVec","",""],[3,"Snapshot","",""],[8,"SnapshotVecDelegate","",""],[16,"Value","rustc_trans::util::snapshot_vec::SnapshotVecDelegate",""],[16,"Undo","",""],[10,"reverse","rustc_trans::util::snapshot_vec","",423],[0,"lev_distance","rustc_trans::util",""],[5,"lev_distance","rustc_trans::util::lev_distance",""],[0,"fs","rustc_trans::util",""],[5,"realpath","rustc_trans::util::fs","Returns an absolute path in the filesystem that `path` points to. The\nreturned path does not contain any symlinks in its hierarchy."],[0,"sha2","rustc_trans::util","This module implements only the Sha256 function since that is all that is needed for internal\nuse. This implementation is not intended for external use or for any use where security is\nimportant."],[8,"Digest","rustc_trans::util::sha2","The Digest trait specifies an interface common to digest functions, such as SHA-1 and the SHA-2\nfamily of digest functions."],[10,"input","","Provide message data.",424],[10,"result","","Retrieve the digest result. This method may be called multiple times.",424],[10,"reset","","Reset the digest. This method must be called after result() and before supplying more\ndata.",424],[10,"output_bits","","Get the output size in bits.",424],[10,"input_str","","Convenience function that feeds a string into a digest.",424],[10,"result_bytes","","Convenience function that retrieves the result of a digest as a\nnewly allocated vec of bytes.",424],[10,"result_str","","Convenience function that retrieves the result of a digest as a\nString in hexadecimal format.",424],[11,"new_in","rustc_back::tempdir","Attempts to make a temporary directory inside of `tmpdir` whose name\nwill have the prefix `prefix`. The directory will be automatically\ndeleted once the returned wrapper is destroyed.",425],[11,"new","","Attempts to make a temporary directory inside of `env::temp_dir()` whose\nname will have the prefix `prefix`. The directory will be automatically\ndeleted once the returned wrapper is destroyed.",425],[11,"into_path","","Unwrap the wrapped `std::path::Path` from the `TempDir` wrapper.\nThis discards the wrapper so that the automatic deletion of the\ntemporary directory is prevented.",425],[11,"path","","Access the wrapped `std::path::Path` to the temporary directory.",425],[11,"close","","Close and remove the temporary directory",425],[11,"drop","","",425],[11,"to_string","rustc_back::target::apple_ios_base","",426],[11,"fmt","rustc_back::target","",427],[11,"clone","","",427],[11,"fmt","","",428],[11,"clone","","",428],[11,"default","","Create a set of \"sane defaults\" for any target. This is still incomplete, and if used for\ncompilation, will certainly not work.",428],[11,"adjust_abi","","Given a function ABI, turn \"System\" into the correct ABI for this target.",427],[11,"from_json","","Load a target descriptor from a JSON object.",427],[11,"search","","Search RUST_TARGET_PATH for a JSON file specifying the given target\ntriple. Note that it could also just be a bare filename already, so also\ncheck for that. If one of the hardcoded targets we know about, just\nreturn it directly.",427],[3,"Sha256","rustc_trans::util::sha2","The SHA-256 hash algorithm"],[0,"back","rustc_trans",""],[0,"abi","rustc_trans::back",""],[17,"BOX_FIELD_DROP_GLUE","rustc_trans::back::abi",""],[17,"BOX_FIELD_BODY","",""],[17,"FAT_PTR_ADDR","","The first half of a fat pointer.\n- For a closure, this is the code address.\n- For an object or trait instance, this is the address of the box.\n- For a slice, this is the base address."],[17,"FAT_PTR_EXTRA","","The second half of a fat pointer.\n- For a closure, this is the address of the environment.\n- For an object or trait instance, this is the address of the vtable.\n- For a slice, this is the length."],[0,"archive","rustc_trans::back","A helper class for dealing with static archives"],[17,"METADATA_FILENAME","rustc_trans::back::archive",""],[3,"ArchiveConfig","",""],[12,"handler","","",429],[12,"dst","","",429],[12,"lib_search_paths","","",429],[12,"slib_prefix","","",429],[12,"slib_suffix","","",429],[12,"maybe_ar_prog","","",429],[3,"Archive","",""],[3,"ArchiveBuilder","","Helper for adding many files to an archive with a single invocation of\n`ar`."],[5,"find_library","",""],[0,"arm","rustc_trans::back",""],[5,"get_target_strs","rustc_trans::back::arm",""],[0,"mips","rustc_trans::back",""],[5,"get_target_strs","rustc_trans::back::mips",""],[0,"mipsel","rustc_trans::back",""],[5,"get_target_strs","rustc_trans::back::mipsel",""],[0,"rpath","rustc_trans::back",""],[3,"RPathConfig","rustc_trans::back::rpath",""],[12,"used_crates","","",430],[12,"out_filename","","",430],[12,"is_like_osx","","",430],[12,"has_rpath","","",430],[12,"get_install_prefix_lib_path","","",430],[12,"realpath","","",430],[5,"get_rpath_flags","",""],[0,"svh","rustc_trans::back","Calculation and management of a Strict Version Hash for crates"],[3,"Svh","rustc_trans::back::svh",""],[0,"target_strs","rustc_trans::back",""],[3,"t","rustc_trans::back::target_strs",""],[12,"module_asm","","",431],[12,"data_layout","","",431],[12,"target_triple","","",431],[12,"cc_args","","",431],[0,"x86","rustc_trans::back",""],[5,"get_target_strs","rustc_trans::back::x86",""],[0,"x86_64","rustc_trans::back",""],[5,"get_target_strs","rustc_trans::back::x86_64",""],[0,"link","rustc_trans::back",""],[5,"find_crate_name","rustc_trans::back::link",""],[5,"build_link_meta","",""],[5,"sanitize","",""],[5,"mangle","",""],[5,"exported_name","",""],[5,"mangle_exported_name","",""],[5,"mangle_internal_name_by_type_and_seq","",""],[5,"mangle_internal_name_by_path_and_seq","",""],[5,"get_cc_prog","",""],[5,"remove","",""],[5,"link_binary","","Perform the linkage portion of the compilation phase. This will generate all\nof the requested outputs for this compilation session."],[5,"default_output_for_target","","Returns default crate type for target"],[5,"invalid_output_for_target","","Checks if target supports crate_type as output"],[5,"filename_for_input","",""],[17,"RLIB_BYTECODE_OBJECT_MAGIC","",""],[17,"RLIB_BYTECODE_OBJECT_VERSION","",""],[17,"RLIB_BYTECODE_OBJECT_VERSION_OFFSET","",""],[17,"RLIB_BYTECODE_OBJECT_V1_DATASIZE_OFFSET","",""],[17,"RLIB_BYTECODE_OBJECT_V1_DATA_OFFSET","",""],[0,"lto","rustc_trans::back",""],[5,"run","rustc_trans::back::lto",""],[0,"write","rustc_trans::back",""],[4,"OutputType","rustc_trans::back::write",""],[13,"OutputTypeBitcode","","",432],[13,"OutputTypeAssembly","","",432],[13,"OutputTypeLlvmAssembly","","",432],[13,"OutputTypeObject","","",432],[13,"OutputTypeExe","","",432],[5,"llvm_err","",""],[5,"write_output_file","",""],[5,"run_passes","",""],[5,"run_assembler","",""],[11,"cmp","","",432],[11,"partial_cmp","","",432],[11,"lt","","",432],[11,"le","","",432],[11,"gt","","",432],[11,"ge","","",432],[11,"eq","","",432],[11,"ne","","",432],[11,"clone","","",432],[0,"trans","rustc_trans",""],[3,"CrateContext","rustc_trans::trans",""],[3,"ModuleTranslation","",""],[12,"llcx","","",433],[12,"llmod","","",433],[3,"CrateTranslation","",""],[12,"modules","","",434],[12,"metadata_module","","",434],[12,"link","","",434],[12,"metadata","","",434],[12,"reachable","","",434],[12,"crate_formats","","",434],[12,"no_builtins","","",434],[5,"trans_crate","",""],[5,"gensym_name","","Generates a unique symbol based off the name given. This is used to create\nunique symbols for things like closures."],[11,"shared","","",435],[11,"local","","",435],[11,"rotate","","Get a (possibly) different `CrateContext` from the same\n`SharedCrateContext`.",435],[11,"maybe_iter","","Either iterate over only `self`, or iterate over all `CrateContext`s in\nthe `SharedCrateContext`.  The iterator produces `(ccx, is_origin)`\npairs, where `is_origin` is `true` if `ccx` is `self` and `false`\notherwise.  This method is useful for avoiding code duplication in\ncases where it may or may not be necessary to translate code into every\ncontext.",435],[11,"tcx","","",435],[11,"sess","","",435],[11,"builder","","",435],[11,"raw_builder","","",435],[11,"tydesc_type","","",435],[11,"get_intrinsic","","",435],[11,"is_split_stack_supported","","",435],[11,"llmod","","",435],[11,"llcx","","",435],[11,"td","","",435],[11,"tn","","",435],[11,"externs","","",435],[11,"item_vals","","",435],[11,"export_map","","",435],[11,"reachable","","",435],[11,"item_symbols","","",435],[11,"link_meta","","",435],[11,"needs_unwind_cleanup_cache","","",435],[11,"fn_pointer_shims","","",435],[11,"drop_glues","","",435],[11,"tydescs","","",435],[11,"finished_tydescs","","",435],[11,"external","","",435],[11,"external_srcs","","",435],[11,"monomorphized","","",435],[11,"monomorphizing","","",435],[11,"vtables","","",435],[11,"const_cstr_cache","","",435],[11,"const_unsized","","",435],[11,"const_globals","","",435],[11,"const_values","","",435],[11,"static_values","","",435],[11,"extern_const_values","","",435],[11,"impl_method_cache","","",435],[11,"closure_bare_wrapper_cache","","",435],[11,"lltypes","","",435],[11,"llsizingtypes","","",435],[11,"adt_reprs","","",435],[11,"symbol_hasher","","",435],[11,"type_hashcodes","","",435],[11,"all_llvm_symbols","","",435],[11,"stats","","",435],[11,"available_monomorphizations","","",435],[11,"available_drop_glues","","",435],[11,"int_type","","",435],[11,"opaque_vec_type","","",435],[11,"closure_vals","","",435],[11,"dbg_cx","","",435],[11,"eh_personality","","",435],[11,"count_llvm_insn","","",435],[11,"trait_cache","","",435],[11,"obj_size_bound","","Return exclusive upper bound on object size.",435],[11,"report_overbig_object","","",435],[11,"check_overflow","","",435],[11,"debug_loc","syntax::ast","",151],[11,"debug_loc","core::option","",11],[11,"llrepr","rustc_trans::trans::llrepr","",436],[0,"save","rustc_trans","Output a CSV file containing the output from rustc's analysis. The data is\nprimarily designed to be used as input to the DXR tool, specifically its\nRust plugin. It could also be used by IDEs or other code browsing, search, or\ncross-referencing tools."],[5,"process_crate","rustc_trans::save",""],[0,"lib","rustc_trans",""],[0,"llvm","rustc_trans::lib",""],[0,"archive_ro","rustc_trans::lib::llvm","A wrapper around LLVM's archive (.a) code"],[3,"ArchiveRO","rustc_trans::lib::llvm::archive_ro",""],[0,"diagnostic","rustc_trans::lib::llvm","LLVM diagnostic reports."],[4,"OptimizationDiagnosticKind","rustc_trans::lib::llvm::diagnostic",""],[13,"OptimizationRemark","","",358],[13,"OptimizationMissed","","",358],[13,"OptimizationAnalysis","","",358],[13,"OptimizationFailure","","",358],[3,"OptimizationDiagnostic","",""],[12,"kind","","",437],[12,"pass_name","","",437],[12,"function","","",437],[12,"debug_loc","","",437],[12,"message","","",437],[3,"InlineAsmDiagnostic","",""],[12,"cookie","","",438],[12,"message","","",438],[12,"instruction","","",438],[4,"Diagnostic","",""],[13,"Optimization","","",359],[13,"InlineAsm","","",359],[13,"UnknownDiagnostic","","LLVM has other types that we do not wrap here.",359],[6,"Opcode","rustc_trans::lib::llvm",""],[6,"Bool","",""],[17,"True","",""],[17,"False","",""],[4,"CallConv","",""],[13,"CCallConv","","",360],[13,"FastCallConv","","",360],[13,"ColdCallConv","","",360],[13,"X86StdcallCallConv","","",360],[13,"X86FastcallCallConv","","",360],[13,"X86_64_Win64","","",360],[4,"Visibility","",""],[13,"LLVMDefaultVisibility","","",439],[13,"HiddenVisibility","","",439],[13,"ProtectedVisibility","","",439],[4,"Linkage","",""],[13,"ExternalLinkage","","",440],[13,"AvailableExternallyLinkage","","",440],[13,"LinkOnceAnyLinkage","","",440],[13,"LinkOnceODRLinkage","","",440],[13,"WeakAnyLinkage","","",440],[13,"WeakODRLinkage","","",440],[13,"AppendingLinkage","","",440],[13,"InternalLinkage","","",440],[13,"PrivateLinkage","","",440],[13,"ExternalWeakLinkage","","",440],[13,"CommonLinkage","","",440],[4,"DiagnosticSeverity","",""],[13,"Error","","",361],[13,"Warning","","",361],[13,"Remark","","",361],[13,"Note","","",361],[3,"Attribute","",""],[17,"ZExtAttribute","",""],[17,"SExtAttribute","",""],[17,"NoReturnAttribute","",""],[17,"InRegAttribute","",""],[17,"StructRetAttribute","",""],[17,"NoUnwindAttribute","",""],[17,"NoAliasAttribute","",""],[17,"ByValAttribute","",""],[17,"NestAttribute","",""],[17,"ReadNoneAttribute","",""],[17,"ReadOnlyAttribute","",""],[17,"NoInlineAttribute","",""],[17,"AlwaysInlineAttribute","",""],[17,"OptimizeForSizeAttribute","",""],[17,"StackProtectAttribute","",""],[17,"StackProtectReqAttribute","",""],[17,"AlignmentAttribute","",""],[17,"NoCaptureAttribute","",""],[17,"NoRedZoneAttribute","",""],[17,"NoImplicitFloatAttribute","",""],[17,"NakedAttribute","",""],[17,"InlineHintAttribute","",""],[17,"StackAttribute","",""],[17,"ReturnsTwiceAttribute","",""],[17,"UWTableAttribute","",""],[17,"NonLazyBindAttribute","",""],[4,"OtherAttribute","",""],[13,"SanitizeAddressAttribute","","",363],[13,"MinSizeAttribute","","",363],[13,"NoDuplicateAttribute","","",363],[13,"StackProtectStrongAttribute","","",363],[13,"SanitizeThreadAttribute","","",363],[13,"SanitizeMemoryAttribute","","",363],[13,"NoBuiltinAttribute","","",363],[13,"ReturnedAttribute","","",363],[13,"ColdAttribute","","",363],[13,"BuiltinAttribute","","",363],[13,"OptimizeNoneAttribute","","",363],[13,"InAllocaAttribute","","",363],[13,"NonNullAttribute","","",363],[4,"SpecialAttribute","",""],[13,"DereferenceableAttribute","","",364],[4,"AttributeSet","",""],[13,"ReturnIndex","","",441],[13,"FunctionIndex","","",441],[8,"AttrHelper","",""],[10,"apply_llfn","","",442],[10,"apply_callsite","","",442],[3,"AttrBuilder","",""],[4,"IntPredicate","",""],[13,"IntEQ","","",443],[13,"IntNE","","",443],[13,"IntUGT","","",443],[13,"IntUGE","","",443],[13,"IntULT","","",443],[13,"IntULE","","",443],[13,"IntSGT","","",443],[13,"IntSGE","","",443],[13,"IntSLT","","",443],[13,"IntSLE","","",443],[4,"RealPredicate","",""],[13,"RealPredicateFalse","","",444],[13,"RealOEQ","","",444],[13,"RealOGT","","",444],[13,"RealOGE","","",444],[13,"RealOLT","","",444],[13,"RealOLE","","",444],[13,"RealONE","","",444],[13,"RealORD","","",444],[13,"RealUNO","","",444],[13,"RealUEQ","","",444],[13,"RealUGT","","",444],[13,"RealUGE","","",444],[13,"RealULT","","",444],[13,"RealULE","","",444],[13,"RealUNE","","",444],[13,"RealPredicateTrue","","",444],[4,"TypeKind","",""],[13,"Void","","",366],[13,"Half","","",366],[13,"Float","","",366],[13,"Double","","",366],[13,"X86_FP80","","",366],[13,"FP128","","",366],[13,"PPC_FP128","","",366],[13,"Label","","",366],[13,"Integer","","",366],[13,"Function","","",366],[13,"Struct","","",366],[13,"Array","","",366],[13,"Pointer","","",366],[13,"Vector","","",366],[13,"Metadata","","",366],[13,"X86_MMX","","",366],[4,"AtomicBinOp","",""],[13,"AtomicXchg","","",445],[13,"AtomicAdd","","",445],[13,"AtomicSub","","",445],[13,"AtomicAnd","","",445],[13,"AtomicNand","","",445],[13,"AtomicOr","","",445],[13,"AtomicXor","","",445],[13,"AtomicMax","","",445],[13,"AtomicMin","","",445],[13,"AtomicUMax","","",445],[13,"AtomicUMin","","",445],[4,"AtomicOrdering","",""],[13,"NotAtomic","","",446],[13,"Unordered","","",446],[13,"Monotonic","","",446],[13,"Acquire","","",446],[13,"Release","","",446],[13,"AcquireRelease","","",446],[13,"SequentiallyConsistent","","",446],[4,"FileType","",""],[13,"AssemblyFileType","","",447],[13,"ObjectFileType","","",447],[4,"MetadataType","",""],[13,"MD_dbg","","",448],[13,"MD_tbaa","","",448],[13,"MD_prof","","",448],[13,"MD_fpmath","","",448],[13,"MD_range","","",448],[13,"MD_tbaa_struct","","",448],[13,"MD_invariant_load","","",448],[13,"MD_alias_scope","","",448],[13,"MD_noalias","","",448],[13,"MD_nontemporal","","",448],[13,"MD_mem_parallel_loop_access","","",448],[13,"MD_nonnull","","",448],[4,"AsmDialect","",""],[13,"AD_ATT","","",449],[13,"AD_Intel","","",449],[4,"CodeGenOptLevel","",""],[13,"CodeGenLevelNone","","",367],[13,"CodeGenLevelLess","","",367],[13,"CodeGenLevelDefault","","",367],[13,"CodeGenLevelAggressive","","",367],[4,"RelocMode","",""],[13,"RelocDefault","","",368],[13,"RelocStatic","","",368],[13,"RelocPIC","","",368],[13,"RelocDynamicNoPic","","",368],[4,"CodeGenModel","",""],[13,"CodeModelDefault","","",450],[13,"CodeModelJITDefault","","",450],[13,"CodeModelSmall","","",450],[13,"CodeModelKernel","","",450],[13,"CodeModelMedium","","",450],[13,"CodeModelLarge","","",450],[4,"DiagnosticKind","",""],[13,"DK_InlineAsm","","",451],[13,"DK_StackSize","","",451],[13,"DK_DebugMetadataVersion","","",451],[13,"DK_SampleProfile","","",451],[13,"DK_OptimizationRemark","","",451],[13,"DK_OptimizationRemarkMissed","","",451],[13,"DK_OptimizationRemarkAnalysis","","",451],[13,"DK_OptimizationFailure","","",451],[4,"Module_opaque","",""],[6,"ModuleRef","",""],[4,"Context_opaque","",""],[6,"ContextRef","",""],[4,"Type_opaque","",""],[6,"TypeRef","",""],[4,"Value_opaque","",""],[6,"ValueRef","",""],[4,"Metadata_opaque","",""],[6,"MetadataRef","",""],[4,"BasicBlock_opaque","",""],[6,"BasicBlockRef","",""],[4,"Builder_opaque","",""],[6,"BuilderRef","",""],[4,"ExecutionEngine_opaque","",""],[6,"ExecutionEngineRef","",""],[4,"RustJITMemoryManager_opaque","",""],[6,"RustJITMemoryManagerRef","",""],[4,"MemoryBuffer_opaque","",""],[6,"MemoryBufferRef","",""],[4,"PassManager_opaque","",""],[6,"PassManagerRef","",""],[4,"PassManagerBuilder_opaque","",""],[6,"PassManagerBuilderRef","",""],[4,"Use_opaque","",""],[6,"UseRef","",""],[4,"TargetData_opaque","",""],[6,"TargetDataRef","",""],[4,"ObjectFile_opaque","",""],[6,"ObjectFileRef","",""],[4,"SectionIterator_opaque","",""],[6,"SectionIteratorRef","",""],[4,"Pass_opaque","",""],[6,"PassRef","",""],[4,"TargetMachine_opaque","",""],[6,"TargetMachineRef","",""],[4,"Archive_opaque","",""],[6,"ArchiveRef","",""],[4,"Twine_opaque","",""],[6,"TwineRef","",""],[4,"DiagnosticInfo_opaque","",""],[6,"DiagnosticInfoRef","",""],[4,"DebugLoc_opaque","",""],[6,"DebugLocRef","",""],[4,"SMDiagnostic_opaque","",""],[6,"SMDiagnosticRef","",""],[6,"DiagnosticHandler","",""],[6,"InlineAsmDiagHandler","",""],[0,"debuginfo","",""],[4,"DIBuilder_opaque","rustc_trans::lib::llvm::debuginfo",""],[6,"DIBuilderRef","",""],[6,"DIDescriptor","",""],[6,"DIScope","",""],[6,"DILocation","",""],[6,"DIFile","",""],[6,"DILexicalBlock","",""],[6,"DISubprogram","",""],[6,"DINameSpace","",""],[6,"DIType","",""],[6,"DIBasicType","",""],[6,"DIDerivedType","",""],[6,"DICompositeType","",""],[6,"DIVariable","",""],[6,"DIGlobalVariable","",""],[6,"DIArray","",""],[6,"DISubrange","",""],[6,"DIEnumerator","",""],[6,"DITemplateTypeParameter","",""],[4,"DIDescriptorFlags","",""],[13,"FlagPrivate","","",452],[13,"FlagProtected","","",452],[13,"FlagFwdDecl","","",452],[13,"FlagAppleBlock","","",452],[13,"FlagBlockByrefStruct","","",452],[13,"FlagVirtual","","",452],[13,"FlagArtificial","","",452],[13,"FlagExplicit","","",452],[13,"FlagPrototyped","","",452],[13,"FlagObjcClassComplete","","",452],[13,"FlagObjectPointer","","",452],[13,"FlagVector","","",452],[13,"FlagStaticMember","","",452],[13,"FlagIndirectVariable","","",452],[13,"FlagLValueReference","","",452],[13,"FlagRValueReference","","",452],[5,"LLVMContextCreate","rustc_trans::lib::llvm",""],[5,"LLVMContextDispose","",""],[5,"LLVMGetMDKindIDInContext","",""],[5,"LLVMModuleCreateWithNameInContext","",""],[5,"LLVMGetModuleContext","",""],[5,"LLVMDisposeModule","",""],[5,"LLVMGetDataLayout","","Data layout. See Module::getDataLayout."],[5,"LLVMSetDataLayout","",""],[5,"LLVMGetTarget","","Target triple. See Module::getTargetTriple."],[5,"LLVMSetTarget","",""],[5,"LLVMDumpModule","","See Module::dump."],[5,"LLVMSetModuleInlineAsm","","See Module::setModuleInlineAsm."],[5,"LLVMGetTypeKind","","See llvm::LLVMTypeKind::getTypeID."],[5,"LLVMGetTypeContext","","See llvm::LLVMType::getContext."],[5,"LLVMInt1TypeInContext","",""],[5,"LLVMInt8TypeInContext","",""],[5,"LLVMInt16TypeInContext","",""],[5,"LLVMInt32TypeInContext","",""],[5,"LLVMInt64TypeInContext","",""],[5,"LLVMIntTypeInContext","",""],[5,"LLVMGetIntTypeWidth","",""],[5,"LLVMFloatTypeInContext","",""],[5,"LLVMDoubleTypeInContext","",""],[5,"LLVMX86FP80TypeInContext","",""],[5,"LLVMFP128TypeInContext","",""],[5,"LLVMPPCFP128TypeInContext","",""],[5,"LLVMFunctionType","",""],[5,"LLVMIsFunctionVarArg","",""],[5,"LLVMGetReturnType","",""],[5,"LLVMCountParamTypes","",""],[5,"LLVMGetParamTypes","",""],[5,"LLVMStructTypeInContext","",""],[5,"LLVMCountStructElementTypes","",""],[5,"LLVMGetStructElementTypes","",""],[5,"LLVMIsPackedStruct","",""],[5,"LLVMRustArrayType","",""],[5,"LLVMPointerType","",""],[5,"LLVMVectorType","",""],[5,"LLVMGetElementType","",""],[5,"LLVMGetArrayLength","",""],[5,"LLVMGetPointerAddressSpace","",""],[5,"LLVMGetPointerToGlobal","",""],[5,"LLVMGetVectorSize","",""],[5,"LLVMVoidTypeInContext","",""],[5,"LLVMLabelTypeInContext","",""],[5,"LLVMMetadataTypeInContext","",""],[5,"LLVMTypeOf","",""],[5,"LLVMGetValueName","",""],[5,"LLVMSetValueName","",""],[5,"LLVMDumpValue","",""],[5,"LLVMReplaceAllUsesWith","",""],[5,"LLVMHasMetadata","",""],[5,"LLVMGetMetadata","",""],[5,"LLVMSetMetadata","",""],[5,"LLVMGetFirstUse","",""],[5,"LLVMGetNextUse","",""],[5,"LLVMGetUser","",""],[5,"LLVMGetUsedValue","",""],[5,"LLVMGetNumOperands","",""],[5,"LLVMGetOperand","",""],[5,"LLVMSetOperand","",""],[5,"LLVMConstNull","",""],[5,"LLVMConstAllOnes","",""],[5,"LLVMConstICmp","",""],[5,"LLVMConstFCmp","",""],[5,"LLVMGetUndef","",""],[5,"LLVMIsConstant","",""],[5,"LLVMIsNull","",""],[5,"LLVMIsUndef","",""],[5,"LLVMConstPointerNull","",""],[5,"LLVMMDStringInContext","",""],[5,"LLVMMDNodeInContext","",""],[5,"LLVMAddNamedMetadataOperand","",""],[5,"LLVMConstInt","",""],[5,"LLVMConstIntOfString","",""],[5,"LLVMConstIntOfStringAndSize","",""],[5,"LLVMConstReal","",""],[5,"LLVMConstRealOfString","",""],[5,"LLVMConstRealOfStringAndSize","",""],[5,"LLVMConstIntGetZExtValue","",""],[5,"LLVMConstIntGetSExtValue","",""],[5,"LLVMConstStringInContext","",""],[5,"LLVMConstStructInContext","",""],[5,"LLVMConstArray","",""],[5,"LLVMConstVector","",""],[5,"LLVMAlignOf","",""],[5,"LLVMSizeOf","",""],[5,"LLVMConstNeg","",""],[5,"LLVMConstNSWNeg","",""],[5,"LLVMConstNUWNeg","",""],[5,"LLVMConstFNeg","",""],[5,"LLVMConstNot","",""],[5,"LLVMConstAdd","",""],[5,"LLVMConstNSWAdd","",""],[5,"LLVMConstNUWAdd","",""],[5,"LLVMConstFAdd","",""],[5,"LLVMConstSub","",""],[5,"LLVMConstNSWSub","",""],[5,"LLVMConstNUWSub","",""],[5,"LLVMConstFSub","",""],[5,"LLVMConstMul","",""],[5,"LLVMConstNSWMul","",""],[5,"LLVMConstNUWMul","",""],[5,"LLVMConstFMul","",""],[5,"LLVMConstUDiv","",""],[5,"LLVMConstSDiv","",""],[5,"LLVMConstExactSDiv","",""],[5,"LLVMConstFDiv","",""],[5,"LLVMConstURem","",""],[5,"LLVMConstSRem","",""],[5,"LLVMConstFRem","",""],[5,"LLVMConstAnd","",""],[5,"LLVMConstOr","",""],[5,"LLVMConstXor","",""],[5,"LLVMConstShl","",""],[5,"LLVMConstLShr","",""],[5,"LLVMConstAShr","",""],[5,"LLVMConstGEP","",""],[5,"LLVMConstInBoundsGEP","",""],[5,"LLVMConstTrunc","",""],[5,"LLVMConstSExt","",""],[5,"LLVMConstZExt","",""],[5,"LLVMConstFPTrunc","",""],[5,"LLVMConstFPExt","",""],[5,"LLVMConstUIToFP","",""],[5,"LLVMConstSIToFP","",""],[5,"LLVMConstFPToUI","",""],[5,"LLVMConstFPToSI","",""],[5,"LLVMConstPtrToInt","",""],[5,"LLVMConstIntToPtr","",""],[5,"LLVMConstBitCast","",""],[5,"LLVMConstZExtOrBitCast","",""],[5,"LLVMConstSExtOrBitCast","",""],[5,"LLVMConstTruncOrBitCast","",""],[5,"LLVMConstPointerCast","",""],[5,"LLVMConstIntCast","",""],[5,"LLVMConstFPCast","",""],[5,"LLVMConstSelect","",""],[5,"LLVMConstExtractElement","",""],[5,"LLVMConstInsertElement","",""],[5,"LLVMConstShuffleVector","",""],[5,"LLVMConstExtractValue","",""],[5,"LLVMConstInsertValue","",""],[5,"LLVMConstInlineAsm","",""],[5,"LLVMBlockAddress","",""],[5,"LLVMGetGlobalParent","",""],[5,"LLVMIsDeclaration","",""],[5,"LLVMGetLinkage","",""],[5,"LLVMSetLinkage","",""],[5,"LLVMGetSection","",""],[5,"LLVMSetSection","",""],[5,"LLVMGetVisibility","",""],[5,"LLVMSetVisibility","",""],[5,"LLVMGetAlignment","",""],[5,"LLVMSetAlignment","",""],[5,"LLVMIsAGlobalVariable","",""],[5,"LLVMAddGlobal","",""],[5,"LLVMAddGlobalInAddressSpace","",""],[5,"LLVMGetNamedGlobal","",""],[5,"LLVMGetFirstGlobal","",""],[5,"LLVMGetLastGlobal","",""],[5,"LLVMGetNextGlobal","",""],[5,"LLVMGetPreviousGlobal","",""],[5,"LLVMDeleteGlobal","",""],[5,"LLVMGetInitializer","",""],[5,"LLVMSetInitializer","",""],[5,"LLVMIsThreadLocal","",""],[5,"LLVMSetThreadLocal","",""],[5,"LLVMIsGlobalConstant","",""],[5,"LLVMSetGlobalConstant","",""],[5,"LLVMAddAlias","",""],[5,"LLVMAddFunction","",""],[5,"LLVMGetNamedFunction","",""],[5,"LLVMGetFirstFunction","",""],[5,"LLVMGetLastFunction","",""],[5,"LLVMGetNextFunction","",""],[5,"LLVMGetPreviousFunction","",""],[5,"LLVMDeleteFunction","",""],[5,"LLVMGetOrInsertFunction","",""],[5,"LLVMGetIntrinsicID","",""],[5,"LLVMGetFunctionCallConv","",""],[5,"LLVMSetFunctionCallConv","",""],[5,"LLVMGetGC","",""],[5,"LLVMSetGC","",""],[5,"LLVMAddDereferenceableAttr","",""],[5,"LLVMAddFunctionAttribute","",""],[5,"LLVMAddFunctionAttrString","",""],[5,"LLVMRemoveFunctionAttrString","",""],[5,"LLVMGetFunctionAttr","",""],[5,"LLVMCountParams","",""],[5,"LLVMGetParams","",""],[5,"LLVMGetParam","",""],[5,"LLVMGetParamParent","",""],[5,"LLVMGetFirstParam","",""],[5,"LLVMGetLastParam","",""],[5,"LLVMGetNextParam","",""],[5,"LLVMGetPreviousParam","",""],[5,"LLVMAddAttribute","",""],[5,"LLVMRemoveAttribute","",""],[5,"LLVMGetAttribute","",""],[5,"LLVMSetParamAlignment","",""],[5,"LLVMBasicBlockAsValue","",""],[5,"LLVMValueIsBasicBlock","",""],[5,"LLVMValueAsBasicBlock","",""],[5,"LLVMGetBasicBlockParent","",""],[5,"LLVMCountBasicBlocks","",""],[5,"LLVMGetBasicBlocks","",""],[5,"LLVMGetFirstBasicBlock","",""],[5,"LLVMGetLastBasicBlock","",""],[5,"LLVMGetNextBasicBlock","",""],[5,"LLVMGetPreviousBasicBlock","",""],[5,"LLVMGetEntryBasicBlock","",""],[5,"LLVMAppendBasicBlockInContext","",""],[5,"LLVMInsertBasicBlockInContext","",""],[5,"LLVMDeleteBasicBlock","",""],[5,"LLVMMoveBasicBlockAfter","",""],[5,"LLVMMoveBasicBlockBefore","",""],[5,"LLVMGetInstructionParent","",""],[5,"LLVMGetFirstInstruction","",""],[5,"LLVMGetLastInstruction","",""],[5,"LLVMGetNextInstruction","",""],[5,"LLVMGetPreviousInstruction","",""],[5,"LLVMInstructionEraseFromParent","",""],[5,"LLVMSetInstructionCallConv","",""],[5,"LLVMGetInstructionCallConv","",""],[5,"LLVMAddInstrAttribute","",""],[5,"LLVMRemoveInstrAttribute","",""],[5,"LLVMSetInstrParamAlignment","",""],[5,"LLVMAddCallSiteAttribute","",""],[5,"LLVMAddDereferenceableCallSiteAttr","",""],[5,"LLVMIsTailCall","",""],[5,"LLVMSetTailCall","",""],[5,"LLVMGetVolatile","",""],[5,"LLVMSetVolatile","",""],[5,"LLVMAddIncoming","",""],[5,"LLVMCountIncoming","",""],[5,"LLVMGetIncomingValue","",""],[5,"LLVMGetIncomingBlock","",""],[5,"LLVMCreateBuilderInContext","",""],[5,"LLVMPositionBuilder","",""],[5,"LLVMPositionBuilderBefore","",""],[5,"LLVMPositionBuilderAtEnd","",""],[5,"LLVMGetInsertBlock","",""],[5,"LLVMClearInsertionPosition","",""],[5,"LLVMInsertIntoBuilder","",""],[5,"LLVMInsertIntoBuilderWithName","",""],[5,"LLVMDisposeBuilder","",""],[5,"LLVMRustCreateJITMemoryManager","",""],[5,"LLVMBuildExecutionEngine","",""],[5,"LLVMDisposeExecutionEngine","",""],[5,"LLVMExecutionEngineFinalizeObject","",""],[5,"LLVMRustLoadDynamicLibrary","",""],[5,"LLVMExecutionEngineAddModule","",""],[5,"LLVMExecutionEngineRemoveModule","",""],[5,"LLVMSetCurrentDebugLocation","",""],[5,"LLVMGetCurrentDebugLocation","",""],[5,"LLVMSetInstDebugLocation","",""],[5,"LLVMBuildRetVoid","",""],[5,"LLVMBuildRet","",""],[5,"LLVMBuildAggregateRet","",""],[5,"LLVMBuildBr","",""],[5,"LLVMBuildCondBr","",""],[5,"LLVMBuildSwitch","",""],[5,"LLVMBuildIndirectBr","",""],[5,"LLVMBuildInvoke","",""],[5,"LLVMBuildLandingPad","",""],[5,"LLVMBuildResume","",""],[5,"LLVMBuildUnreachable","",""],[5,"LLVMAddCase","",""],[5,"LLVMAddDestination","",""],[5,"LLVMAddClause","",""],[5,"LLVMSetCleanup","",""],[5,"LLVMBuildAdd","",""],[5,"LLVMBuildNSWAdd","",""],[5,"LLVMBuildNUWAdd","",""],[5,"LLVMBuildFAdd","",""],[5,"LLVMBuildSub","",""],[5,"LLVMBuildNSWSub","",""],[5,"LLVMBuildNUWSub","",""],[5,"LLVMBuildFSub","",""],[5,"LLVMBuildMul","",""],[5,"LLVMBuildNSWMul","",""],[5,"LLVMBuildNUWMul","",""],[5,"LLVMBuildFMul","",""],[5,"LLVMBuildUDiv","",""],[5,"LLVMBuildSDiv","",""],[5,"LLVMBuildExactSDiv","",""],[5,"LLVMBuildFDiv","",""],[5,"LLVMBuildURem","",""],[5,"LLVMBuildSRem","",""],[5,"LLVMBuildFRem","",""],[5,"LLVMBuildShl","",""],[5,"LLVMBuildLShr","",""],[5,"LLVMBuildAShr","",""],[5,"LLVMBuildAnd","",""],[5,"LLVMBuildOr","",""],[5,"LLVMBuildXor","",""],[5,"LLVMBuildBinOp","",""],[5,"LLVMBuildNeg","",""],[5,"LLVMBuildNSWNeg","",""],[5,"LLVMBuildNUWNeg","",""],[5,"LLVMBuildFNeg","",""],[5,"LLVMBuildNot","",""],[5,"LLVMBuildMalloc","",""],[5,"LLVMBuildArrayMalloc","",""],[5,"LLVMBuildAlloca","",""],[5,"LLVMBuildArrayAlloca","",""],[5,"LLVMBuildFree","",""],[5,"LLVMBuildLoad","",""],[5,"LLVMBuildStore","",""],[5,"LLVMBuildGEP","",""],[5,"LLVMBuildInBoundsGEP","",""],[5,"LLVMBuildStructGEP","",""],[5,"LLVMBuildGlobalString","",""],[5,"LLVMBuildGlobalStringPtr","",""],[5,"LLVMBuildTrunc","",""],[5,"LLVMBuildZExt","",""],[5,"LLVMBuildSExt","",""],[5,"LLVMBuildFPToUI","",""],[5,"LLVMBuildFPToSI","",""],[5,"LLVMBuildUIToFP","",""],[5,"LLVMBuildSIToFP","",""],[5,"LLVMBuildFPTrunc","",""],[5,"LLVMBuildFPExt","",""],[5,"LLVMBuildPtrToInt","",""],[5,"LLVMBuildIntToPtr","",""],[5,"LLVMBuildBitCast","",""],[5,"LLVMBuildZExtOrBitCast","",""],[5,"LLVMBuildSExtOrBitCast","",""],[5,"LLVMBuildTruncOrBitCast","",""],[5,"LLVMBuildCast","",""],[5,"LLVMBuildPointerCast","",""],[5,"LLVMBuildIntCast","",""],[5,"LLVMBuildFPCast","",""],[5,"LLVMBuildICmp","",""],[5,"LLVMBuildFCmp","",""],[5,"LLVMBuildPhi","",""],[5,"LLVMBuildCall","",""],[5,"LLVMBuildSelect","",""],[5,"LLVMBuildVAArg","",""],[5,"LLVMBuildExtractElement","",""],[5,"LLVMBuildInsertElement","",""],[5,"LLVMBuildShuffleVector","",""],[5,"LLVMBuildExtractValue","",""],[5,"LLVMBuildInsertValue","",""],[5,"LLVMBuildIsNull","",""],[5,"LLVMBuildIsNotNull","",""],[5,"LLVMBuildPtrDiff","",""],[5,"LLVMBuildAtomicLoad","",""],[5,"LLVMBuildAtomicStore","",""],[5,"LLVMBuildAtomicCmpXchg","",""],[5,"LLVMBuildAtomicRMW","",""],[5,"LLVMBuildAtomicFence","",""],[5,"LLVMIsATerminatorInst","",""],[5,"LLVMIsAStoreInst","",""],[5,"LLVMWriteBitcodeToFile","","Writes a module to the specified path. Returns 0 on success."],[5,"LLVMCreateTargetData","","Creates target data from a target layout string."],[5,"LLVMAddTargetData","","Adds the target data to the given pass manager. The pass manager\nreferences the target data only weakly."],[5,"LLVMStoreSizeOfType","","Number of bytes clobbered when doing a Store to *T."],[5,"LLVMSizeOfTypeInBits","","Number of bytes clobbered when doing a Store to *T."],[5,"LLVMABISizeOfType","","Distance between successive elements in an array of T. Includes ABI padding."],[5,"LLVMPreferredAlignmentOfType","","Returns the preferred alignment of a type."],[5,"LLVMABIAlignmentOfType","","Returns the minimum alignment of a type."],[5,"LLVMOffsetOfElement","","Computes the byte offset of the indexed struct element for a\ntarget."],[5,"LLVMCallFrameAlignmentOfType","","Returns the minimum alignment of a type when part of a call frame."],[5,"LLVMDisposeTargetData","","Disposes target data."],[5,"LLVMCreatePassManager","","Creates a pass manager."],[5,"LLVMCreateFunctionPassManagerForModule","","Creates a function-by-function pass manager"],[5,"LLVMDisposePassManager","","Disposes a pass manager."],[5,"LLVMRunPassManager","","Runs a pass manager on a module."],[5,"LLVMRunFunctionPassManager","","Runs the function passes on the provided function."],[5,"LLVMInitializeFunctionPassManager","","Initializes all the function passes scheduled in the manager"],[5,"LLVMFinalizeFunctionPassManager","","Finalizes all the function passes scheduled in the manager"],[5,"LLVMInitializePasses","",""],[5,"LLVMAddVerifierPass","","Adds a verification pass."],[5,"LLVMAddGlobalOptimizerPass","",""],[5,"LLVMAddIPSCCPPass","",""],[5,"LLVMAddDeadArgEliminationPass","",""],[5,"LLVMAddInstructionCombiningPass","",""],[5,"LLVMAddCFGSimplificationPass","",""],[5,"LLVMAddFunctionInliningPass","",""],[5,"LLVMAddFunctionAttrsPass","",""],[5,"LLVMAddScalarReplAggregatesPass","",""],[5,"LLVMAddScalarReplAggregatesPassSSA","",""],[5,"LLVMAddJumpThreadingPass","",""],[5,"LLVMAddConstantPropagationPass","",""],[5,"LLVMAddReassociatePass","",""],[5,"LLVMAddLoopRotatePass","",""],[5,"LLVMAddLICMPass","",""],[5,"LLVMAddLoopUnswitchPass","",""],[5,"LLVMAddLoopDeletionPass","",""],[5,"LLVMAddLoopUnrollPass","",""],[5,"LLVMAddGVNPass","",""],[5,"LLVMAddMemCpyOptPass","",""],[5,"LLVMAddSCCPPass","",""],[5,"LLVMAddDeadStoreEliminationPass","",""],[5,"LLVMAddStripDeadPrototypesPass","",""],[5,"LLVMAddConstantMergePass","",""],[5,"LLVMAddArgumentPromotionPass","",""],[5,"LLVMAddTailCallEliminationPass","",""],[5,"LLVMAddIndVarSimplifyPass","",""],[5,"LLVMAddAggressiveDCEPass","",""],[5,"LLVMAddGlobalDCEPass","",""],[5,"LLVMAddCorrelatedValuePropagationPass","",""],[5,"LLVMAddPruneEHPass","",""],[5,"LLVMAddSimplifyLibCallsPass","",""],[5,"LLVMAddLoopIdiomPass","",""],[5,"LLVMAddEarlyCSEPass","",""],[5,"LLVMAddTypeBasedAliasAnalysisPass","",""],[5,"LLVMAddBasicAliasAnalysisPass","",""],[5,"LLVMPassManagerBuilderCreate","",""],[5,"LLVMPassManagerBuilderDispose","",""],[5,"LLVMPassManagerBuilderSetOptLevel","",""],[5,"LLVMPassManagerBuilderSetSizeLevel","",""],[5,"LLVMPassManagerBuilderSetDisableUnitAtATime","",""],[5,"LLVMPassManagerBuilderSetDisableUnrollLoops","",""],[5,"LLVMPassManagerBuilderSetDisableSimplifyLibCalls","",""],[5,"LLVMPassManagerBuilderUseInlinerWithThreshold","",""],[5,"LLVMPassManagerBuilderPopulateModulePassManager","",""],[5,"LLVMPassManagerBuilderPopulateFunctionPassManager","",""],[5,"LLVMPassManagerBuilderPopulateLTOPassManager","",""],[5,"LLVMDisposeMemoryBuffer","","Destroys a memory buffer."],[5,"LLVMCreateObjectFile","","Opens an object file."],[5,"LLVMDisposeObjectFile","","Closes an object file."],[5,"LLVMGetSections","","Enumerates the sections in an object file."],[5,"LLVMDisposeSectionIterator","","Destroys a section iterator."],[5,"LLVMIsSectionIteratorAtEnd","","Returns true if the section iterator is at the end of the section\nlist:"],[5,"LLVMMoveToNextSection","","Moves the section iterator to point to the next section."],[5,"LLVMGetSectionSize","","Returns the current section size."],[5,"LLVMGetSectionContents","","Returns the current section contents as a string buffer."],[5,"LLVMRustCreateMemoryBufferWithContentsOfFile","","Reads the given file and returns it as a memory buffer. Use\nLLVMDisposeMemoryBuffer() to get rid of it."],[5,"LLVMCreateMemoryBufferWithMemoryRange","","Borrows the contents of the memory buffer (doesn't copy it)"],[5,"LLVMCreateMemoryBufferWithMemoryRangeCopy","",""],[5,"LLVMIsMultithreaded","",""],[5,"LLVMStartMultithreaded","",""],[5,"LLVMRustGetLastError","","Returns a string describing the last error caused by an LLVMRust* call."],[5,"LLVMRustPrintPassTimings","","Print the pass timings since static dtors aren't picking them up."],[5,"LLVMStructCreateNamed","",""],[5,"LLVMStructSetBody","",""],[5,"LLVMConstNamedStruct","",""],[5,"LLVMSetDebug","","Enables LLVM debug output."],[5,"LLVMInlineAsm","","Prepares inline assembly."],[7,"LLVMRustDebugMetadataVersion","",""],[5,"LLVMRustAddModuleFlag","",""],[5,"LLVMDIBuilderCreate","",""],[5,"LLVMDIBuilderDispose","",""],[5,"LLVMDIBuilderFinalize","",""],[5,"LLVMDIBuilderCreateCompileUnit","",""],[5,"LLVMDIBuilderCreateFile","",""],[5,"LLVMDIBuilderCreateSubroutineType","",""],[5,"LLVMDIBuilderCreateFunction","",""],[5,"LLVMDIBuilderCreateBasicType","",""],[5,"LLVMDIBuilderCreatePointerType","",""],[5,"LLVMDIBuilderCreateStructType","",""],[5,"LLVMDIBuilderCreateMemberType","",""],[5,"LLVMDIBuilderCreateLexicalBlock","",""],[5,"LLVMDIBuilderCreateStaticVariable","",""],[5,"LLVMDIBuilderCreateVariable","",""],[5,"LLVMDIBuilderCreateArrayType","",""],[5,"LLVMDIBuilderCreateVectorType","",""],[5,"LLVMDIBuilderGetOrCreateSubrange","",""],[5,"LLVMDIBuilderGetOrCreateArray","",""],[5,"LLVMDIBuilderInsertDeclareAtEnd","",""],[5,"LLVMDIBuilderInsertDeclareBefore","",""],[5,"LLVMDIBuilderCreateEnumerator","",""],[5,"LLVMDIBuilderCreateEnumerationType","",""],[5,"LLVMDIBuilderCreateUnionType","",""],[5,"LLVMSetUnnamedAddr","",""],[5,"LLVMDIBuilderCreateTemplateTypeParameter","",""],[5,"LLVMDIBuilderCreateOpDeref","",""],[5,"LLVMDIBuilderCreateOpPlus","",""],[5,"LLVMDIBuilderCreateNameSpace","",""],[5,"LLVMDIBuilderCreateDebugLocation","",""],[5,"LLVMDICompositeTypeSetTypeArray","",""],[5,"LLVMWriteTypeToString","",""],[5,"LLVMWriteValueToString","",""],[5,"LLVMIsAArgument","",""],[5,"LLVMIsAAllocaInst","",""],[5,"LLVMInitializeX86TargetInfo","",""],[5,"LLVMInitializeX86Target","",""],[5,"LLVMInitializeX86TargetMC","",""],[5,"LLVMInitializeX86AsmPrinter","",""],[5,"LLVMInitializeX86AsmParser","",""],[5,"LLVMInitializeARMTargetInfo","",""],[5,"LLVMInitializeARMTarget","",""],[5,"LLVMInitializeARMTargetMC","",""],[5,"LLVMInitializeARMAsmPrinter","",""],[5,"LLVMInitializeARMAsmParser","",""],[5,"LLVMInitializeAArch64TargetInfo","",""],[5,"LLVMInitializeAArch64Target","",""],[5,"LLVMInitializeAArch64TargetMC","",""],[5,"LLVMInitializeAArch64AsmPrinter","",""],[5,"LLVMInitializeAArch64AsmParser","",""],[5,"LLVMInitializeMipsTargetInfo","",""],[5,"LLVMInitializeMipsTarget","",""],[5,"LLVMInitializeMipsTargetMC","",""],[5,"LLVMInitializeMipsAsmPrinter","",""],[5,"LLVMInitializeMipsAsmParser","",""],[5,"LLVMInitializePowerPCTargetInfo","",""],[5,"LLVMInitializePowerPCTarget","",""],[5,"LLVMInitializePowerPCTargetMC","",""],[5,"LLVMInitializePowerPCAsmPrinter","",""],[5,"LLVMInitializePowerPCAsmParser","",""],[5,"LLVMRustAddPass","",""],[5,"LLVMRustCreateTargetMachine","",""],[5,"LLVMRustDisposeTargetMachine","",""],[5,"LLVMRustAddAnalysisPasses","",""],[5,"LLVMRustAddBuilderLibraryInfo","",""],[5,"LLVMRustAddLibraryInfo","",""],[5,"LLVMRustRunFunctionPassManager","",""],[5,"LLVMRustWriteOutputFile","",""],[5,"LLVMRustPrintModule","",""],[5,"LLVMRustSetLLVMOptions","",""],[5,"LLVMRustPrintPasses","",""],[5,"LLVMRustSetNormalizedTarget","",""],[5,"LLVMRustAddAlwaysInlinePass","",""],[5,"LLVMRustLinkInExternalBitcode","",""],[5,"LLVMRustRunRestrictionPass","",""],[5,"LLVMRustMarkAllFunctionsNounwind","",""],[5,"LLVMRustOpenArchive","",""],[5,"LLVMRustArchiveReadSection","",""],[5,"LLVMRustDestroyArchive","",""],[5,"LLVMRustSetDLLExportStorageClass","",""],[5,"LLVMVersionMajor","",""],[5,"LLVMVersionMinor","",""],[5,"LLVMRustGetSectionName","",""],[5,"LLVMWriteTwineToString","",""],[5,"LLVMContextSetDiagnosticHandler","",""],[5,"LLVMUnpackOptimizationDiagnostic","",""],[5,"LLVMUnpackInlineAsmDiagnostic","",""],[5,"LLVMWriteDiagnosticInfoToString","",""],[5,"LLVMGetDiagInfoSeverity","",""],[5,"LLVMGetDiagInfoKind","",""],[5,"LLVMWriteDebugLocToString","",""],[5,"LLVMSetInlineAsmDiagnosticHandler","",""],[5,"LLVMWriteSMDiagnosticToString","",""],[5,"SetInstructionCallConv","",""],[5,"SetFunctionCallConv","",""],[5,"SetLinkage","",""],[5,"SetUnnamedAddr","",""],[5,"set_thread_local","",""],[5,"ConstICmp","",""],[5,"ConstFCmp","",""],[5,"SetFunctionAttribute","",""],[3,"TargetData","",""],[12,"lltd","","",369],[5,"mk_target_data","",""],[3,"ObjectFile","",""],[12,"llof","","",370],[3,"SectionIter","",""],[12,"llsi","","",371],[5,"mk_section_iter","",""],[5,"get_param","","Safe wrapper around `LLVMGetParam`, because segfaults are no fun."],[4,"RustString_opaque","",""],[6,"RustStringRef","",""],[5,"rust_llvm_string_write_impl","","Appending to a Rust string -- used by raw_rust_string_ostream."],[5,"build_string","",""],[5,"twine_to_string","",""],[5,"debug_loc_to_string","",""]],"paths":[[3,"Archive"],[3,"ArchiveBuilder"],[3,"Svh"],[4,"SawAbiComponent"],[4,"SawExprComponent"],[4,"SawStmtComponent"],[3,"Ident"],[3,"Name"],[3,"StrictVersionHashVisitor"],[3,"DecodeContext"],[3,"DefId"],[4,"Option"],[3,"Span"],[3,"NestedItemsDropper"],[4,"Def"],[4,"Region"],[3,"FreeRegion"],[4,"CodeExtent"],[3,"DestructionScopeData"],[4,"BoundRegion"],[3,"Decoder"],[3,"Freevar"],[3,"UpvarBorrow"],[4,"UpvarCapture"],[4,"MethodOrigin"],[3,"EncodeContext"],[3,"Encoder"],[3,"SideTableEncodingIdVisitor"],[3,"Doc"],[3,"LabelledCFG"],[4,"CFGNodeData"],[3,"CFG"],[3,"ConstQualif"],[4,"Mode"],[3,"CheckCrateVisitor"],[3,"CheckCrateVisitor"],[3,"CheckItemRecursionVisitor"],[4,"Context"],[3,"CheckLoopVisitor"],[3,"Matrix"],[4,"Constructor"],[4,"Usefulness"],[3,"MatchCheckCtxt"],[3,"StaticInliner"],[3,"RenamingRecorder"],[3,"MutationChecker"],[3,"AtBindingPatternVisitor"],[3,"RvalueContext"],[3,"RvalueContextDelegate"],[4,"const_val"],[3,"ConstEvalErr"],[4,"ErrKind"],[4,"EntryOrExit"],[3,"DataFlowContext"],[3,"Union"],[3,"Subtract"],[3,"MarkSymbolVisitor"],[3,"LifeSeeder"],[3,"DeadVisitor"],[3,"PathResolution"],[4,"MethodProvenance"],[4,"UnsafeContext"],[3,"EffectCheckVisitor"],[3,"EntryContext"],[4,"LoanCause"],[4,"ConsumeMode"],[4,"MoveReason"],[4,"MatchMode"],[4,"TrackMatchMode"],[4,"MutateMode"],[3,"ExprUseVisitor"],[4,"SimplifiedType"],[3,"Edge"],[3,"NodeIndex"],[3,"EdgeIndex"],[3,"Direction"],[3,"Graph"],[3,"DepthFirstTraversal"],[3,"IntrinsicCheckingVisitor"],[3,"TransmuteRestriction"],[3,"Bivariate"],[3,"Rc"],[3,"TraitRef"],[3,"ProjectionPredicate"],[3,"FnSig"],[3,"CombineFields"],[3,"Generalizer"],[3,"Equate"],[3,"InferCtxt"],[3,"Binder"],[3,"Glb"],[3,"Lub"],[4,"Node"],[4,"Edge"],[3,"ConstraintGraph"],[4,"Constraint"],[4,"GenericKind"],[3,"TwoRegions"],[4,"UndoLogEntry"],[4,"CombineMapType"],[4,"RegionResolutionError"],[3,"SameRegions"],[3,"RegionSnapshot"],[3,"RegionVarBindings"],[4,"Classification"],[4,"Verify"],[4,"VarValue"],[3,"RegionAndOrigin"],[3,"OpportunisticTypeResolver"],[3,"FullTypeResolver"],[3,"TypeFreshener"],[3,"Sub"],[4,"RelationDir"],[3,"TypeVariableTable"],[3,"Delegate"],[4,"VarValue"],[3,"UnificationTable"],[3,"Delegate"],[3,"IntVid"],[4,"IntVarValue"],[3,"FloatVid"],[4,"FloatTy"],[4,"TypeOrigin"],[4,"ValuePairs"],[3,"TypeTrace"],[4,"SubregionOrigin"],[4,"LateBoundRegionConversionTime"],[4,"RegionVariableOrigin"],[4,"fixup_err"],[4,"Result"],[4,"LangItem"],[3,"LanguageItems"],[3,"LanguageItemCollector"],[3,"Variable"],[3,"LiveNode"],[4,"LiveNodeKind"],[3,"IrMaps"],[3,"LocalInfo"],[4,"VarKind"],[3,"Liveness"],[3,"Users"],[4,"categorization"],[3,"Upvar"],[4,"PointerKind"],[4,"InteriorKind"],[4,"FieldName"],[4,"InteriorOffsetKind"],[4,"ElementKind"],[4,"MutabilityCategory"],[4,"Note"],[3,"cmt_"],[3,"Expr"],[3,"Pat"],[3,"MemCategorizationContext"],[4,"ClosureKind"],[4,"LastPrivate"],[4,"PrivateDep"],[4,"ImportUse"],[3,"ReachableContext"],[3,"BlockRemainder"],[4,"InnermostDeclaringBlock"],[3,"DeclaringStatementContext"],[4,"InnermostEnclosingExpr"],[3,"Context"],[3,"RegionMaps"],[3,"RegionResolutionVisitor"],[4,"DefRegion"],[3,"LifetimeContext"],[4,"ScopeChain"],[3,"Annotator"],[3,"Index"],[3,"Checker"],[3,"Substs"],[4,"RegionSubsts"],[4,"ParamSpace"],[3,"VecPerParamSpace"],[3,"EnumeratedItems"],[3,"SubstFolder"],[3,"RegionObligation"],[3,"FulfillmentContext"],[3,"MismatchedProjectionTypes"],[4,"ProjectionTyCandidate"],[3,"AssociatedTypeNormalizer"],[3,"Normalized"],[4,"ProjectionTyError"],[4,"MethodViolationCode"],[4,"ObjectSafetyViolation"],[3,"SelectionCache"],[4,"MethodMatchedData"],[4,"SelectionCandidate"],[4,"EvaluationResult"],[3,"SelectionContext"],[3,"TraitObligationStack"],[4,"MethodMatchResult"],[3,"Elaborator"],[3,"FilterToTraits"],[3,"VtableImplData"],[3,"VtableObjectData"],[3,"Obligation"],[4,"Vtable"],[3,"VtableBuiltinData"],[3,"VtableDefaultImplData"],[4,"SelectionError"],[3,"FulfillmentError"],[4,"FulfillmentErrorCode"],[3,"ObligationCause"],[4,"ObligationCauseCode"],[3,"DerivedObligationCause"],[3,"field"],[4,"ImplOrTraitItemContainer"],[4,"ImplOrTraitItem"],[4,"ImplOrTraitItemId"],[3,"Method"],[3,"AssociatedType"],[3,"mt"],[3,"field_ty"],[3,"creader_cache_key"],[3,"ItemVariances"],[4,"Variance"],[4,"AutoAdjustment"],[4,"UnsizeKind"],[3,"AutoDerefRef"],[4,"AutoRef"],[3,"param_index"],[3,"MethodParam"],[3,"MethodObject"],[3,"MethodCallee"],[3,"MethodCall"],[4,"ExprAdjustment"],[4,"vtable_origin"],[3,"CtxtArenas"],[3,"TypeFlags"],[3,"ctxt"],[3,"TyS"],[3,"InternedTy"],[3,"BareFnTy"],[3,"ClosureTy"],[4,"FnOutput"],[3,"ParamTy"],[3,"DebruijnIndex"],[3,"UpvarId"],[4,"BorrowKind"],[4,"sty"],[3,"TyTrait"],[4,"terr_vstore_kind"],[3,"expected_found"],[4,"type_err"],[3,"ParamBounds"],[3,"ExistentialBounds"],[4,"BuiltinBound"],[3,"TyVid"],[3,"RegionVid"],[4,"InferTy"],[4,"UnconstrainedNumeric"],[4,"InferRegion"],[4,"ObjectLifetimeDefault"],[3,"TypeParameterDef"],[3,"RegionParameterDef"],[3,"Generics"],[3,"GenericPredicates"],[4,"Predicate"],[3,"TraitPredicate"],[3,"EquatePredicate"],[3,"OutlivesPredicate"],[3,"ProjectionTy"],[3,"InstantiatedPredicates"],[3,"ParameterEnvironment"],[3,"TypeScheme"],[3,"ItemSubsts"],[3,"TypeContents"],[4,"Representability"],[3,"VariantInfo"],[4,"DtorKind"],[3,"ClosureUpvar"],[4,"ExplicitSelfCategory"],[3,"Vec"],[3,"Box"],[3,"OwnedSlice"],[3,"EnumSet"],[3,"BottomUpFolder"],[3,"RegionFolder"],[3,"RegionEraser"],[3,"TypeWalker"],[3,"Context"],[4,"astencode_tag"],[3,"LinkMeta"],[4,"DefIdSource"],[3,"entry"],[3,"EncodeVisitor"],[3,"ImplVisitor"],[4,"Family"],[4,"DefLike"],[3,"CrateDep"],[3,"CrateReader"],[4,"PMDSource"],[4,"LinkagePreference"],[4,"NativeLibraryKind"],[3,"CrateSource"],[3,"CStore"],[3,"crate_metadata"],[4,"MetadataBlob"],[3,"Context"],[3,"ArchiveMetadata"],[3,"FileSearch"],[3,"MacroLoader"],[4,"OptLevel"],[4,"DebugInfoLevel"],[4,"OutputType"],[3,"Options"],[4,"UnstableFeatures"],[4,"PrintRequest"],[4,"Input"],[3,"OutputFilenames"],[4,"EntryFnType"],[4,"CrateType"],[4,"Passes"],[3,"CodegenOptions"],[3,"DebuggingOptions"],[4,"OptionStability"],[3,"RustcOptGroup"],[3,"SearchPaths"],[4,"PathKind"],[3,"Iter"],[3,"Session"],[3,"Registry"],[3,"RegistrarFinder"],[3,"Lint"],[3,"LintId"],[4,"Level"],[4,"LintSource"],[3,"HardwiredLints"],[3,"LintStore"],[3,"Context"],[3,"GatherNodeLevels"],[3,"ErrorReported"],[3,"Indenter"],[3,"LoopQueryVisitor"],[3,"BlockQueryVisitor"],[3,"P"],[3,"TraitDef"],[4,"TraitItem"],[3,"Path"],[3,"Ty"],[3,"Item"],[3,"Lifetime"],[3,"Spanned"],[4,"ExplicitSelf_"],[4,"Visibility"],[4,"Abi"],[4,"Mutability"],[4,"IntTy"],[4,"UintTy"],[3,"HashMap"],[3,"FnvHasher"],[3,"SnapshotVec"],[3,"FixedBuffer64"],[3,"Sha256"],[3,"ArchiveRO"],[4,"OptimizationDiagnosticKind"],[4,"Diagnostic"],[4,"CallConv"],[4,"DiagnosticSeverity"],[3,"Attribute"],[4,"OtherAttribute"],[4,"SpecialAttribute"],[3,"AttrBuilder"],[4,"TypeKind"],[4,"CodeGenOptLevel"],[4,"RelocMode"],[3,"TargetData"],[3,"ObjectFile"],[3,"SectionIter"],[3,"Config"],[3,"ctxt"],[4,"InlinedItemRef"],[3,"EncodeParams"],[3,"ImportedFileMap"],[3,"MethodInfo"],[4,"FoundAst"],[3,"Library"],[3,"CratePaths"],[4,"FileMatch"],[8,"vtable_decoder_helpers"],[3,"CFGEdgeData"],[8,"BitwiseOperator"],[8,"DataFlowOperator"],[3,"Export"],[8,"Delegate"],[3,"Node"],[8,"Combine"],[8,"Combineable"],[8,"ErrorReporting"],[8,"Resolvable"],[8,"LatticeDir"],[8,"UnifyKey"],[3,"Node"],[8,"SimplyUnifiable"],[8,"InferCtxtMethodsForSimplyUnifiableTypes"],[4,"deref_kind"],[8,"ast_node"],[8,"Typer"],[4,"InteriorSafety"],[4,"AliasableReason"],[3,"SeparateVecsPerParamSpace"],[8,"Subst"],[4,"OrphanCheckErr"],[3,"CrateAnalysis"],[3,"CommonTypes"],[8,"ToPolyTraitRef"],[8,"AsPredicate"],[8,"ClosureTyper"],[4,"ExprKind"],[4,"CopyImplementationError"],[8,"RegionEscape"],[8,"HasProjectionTypes"],[8,"ReferencesError"],[8,"TypeFoldable"],[8,"TypeFolder"],[8,"LintPass"],[3,"PluginRegistrar"],[8,"Repr"],[8,"UserString"],[4,"UndoLog"],[8,"SnapshotVecDelegate"],[8,"Digest"],[3,"TempDir"],[4,"Arch"],[3,"Target"],[3,"TargetOptions"],[3,"ArchiveConfig"],[3,"RPathConfig"],[3,"t"],[4,"OutputType"],[3,"ModuleTranslation"],[3,"CrateTranslation"],[3,"CrateContext"],[6,"ValueRef"],[3,"OptimizationDiagnostic"],[3,"InlineAsmDiagnostic"],[4,"Visibility"],[4,"Linkage"],[4,"AttributeSet"],[8,"AttrHelper"],[4,"IntPredicate"],[4,"RealPredicate"],[4,"AtomicBinOp"],[4,"AtomicOrdering"],[4,"FileType"],[4,"MetadataType"],[4,"AsmDialect"],[4,"CodeGenModel"],[4,"DiagnosticKind"],[4,"DIDescriptorFlags"]]};
searchIndex['rustc'] = {"items":[[0,"","rustc","The Rust compiler."],[0,"llvm","",""],[0,"archive_ro","rustc::llvm","A wrapper around LLVM's archive (.a) code"],[11,"open","rustc_llvm::archive_ro","Opens a static archive for read-only purposes. This is more optimized\nthan the `open` method because it uses LLVM's internal `Archive` class\nrather than shelling out to `ar` for everything.",0],[11,"read","","Reads a file in the archive",0],[11,"drop","","",0],[11,"describe","rustc_llvm::diagnostic","",1],[11,"unpack","","",2],[11,"eq","rustc_llvm","",3],[11,"ne","","",3],[11,"fmt","","",4],[11,"hash","","",5],[11,"cmp","","",5],[11,"partial_cmp","","",5],[11,"lt","","",5],[11,"le","","",5],[11,"gt","","",5],[11,"ge","","",5],[11,"clone","","",5],[11,"eq","","",5],[11,"ne","","",5],[11,"empty","","Returns an empty set of flags.",5],[11,"all","","Returns the set containing all flags.",5],[11,"bits","","Returns the raw value of the flags currently stored.",5],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",5],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",5],[11,"is_empty","","Returns `true` if no flags are currently stored.",5],[11,"is_all","","Returns `true` if all flags are currently set.",5],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",5],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",5],[11,"insert","","Inserts the specified flags in-place.",5],[11,"remove","","Removes the specified flags in-place.",5],[11,"toggle","","Toggles the specified flags in-place.",5],[6,"Output","rustc::llvm::archive_ro",""],[11,"bitor","rustc_llvm","Returns the union of the two sets of flags.",5],[6,"Output","rustc::llvm::archive_ro",""],[11,"bitxor","rustc_llvm","Returns the left flags, but with all the right flags toggled.",5],[6,"Output","rustc::llvm::archive_ro",""],[11,"bitand","rustc_llvm","Returns the intersection between the two sets of flags.",5],[6,"Output","rustc::llvm::archive_ro",""],[11,"sub","rustc_llvm","Returns the set difference of the two sets of flags.",5],[6,"Output","rustc::llvm::archive_ro",""],[11,"not","rustc_llvm","Returns the complement of this set of flags.",5],[11,"apply_llfn","","",5],[11,"apply_callsite","","",5],[11,"apply_llfn","","",6],[11,"apply_callsite","","",6],[11,"apply_llfn","","",7],[11,"apply_callsite","","",7],[11,"new","","",8],[11,"arg","","",8],[11,"ret","","",8],[11,"apply_llfn","","",8],[11,"apply_callsite","","",8],[11,"fmt","","",9],[11,"eq","","",9],[11,"ne","","",9],[11,"clone","","",10],[11,"eq","","",10],[11,"ne","","",10],[11,"eq","","",11],[11,"ne","","",11],[11,"drop","","",12],[11,"new","","",13],[11,"drop","","",13],[11,"drop","","",14],[3,"ArchiveRO","rustc::llvm::archive_ro",""],[0,"diagnostic","rustc::llvm","LLVM diagnostic reports."],[4,"OptimizationDiagnosticKind","rustc::llvm::diagnostic",""],[13,"OptimizationRemark","","",1],[13,"OptimizationMissed","","",1],[13,"OptimizationAnalysis","","",1],[13,"OptimizationFailure","","",1],[3,"OptimizationDiagnostic","",""],[12,"kind","","",15],[12,"pass_name","","",15],[12,"function","","",15],[12,"debug_loc","","",15],[12,"message","","",15],[3,"InlineAsmDiagnostic","",""],[12,"cookie","","",16],[12,"message","","",16],[12,"instruction","","",16],[4,"Diagnostic","",""],[13,"Optimization","","",2],[13,"InlineAsm","","",2],[13,"UnknownDiagnostic","","LLVM has other types that we do not wrap here.",2],[6,"Opcode","rustc::llvm",""],[6,"Bool","",""],[17,"True","",""],[17,"False","",""],[4,"CallConv","",""],[13,"CCallConv","","",3],[13,"FastCallConv","","",3],[13,"ColdCallConv","","",3],[13,"X86StdcallCallConv","","",3],[13,"X86FastcallCallConv","","",3],[13,"X86_64_Win64","","",3],[4,"Visibility","",""],[13,"LLVMDefaultVisibility","","",17],[13,"HiddenVisibility","","",17],[13,"ProtectedVisibility","","",17],[4,"Linkage","",""],[13,"ExternalLinkage","","",18],[13,"AvailableExternallyLinkage","","",18],[13,"LinkOnceAnyLinkage","","",18],[13,"LinkOnceODRLinkage","","",18],[13,"WeakAnyLinkage","","",18],[13,"WeakODRLinkage","","",18],[13,"AppendingLinkage","","",18],[13,"InternalLinkage","","",18],[13,"PrivateLinkage","","",18],[13,"ExternalWeakLinkage","","",18],[13,"CommonLinkage","","",18],[4,"DiagnosticSeverity","",""],[13,"Error","","",4],[13,"Warning","","",4],[13,"Remark","","",4],[13,"Note","","",4],[3,"Attribute","",""],[17,"ZExtAttribute","",""],[17,"SExtAttribute","",""],[17,"NoReturnAttribute","",""],[17,"InRegAttribute","",""],[17,"StructRetAttribute","",""],[17,"NoUnwindAttribute","",""],[17,"NoAliasAttribute","",""],[17,"ByValAttribute","",""],[17,"NestAttribute","",""],[17,"ReadNoneAttribute","",""],[17,"ReadOnlyAttribute","",""],[17,"NoInlineAttribute","",""],[17,"AlwaysInlineAttribute","",""],[17,"OptimizeForSizeAttribute","",""],[17,"StackProtectAttribute","",""],[17,"StackProtectReqAttribute","",""],[17,"AlignmentAttribute","",""],[17,"NoCaptureAttribute","",""],[17,"NoRedZoneAttribute","",""],[17,"NoImplicitFloatAttribute","",""],[17,"NakedAttribute","",""],[17,"InlineHintAttribute","",""],[17,"StackAttribute","",""],[17,"ReturnsTwiceAttribute","",""],[17,"UWTableAttribute","",""],[17,"NonLazyBindAttribute","",""],[4,"OtherAttribute","",""],[13,"SanitizeAddressAttribute","","",6],[13,"MinSizeAttribute","","",6],[13,"NoDuplicateAttribute","","",6],[13,"StackProtectStrongAttribute","","",6],[13,"SanitizeThreadAttribute","","",6],[13,"SanitizeMemoryAttribute","","",6],[13,"NoBuiltinAttribute","","",6],[13,"ReturnedAttribute","","",6],[13,"ColdAttribute","","",6],[13,"BuiltinAttribute","","",6],[13,"OptimizeNoneAttribute","","",6],[13,"InAllocaAttribute","","",6],[13,"NonNullAttribute","","",6],[4,"SpecialAttribute","",""],[13,"DereferenceableAttribute","","",7],[4,"AttributeSet","",""],[13,"ReturnIndex","","",19],[13,"FunctionIndex","","",19],[8,"AttrHelper","",""],[10,"apply_llfn","","",20],[10,"apply_callsite","","",20],[3,"AttrBuilder","",""],[4,"IntPredicate","",""],[13,"IntEQ","","",21],[13,"IntNE","","",21],[13,"IntUGT","","",21],[13,"IntUGE","","",21],[13,"IntULT","","",21],[13,"IntULE","","",21],[13,"IntSGT","","",21],[13,"IntSGE","","",21],[13,"IntSLT","","",21],[13,"IntSLE","","",21],[4,"RealPredicate","",""],[13,"RealPredicateFalse","","",22],[13,"RealOEQ","","",22],[13,"RealOGT","","",22],[13,"RealOGE","","",22],[13,"RealOLT","","",22],[13,"RealOLE","","",22],[13,"RealONE","","",22],[13,"RealORD","","",22],[13,"RealUNO","","",22],[13,"RealUEQ","","",22],[13,"RealUGT","","",22],[13,"RealUGE","","",22],[13,"RealULT","","",22],[13,"RealULE","","",22],[13,"RealUNE","","",22],[13,"RealPredicateTrue","","",22],[4,"TypeKind","",""],[13,"Void","","",9],[13,"Half","","",9],[13,"Float","","",9],[13,"Double","","",9],[13,"X86_FP80","","",9],[13,"FP128","","",9],[13,"PPC_FP128","","",9],[13,"Label","","",9],[13,"Integer","","",9],[13,"Function","","",9],[13,"Struct","","",9],[13,"Array","","",9],[13,"Pointer","","",9],[13,"Vector","","",9],[13,"Metadata","","",9],[13,"X86_MMX","","",9],[4,"AtomicBinOp","",""],[13,"AtomicXchg","","",23],[13,"AtomicAdd","","",23],[13,"AtomicSub","","",23],[13,"AtomicAnd","","",23],[13,"AtomicNand","","",23],[13,"AtomicOr","","",23],[13,"AtomicXor","","",23],[13,"AtomicMax","","",23],[13,"AtomicMin","","",23],[13,"AtomicUMax","","",23],[13,"AtomicUMin","","",23],[4,"AtomicOrdering","",""],[13,"NotAtomic","","",24],[13,"Unordered","","",24],[13,"Monotonic","","",24],[13,"Acquire","","",24],[13,"Release","","",24],[13,"AcquireRelease","","",24],[13,"SequentiallyConsistent","","",24],[4,"FileType","",""],[13,"AssemblyFileType","","",25],[13,"ObjectFileType","","",25],[4,"MetadataType","",""],[13,"MD_dbg","","",26],[13,"MD_tbaa","","",26],[13,"MD_prof","","",26],[13,"MD_fpmath","","",26],[13,"MD_range","","",26],[13,"MD_tbaa_struct","","",26],[13,"MD_invariant_load","","",26],[13,"MD_alias_scope","","",26],[13,"MD_noalias","","",26],[13,"MD_nontemporal","","",26],[13,"MD_mem_parallel_loop_access","","",26],[13,"MD_nonnull","","",26],[4,"AsmDialect","",""],[13,"AD_ATT","","",27],[13,"AD_Intel","","",27],[4,"CodeGenOptLevel","",""],[13,"CodeGenLevelNone","","",10],[13,"CodeGenLevelLess","","",10],[13,"CodeGenLevelDefault","","",10],[13,"CodeGenLevelAggressive","","",10],[4,"RelocMode","",""],[13,"RelocDefault","","",11],[13,"RelocStatic","","",11],[13,"RelocPIC","","",11],[13,"RelocDynamicNoPic","","",11],[4,"CodeGenModel","",""],[13,"CodeModelDefault","","",28],[13,"CodeModelJITDefault","","",28],[13,"CodeModelSmall","","",28],[13,"CodeModelKernel","","",28],[13,"CodeModelMedium","","",28],[13,"CodeModelLarge","","",28],[4,"DiagnosticKind","",""],[13,"DK_InlineAsm","","",29],[13,"DK_StackSize","","",29],[13,"DK_DebugMetadataVersion","","",29],[13,"DK_SampleProfile","","",29],[13,"DK_OptimizationRemark","","",29],[13,"DK_OptimizationRemarkMissed","","",29],[13,"DK_OptimizationRemarkAnalysis","","",29],[13,"DK_OptimizationFailure","","",29],[4,"Module_opaque","",""],[6,"ModuleRef","",""],[4,"Context_opaque","",""],[6,"ContextRef","",""],[4,"Type_opaque","",""],[6,"TypeRef","",""],[4,"Value_opaque","",""],[6,"ValueRef","",""],[4,"Metadata_opaque","",""],[6,"MetadataRef","",""],[4,"BasicBlock_opaque","",""],[6,"BasicBlockRef","",""],[4,"Builder_opaque","",""],[6,"BuilderRef","",""],[4,"ExecutionEngine_opaque","",""],[6,"ExecutionEngineRef","",""],[4,"RustJITMemoryManager_opaque","",""],[6,"RustJITMemoryManagerRef","",""],[4,"MemoryBuffer_opaque","",""],[6,"MemoryBufferRef","",""],[4,"PassManager_opaque","",""],[6,"PassManagerRef","",""],[4,"PassManagerBuilder_opaque","",""],[6,"PassManagerBuilderRef","",""],[4,"Use_opaque","",""],[6,"UseRef","",""],[4,"TargetData_opaque","",""],[6,"TargetDataRef","",""],[4,"ObjectFile_opaque","",""],[6,"ObjectFileRef","",""],[4,"SectionIterator_opaque","",""],[6,"SectionIteratorRef","",""],[4,"Pass_opaque","",""],[6,"PassRef","",""],[4,"TargetMachine_opaque","",""],[6,"TargetMachineRef","",""],[4,"Archive_opaque","",""],[6,"ArchiveRef","",""],[4,"Twine_opaque","",""],[6,"TwineRef","",""],[4,"DiagnosticInfo_opaque","",""],[6,"DiagnosticInfoRef","",""],[4,"DebugLoc_opaque","",""],[6,"DebugLocRef","",""],[4,"SMDiagnostic_opaque","",""],[6,"SMDiagnosticRef","",""],[6,"DiagnosticHandler","",""],[6,"InlineAsmDiagHandler","",""],[0,"debuginfo","",""],[4,"DIBuilder_opaque","rustc::llvm::debuginfo",""],[6,"DIBuilderRef","",""],[6,"DIDescriptor","",""],[6,"DIScope","",""],[6,"DILocation","",""],[6,"DIFile","",""],[6,"DILexicalBlock","",""],[6,"DISubprogram","",""],[6,"DINameSpace","",""],[6,"DIType","",""],[6,"DIBasicType","",""],[6,"DIDerivedType","",""],[6,"DICompositeType","",""],[6,"DIVariable","",""],[6,"DIGlobalVariable","",""],[6,"DIArray","",""],[6,"DISubrange","",""],[6,"DIEnumerator","",""],[6,"DITemplateTypeParameter","",""],[4,"DIDescriptorFlags","",""],[13,"FlagPrivate","","",30],[13,"FlagProtected","","",30],[13,"FlagFwdDecl","","",30],[13,"FlagAppleBlock","","",30],[13,"FlagBlockByrefStruct","","",30],[13,"FlagVirtual","","",30],[13,"FlagArtificial","","",30],[13,"FlagExplicit","","",30],[13,"FlagPrototyped","","",30],[13,"FlagObjcClassComplete","","",30],[13,"FlagObjectPointer","","",30],[13,"FlagVector","","",30],[13,"FlagStaticMember","","",30],[13,"FlagIndirectVariable","","",30],[13,"FlagLValueReference","","",30],[13,"FlagRValueReference","","",30],[5,"LLVMContextCreate","rustc::llvm",""],[5,"LLVMContextDispose","",""],[5,"LLVMGetMDKindIDInContext","",""],[5,"LLVMModuleCreateWithNameInContext","",""],[5,"LLVMGetModuleContext","",""],[5,"LLVMDisposeModule","",""],[5,"LLVMGetDataLayout","","Data layout. See Module::getDataLayout."],[5,"LLVMSetDataLayout","",""],[5,"LLVMGetTarget","","Target triple. See Module::getTargetTriple."],[5,"LLVMSetTarget","",""],[5,"LLVMDumpModule","","See Module::dump."],[5,"LLVMSetModuleInlineAsm","","See Module::setModuleInlineAsm."],[5,"LLVMGetTypeKind","","See llvm::LLVMTypeKind::getTypeID."],[5,"LLVMGetTypeContext","","See llvm::LLVMType::getContext."],[5,"LLVMInt1TypeInContext","",""],[5,"LLVMInt8TypeInContext","",""],[5,"LLVMInt16TypeInContext","",""],[5,"LLVMInt32TypeInContext","",""],[5,"LLVMInt64TypeInContext","",""],[5,"LLVMIntTypeInContext","",""],[5,"LLVMGetIntTypeWidth","",""],[5,"LLVMFloatTypeInContext","",""],[5,"LLVMDoubleTypeInContext","",""],[5,"LLVMX86FP80TypeInContext","",""],[5,"LLVMFP128TypeInContext","",""],[5,"LLVMPPCFP128TypeInContext","",""],[5,"LLVMFunctionType","",""],[5,"LLVMIsFunctionVarArg","",""],[5,"LLVMGetReturnType","",""],[5,"LLVMCountParamTypes","",""],[5,"LLVMGetParamTypes","",""],[5,"LLVMStructTypeInContext","",""],[5,"LLVMCountStructElementTypes","",""],[5,"LLVMGetStructElementTypes","",""],[5,"LLVMIsPackedStruct","",""],[5,"LLVMRustArrayType","",""],[5,"LLVMPointerType","",""],[5,"LLVMVectorType","",""],[5,"LLVMGetElementType","",""],[5,"LLVMGetArrayLength","",""],[5,"LLVMGetPointerAddressSpace","",""],[5,"LLVMGetPointerToGlobal","",""],[5,"LLVMGetVectorSize","",""],[5,"LLVMVoidTypeInContext","",""],[5,"LLVMLabelTypeInContext","",""],[5,"LLVMMetadataTypeInContext","",""],[5,"LLVMTypeOf","",""],[5,"LLVMGetValueName","",""],[5,"LLVMSetValueName","",""],[5,"LLVMDumpValue","",""],[5,"LLVMReplaceAllUsesWith","",""],[5,"LLVMHasMetadata","",""],[5,"LLVMGetMetadata","",""],[5,"LLVMSetMetadata","",""],[5,"LLVMGetFirstUse","",""],[5,"LLVMGetNextUse","",""],[5,"LLVMGetUser","",""],[5,"LLVMGetUsedValue","",""],[5,"LLVMGetNumOperands","",""],[5,"LLVMGetOperand","",""],[5,"LLVMSetOperand","",""],[5,"LLVMConstNull","",""],[5,"LLVMConstAllOnes","",""],[5,"LLVMConstICmp","",""],[5,"LLVMConstFCmp","",""],[5,"LLVMGetUndef","",""],[5,"LLVMIsConstant","",""],[5,"LLVMIsNull","",""],[5,"LLVMIsUndef","",""],[5,"LLVMConstPointerNull","",""],[5,"LLVMMDStringInContext","",""],[5,"LLVMMDNodeInContext","",""],[5,"LLVMAddNamedMetadataOperand","",""],[5,"LLVMConstInt","",""],[5,"LLVMConstIntOfString","",""],[5,"LLVMConstIntOfStringAndSize","",""],[5,"LLVMConstReal","",""],[5,"LLVMConstRealOfString","",""],[5,"LLVMConstRealOfStringAndSize","",""],[5,"LLVMConstIntGetZExtValue","",""],[5,"LLVMConstIntGetSExtValue","",""],[5,"LLVMConstStringInContext","",""],[5,"LLVMConstStructInContext","",""],[5,"LLVMConstArray","",""],[5,"LLVMConstVector","",""],[5,"LLVMAlignOf","",""],[5,"LLVMSizeOf","",""],[5,"LLVMConstNeg","",""],[5,"LLVMConstNSWNeg","",""],[5,"LLVMConstNUWNeg","",""],[5,"LLVMConstFNeg","",""],[5,"LLVMConstNot","",""],[5,"LLVMConstAdd","",""],[5,"LLVMConstNSWAdd","",""],[5,"LLVMConstNUWAdd","",""],[5,"LLVMConstFAdd","",""],[5,"LLVMConstSub","",""],[5,"LLVMConstNSWSub","",""],[5,"LLVMConstNUWSub","",""],[5,"LLVMConstFSub","",""],[5,"LLVMConstMul","",""],[5,"LLVMConstNSWMul","",""],[5,"LLVMConstNUWMul","",""],[5,"LLVMConstFMul","",""],[5,"LLVMConstUDiv","",""],[5,"LLVMConstSDiv","",""],[5,"LLVMConstExactSDiv","",""],[5,"LLVMConstFDiv","",""],[5,"LLVMConstURem","",""],[5,"LLVMConstSRem","",""],[5,"LLVMConstFRem","",""],[5,"LLVMConstAnd","",""],[5,"LLVMConstOr","",""],[5,"LLVMConstXor","",""],[5,"LLVMConstShl","",""],[5,"LLVMConstLShr","",""],[5,"LLVMConstAShr","",""],[5,"LLVMConstGEP","",""],[5,"LLVMConstInBoundsGEP","",""],[5,"LLVMConstTrunc","",""],[5,"LLVMConstSExt","",""],[5,"LLVMConstZExt","",""],[5,"LLVMConstFPTrunc","",""],[5,"LLVMConstFPExt","",""],[5,"LLVMConstUIToFP","",""],[5,"LLVMConstSIToFP","",""],[5,"LLVMConstFPToUI","",""],[5,"LLVMConstFPToSI","",""],[5,"LLVMConstPtrToInt","",""],[5,"LLVMConstIntToPtr","",""],[5,"LLVMConstBitCast","",""],[5,"LLVMConstZExtOrBitCast","",""],[5,"LLVMConstSExtOrBitCast","",""],[5,"LLVMConstTruncOrBitCast","",""],[5,"LLVMConstPointerCast","",""],[5,"LLVMConstIntCast","",""],[5,"LLVMConstFPCast","",""],[5,"LLVMConstSelect","",""],[5,"LLVMConstExtractElement","",""],[5,"LLVMConstInsertElement","",""],[5,"LLVMConstShuffleVector","",""],[5,"LLVMConstExtractValue","",""],[5,"LLVMConstInsertValue","",""],[5,"LLVMConstInlineAsm","",""],[5,"LLVMBlockAddress","",""],[5,"LLVMGetGlobalParent","",""],[5,"LLVMIsDeclaration","",""],[5,"LLVMGetLinkage","",""],[5,"LLVMSetLinkage","",""],[5,"LLVMGetSection","",""],[5,"LLVMSetSection","",""],[5,"LLVMGetVisibility","",""],[5,"LLVMSetVisibility","",""],[5,"LLVMGetAlignment","",""],[5,"LLVMSetAlignment","",""],[5,"LLVMIsAGlobalVariable","",""],[5,"LLVMAddGlobal","",""],[5,"LLVMAddGlobalInAddressSpace","",""],[5,"LLVMGetNamedGlobal","",""],[5,"LLVMGetFirstGlobal","",""],[5,"LLVMGetLastGlobal","",""],[5,"LLVMGetNextGlobal","",""],[5,"LLVMGetPreviousGlobal","",""],[5,"LLVMDeleteGlobal","",""],[5,"LLVMGetInitializer","",""],[5,"LLVMSetInitializer","",""],[5,"LLVMIsThreadLocal","",""],[5,"LLVMSetThreadLocal","",""],[5,"LLVMIsGlobalConstant","",""],[5,"LLVMSetGlobalConstant","",""],[5,"LLVMAddAlias","",""],[5,"LLVMAddFunction","",""],[5,"LLVMGetNamedFunction","",""],[5,"LLVMGetFirstFunction","",""],[5,"LLVMGetLastFunction","",""],[5,"LLVMGetNextFunction","",""],[5,"LLVMGetPreviousFunction","",""],[5,"LLVMDeleteFunction","",""],[5,"LLVMGetOrInsertFunction","",""],[5,"LLVMGetIntrinsicID","",""],[5,"LLVMGetFunctionCallConv","",""],[5,"LLVMSetFunctionCallConv","",""],[5,"LLVMGetGC","",""],[5,"LLVMSetGC","",""],[5,"LLVMAddDereferenceableAttr","",""],[5,"LLVMAddFunctionAttribute","",""],[5,"LLVMAddFunctionAttrString","",""],[5,"LLVMRemoveFunctionAttrString","",""],[5,"LLVMGetFunctionAttr","",""],[5,"LLVMCountParams","",""],[5,"LLVMGetParams","",""],[5,"LLVMGetParam","",""],[5,"LLVMGetParamParent","",""],[5,"LLVMGetFirstParam","",""],[5,"LLVMGetLastParam","",""],[5,"LLVMGetNextParam","",""],[5,"LLVMGetPreviousParam","",""],[5,"LLVMAddAttribute","",""],[5,"LLVMRemoveAttribute","",""],[5,"LLVMGetAttribute","",""],[5,"LLVMSetParamAlignment","",""],[5,"LLVMBasicBlockAsValue","",""],[5,"LLVMValueIsBasicBlock","",""],[5,"LLVMValueAsBasicBlock","",""],[5,"LLVMGetBasicBlockParent","",""],[5,"LLVMCountBasicBlocks","",""],[5,"LLVMGetBasicBlocks","",""],[5,"LLVMGetFirstBasicBlock","",""],[5,"LLVMGetLastBasicBlock","",""],[5,"LLVMGetNextBasicBlock","",""],[5,"LLVMGetPreviousBasicBlock","",""],[5,"LLVMGetEntryBasicBlock","",""],[5,"LLVMAppendBasicBlockInContext","",""],[5,"LLVMInsertBasicBlockInContext","",""],[5,"LLVMDeleteBasicBlock","",""],[5,"LLVMMoveBasicBlockAfter","",""],[5,"LLVMMoveBasicBlockBefore","",""],[5,"LLVMGetInstructionParent","",""],[5,"LLVMGetFirstInstruction","",""],[5,"LLVMGetLastInstruction","",""],[5,"LLVMGetNextInstruction","",""],[5,"LLVMGetPreviousInstruction","",""],[5,"LLVMInstructionEraseFromParent","",""],[5,"LLVMSetInstructionCallConv","",""],[5,"LLVMGetInstructionCallConv","",""],[5,"LLVMAddInstrAttribute","",""],[5,"LLVMRemoveInstrAttribute","",""],[5,"LLVMSetInstrParamAlignment","",""],[5,"LLVMAddCallSiteAttribute","",""],[5,"LLVMAddDereferenceableCallSiteAttr","",""],[5,"LLVMIsTailCall","",""],[5,"LLVMSetTailCall","",""],[5,"LLVMGetVolatile","",""],[5,"LLVMSetVolatile","",""],[5,"LLVMAddIncoming","",""],[5,"LLVMCountIncoming","",""],[5,"LLVMGetIncomingValue","",""],[5,"LLVMGetIncomingBlock","",""],[5,"LLVMCreateBuilderInContext","",""],[5,"LLVMPositionBuilder","",""],[5,"LLVMPositionBuilderBefore","",""],[5,"LLVMPositionBuilderAtEnd","",""],[5,"LLVMGetInsertBlock","",""],[5,"LLVMClearInsertionPosition","",""],[5,"LLVMInsertIntoBuilder","",""],[5,"LLVMInsertIntoBuilderWithName","",""],[5,"LLVMDisposeBuilder","",""],[5,"LLVMRustCreateJITMemoryManager","",""],[5,"LLVMBuildExecutionEngine","",""],[5,"LLVMDisposeExecutionEngine","",""],[5,"LLVMExecutionEngineFinalizeObject","",""],[5,"LLVMRustLoadDynamicLibrary","",""],[5,"LLVMExecutionEngineAddModule","",""],[5,"LLVMExecutionEngineRemoveModule","",""],[5,"LLVMSetCurrentDebugLocation","",""],[5,"LLVMGetCurrentDebugLocation","",""],[5,"LLVMSetInstDebugLocation","",""],[5,"LLVMBuildRetVoid","",""],[5,"LLVMBuildRet","",""],[5,"LLVMBuildAggregateRet","",""],[5,"LLVMBuildBr","",""],[5,"LLVMBuildCondBr","",""],[5,"LLVMBuildSwitch","",""],[5,"LLVMBuildIndirectBr","",""],[5,"LLVMBuildInvoke","",""],[5,"LLVMBuildLandingPad","",""],[5,"LLVMBuildResume","",""],[5,"LLVMBuildUnreachable","",""],[5,"LLVMAddCase","",""],[5,"LLVMAddDestination","",""],[5,"LLVMAddClause","",""],[5,"LLVMSetCleanup","",""],[5,"LLVMBuildAdd","",""],[5,"LLVMBuildNSWAdd","",""],[5,"LLVMBuildNUWAdd","",""],[5,"LLVMBuildFAdd","",""],[5,"LLVMBuildSub","",""],[5,"LLVMBuildNSWSub","",""],[5,"LLVMBuildNUWSub","",""],[5,"LLVMBuildFSub","",""],[5,"LLVMBuildMul","",""],[5,"LLVMBuildNSWMul","",""],[5,"LLVMBuildNUWMul","",""],[5,"LLVMBuildFMul","",""],[5,"LLVMBuildUDiv","",""],[5,"LLVMBuildSDiv","",""],[5,"LLVMBuildExactSDiv","",""],[5,"LLVMBuildFDiv","",""],[5,"LLVMBuildURem","",""],[5,"LLVMBuildSRem","",""],[5,"LLVMBuildFRem","",""],[5,"LLVMBuildShl","",""],[5,"LLVMBuildLShr","",""],[5,"LLVMBuildAShr","",""],[5,"LLVMBuildAnd","",""],[5,"LLVMBuildOr","",""],[5,"LLVMBuildXor","",""],[5,"LLVMBuildBinOp","",""],[5,"LLVMBuildNeg","",""],[5,"LLVMBuildNSWNeg","",""],[5,"LLVMBuildNUWNeg","",""],[5,"LLVMBuildFNeg","",""],[5,"LLVMBuildNot","",""],[5,"LLVMBuildMalloc","",""],[5,"LLVMBuildArrayMalloc","",""],[5,"LLVMBuildAlloca","",""],[5,"LLVMBuildArrayAlloca","",""],[5,"LLVMBuildFree","",""],[5,"LLVMBuildLoad","",""],[5,"LLVMBuildStore","",""],[5,"LLVMBuildGEP","",""],[5,"LLVMBuildInBoundsGEP","",""],[5,"LLVMBuildStructGEP","",""],[5,"LLVMBuildGlobalString","",""],[5,"LLVMBuildGlobalStringPtr","",""],[5,"LLVMBuildTrunc","",""],[5,"LLVMBuildZExt","",""],[5,"LLVMBuildSExt","",""],[5,"LLVMBuildFPToUI","",""],[5,"LLVMBuildFPToSI","",""],[5,"LLVMBuildUIToFP","",""],[5,"LLVMBuildSIToFP","",""],[5,"LLVMBuildFPTrunc","",""],[5,"LLVMBuildFPExt","",""],[5,"LLVMBuildPtrToInt","",""],[5,"LLVMBuildIntToPtr","",""],[5,"LLVMBuildBitCast","",""],[5,"LLVMBuildZExtOrBitCast","",""],[5,"LLVMBuildSExtOrBitCast","",""],[5,"LLVMBuildTruncOrBitCast","",""],[5,"LLVMBuildCast","",""],[5,"LLVMBuildPointerCast","",""],[5,"LLVMBuildIntCast","",""],[5,"LLVMBuildFPCast","",""],[5,"LLVMBuildICmp","",""],[5,"LLVMBuildFCmp","",""],[5,"LLVMBuildPhi","",""],[5,"LLVMBuildCall","",""],[5,"LLVMBuildSelect","",""],[5,"LLVMBuildVAArg","",""],[5,"LLVMBuildExtractElement","",""],[5,"LLVMBuildInsertElement","",""],[5,"LLVMBuildShuffleVector","",""],[5,"LLVMBuildExtractValue","",""],[5,"LLVMBuildInsertValue","",""],[5,"LLVMBuildIsNull","",""],[5,"LLVMBuildIsNotNull","",""],[5,"LLVMBuildPtrDiff","",""],[5,"LLVMBuildAtomicLoad","",""],[5,"LLVMBuildAtomicStore","",""],[5,"LLVMBuildAtomicCmpXchg","",""],[5,"LLVMBuildAtomicRMW","",""],[5,"LLVMBuildAtomicFence","",""],[5,"LLVMIsATerminatorInst","",""],[5,"LLVMIsAStoreInst","",""],[5,"LLVMWriteBitcodeToFile","","Writes a module to the specified path. Returns 0 on success."],[5,"LLVMCreateTargetData","","Creates target data from a target layout string."],[5,"LLVMAddTargetData","","Adds the target data to the given pass manager. The pass manager\nreferences the target data only weakly."],[5,"LLVMStoreSizeOfType","","Number of bytes clobbered when doing a Store to *T."],[5,"LLVMSizeOfTypeInBits","","Number of bytes clobbered when doing a Store to *T."],[5,"LLVMABISizeOfType","","Distance between successive elements in an array of T. Includes ABI padding."],[5,"LLVMPreferredAlignmentOfType","","Returns the preferred alignment of a type."],[5,"LLVMABIAlignmentOfType","","Returns the minimum alignment of a type."],[5,"LLVMOffsetOfElement","","Computes the byte offset of the indexed struct element for a\ntarget."],[5,"LLVMCallFrameAlignmentOfType","","Returns the minimum alignment of a type when part of a call frame."],[5,"LLVMDisposeTargetData","","Disposes target data."],[5,"LLVMCreatePassManager","","Creates a pass manager."],[5,"LLVMCreateFunctionPassManagerForModule","","Creates a function-by-function pass manager"],[5,"LLVMDisposePassManager","","Disposes a pass manager."],[5,"LLVMRunPassManager","","Runs a pass manager on a module."],[5,"LLVMRunFunctionPassManager","","Runs the function passes on the provided function."],[5,"LLVMInitializeFunctionPassManager","","Initializes all the function passes scheduled in the manager"],[5,"LLVMFinalizeFunctionPassManager","","Finalizes all the function passes scheduled in the manager"],[5,"LLVMInitializePasses","",""],[5,"LLVMAddVerifierPass","","Adds a verification pass."],[5,"LLVMAddGlobalOptimizerPass","",""],[5,"LLVMAddIPSCCPPass","",""],[5,"LLVMAddDeadArgEliminationPass","",""],[5,"LLVMAddInstructionCombiningPass","",""],[5,"LLVMAddCFGSimplificationPass","",""],[5,"LLVMAddFunctionInliningPass","",""],[5,"LLVMAddFunctionAttrsPass","",""],[5,"LLVMAddScalarReplAggregatesPass","",""],[5,"LLVMAddScalarReplAggregatesPassSSA","",""],[5,"LLVMAddJumpThreadingPass","",""],[5,"LLVMAddConstantPropagationPass","",""],[5,"LLVMAddReassociatePass","",""],[5,"LLVMAddLoopRotatePass","",""],[5,"LLVMAddLICMPass","",""],[5,"LLVMAddLoopUnswitchPass","",""],[5,"LLVMAddLoopDeletionPass","",""],[5,"LLVMAddLoopUnrollPass","",""],[5,"LLVMAddGVNPass","",""],[5,"LLVMAddMemCpyOptPass","",""],[5,"LLVMAddSCCPPass","",""],[5,"LLVMAddDeadStoreEliminationPass","",""],[5,"LLVMAddStripDeadPrototypesPass","",""],[5,"LLVMAddConstantMergePass","",""],[5,"LLVMAddArgumentPromotionPass","",""],[5,"LLVMAddTailCallEliminationPass","",""],[5,"LLVMAddIndVarSimplifyPass","",""],[5,"LLVMAddAggressiveDCEPass","",""],[5,"LLVMAddGlobalDCEPass","",""],[5,"LLVMAddCorrelatedValuePropagationPass","",""],[5,"LLVMAddPruneEHPass","",""],[5,"LLVMAddSimplifyLibCallsPass","",""],[5,"LLVMAddLoopIdiomPass","",""],[5,"LLVMAddEarlyCSEPass","",""],[5,"LLVMAddTypeBasedAliasAnalysisPass","",""],[5,"LLVMAddBasicAliasAnalysisPass","",""],[5,"LLVMPassManagerBuilderCreate","",""],[5,"LLVMPassManagerBuilderDispose","",""],[5,"LLVMPassManagerBuilderSetOptLevel","",""],[5,"LLVMPassManagerBuilderSetSizeLevel","",""],[5,"LLVMPassManagerBuilderSetDisableUnitAtATime","",""],[5,"LLVMPassManagerBuilderSetDisableUnrollLoops","",""],[5,"LLVMPassManagerBuilderSetDisableSimplifyLibCalls","",""],[5,"LLVMPassManagerBuilderUseInlinerWithThreshold","",""],[5,"LLVMPassManagerBuilderPopulateModulePassManager","",""],[5,"LLVMPassManagerBuilderPopulateFunctionPassManager","",""],[5,"LLVMPassManagerBuilderPopulateLTOPassManager","",""],[5,"LLVMDisposeMemoryBuffer","","Destroys a memory buffer."],[5,"LLVMCreateObjectFile","","Opens an object file."],[5,"LLVMDisposeObjectFile","","Closes an object file."],[5,"LLVMGetSections","","Enumerates the sections in an object file."],[5,"LLVMDisposeSectionIterator","","Destroys a section iterator."],[5,"LLVMIsSectionIteratorAtEnd","","Returns true if the section iterator is at the end of the section\nlist:"],[5,"LLVMMoveToNextSection","","Moves the section iterator to point to the next section."],[5,"LLVMGetSectionSize","","Returns the current section size."],[5,"LLVMGetSectionContents","","Returns the current section contents as a string buffer."],[5,"LLVMRustCreateMemoryBufferWithContentsOfFile","","Reads the given file and returns it as a memory buffer. Use\nLLVMDisposeMemoryBuffer() to get rid of it."],[5,"LLVMCreateMemoryBufferWithMemoryRange","","Borrows the contents of the memory buffer (doesn't copy it)"],[5,"LLVMCreateMemoryBufferWithMemoryRangeCopy","",""],[5,"LLVMIsMultithreaded","",""],[5,"LLVMStartMultithreaded","",""],[5,"LLVMRustGetLastError","","Returns a string describing the last error caused by an LLVMRust* call."],[5,"LLVMRustPrintPassTimings","","Print the pass timings since static dtors aren't picking them up."],[5,"LLVMStructCreateNamed","",""],[5,"LLVMStructSetBody","",""],[5,"LLVMConstNamedStruct","",""],[5,"LLVMSetDebug","","Enables LLVM debug output."],[5,"LLVMInlineAsm","","Prepares inline assembly."],[7,"LLVMRustDebugMetadataVersion","",""],[5,"LLVMRustAddModuleFlag","",""],[5,"LLVMDIBuilderCreate","",""],[5,"LLVMDIBuilderDispose","",""],[5,"LLVMDIBuilderFinalize","",""],[5,"LLVMDIBuilderCreateCompileUnit","",""],[5,"LLVMDIBuilderCreateFile","",""],[5,"LLVMDIBuilderCreateSubroutineType","",""],[5,"LLVMDIBuilderCreateFunction","",""],[5,"LLVMDIBuilderCreateBasicType","",""],[5,"LLVMDIBuilderCreatePointerType","",""],[5,"LLVMDIBuilderCreateStructType","",""],[5,"LLVMDIBuilderCreateMemberType","",""],[5,"LLVMDIBuilderCreateLexicalBlock","",""],[5,"LLVMDIBuilderCreateStaticVariable","",""],[5,"LLVMDIBuilderCreateVariable","",""],[5,"LLVMDIBuilderCreateArrayType","",""],[5,"LLVMDIBuilderCreateVectorType","",""],[5,"LLVMDIBuilderGetOrCreateSubrange","",""],[5,"LLVMDIBuilderGetOrCreateArray","",""],[5,"LLVMDIBuilderInsertDeclareAtEnd","",""],[5,"LLVMDIBuilderInsertDeclareBefore","",""],[5,"LLVMDIBuilderCreateEnumerator","",""],[5,"LLVMDIBuilderCreateEnumerationType","",""],[5,"LLVMDIBuilderCreateUnionType","",""],[5,"LLVMSetUnnamedAddr","",""],[5,"LLVMDIBuilderCreateTemplateTypeParameter","",""],[5,"LLVMDIBuilderCreateOpDeref","",""],[5,"LLVMDIBuilderCreateOpPlus","",""],[5,"LLVMDIBuilderCreateNameSpace","",""],[5,"LLVMDIBuilderCreateDebugLocation","",""],[5,"LLVMDICompositeTypeSetTypeArray","",""],[5,"LLVMWriteTypeToString","",""],[5,"LLVMWriteValueToString","",""],[5,"LLVMIsAArgument","",""],[5,"LLVMIsAAllocaInst","",""],[5,"LLVMInitializeX86TargetInfo","",""],[5,"LLVMInitializeX86Target","",""],[5,"LLVMInitializeX86TargetMC","",""],[5,"LLVMInitializeX86AsmPrinter","",""],[5,"LLVMInitializeX86AsmParser","",""],[5,"LLVMInitializeARMTargetInfo","",""],[5,"LLVMInitializeARMTarget","",""],[5,"LLVMInitializeARMTargetMC","",""],[5,"LLVMInitializeARMAsmPrinter","",""],[5,"LLVMInitializeARMAsmParser","",""],[5,"LLVMInitializeAArch64TargetInfo","",""],[5,"LLVMInitializeAArch64Target","",""],[5,"LLVMInitializeAArch64TargetMC","",""],[5,"LLVMInitializeAArch64AsmPrinter","",""],[5,"LLVMInitializeAArch64AsmParser","",""],[5,"LLVMInitializeMipsTargetInfo","",""],[5,"LLVMInitializeMipsTarget","",""],[5,"LLVMInitializeMipsTargetMC","",""],[5,"LLVMInitializeMipsAsmPrinter","",""],[5,"LLVMInitializeMipsAsmParser","",""],[5,"LLVMInitializePowerPCTargetInfo","",""],[5,"LLVMInitializePowerPCTarget","",""],[5,"LLVMInitializePowerPCTargetMC","",""],[5,"LLVMInitializePowerPCAsmPrinter","",""],[5,"LLVMInitializePowerPCAsmParser","",""],[5,"LLVMRustAddPass","",""],[5,"LLVMRustCreateTargetMachine","",""],[5,"LLVMRustDisposeTargetMachine","",""],[5,"LLVMRustAddAnalysisPasses","",""],[5,"LLVMRustAddBuilderLibraryInfo","",""],[5,"LLVMRustAddLibraryInfo","",""],[5,"LLVMRustRunFunctionPassManager","",""],[5,"LLVMRustWriteOutputFile","",""],[5,"LLVMRustPrintModule","",""],[5,"LLVMRustSetLLVMOptions","",""],[5,"LLVMRustPrintPasses","",""],[5,"LLVMRustSetNormalizedTarget","",""],[5,"LLVMRustAddAlwaysInlinePass","",""],[5,"LLVMRustLinkInExternalBitcode","",""],[5,"LLVMRustRunRestrictionPass","",""],[5,"LLVMRustMarkAllFunctionsNounwind","",""],[5,"LLVMRustOpenArchive","",""],[5,"LLVMRustArchiveReadSection","",""],[5,"LLVMRustDestroyArchive","",""],[5,"LLVMRustSetDLLExportStorageClass","",""],[5,"LLVMVersionMajor","",""],[5,"LLVMVersionMinor","",""],[5,"LLVMRustGetSectionName","",""],[5,"LLVMWriteTwineToString","",""],[5,"LLVMContextSetDiagnosticHandler","",""],[5,"LLVMUnpackOptimizationDiagnostic","",""],[5,"LLVMUnpackInlineAsmDiagnostic","",""],[5,"LLVMWriteDiagnosticInfoToString","",""],[5,"LLVMGetDiagInfoSeverity","",""],[5,"LLVMGetDiagInfoKind","",""],[5,"LLVMWriteDebugLocToString","",""],[5,"LLVMSetInlineAsmDiagnosticHandler","",""],[5,"LLVMWriteSMDiagnosticToString","",""],[5,"SetInstructionCallConv","",""],[5,"SetFunctionCallConv","",""],[5,"SetLinkage","",""],[5,"SetUnnamedAddr","",""],[5,"set_thread_local","",""],[5,"ConstICmp","",""],[5,"ConstFCmp","",""],[5,"SetFunctionAttribute","",""],[3,"TargetData","",""],[12,"lltd","","",12],[5,"mk_target_data","",""],[3,"ObjectFile","",""],[12,"llof","","",13],[3,"SectionIter","",""],[12,"llsi","","",14],[5,"mk_section_iter","",""],[5,"get_param","","Safe wrapper around `LLVMGetParam`, because segfaults are no fun."],[4,"RustString_opaque","",""],[6,"RustStringRef","",""],[5,"rust_llvm_string_write_impl","","Appending to a Rust string -- used by raw_rust_string_ostream."],[5,"build_string","",""],[5,"twine_to_string","",""],[5,"debug_loc_to_string","",""],[0,"diagnostics","rustc",""],[7,"DIAGNOSTICS","rustc::diagnostics",""],[0,"back","rustc",""],[0,"abi","rustc::back",""],[17,"BOX_FIELD_DROP_GLUE","rustc::back::abi",""],[17,"BOX_FIELD_BODY","",""],[17,"FAT_PTR_ADDR","","The first half of a fat pointer.\n- For a closure, this is the code address.\n- For an object or trait instance, this is the address of the box.\n- For a slice, this is the base address."],[17,"FAT_PTR_EXTRA","","The second half of a fat pointer.\n- For a closure, this is the address of the environment.\n- For an object or trait instance, this is the address of the vtable.\n- For a slice, this is the length."],[0,"archive","rustc::back","A helper class for dealing with static archives"],[17,"METADATA_FILENAME","rustc::back::archive",""],[11,"open","rustc_back::archive","Opens an existing static archive",31],[11,"remove_file","","Removes a file from this archive",31],[11,"files","","Lists all files in an archive",31],[11,"extend","","Creates an `ArchiveBuilder` for adding files to this archive.",31],[11,"create","","Create a new static archive, ready for adding files.",32],[11,"add_native_library","","Adds all of the contents of a native library to this archive. This will\nsearch in the relevant locations for a library named `name`.",32],[11,"add_rlib","","Adds all of the contents of the rlib at the specified path to this\narchive.",32],[11,"add_file","","Adds an arbitrary file to this archive",32],[11,"update_symbols","","Indicate that the next call to `build` should updates all symbols in\nthe archive (run 'ar s' over it).",32],[11,"build","","Combine the provided files, rlibs, and native libraries into a single\n`Archive`.",32],[11,"new_in","rustc_back::tempdir","Attempts to make a temporary directory inside of `tmpdir` whose name\nwill have the prefix `prefix`. The directory will be automatically\ndeleted once the returned wrapper is destroyed.",33],[11,"new","","Attempts to make a temporary directory inside of `env::temp_dir()` whose\nname will have the prefix `prefix`. The directory will be automatically\ndeleted once the returned wrapper is destroyed.",33],[11,"into_path","","Unwrap the wrapped `std::path::Path` from the `TempDir` wrapper.\nThis discards the wrapper so that the automatic deletion of the\ntemporary directory is prevented.",33],[11,"path","","Access the wrapped `std::path::Path` to the temporary directory.",33],[11,"close","","Close and remove the temporary directory",33],[11,"drop","","",33],[11,"input","rustc_back::sha2","",34],[11,"reset","","",34],[11,"zero_until","","",34],[11,"next","","",34],[11,"full_buffer","","",34],[11,"position","","",34],[11,"remaining","","",34],[11,"size","","",34],[11,"new","","Construct a new instance of a SHA-256 digest.",35],[11,"input","","",35],[11,"result","","",35],[11,"reset","","",35],[11,"output_bits","","",35],[11,"fmt","rustc_back::svh","",36],[11,"eq","","",36],[11,"ne","","",36],[11,"clone","","",36],[11,"new","","",36],[11,"as_str","","",36],[11,"calculate","","",36],[11,"fmt","","",36],[11,"hash","rustc_back::svh::svh_visitor","",37],[11,"hash","","",38],[11,"hash","","",39],[11,"get_content","syntax::ast","",40],[11,"get_content","","",41],[11,"visit_mac","rustc_back::svh::svh_visitor","",42],[11,"visit_struct_def","","",42],[11,"visit_variant","","",42],[11,"visit_opt_lifetime_ref","","",42],[11,"visit_ident","","",42],[11,"visit_lifetime_ref","","",42],[11,"visit_lifetime_def","","",42],[11,"visit_expr","","",42],[11,"visit_stmt","","",42],[11,"visit_foreign_item","","",42],[11,"visit_item","","",42],[11,"visit_mod","","",42],[11,"visit_decl","","",42],[11,"visit_ty","","",42],[11,"visit_generics","","",42],[11,"visit_fn","","",42],[11,"visit_ty_method","","",42],[11,"visit_trait_item","","",42],[11,"visit_struct_field","","",42],[11,"visit_explicit_self","","",42],[11,"visit_path","","",42],[11,"visit_block","","",42],[11,"visit_pat","","",42],[11,"visit_local","","",42],[11,"visit_arm","","",42],[11,"to_string","rustc_back::target::apple_ios_base","",43],[11,"fmt","rustc_back::target","",44],[11,"clone","","",44],[11,"fmt","","",45],[11,"clone","","",45],[11,"default","","Create a set of \"sane defaults\" for any target. This is still incomplete, and if used for\ncompilation, will certainly not work.",45],[11,"adjust_abi","","Given a function ABI, turn \"System\" into the correct ABI for this target.",44],[11,"from_json","","Load a target descriptor from a JSON object.",44],[11,"search","","Search RUST_TARGET_PATH for a JSON file specifying the given target\ntriple. Note that it could also just be a bare filename already, so also\ncheck for that. If one of the hardcoded targets we know about, just\nreturn it directly.",44],[3,"ArchiveConfig","rustc::back::archive",""],[12,"handler","","",46],[12,"dst","","",46],[12,"lib_search_paths","","",46],[12,"slib_prefix","","",46],[12,"slib_suffix","","",46],[12,"maybe_ar_prog","","",46],[3,"Archive","",""],[3,"ArchiveBuilder","","Helper for adding many files to an archive with a single invocation of\n`ar`."],[5,"find_library","",""],[0,"arm","rustc::back",""],[5,"get_target_strs","rustc::back::arm",""],[0,"mips","rustc::back",""],[5,"get_target_strs","rustc::back::mips",""],[0,"mipsel","rustc::back",""],[5,"get_target_strs","rustc::back::mipsel",""],[0,"rpath","rustc::back",""],[3,"RPathConfig","rustc::back::rpath",""],[12,"used_crates","","",47],[12,"out_filename","","",47],[12,"is_like_osx","","",47],[12,"has_rpath","","",47],[12,"get_install_prefix_lib_path","","",47],[12,"realpath","","",47],[5,"get_rpath_flags","",""],[0,"svh","rustc::back","Calculation and management of a Strict Version Hash for crates"],[3,"Svh","rustc::back::svh",""],[0,"target_strs","rustc::back",""],[3,"t","rustc::back::target_strs",""],[12,"module_asm","","",48],[12,"data_layout","","",48],[12,"target_triple","","",48],[12,"cc_args","","",48],[0,"x86","rustc::back",""],[5,"get_target_strs","rustc::back::x86",""],[0,"x86_64","rustc::back",""],[5,"get_target_strs","rustc::back::x86_64",""],[0,"middle","rustc",""],[0,"astconv_util","rustc::middle","This module contains a simple utility routine\nused by both `typeck` and `const_eval`.\nAlmost certainly this could (and should) be refactored out of existence."],[5,"check_path_args","rustc::middle::astconv_util",""],[5,"prim_ty_to_ty","",""],[5,"ast_ty_to_prim_ty","",""],[17,"NO_REGIONS","",""],[17,"NO_TPS","",""],[0,"astencode","rustc::middle",""],[5,"encode_inlined_item","rustc::middle::astencode",""],[5,"decode_inlined_item","","Decodes an item from its AST in the cdata's metadata and adds it to the\nast-map."],[5,"encode_closure_kind","",""],[8,"vtable_decoder_helpers","",""],[10,"read_vec_per_param_space","","",49],[10,"read_vtable_res_with_key","","",49],[10,"read_vtable_res","","",49],[10,"read_vtable_param_res","","",49],[10,"read_vtable_origin","","",49],[11,"tr_intern","syntax::ast","",50],[11,"tr","","",50],[11,"tr","core::option","",51],[11,"tr","syntax::codemap","",52],[11,"read_vec_per_param_space","rbml::reader","",53],[11,"read_vtable_res_with_key","","",53],[11,"read_vtable_res","","",53],[11,"read_vtable_param_res","","",53],[11,"read_vtable_origin","","",53],[11,"tag","rbml::writer","",54],[11,"id","","",54],[0,"cfg","rustc::middle","Module that constructs a control-flow graph representing an item.\nUses `Graph` as the underlying representation."],[3,"CFG","rustc::middle::cfg",""],[12,"graph","","",55],[12,"entry","","",55],[12,"exit","","",55],[3,"CFGEdgeData","",""],[12,"exiting_scopes","","",56],[4,"CFGNodeData","",""],[13,"AST","","",57],[13,"Entry","","",57],[13,"Exit","","",57],[13,"Dummy","","",57],[13,"Unreachable","","",57],[0,"graphviz","",""],[3,"LabelledCFG","rustc::middle::cfg::graphviz",""],[12,"ast_map","","",58],[12,"cfg","","",58],[12,"name","","",58],[12,"labelled_edges","","`labelled_edges` controls whether we emit labels on the edges",58],[6,"Node","",""],[6,"Edge","",""],[11,"graph_id","","",58],[11,"node_id","","",58],[11,"node_label","","",58],[11,"edge_label","","",58],[11,"nodes","","",58],[11,"edges","","",58],[11,"source","","",58],[11,"target","","",58],[6,"CFGIndex","rustc::middle::cfg",""],[6,"CFGGraph","",""],[6,"CFGNode","",""],[6,"CFGEdge","",""],[11,"eq","","",57],[11,"ne","","",57],[11,"id","","",57],[11,"new","","",55],[11,"node_is_reachable","","",55],[0,"check_const","rustc::middle",""],[3,"ConstQualif","rustc::middle::check_const",""],[5,"check_crate","",""],[17,"PURE_CONST","",""],[17,"MUTABLE_MEM","",""],[17,"NEEDS_DROP","",""],[17,"PREFER_IN_PLACE","",""],[17,"NON_ZERO_SIZED","",""],[17,"HAS_STATIC_BORROWS","",""],[17,"NOT_CONST","",""],[17,"NON_STATIC_BORROWS","",""],[11,"hash","","",59],[11,"cmp","","",59],[11,"partial_cmp","","",59],[11,"lt","","",59],[11,"le","","",59],[11,"gt","","",59],[11,"ge","","",59],[11,"clone","","",59],[11,"eq","","",59],[11,"ne","","",59],[11,"decode","","",59],[11,"encode","","",59],[11,"empty","","Returns an empty set of flags.",59],[11,"all","","Returns the set containing all flags.",59],[11,"bits","","Returns the raw value of the flags currently stored.",59],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",59],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",59],[11,"is_empty","","Returns `true` if no flags are currently stored.",59],[11,"is_all","","Returns `true` if all flags are currently set.",59],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",59],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",59],[11,"insert","","Inserts the specified flags in-place.",59],[11,"remove","","Removes the specified flags in-place.",59],[11,"toggle","","Toggles the specified flags in-place.",59],[6,"Output","",""],[11,"bitor","","Returns the union of the two sets of flags.",59],[6,"Output","",""],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",59],[6,"Output","",""],[11,"bitand","","Returns the intersection between the two sets of flags.",59],[6,"Output","",""],[11,"sub","","Returns the set difference of the two sets of flags.",59],[6,"Output","",""],[11,"not","","Returns the complement of this set of flags.",59],[0,"check_static_recursion","rustc::middle",""],[5,"check_crate","rustc::middle::check_static_recursion",""],[5,"check_item_recursion","",""],[0,"check_loop","rustc::middle",""],[5,"check_crate","rustc::middle::check_loop",""],[0,"check_match","rustc::middle",""],[3,"MatchCheckCtxt","rustc::middle::check_match",""],[12,"tcx","","",60],[12,"param_env","","",60],[3,"StaticInliner","",""],[12,"tcx","","",61],[12,"failed","","",61],[12,"renaming_map","","",61],[4,"Constructor","",""],[13,"Single","","The constructor of all patterns that don't vary by constructor,\ne.g. struct patterns and fixed-length arrays.",62],[13,"Variant","","Enum variants.",62],[13,"ConstantValue","","Literal values.",62],[13,"ConstantRange","","Ranges of literal values (2..5).",62],[13,"Slice","","Array patterns of length n.",62],[13,"SliceWithSubslice","","Array patterns with a subslice.",62],[5,"check_crate","",""],[5,"constructor_arity","","This computes the arity of a constructor. The arity of a constructor\nis how many subpattern patterns of that constructor should be expanded to."],[5,"specialize","","This is the main specialization step. It expands the first pattern in the given row\ninto `arity` patterns based on the constructor. For most patterns, the step is trivial,\nfor instance tuple patterns are flattened and box patterns expand into their inner pattern."],[17,"DUMMY_WILD_PAT","",""],[11,"eq","","",62],[11,"ne","","",62],[11,"clone","","",62],[11,"visit_expr","","",60],[11,"visit_local","","",60],[11,"visit_fn","","",60],[11,"new","","",61],[11,"fold_pat","","",61],[0,"check_rvalues","rustc::middle",""],[5,"check_crate","rustc::middle::check_rvalues",""],[0,"const_eval","rustc::middle",""],[3,"ConstEvalErr","rustc::middle::const_eval",""],[12,"span","","",63],[12,"kind","","",63],[4,"const_val","",""],[13,"const_float","","",64],[13,"const_int","","",64],[13,"const_uint","","",64],[13,"const_str","","",64],[13,"const_binary","","",64],[13,"const_bool","","",64],[4,"ErrKind","",""],[13,"CannotCast","","",65],[13,"CannotCastTo","","",65],[13,"InvalidOpForBools","","",65],[13,"InvalidOpForFloats","","",65],[13,"InvalidOpForIntUint","","",65],[13,"InvalidOpForUintInt","","",65],[13,"NegateOnString","","",65],[13,"NegateOnBoolean","","",65],[13,"NegateOnBinary","","",65],[13,"NotOnFloat","","",65],[13,"NotOnString","","",65],[13,"NotOnBinary","","",65],[13,"AddiWithOverflow","","",65],[13,"SubiWithOverflow","","",65],[13,"MuliWithOverflow","","",65],[13,"AdduWithOverflow","","",65],[13,"SubuWithOverflow","","",65],[13,"MuluWithOverflow","","",65],[13,"DivideByZero","","",65],[13,"DivideWithOverflow","","",65],[13,"ModuloByZero","","",65],[13,"ModuloWithOverflow","","",65],[13,"MissingStructField","","",65],[13,"NonConstPath","","",65],[13,"NonConstStruct","","",65],[13,"TupleIndexOutOfBounds","","",65],[13,"MiscBinaryOp","","",65],[13,"MiscCatchAll","","",65],[5,"lookup_const_by_id","",""],[5,"const_expr_to_pat","",""],[5,"eval_const_expr","",""],[5,"eval_const_expr_partial","",""],[5,"compare_const_vals","",""],[5,"compare_lit_exprs","",""],[11,"eq","","",64],[11,"ne","","",64],[11,"clone","","",64],[11,"clone","","",63],[11,"clone","","",65],[11,"description","","",63],[0,"dataflow","rustc::middle","A module for propagating forward dataflow information. The analysis\nassumes that the items to be propagated can be represented as bits\nand thus uses bitvectors. Your job is simply to specify the so-called\nGEN and KILL bits for each expression."],[3,"DataFlowContext","rustc::middle::dataflow",""],[4,"EntryOrExit","",""],[13,"Entry","","",66],[13,"Exit","","",66],[8,"BitwiseOperator","",""],[10,"join","","Joins two predecessor bits together, typically either `|` or `&`",67],[8,"DataFlowOperator","","Parameterization for the precise form of data flow that is used."],[10,"initial_value","","Specifies the initial value for each bit in the `on_entry` set",68],[11,"fmt","","",66],[11,"clone","","",69],[11,"pre","","",69],[11,"new","","",69],[11,"add_gen","","Indicates that `id` generates `bit`",69],[11,"add_kill","","Indicates that `id` kills `bit`",69],[11,"each_bit_on_entry","","Iterates through each bit that is set on entry to `id`.\nOnly useful after `propagate()` has been called.",69],[11,"each_bit_for_node","","Iterates through each bit that is set on entry/exit to `cfgidx`.\nOnly useful after `propagate()` has been called.",69],[11,"each_gen_bit","","Iterates through each bit in the gen set for `id`.",69],[11,"add_kills_from_flow_exits","","Whenever you have a `break` or `continue` statement, flow\nexits through any number of enclosing scopes on its way to\nthe new destination. This function infers the kill bits of\nthose control operators based on the kill bits associated\nwith those scopes.",69],[11,"propagate","","Performs the data flow analysis.",69],[0,"dead","rustc::middle",""],[5,"check_crate","rustc::middle::dead",""],[0,"def","rustc::middle",""],[3,"PathResolution","rustc::middle::def","The result of resolving a path.\nBefore type checking completes, `depth` represents the number of\ntrailing segments which are yet unresolved. Afterwards, if there\nwere no errors, all paths should be fully resolved, with `depth`\nset to `0` and `base_def` representing the final resolution."],[12,"base_def","","",70],[12,"last_private","","",70],[12,"depth","","",70],[3,"Export","",""],[12,"name","","",71],[12,"def_id","","",71],[4,"Def","",""],[13,"DefFn","","",72],[13,"DefSelfTy","","",72],[13,"DefMod","","",72],[13,"DefForeignMod","","",72],[13,"DefStatic","","",72],[13,"DefConst","","",72],[13,"DefLocal","","",72],[13,"DefVariant","","",72],[13,"DefTy","","",72],[13,"DefAssociatedTy","","",72],[13,"DefTrait","","",72],[13,"DefPrimTy","","",72],[13,"DefTyParam","","",72],[13,"DefUse","","",72],[13,"DefUpvar","","",72],[13,"DefStruct","","Note that if it's a tuple struct's definition, the node id of the ast::DefId\nmay either refer to the item definition's id or the StructDef.ctor_id.",72],[13,"DefRegion","","",72],[13,"DefLabel","","",72],[13,"DefMethod","","",72],[4,"MethodProvenance","",""],[13,"FromTrait","","",73],[13,"FromImpl","","",73],[6,"DefMap","",""],[6,"ExportMap","",""],[11,"fmt","","",72],[11,"hash","","",72],[11,"decode","","",72],[11,"encode","","",72],[11,"eq","","",72],[11,"ne","","",72],[11,"clone","","",72],[11,"fmt","","",70],[11,"full_def","","Get the definition, if fully resolved, otherwise panic.",70],[11,"def_id","","Get the DefId, if fully resolved, otherwise panic.",70],[11,"fmt","","",73],[11,"hash","","",73],[11,"decode","","",73],[11,"encode","","",73],[11,"eq","","",73],[11,"ne","","",73],[11,"clone","","",73],[11,"map","","",73],[11,"local_node_id","","",72],[11,"def_id","","",72],[11,"variant_def_ids","","",72],[0,"dependency_format","rustc::middle","Resolution of mixing rlibs and dylibs"],[5,"calculate","rustc::middle::dependency_format",""],[6,"DependencyList","","A list of dependencies for a certain crate type."],[6,"Dependencies","","A mapping of all required dependencies for a particular flavor of output."],[0,"effect","rustc::middle","Enforces the Rust effect system. Currently there is just one effect,\n`unsafe`."],[5,"check_crate","rustc::middle::effect",""],[0,"entry","rustc::middle",""],[5,"find_entry_point","rustc::middle::entry",""],[0,"expr_use_visitor","rustc::middle","A different sort of visitor for walking fn bodies.  Unlike the\nnormal visitor, which just walks the entire body in one shot, the\n`ExprUseVisitor` determines how expressions are being used."],[3,"ExprUseVisitor","rustc::middle::expr_use_visitor",""],[4,"LoanCause","",""],[13,"ClosureCapture","","",74],[13,"AddrOf","","",74],[13,"AutoRef","","",74],[13,"RefBinding","","",74],[13,"OverloadedOperator","","",74],[13,"ClosureInvocation","","",74],[13,"ForLoop","","",74],[13,"MatchDiscriminant","","",74],[4,"ConsumeMode","",""],[13,"Copy","","",75],[13,"Move","","",75],[4,"MoveReason","",""],[13,"DirectRefMove","","",76],[13,"PatBindingMove","","",76],[13,"CaptureMove","","",76],[4,"MatchMode","",""],[13,"NonBindingMatch","","",77],[13,"BorrowingMatch","","",77],[13,"CopyingMatch","","",77],[13,"MovingMatch","","",77],[4,"MutateMode","",""],[13,"Init","","",78],[13,"JustWrite","","",78],[13,"WriteAndRead","","",78],[8,"Delegate","","This trait defines the callbacks you can expect to receive when\nemploying the ExprUseVisitor."],[10,"consume","","",79],[10,"matched_pat","","",79],[10,"consume_pat","","",79],[10,"borrow","","",79],[10,"decl_without_init","","",79],[10,"mutate","","",79],[11,"fmt","","",74],[11,"eq","","",74],[11,"ne","","",74],[11,"fmt","","",75],[11,"eq","","",75],[11,"ne","","",75],[11,"fmt","","",76],[11,"eq","","",76],[11,"ne","","",76],[11,"fmt","","",77],[11,"eq","","",77],[11,"ne","","",77],[11,"fmt","","",78],[11,"eq","","",78],[11,"ne","","",78],[11,"new","","",80],[11,"walk_fn","","",80],[11,"consume_expr","","",80],[11,"walk_expr","","",80],[0,"fast_reject","rustc::middle",""],[4,"SimplifiedType","rustc::middle::fast_reject","See `simplify_type"],[13,"BoolSimplifiedType","","",81],[13,"CharSimplifiedType","","",81],[13,"IntSimplifiedType","","",81],[13,"UintSimplifiedType","","",81],[13,"FloatSimplifiedType","","",81],[13,"EnumSimplifiedType","","",81],[13,"StrSimplifiedType","","",81],[13,"VecSimplifiedType","","",81],[13,"PtrSimplifiedType","","",81],[13,"TupleSimplifiedType","","",81],[13,"TraitSimplifiedType","","",81],[13,"StructSimplifiedType","","",81],[13,"ClosureSimplifiedType","","",81],[13,"FunctionSimplifiedType","","",81],[13,"ParameterSimplifiedType","","",81],[5,"simplify_type","","Tries to simplify a type by dropping type parameters, deref'ing away any reference types, etc.\nThe idea is to get something simple that we can use to quickly decide if two types could unify\nduring method lookup."],[11,"hash","","",81],[11,"eq","","",81],[11,"ne","","",81],[11,"clone","","",81],[0,"graph","rustc::middle","A graph module for use in dataflow, region resolution, and elsewhere."],[3,"Graph","rustc::middle::graph",""],[3,"Node","",""],[12,"data","","",82],[3,"Edge","",""],[12,"data","","",83],[3,"NodeIndex","",""],[3,"EdgeIndex","",""],[3,"Direction","",""],[3,"DepthFirstTraversal","",""],[5,"each_edge_index","",""],[17,"InvalidNodeIndex","",""],[17,"InvalidEdgeIndex","",""],[17,"Outgoing","",""],[17,"Incoming","",""],[11,"fmt","","",83],[11,"fmt","","",84],[11,"eq","","",84],[11,"ne","","",84],[11,"clone","","",84],[11,"fmt","","",85],[11,"eq","","",85],[11,"ne","","",85],[11,"fmt","","",86],[11,"node_id","","Returns unique id (unique with respect to the graph holding associated node).",84],[11,"edge_id","","Returns unique id (unique with respect to the graph holding associated edge).",85],[11,"new","","",87],[11,"with_capacity","","",87],[11,"all_nodes","","",87],[11,"all_edges","","",87],[11,"next_node_index","","",87],[11,"add_node","","",87],[11,"mut_node_data","","",87],[11,"node_data","","",87],[11,"node","","",87],[11,"next_edge_index","","",87],[11,"add_edge","","",87],[11,"mut_edge_data","","",87],[11,"edge_data","","",87],[11,"edge","","",87],[11,"first_adjacent","","Accesses the index of the first edge adjacent to `node`.\nThis is useful if you wish to modify the graph while walking\nthe linked list of edges.",87],[11,"next_adjacent","","Accesses the next edge in a given direction.\nThis is useful if you wish to modify the graph while walking\nthe linked list of edges.",87],[11,"each_node","","Iterates over all edges defined in the graph.",87],[11,"each_edge","","Iterates over all edges defined in the graph",87],[11,"each_outgoing_edge","","Iterates over all outgoing edges from the node `from`",87],[11,"each_incoming_edge","","Iterates over all incoming edges to the node `target`",87],[11,"each_adjacent_edge","","Iterates over all edges adjacent to the node `node`\nin the direction `dir` (either `Outgoing` or `Incoming)",87],[11,"iterate_until_fixed_point","","",87],[11,"depth_traverse","","",87],[6,"Item","",""],[11,"next","","",88],[11,"source","","",83],[11,"target","","",83],[0,"intrinsicck","rustc::middle",""],[5,"check_crate","rustc::middle::intrinsicck",""],[0,"infer","rustc::middle","See the Book for more information."],[3,"TypeFreshener","rustc::middle::infer",""],[3,"InferCtxt","",""],[12,"tcx","","",89],[3,"TypeTrace","","The trace designates the path through inference that we took to\nencounter an error or subtyping constraint."],[3,"CombinedSnapshot","",""],[4,"TypeOrigin","","Why did we require that the two types be related?"],[13,"Misc","","",90],[13,"MethodCompatCheck","","",90],[13,"ExprAssignable","","",90],[13,"RelateTraitRefs","","",90],[13,"RelateSelfType","","",90],[13,"RelateOutputImplTypes","","",90],[13,"MatchExpressionArm","","",90],[13,"IfExpression","","",90],[13,"IfExpressionWithNoElse","","",90],[13,"RangeExpression","","",90],[13,"EquatePredicate","","",90],[4,"ValuePairs","","See `error_reporting.rs` for more details"],[13,"Types","","",91],[13,"TraitRefs","","",91],[13,"PolyTraitRefs","","",91],[4,"SubregionOrigin","","The origin of a `r1 <= r2` constraint."],[13,"Subtype","","",92],[13,"InfStackClosure","","",92],[13,"InvokeClosure","","",92],[13,"DerefPointer","","",92],[13,"FreeVariable","","",92],[13,"IndexSlice","","",92],[13,"RelateObjectBound","","",92],[13,"RelateParamBound","","",92],[13,"RelateRegionParamBound","","",92],[13,"RelateDefaultParamBound","","",92],[13,"Reborrow","","",92],[13,"ReborrowUpvar","","",92],[13,"ReferenceOutlivesReferent","","",92],[13,"ExprTypeIsNotInScope","","",92],[13,"BindingTypeIsNotValidAtDecl","","",92],[13,"CallRcvr","","",92],[13,"CallArg","","",92],[13,"CallReturn","","",92],[13,"Operand","","",92],[13,"AddrOf","","",92],[13,"AutoBorrow","","",92],[13,"SafeDestructor","","",92],[4,"LateBoundRegionConversionTime","","Times when we replace late-bound regions with variables:"],[13,"FnCall","","when a fn is called",93],[13,"HigherRankedType","","when two higher-ranked types are compared",93],[13,"AssocTypeProjection","","when projecting an associated type",93],[4,"RegionVariableOrigin","","Reasons to create a region inference variable"],[13,"MiscVariable","","",94],[13,"PatternRegion","","",94],[13,"AddrOfRegion","","",94],[13,"Autoref","","",94],[13,"Coercion","","",94],[13,"EarlyBoundRegion","","",94],[13,"LateBoundRegion","","",94],[13,"UpvarRegion","","",94],[13,"BoundRegionInCoherence","","",94],[4,"fixup_err","",""],[13,"unresolved_int_ty","","",95],[13,"unresolved_float_ty","","",95],[13,"unresolved_ty","","",95],[5,"fixup_err_to_string","",""],[5,"new_infer_ctxt","",""],[5,"common_supertype","","Computes the least upper-bound of `a` and `b`. If this is not possible, reports an error and\nreturns ty::err."],[5,"mk_subty","",""],[5,"can_mk_subty","",""],[5,"can_mk_eqty","",""],[5,"mk_subr","",""],[5,"mk_eqty","",""],[5,"mk_sub_poly_trait_refs","",""],[5,"uok","",""],[0,"bivariate","","Applies the \"bivariance relationship\" to two types and/or regions.\nIf (A,B) are bivariant then either A <: B or B <: A. It occurs\nwhen type/lifetime parameters are unconstrained. Usually this is\nan error, but we permit it in the specific case where a type\nparameter is constrained in a where-clause via an associated type."],[3,"Bivariate","rustc::middle::infer::bivariate",""],[5,"Bivariate","",""],[11,"tag","","",96],[11,"fields","","",96],[11,"tys_with_variance","","",96],[11,"regions_with_variance","","",96],[11,"regions","","",96],[11,"mts","","",96],[11,"unsafeties","","",96],[11,"builtin_bounds","","",96],[11,"tys","","",96],[11,"binders","","",96],[0,"combine","rustc::middle::infer",""],[3,"CombineFields","rustc::middle::infer::combine",""],[12,"infcx","","",97],[12,"a_is_expected","","",97],[12,"trace","","",97],[5,"expected_found","",""],[5,"super_tys","",""],[8,"Combine","",""],[11,"tcx","","",98],[10,"tag","","",98],[10,"fields","","",98],[11,"infcx","","",98],[11,"a_is_expected","","",98],[11,"trace","","",98],[11,"equate","","",98],[11,"bivariate","","",98],[11,"sub","","",98],[11,"lub","","",98],[11,"glb","","",98],[10,"mts","","",98],[10,"tys_with_variance","","",98],[10,"tys","","",98],[10,"regions_with_variance","","",98],[10,"regions","","",98],[11,"substs","","",98],[11,"substs_variances","","",98],[11,"bare_fn_tys","","",98],[11,"fn_sigs","","",98],[11,"args","","",98],[10,"unsafeties","","",98],[11,"abi","","",98],[11,"projection_tys","","",98],[11,"projection_predicates","","",98],[11,"projection_bounds","","",98],[11,"existential_bounds","","",98],[10,"builtin_bounds","","",98],[11,"trait_refs","","",98],[10,"binders","","",98],[8,"Combineable","",""],[10,"combine","","",99],[11,"combine","alloc::rc","",100],[11,"clone","rustc::middle::infer::combine","",97],[11,"switch_expected","","",97],[11,"instantiate","","",97],[0,"equate","rustc::middle::infer",""],[3,"Equate","rustc::middle::infer::equate",""],[5,"Equate","",""],[11,"tag","","",101],[11,"fields","","",101],[11,"tys_with_variance","","",101],[11,"regions_with_variance","","",101],[11,"regions","","",101],[11,"mts","","",101],[11,"unsafeties","","",101],[11,"builtin_bounds","","",101],[11,"tys","","",101],[11,"binders","","",101],[0,"error_reporting","rustc::middle::infer","Error Reporting Code for the inference engine"],[8,"ErrorReporting","rustc::middle::infer::error_reporting",""],[10,"report_region_errors","","",102],[10,"process_errors","","",102],[10,"report_type_error","","",102],[10,"report_and_explain_type_error","","",102],[10,"values_str","","",102],[10,"expected_found_str","","",102],[10,"report_concrete_failure","","",102],[10,"report_generic_bound_failure","","",102],[10,"report_sub_sup_conflict","","",102],[10,"report_sup_sup_conflict","","",102],[10,"report_processed_errors","","",102],[10,"give_suggestion","","",102],[8,"Resolvable","",""],[10,"resolve","","",103],[10,"contains_error","","",103],[11,"report_region_errors","rustc::middle::infer","",89],[11,"process_errors","","",89],[11,"report_type_error","","",89],[11,"report_and_explain_type_error","","",89],[11,"values_str","","Returns a string of the form \"expected `{}`, found `{}`\", or None if this is a derived\nerror.",89],[11,"expected_found_str","","",89],[11,"report_generic_bound_failure","","",89],[11,"report_concrete_failure","","",89],[11,"report_sub_sup_conflict","","",89],[11,"report_sup_sup_conflict","","",89],[11,"report_processed_errors","","",89],[11,"give_suggestion","","",89],[11,"resolve","alloc::rc","",100],[11,"contains_error","","",100],[0,"glb","rustc::middle::infer",""],[3,"Glb","rustc::middle::infer::glb","\"Greatest lower bound\" (common subtype)"],[5,"Glb","",""],[11,"tag","","",104],[11,"fields","","",104],[11,"tys_with_variance","","",104],[11,"regions_with_variance","","",104],[11,"mts","","",104],[11,"unsafeties","","",104],[11,"builtin_bounds","","",104],[11,"regions","","",104],[11,"tys","","",104],[11,"binders","","",104],[0,"lattice","rustc::middle::infer","# Lattice Variables"],[5,"super_lattice_tys","rustc::middle::infer::lattice",""],[8,"LatticeDir","",""],[10,"relate_bound","","",105],[11,"relate_bound","rustc::middle::infer::glb","",104],[0,"lub","rustc::middle::infer",""],[3,"Lub","rustc::middle::infer::lub","\"Least upper bound\" (common supertype)"],[5,"Lub","",""],[11,"tag","","",106],[11,"fields","","",106],[11,"tys_with_variance","","",106],[11,"regions_with_variance","","",106],[11,"mts","","",106],[11,"unsafeties","","",106],[11,"builtin_bounds","","",106],[11,"regions","","",106],[11,"tys","","",106],[11,"binders","","",106],[0,"region_inference","rustc::middle::infer","See README.md"],[3,"TwoRegions","rustc::middle::infer::region_inference",""],[3,"SameRegions","","SameRegions is used to group regions that we think are the same and would\nlike to indicate so to the user.\nFor example, the following function\n```\nstruct Foo { bar: int }\nfn foo2<'a, 'b>(x: &'a Foo) -> &'b int {\n   &x.bar\n}\n```\nwould report an error because we expect 'a and 'b to match, and so we group\n'a and 'b together inside a SameRegions struct"],[12,"scope_id","","",107],[12,"regions","","",107],[3,"RegionVarBindings","",""],[3,"RegionSnapshot","",""],[4,"Constraint","",""],[13,"ConstrainVarSubVar","","",108],[13,"ConstrainRegSubVar","","",108],[13,"ConstrainVarSubReg","","",108],[4,"Verify","",""],[13,"VerifyRegSubReg","","",109],[13,"VerifyGenericBound","","",109],[4,"GenericKind","",""],[13,"Param","","",110],[13,"Projection","","",110],[4,"UndoLogEntry","",""],[13,"OpenSnapshot","","",111],[13,"CommitedSnapshot","","",111],[13,"AddVar","","",111],[13,"AddConstraint","","",111],[13,"AddVerify","","",111],[13,"AddGiven","","",111],[13,"AddCombination","","",111],[4,"CombineMapType","",""],[13,"Lub","","",112],[13,"Glb","","",112],[4,"RegionResolutionError","",""],[13,"ConcreteFailure","","`ConcreteFailure(o, a, b)`:",113],[13,"GenericBoundFailure","","`GenericBoundFailure(p, s, a, bs)",113],[13,"SubSupConflict","","`SubSupConflict(v, sub_origin, sub_r, sup_origin, sup_r)`:",113],[13,"SupSupConflict","","`SupSupConflict(v, origin1, r1, origin2, r2)`:",113],[13,"ProcessedErrors","","For subsets of `ConcreteFailure` and `SubSupConflict`, we can derive\nmore specific errors message by suggesting to the user where they\nshould put a lifetime. In those cases we process and put those errors\ninto `ProcessedErrors` before we do any reporting.",113],[4,"VarValue","",""],[13,"NoValue","","",114],[13,"Value","","",114],[13,"ErrorValue","","",114],[6,"CombineMap","",""],[11,"fmt","","",108],[11,"hash","","",108],[11,"eq","","",108],[11,"ne","","",108],[11,"clone","","",108],[11,"eq","","",110],[11,"ne","","",110],[11,"fmt","","",110],[11,"clone","","",110],[11,"hash","","",115],[11,"eq","","",115],[11,"ne","","",115],[11,"eq","","",111],[11,"ne","","",111],[11,"eq","","",112],[11,"ne","","",112],[11,"fmt","","",113],[11,"clone","","",113],[11,"fmt","","",107],[11,"clone","","",107],[11,"contains","","",107],[11,"push","","",107],[11,"fmt","","",116],[11,"new","","",117],[11,"start_snapshot","","",117],[11,"commit","","",117],[11,"rollback_to","","",117],[11,"num_vars","","",117],[11,"new_region_var","","",117],[11,"new_skolemized","","Creates a new skolemized region. Skolemized regions are fresh\nregions used when performing higher-ranked computations. They\nmust be used in a very particular way and are never supposed\nto \"escape\" out into error messages or the code at large.",117],[11,"new_bound","","",117],[11,"add_given","","",117],[11,"make_eqregion","","",117],[11,"make_subregion","","",117],[11,"verify_generic_bound","","See `Verify::VerifyGenericBound`",117],[11,"lub_regions","","",117],[11,"glb_regions","","",117],[11,"resolve_var","","",117],[11,"combine_vars","","",117],[11,"vars_created_since_snapshot","","",117],[11,"tainted","","Computes all regions that have been related to `r0` in any way since the mark `mark` was\nmade---`r0` itself will be the first entry. This is used when checking whether skolemized\nregions are being improperly related to other regions.",117],[11,"resolve_regions","","This function performs the actual region resolution.  It must be\ncalled after all constraints have been added.  It performs a\nfixed-point iteration to find region values which satisfy all\nconstraints, assuming such values can be found; if they cannot,\nerrors are reported.",117],[11,"repr","","",108],[11,"repr","","",109],[11,"repr","","",114],[11,"repr","","",110],[11,"user_string","","",110],[11,"to_ty","","",110],[0,"resolve","rustc::middle::infer",""],[3,"OpportunisticTypeResolver","rustc::middle::infer::resolve","The opportunistic type resolver can be used at any time. It simply replaces\ntype variables that have been unified with the things they have\nbeen unified with (similar to `shallow_resolve`, but deep). This is\nuseful for printing messages etc but also required at various\npoints for correctness."],[5,"fully_resolve","","Full type resolution replaces all type and region variables with\ntheir concrete results. If any variable cannot be replaced (never unified, etc)\nthen an `Err` result is returned."],[11,"new","","",118],[11,"tcx","","",118],[11,"fold_ty","","",118],[11,"new","rustc::middle::infer","",119],[11,"tcx","","",119],[11,"fold_region","","",119],[11,"fold_ty","","",119],[0,"sub","",""],[3,"Sub","rustc::middle::infer::sub","\"Greatest lower bound\" (common subtype)"],[5,"Sub","",""],[11,"tag","","",120],[11,"fields","","",120],[11,"tys_with_variance","","",120],[11,"regions_with_variance","","",120],[11,"regions","","",120],[11,"mts","","",120],[11,"unsafeties","","",120],[11,"builtin_bounds","","",120],[11,"tys","","",120],[11,"binders","","",120],[0,"type_variable","rustc::middle::infer",""],[3,"TypeVariableTable","rustc::middle::infer::type_variable",""],[3,"Snapshot","",""],[4,"RelationDir","",""],[13,"SubtypeOf","","",121],[13,"SupertypeOf","","",121],[13,"EqTo","","",121],[13,"BiTo","","",121],[11,"fmt","","",121],[11,"eq","","",121],[11,"ne","","",121],[11,"new","","",122],[11,"var_diverges","","",122],[11,"relate_vars","","Records that `a <: b`, `a :> b`, or `a == b`, depending on `dir`.",122],[11,"instantiate_and_push","","Instantiates `vid` with the type `ty` and then pushes an entry onto `stack` for each of the\nrelations of `vid` to other variables. The relations will have the form `(ty, dir, vid1)`\nwhere `vid1` is some other variable id.",122],[11,"new_var","","",122],[11,"probe","","",122],[11,"replace_if_possible","","",122],[11,"snapshot","","",122],[11,"rollback_to","","",122],[11,"commit","","",122],[11,"types_escaping_snapshot","","Find the set of type variables that existed *before* `s`\nbut which have only been unified since `s` started, and\nreturn the types with which they were unified. So if we had\na type variable `V0`, then we started the snapshot, then we\ncreated a type variable `V1`, unifed `V0` with `T0`, and\nunified `V1` with `T1`, this function would return `{T0}`.",122],[0,"unify","rustc::middle::infer",""],[3,"UnificationTable","rustc::middle::infer::unify","Table of unification keys and their values."],[3,"Snapshot","","At any time, users may snapshot a unification table.  The changes\nmade during the snapshot may either be *committed* or *rolled back*."],[3,"Node","","Internal type used to represent the result of a `get()` operation.\nConveys the current root and value of the key."],[12,"key","","",123],[12,"value","","",123],[12,"rank","","",123],[3,"Delegate","",""],[4,"VarValue","","Value of a unification key. We implement Tarjan's union-find\nalgorithm: when two keys are unified, one of them is converted\ninto a \"redirect\" pointing at the other. These redirects form a\nDAG: the roots of the DAG (nodes that are not redirected) are each\nassociated with a value of type `V` and a rank. The rank is used\nto keep the DAG relatively balanced, which helps keep the running\ntime of the algorithm under control. For more information, see\n<http://en.wikipedia.org/wiki/Disjoint-set_data_structure>."],[13,"Redirect","","",124],[13,"Root","","",124],[5,"err","",""],[8,"UnifyKey","","This trait is implemented by any type that can serve as a type\nvariable. We call such variables *unification keys*. For example,\nthis trait is implemented by `IntVid`, which represents integral\nvariables."],[16,"Value","rustc::middle::infer::unify::UnifyKey",""],[10,"index","rustc::middle::infer::unify","",125],[10,"from_index","","",125],[10,"unification_table","","",125],[10,"tag","","",125],[8,"UnifyValue","","Trait for valid types that a type variable can be set to. Note that\nthis is typically not the end type that the value will take on, but\nrather an `Option` wrapper (where `None` represents a variable\nwhose value is not yet set)."],[8,"SimplyUnifiable","","Indicates a type that does not have any kind of subtyping\nrelationship."],[10,"to_type","","",126],[10,"to_type_err","","",126],[8,"InferCtxtMethodsForSimplyUnifiableTypes","",""],[10,"simple_vars","","",127],[10,"simple_var_t","","",127],[10,"probe_var","","",127],[11,"fmt","","",124],[11,"clone","","",124],[11,"eq","","",124],[11,"ne","","",124],[11,"new","","",128],[11,"snapshot","","Starts a new snapshot. Each snapshot must be either\nrolled back or committed in a \"LIFO\" (stack) order.",128],[11,"rollback_to","","Reverses all changes since the last snapshot. Also\nremoves any keys that have been created since then.",128],[11,"commit","","Commits all changes since the last snapshot. Of course, they\ncan still be undone if there is a snapshot further out.",128],[11,"new_key","","",128],[11,"get","","Find the root node for `vid`. This uses the standard union-find algorithm with path\ncompression: http://en.wikipedia.org/wiki/Disjoint-set_data_structure",128],[11,"set","","Sets the value for `vid` to `new_value`. `vid` MUST be a root node! Also, we must be in the\nmiddle of a snapshot.",128],[11,"unify","","Either redirects node_a to node_b or vice versa, depending on the relative rank. Returns\nthe new root and rank. You should then update the value of the new root to something\nsuitable.",128],[6,"Value","",""],[6,"Undo","",""],[11,"reverse","","",129],[11,"simple_vars","rustc::middle::infer","Unifies two simple keys. Because simple keys do not have any subtyping relationships, if\nboth keys have already been associated with a value, then those two values must be the\nsame.",89],[11,"simple_var_t","","Sets the value of the key `a_id` to `b`. Because simple keys do not have any subtyping\nrelationships, if `a_id` already has a value, it must be the same as `b`.",89],[11,"probe_var","","",89],[6,"Value","rustc::middle::infer::unify",""],[6,"Value","",""],[11,"to_type","syntax::ast","",130],[11,"to_type_err","","",130],[6,"Bound","rustc::middle::infer",""],[6,"cres","",""],[6,"ures","",""],[6,"fres","",""],[6,"SkolemizationMap","","A map returned by `skolemize_late_bound_regions()` indicating the skolemized\nregion that each late-bound region was replaced with."],[11,"fmt","","",90],[11,"clone","","",90],[11,"fmt","","",91],[11,"clone","","",91],[11,"fmt","","",131],[11,"clone","","",131],[11,"fmt","","",92],[11,"clone","","",92],[11,"fmt","","",93],[11,"clone","","",93],[11,"fmt","","",94],[11,"clone","","",94],[11,"fmt","","",95],[11,"freshen","","",89],[11,"type_var_diverges","","",89],[11,"freshener","","",89],[11,"type_is_unconstrained_numeric","","",89],[11,"combine_fields","","",89],[11,"equate","","",89],[11,"sub","","",89],[11,"lub","","",89],[11,"commit_unconditionally","","Execute `f` and commit the bindings",89],[11,"commit_if_ok","","Execute `f` and commit the bindings if successful",89],[11,"commit_regions_if_ok","","Execute `f` and commit only the region bindings if successful.\nThe function f must be very careful not to leak any non-region\nvariables that get created.",89],[11,"try","","Execute `f`, unroll bindings on panic",89],[11,"probe","","Execute `f` then unroll any bindings it creates",89],[11,"add_given","","",89],[11,"sub_types","","",89],[11,"eq_types","","",89],[11,"sub_trait_refs","","",89],[11,"sub_poly_trait_refs","","",89],[11,"skolemize_late_bound_regions","","See `higher_ranked::skolemize_late_bound_regions`",89],[11,"leak_check","","See `higher_ranked::leak_check`",89],[11,"plug_leaks","","See `higher_ranked::plug_leaks`",89],[11,"equality_predicate","","",89],[11,"region_outlives_predicate","","",89],[11,"next_ty_var_id","","",89],[11,"next_ty_var","","",89],[11,"next_diverging_ty_var","","",89],[11,"next_ty_vars","","",89],[11,"next_int_var_id","","",89],[11,"next_float_var_id","","",89],[11,"next_region_var","","",89],[11,"region_vars_for_defs","","",89],[11,"fresh_substs_for_generics","","Given a set of generics defined on a type or impl, returns a substitution mapping each\ntype/region parameter to a fresh inference variable.",89],[11,"fresh_substs_for_trait","","Given a set of generics defined on a trait, returns a substitution mapping each output\ntype/region parameter to a fresh inference variable, and mapping the self type to\n`self_ty`.",89],[11,"fresh_bound_region","","",89],[11,"resolve_regions_and_report_errors","","",89],[11,"ty_to_string","","",89],[11,"tys_to_string","","",89],[11,"trait_ref_to_string","","",89],[11,"shallow_resolve","","",89],[11,"resolve_type_vars_if_possible","","Where possible, replaces type/int/float variables in\n`value` with their final value. Note that region variables\nare unaffected. If a type variable has not been unified, it\nis left as is.  This is an idempotent operation that does\nnot affect inference state in any way and so you can do it\nat will.",89],[11,"fully_resolve","","Attempts to resolve all type/region variables in\n`value`. Region inference must have been run already (e.g.,\nby calling `resolve_regions_and_report_errors`).  If some\nvariable was never unified, an `Err` results.",89],[11,"type_error_message_str","","",89],[11,"type_error_message_str_with_expected","","",89],[11,"type_error_message","","",89],[11,"report_mismatched_types","","",89],[11,"replace_late_bound_regions_with_fresh_var","","",89],[11,"verify_generic_bound","","See `verify_generic_bound` method in `region_inference`",89],[11,"can_equate","","",89],[11,"span","","",131],[11,"types","","",131],[11,"dummy","","",131],[11,"repr","","",131],[11,"span","","",90],[11,"repr","","",90],[11,"span","","",92],[11,"repr","","",92],[11,"span","","",94],[11,"repr","","",94],[0,"lang_items","rustc::middle",""],[3,"LanguageItems","rustc::middle::lang_items",""],[12,"items","","",132],[12,"missing","","",132],[4,"LangItem","",""],[13,"SendTraitLangItem","","",133],[13,"SizedTraitLangItem","","",133],[13,"CopyTraitLangItem","","",133],[13,"SyncTraitLangItem","","",133],[13,"DropTraitLangItem","","",133],[13,"AddTraitLangItem","","",133],[13,"SubTraitLangItem","","",133],[13,"MulTraitLangItem","","",133],[13,"DivTraitLangItem","","",133],[13,"RemTraitLangItem","","",133],[13,"NegTraitLangItem","","",133],[13,"NotTraitLangItem","","",133],[13,"BitXorTraitLangItem","","",133],[13,"BitAndTraitLangItem","","",133],[13,"BitOrTraitLangItem","","",133],[13,"ShlTraitLangItem","","",133],[13,"ShrTraitLangItem","","",133],[13,"IndexTraitLangItem","","",133],[13,"IndexMutTraitLangItem","","",133],[13,"RangeStructLangItem","","",133],[13,"RangeFromStructLangItem","","",133],[13,"RangeToStructLangItem","","",133],[13,"RangeFullStructLangItem","","",133],[13,"UnsafeCellTypeLangItem","","",133],[13,"DerefTraitLangItem","","",133],[13,"DerefMutTraitLangItem","","",133],[13,"FnTraitLangItem","","",133],[13,"FnMutTraitLangItem","","",133],[13,"FnOnceTraitLangItem","","",133],[13,"EqTraitLangItem","","",133],[13,"OrdTraitLangItem","","",133],[13,"StrEqFnLangItem","","",133],[13,"PanicFnLangItem","","",133],[13,"PanicBoundsCheckFnLangItem","","",133],[13,"PanicFmtLangItem","","",133],[13,"ExchangeMallocFnLangItem","","",133],[13,"ExchangeFreeFnLangItem","","",133],[13,"StrDupUniqFnLangItem","","",133],[13,"StartFnLangItem","","",133],[13,"TyDescStructLangItem","","",133],[13,"OpaqueStructLangItem","","",133],[13,"EhPersonalityLangItem","","",133],[13,"ExchangeHeapLangItem","","",133],[13,"OwnedBoxLangItem","","",133],[13,"PhantomFnItem","","",133],[13,"PhantomDataItem","","",133],[13,"CovariantTypeItem","","",133],[13,"ContravariantTypeItem","","",133],[13,"InvariantTypeItem","","",133],[13,"CovariantLifetimeItem","","",133],[13,"ContravariantLifetimeItem","","",133],[13,"InvariantLifetimeItem","","",133],[13,"NoCopyItem","","",133],[13,"ManagedItem","","",133],[13,"NonZeroItem","","",133],[13,"StackExhaustedLangItem","","",133],[13,"DebugTraitLangItem","","",133],[5,"extract","",""],[5,"collect_language_items","",""],[11,"hash","","",133],[11,"eq","","",133],[11,"ne","","",133],[11,"from_i64","","",133],[11,"from_u64","","",133],[11,"new","","",132],[11,"items","","",132],[11,"item_name","","",132],[11,"require","","",132],[11,"from_builtin_kind","","",132],[11,"to_builtin_kind","","",132],[11,"fn_trait_kind","","",132],[11,"send_trait","","",132],[11,"sized_trait","","",132],[11,"copy_trait","","",132],[11,"sync_trait","","",132],[11,"drop_trait","","",132],[11,"add_trait","","",132],[11,"sub_trait","","",132],[11,"mul_trait","","",132],[11,"div_trait","","",132],[11,"rem_trait","","",132],[11,"neg_trait","","",132],[11,"not_trait","","",132],[11,"bitxor_trait","","",132],[11,"bitand_trait","","",132],[11,"bitor_trait","","",132],[11,"shl_trait","","",132],[11,"shr_trait","","",132],[11,"index_trait","","",132],[11,"index_mut_trait","","",132],[11,"range_struct","","",132],[11,"range_from_struct","","",132],[11,"range_to_struct","","",132],[11,"range_full_struct","","",132],[11,"unsafe_cell_type","","",132],[11,"deref_trait","","",132],[11,"deref_mut_trait","","",132],[11,"fn_trait","","",132],[11,"fn_mut_trait","","",132],[11,"fn_once_trait","","",132],[11,"eq_trait","","",132],[11,"ord_trait","","",132],[11,"str_eq_fn","","",132],[11,"panic_fn","","",132],[11,"panic_bounds_check_fn","","",132],[11,"panic_fmt","","",132],[11,"exchange_malloc_fn","","",132],[11,"exchange_free_fn","","",132],[11,"strdup_uniq_fn","","",132],[11,"start_fn","","",132],[11,"ty_desc","","",132],[11,"opaque","","",132],[11,"eh_personality","","",132],[11,"exchange_heap","","",132],[11,"owned_box","","",132],[11,"phantom_fn","","",132],[11,"phantom_data","","",132],[11,"covariant_type","","",132],[11,"contravariant_type","","",132],[11,"invariant_type","","",132],[11,"covariant_lifetime","","",132],[11,"contravariant_lifetime","","",132],[11,"invariant_lifetime","","",132],[11,"no_copy_bound","","",132],[11,"managed_bound","","",132],[11,"non_zero","","",132],[11,"stack_exhausted","","",132],[11,"debug_trait","","",132],[0,"liveness","rustc::middle","A classic liveness analysis based on dataflow over the AST.  Computes,\nfor each local variable in a function, whether that variable is live\nat a given point.  Program execution points are identified by their\nid."],[5,"check_crate","rustc::middle::liveness",""],[0,"mem_categorization","rustc::middle","# Categorization"],[3,"Upvar","rustc::middle::mem_categorization",""],[12,"id","","",134],[12,"kind","","",134],[3,"cmt_","",""],[12,"id","","",135],[12,"span","","",135],[12,"cat","","",135],[12,"mutbl","","",135],[12,"ty","","",135],[12,"note","","",135],[3,"MemCategorizationContext","",""],[4,"categorization","",""],[13,"cat_rvalue","","",136],[13,"cat_static_item","","",136],[13,"cat_upvar","","",136],[13,"cat_local","","",136],[13,"cat_deref","","",136],[13,"cat_interior","","",136],[13,"cat_downcast","","",136],[4,"PointerKind","",""],[13,"Unique","","`Box<T>`",137],[13,"BorrowedPtr","","`&T`",137],[13,"UnsafePtr","","`*T`",137],[13,"Implicit","","Implicit deref of the `&T` that results from an overloaded index `[]`.",137],[4,"InteriorKind","",""],[13,"InteriorField","","",138],[13,"InteriorElement","","",138],[4,"FieldName","",""],[13,"NamedField","","",139],[13,"PositionalField","","",139],[4,"InteriorOffsetKind","",""],[13,"Index","","",140],[13,"Pattern","","",140],[4,"ElementKind","",""],[13,"VecElement","","",141],[13,"OtherElement","","",141],[4,"MutabilityCategory","",""],[13,"McImmutable","","",142],[13,"McDeclared","","",142],[13,"McInherited","","",142],[4,"Note","",""],[13,"NoteClosureEnv","","",143],[13,"NoteUpvarRef","","",143],[13,"NoteNone","","",143],[4,"deref_kind","",""],[13,"deref_ptr","","",144],[13,"deref_interior","","",144],[4,"InteriorSafety","",""],[13,"InteriorUnsafe","","",145],[13,"InteriorSafe","","",145],[4,"AliasableReason","",""],[13,"AliasableBorrowed","","",146],[13,"AliasableClosure","","",146],[13,"AliasableOther","","",146],[13,"AliasableStatic","","",146],[13,"AliasableStaticMut","","",146],[5,"ptr_sigil","",""],[6,"cmt","",""],[6,"McResult","",""],[8,"ast_node","",""],[10,"id","","",147],[10,"span","","",147],[8,"Typer","","The `Typer` trait provides the interface for the mem-categorization\nmodule to the results of the type check. It can be used to query\nthe type assigned to an expression node, to inquire after adjustments,\nand so on."],[10,"node_ty","","",148],[10,"expr_ty_adjusted","","",148],[10,"type_moves_by_default","","",148],[10,"node_method_ty","","",148],[10,"node_method_origin","","",148],[10,"adjustments","","",148],[10,"is_method_call","","",148],[10,"temporary_scope","","",148],[10,"upvar_capture","","",148],[11,"fmt","","",136],[11,"eq","","",136],[11,"ne","","",136],[11,"clone","","",136],[11,"fmt","","",134],[11,"eq","","",134],[11,"ne","","",134],[11,"clone","","",134],[11,"fmt","","",137],[11,"hash","","",137],[11,"eq","","",137],[11,"ne","","",137],[11,"clone","","",137],[11,"fmt","","",138],[11,"hash","","",138],[11,"eq","","",138],[11,"ne","","",138],[11,"clone","","",138],[11,"fmt","","",139],[11,"hash","","",139],[11,"eq","","",139],[11,"ne","","",139],[11,"clone","","",139],[11,"fmt","","",140],[11,"hash","","",140],[11,"eq","","",140],[11,"ne","","",140],[11,"clone","","",140],[11,"fmt","","",141],[11,"hash","","",141],[11,"eq","","",141],[11,"ne","","",141],[11,"clone","","",141],[11,"fmt","","",142],[11,"hash","","",142],[11,"eq","","",142],[11,"ne","","",142],[11,"clone","","",142],[11,"fmt","","",143],[11,"eq","","",143],[11,"ne","","",143],[11,"clone","","",143],[11,"fmt","","",135],[11,"eq","","",135],[11,"ne","","",135],[11,"clone","","",135],[11,"id","syntax::ast","",149],[11,"span","","",149],[11,"id","","",150],[11,"span","","",150],[11,"from_mutbl","rustc::middle::mem_categorization","",142],[11,"from_borrow_kind","","",142],[11,"from_pointer_kind","","",142],[11,"inherit","","",142],[11,"is_mutable","","",142],[11,"is_immutable","","",142],[11,"to_user_str","","",142],[11,"new","","",151],[11,"cat_expr","","",151],[11,"cat_expr_autoderefd","","",151],[11,"cat_expr_unadjusted","","",151],[11,"cat_def","","",151],[11,"cat_rvalue_node","","",151],[11,"cat_rvalue","","",151],[11,"cat_field","","",151],[11,"cat_tup_field","","",151],[11,"cat_index","","Creates a cmt for an indexing operation (`[]`).",151],[11,"cat_slice_pattern","","Given a pattern P like: `[_, ..Q, _]`, where `vec_cmt` is the cmt for `P`, `slice_pat` is\nthe pattern `Q`, returns:",151],[11,"cat_imm_interior","","",151],[11,"cat_downcast","","",151],[11,"cat_pattern","","",151],[11,"guarantor","","Returns `self` after stripping away any owned pointer derefs or\ninterior content. The return value is basically the `cmt` which\ndetermines how long the value in `self` remains live.",135],[11,"freely_aliasable","","Returns `Some(_)` if this lvalue represents a freely aliasable pointer type.",135],[11,"upvar","","",135],[11,"descriptive_string","","",135],[11,"repr","","",135],[11,"repr","","",136],[11,"repr","","",137],[11,"repr","","",138],[11,"repr","","",134],[11,"user_string","","",134],[0,"pat_util","rustc::middle",""],[5,"pat_id_map","rustc::middle::pat_util",""],[5,"pat_is_refutable","",""],[5,"pat_is_variant_or_struct","",""],[5,"pat_is_const","",""],[5,"pat_is_binding","",""],[5,"pat_is_binding_or_wild","",""],[5,"pat_bindings","","Call `it` on every \"binding\" in a pattern, e.g., on `a` in\n`match foo() { Some(a) => (), None => () }`"],[5,"pat_contains_bindings","","Checks if the pattern contains any patterns that bind something to\nan ident, e.g. `foo`, or `Foo(foo)` or `foo @ Bar(..)`."],[5,"pat_contains_bindings_or_wild","","Checks if the pattern contains any patterns that bind something to\nan ident or wildcard, e.g. `foo`, or `Foo(_)`, `foo @ Bar(..)`,"],[5,"simple_identifier","",""],[5,"def_to_path","",""],[6,"PatIdMap","",""],[0,"privacy","rustc::middle","A pass that checks to make sure private fields and methods aren't used\noutside their scopes. This pass will also generate a set of exported items\nwhich are available for use externally when compiled as a library."],[4,"LastPrivate","rustc::middle::privacy",""],[13,"LastMod","","",152],[13,"LastImport","","",152],[12,"value_priv","rustc::middle::privacy::LastPrivate","",152],[12,"value_used","","",152],[12,"type_priv","","",152],[12,"type_used","","",152],[4,"PrivateDep","rustc::middle::privacy",""],[13,"AllPublic","","",153],[13,"DependsOn","","",153],[4,"ImportUse","",""],[13,"Unused","","",154],[13,"Used","","",154],[6,"ExportedItems","","A set of AST nodes exported by the crate."],[6,"ExternalExports","","A set containing all exported definitions from external crates.\nThe set does not contain any entries from local crates."],[6,"PublicItems","","A set of AST nodes that are fully public in the crate. This map is used for\ndocumentation purposes (reexporting a private struct inlines the doc,\nreexporting a public struct doesn't inline the doc)."],[11,"fmt","","",152],[11,"fmt","","",153],[11,"fmt","","",154],[11,"eq","","",154],[11,"ne","","",154],[11,"or","","",152],[0,"reachable","rustc::middle",""],[5,"find_reachable","rustc::middle::reachable",""],[0,"region","rustc::middle","This file actually contains two passes related to regions.  The first\npass builds up the `scope_map`, which describes the parent links in\nthe region hierarchy.  The second pass infers which types must be\nregion parameterized."],[3,"DestructionScopeData","rustc::middle::region","extent of destructors for temporaries of node-id"],[12,"node_id","","",155],[3,"BlockRemainder","","Represents a subscope of `block` for a binding that is introduced\nby `block.stmts[first_statement_index]`. Such subscopes represent\na suffix of the block. Note that each subscope does not include\nthe initializer expression, if any, for the statement indexed by\n`first_statement_index`."],[12,"block","","",156],[12,"first_statement_index","","",156],[3,"RegionMaps","","The region maps encode information about region relationships."],[3,"Context","",""],[4,"CodeExtent","","CodeExtent represents a statically-describable extent that can be\nused to bound the lifetime/region for values."],[13,"Misc","","",157],[13,"DestructionScope","","",157],[13,"Remainder","","",157],[5,"resolve_crate","",""],[5,"resolve_inlined_item","",""],[11,"fmt","","",157],[11,"decode","","",157],[11,"encode","","",157],[11,"hash","","",157],[11,"cmp","","",157],[11,"partial_cmp","","",157],[11,"lt","","",157],[11,"le","","",157],[11,"gt","","",157],[11,"ge","","",157],[11,"eq","","",157],[11,"ne","","",157],[11,"clone","","",157],[11,"fmt","","",155],[11,"decode","","",155],[11,"encode","","",155],[11,"hash","","",155],[11,"cmp","","",155],[11,"partial_cmp","","",155],[11,"lt","","",155],[11,"le","","",155],[11,"gt","","",155],[11,"ge","","",155],[11,"eq","","",155],[11,"ne","","",155],[11,"clone","","",155],[11,"new","","",155],[11,"to_code_extent","","",155],[11,"fmt","","",156],[11,"decode","","",156],[11,"encode","","",156],[11,"hash","","",156],[11,"cmp","","",156],[11,"partial_cmp","","",156],[11,"lt","","",156],[11,"le","","",156],[11,"gt","","",156],[11,"ge","","",156],[11,"eq","","",156],[11,"ne","","",156],[11,"clone","","",156],[11,"from_node_id","","Creates a scope that represents the dynamic extent associated\nwith `node_id`.",157],[11,"node_id","","Returns a node id associated with this scope.",157],[11,"map_id","","Maps this scope to a potentially new one according to the\nNodeId transformer `f_id`.",157],[11,"span","","Returns the span of this CodeExtent.  Note that in general the\nreturned span may not correspond to the span of any node id in\nthe AST.",157],[11,"fmt","","",158],[11,"each_encl_scope","","",159],[11,"each_var_scope","","",159],[11,"each_encl_free_region","","",159],[11,"each_rvalue_scope","","",159],[11,"each_terminating_scope","","",159],[11,"relate_free_regions","","",159],[11,"record_encl_scope","","",159],[11,"record_var_scope","","",159],[11,"record_rvalue_scope","","",159],[11,"mark_as_terminating_scope","","Records that a scope is a TERMINATING SCOPE. Whenever we create automatic temporaries --\ne.g. by an expression like `a().f` -- they will be freed within the innermost terminating\nscope.",159],[11,"opt_encl_scope","","Returns the narrowest scope that encloses `id`, if any.",159],[11,"encl_scope","","Returns the narrowest scope that encloses `id`, if any.",159],[11,"var_scope","","Returns the lifetime of the local variable `var_id`",159],[11,"temporary_scope","","Returns the scope when temp created by expr_id will be cleaned up",159],[11,"var_region","","Returns the lifetime of the variable `id`.",159],[11,"scopes_intersect","","",159],[11,"is_subscope_of","","Returns true if `subscope` is equal to or is lexically nested inside `superscope` and false\notherwise.",159],[11,"sub_free_region","","Determines whether two free regions have a subregion relationship\nby walking the graph encoded in `free_region_map`.  Note that\nit is possible that `sub != sup` and `sub <= sup` and `sup <= sub`\n(that is, the user can give two different names to the same lifetime).",159],[11,"is_subregion_of","","Determines whether one region is a subregion of another.  This is intended to run *after\ninference* and sadly the logic is somewhat duplicated with the code in infer.rs.",159],[11,"nearest_common_ancestor","","Finds the nearest common ancestor (if any) of two scopes.  That is, finds the smallest\nscope which is greater than or equal to both `scope_a` and `scope_b`.",159],[0,"recursion_limit","rustc::middle",""],[5,"update_recursion_limit","rustc::middle::recursion_limit",""],[0,"resolve_lifetime","rustc::middle","Name resolution for lifetimes."],[4,"DefRegion","rustc::middle::resolve_lifetime",""],[13,"DefStaticRegion","","",160],[13,"DefEarlyBoundRegion","","",160],[13,"DefLateBoundRegion","","",160],[13,"DefFreeRegion","","",160],[5,"krate","",""],[5,"early_bound_lifetimes","",""],[6,"NamedRegionMap","",""],[11,"fmt","","",160],[11,"decode","","",160],[11,"encode","","",160],[11,"hash","","",160],[11,"eq","","",160],[11,"ne","","",160],[11,"clone","","",160],[0,"stability","rustc::middle","A pass that annotates every item and method with its stability level,\npropagating default levels lexically from parent to children ast nodes."],[3,"Index","rustc::middle::stability","A stability index, giving the stability level for items and methods."],[5,"check_unstable_api_usage","","Cross-references the feature names of unstable APIs with enabled\nfeatures and possibly prints errors. Returns a list of all\nfeatures used."],[5,"check_item","","Helper for discovering nodes to check for stability"],[5,"check_expr","","Helper for discovering nodes to check for stability"],[5,"check_path","",""],[5,"check_pat","",""],[5,"lookup","","Lookup the stability for a node, loading external crate\nmetadata as necessary."],[5,"check_unused_or_stable_features","","Given the list of enabled features that were not language features (i.e. that\nwere expected to be library features), and the list of features used from\nlibraries, identify activated features that don't exist and error about them."],[11,"build","","Construct the stability index for a crate being compiled.",161],[11,"new","","",161],[0,"subst","rustc::middle",""],[3,"Substs","rustc::middle::subst","A substitution mapping type/region parameters to new values. We\nidentify each in-scope parameter by an *index* and a *parameter\nspace* (which indices where the parameter is defined; see\n`ParamSpace`)."],[12,"types","","",162],[12,"regions","","",162],[3,"VecPerParamSpace","","Vector of things sorted by param space. Used to keep\nthe set of things declared on the type, self, or method\ndistinct."],[3,"SeparateVecsPerParamSpace","","The `split` function converts one `VecPerParamSpace` into this\n`SeparateVecsPerParamSpace` structure."],[12,"types","","",163],[12,"selfs","","",163],[12,"fns","","",163],[3,"EnumeratedItems","",""],[4,"RegionSubsts","","Represents the values to use when substituting lifetime parameters.\nIf the value is `ErasedRegions`, then this subst is occurring during\ntrans, and all region parameters will be replaced with `ty::ReStatic`."],[13,"ErasedRegions","","",164],[13,"NonerasedRegions","","",164],[4,"ParamSpace","",""],[13,"TypeSpace","","",165],[13,"SelfSpace","","",165],[13,"FnSpace","","",165],[8,"Subst","",""],[11,"subst","","",166],[10,"subst_spanned","","",166],[11,"fmt","","",162],[11,"hash","","",162],[11,"eq","","",162],[11,"ne","","",162],[11,"clone","","",162],[11,"fmt","","",164],[11,"hash","","",164],[11,"eq","","",164],[11,"ne","","",164],[11,"clone","","",164],[11,"new","","",162],[11,"new_type","","",162],[11,"new_trait","","",162],[11,"erased","","",162],[11,"empty","","",162],[11,"trans_empty","","",162],[11,"is_noop","","",162],[11,"type_for_def","","",162],[11,"has_regions_escaping_depth","","",162],[11,"self_ty","","",162],[11,"with_self_ty","","",162],[11,"erase_regions","","",162],[11,"regions","","Since ErasedRegions are only to be used in trans, most of the compiler can use this method\nto easily access the set of region substitutions.",162],[11,"mut_regions","","Since ErasedRegions are only to be used in trans, most of the compiler can use this method\nto easily access the set of region substitutions.",162],[11,"with_method","","",162],[11,"is_erased","","",164],[11,"fmt","","",165],[11,"decode","","",165],[11,"encode","","",165],[11,"hash","","",165],[11,"clone","","",165],[11,"eq","","",165],[11,"ne","","",165],[11,"cmp","","",165],[11,"partial_cmp","","",165],[11,"lt","","",165],[11,"le","","",165],[11,"gt","","",165],[11,"ge","","",165],[11,"all","","",165],[11,"to_uint","","",165],[11,"from_uint","","",165],[11,"decode","","",167],[11,"encode","","",167],[11,"hash","","",167],[11,"clone","","",167],[11,"eq","","",167],[11,"ne","","",167],[11,"fmt","","",167],[11,"empty","","",167],[11,"params_from_type","","",167],[11,"new","","`t` is the type space.\n`s` is the self space.\n`a` is the assoc space.\n`f` is the fn space.",167],[11,"push","","Appends `value` to the vector associated with `space`.",167],[11,"extend","","Appends `values` to the vector associated with `space`.",167],[11,"pop","","",167],[11,"truncate","","",167],[11,"replace","","",167],[11,"get_self","","",167],[11,"len","","",167],[11,"is_empty_in","","",167],[11,"get_slice","","",167],[11,"get_mut_slice","","",167],[11,"opt_get","","",167],[11,"get","","",167],[11,"iter","","",167],[11,"into_iter","","",167],[11,"iter_enumerated","","",167],[11,"as_slice","","",167],[11,"into_vec","","",167],[11,"all_vecs","","",167],[11,"all","","",167],[11,"any","","",167],[11,"is_empty","","",167],[11,"map","","",167],[11,"map_enumerated","","",167],[11,"map_move","","",167],[11,"split","","",167],[11,"with_vec","","",167],[11,"clone","","",168],[6,"Item","",""],[11,"next","","",168],[6,"Item","",""],[6,"IntoIter","",""],[11,"into_iter","","",167],[6,"Item","",""],[6,"IntoIter","",""],[0,"traits","rustc::middle","Trait Resolution. See the Book for more."],[3,"FulfillmentContext","rustc::middle::traits","The fulfillment context is used to drive trait resolution.  It\nconsists of a list of obligations that must be (eventually)\nsatisfied. The job is to track which are satisfied, which yielded\nerrors, and which are still pending. At any point, users can call\n`select_where_possible`, and the fulfilment context will try to do\nselection, retaining only those obligations that remain\nambiguous. This may be helpful in pushing type inference\nalong. Once all type inference constraints have been generated, the\nmethod `select_all_or_error` can be used to report any remaining\nambiguous cases as errors."],[3,"RegionObligation","",""],[12,"sub_region","","",169],[12,"sup_type","","",169],[12,"cause","","",169],[3,"MismatchedProjectionTypes","",""],[12,"err","","",170],[3,"Normalized","",""],[12,"value","","",171],[12,"obligations","","",171],[3,"SelectionContext","",""],[3,"SelectionCache","",""],[3,"Obligation","","An `Obligation` represents some trait reference (e.g. `int:Eq`) for\nwhich the vtable must be found.  The process of finding a vtable is\ncalled \"resolving\" the `Obligation`. This process consists of\neither identifying an `impl` (e.g., `impl Eq for int`) that\nprovides the required vtable, or else finding a bound that is in\nscope. The eventual result is usually a `Selection` (defined below)."],[12,"cause","","",172],[12,"recursion_depth","","",172],[12,"predicate","","",172],[3,"ObligationCause","","Why did we incur this obligation? Used for error reporting."],[12,"span","","",173],[12,"body_id","","",173],[12,"code","","",173],[3,"DerivedObligationCause","",""],[3,"FulfillmentError","",""],[12,"obligation","","",174],[12,"code","","",174],[3,"VtableImplData","","Identifies a particular impl in the source, along with a set of\nsubstitutions from the impl's type/lifetime parameters. The\n`nested` vector corresponds to the nested obligations attached to\nthe impl's type parameters."],[12,"impl_def_id","","",175],[12,"substs","","",175],[12,"nested","","",175],[3,"VtableDefaultImplData","",""],[12,"trait_def_id","","",176],[12,"nested","","",176],[3,"VtableBuiltinData","",""],[12,"nested","","",177],[3,"VtableObjectData","","A vtable for some object-safe trait `Foo` automatically derived\nfor the object type `Foo`."],[12,"object_ty","","the object type `Foo`.",178],[12,"upcast_trait_ref","","`Foo` upcast to the obligation trait. This will be some supertrait of `Foo`.",178],[4,"OrphanCheckErr","",""],[13,"NoLocalInputType","","",179],[13,"UncoveredTy","","",179],[4,"ObjectSafetyViolation","",""],[13,"SizedSelf","","Self : Sized declared on the trait",180],[13,"SupertraitSelf","","Supertrait reference references `Self` an in illegal location\n(e.g. `trait Foo : Bar<Self>`)",180],[13,"Method","","Method has something illegal",180],[4,"MethodViolationCode","","Reasons a method might not be object-safe."],[13,"StaticMethod","","e.g., `fn foo()`",181],[13,"ReferencesSelf","","e.g., `fn foo(&self, x: Self)` or `fn foo(&self) -> Self`",181],[13,"Generic","","e.g., `fn foo<A>()`",181],[4,"MethodMatchResult","",""],[13,"MethodMatched","","",182],[13,"MethodAmbiguous","","",182],[13,"MethodDidNotMatch","","",182],[4,"MethodMatchedData","",""],[13,"PreciseMethodMatch","","",183],[13,"CoerciveMethodMatch","","",183],[4,"ObligationCauseCode","",""],[13,"MiscObligation","","Not well classified or should be obvious from span.",184],[13,"ItemObligation","","In an impl of trait X for type Y, type Y must\nalso implement all supertraits of X.",184],[13,"ObjectCastObligation","","Obligation incurred due to an object cast.",184],[13,"AssignmentLhsSized","","Various cases where expressions must be sized/copy/etc:",184],[13,"StructInitializerSized","","",184],[13,"VariableType","","",184],[13,"ReturnType","","",184],[13,"RepeatVec","","",184],[13,"ClosureCapture","","",184],[13,"FieldSized","","",184],[13,"ObjectSized","","",184],[13,"SharedStatic","","",184],[13,"BuiltinDerivedObligation","","",184],[13,"ImplDerivedObligation","","",184],[13,"CompareImplMethodObligation","","",184],[4,"SelectionError","",""],[13,"Unimplemented","","",185],[13,"Overflow","","",185],[13,"OutputTypeParameterMismatch","","",185],[4,"FulfillmentErrorCode","",""],[13,"CodeSelectionError","","",186],[13,"CodeProjectionError","","",186],[13,"CodeAmbiguity","","",186],[4,"Vtable","","Given the successful resolution of an obligation, the `Vtable`\nindicates where the vtable comes from. Note that while we call this\na \"vtable\", it does not necessarily indicate dynamic dispatch at\nruntime. `Vtable` instances just tell the compiler where to find\nmethods, but in generic code those methods are typically statically\ndispatched -- only when an object is constructed is a `Vtable`\ninstance reified into an actual vtable."],[5,"report_fulfillment_errors","",""],[5,"suggest_new_overflow_limit","",""],[5,"orphan_check","","Checks the coherence orphan rules. `impl_def_id` should be the\ndef-id of a trait impl. To pass, either the trait must be local, or else\ntwo conditions must be satisfied:"],[5,"overlapping_impls","","True if there exist types that satisfy both of the two given impls."],[5,"normalize","","Normalizes any associated type projections in `value`, replacing\nthem with a fully resolved type where possible. The return value\ncombines the normalized result and any additional obligations that\nwere incurred as result."],[5,"is_object_safe","",""],[5,"object_safety_violations","",""],[5,"elaborate_predicates","",""],[5,"get_vtable_index_of_object_method","","Given an object of type `object_trait_ref`, returns the index of\nthe method `n_method` found in the trait `trait_def_id` (which\nshould be a supertrait of `object_trait_ref`) within the vtable\nfor `object_trait_ref`."],[5,"trait_ref_for_builtin_bound","",""],[5,"supertraits","",""],[5,"transitive_bounds","",""],[5,"upcast","","Cast a trait reference into a reference to one of its super\ntraits; returns `None` if `target_trait_def_id` is not a\nsupertrait."],[5,"predicates_for_generics","","Creates predicate obligations from the generic bounds."],[5,"evaluate_builtin_bound","","Determines whether the type `ty` is known to meet `bound` and\nreturns true if so. Returns false if `ty` either does not meet\n`bound` or is not known to meet bound (note that this is\nconservative towards *no impl*, which is the opposite of the\n`evaluate` methods)."],[5,"type_known_to_meet_builtin_bound","",""],[5,"normalize_param_env_or_error","","Normalizes the parameter environment, reporting errors if they occur."],[5,"fully_normalize","",""],[11,"clone","","",169],[11,"new","","",187],[11,"normalize_projection_type","","\"Normalize\" a projection type `<SomeType as SomeTrait>::X` by\ncreating a fresh type variable `$0` as well as a projection\npredicate `<SomeType as SomeTrait>::X == $0`. When the\ninference engine runs, it will attempt to find an impl of\n`SomeTrait` or a where clause that lets us unify `$0` with\nsomething concrete. If this fails, we'll unify `$0` with\n`projection_ty` again.",187],[11,"register_builtin_bound","","",187],[11,"register_region_obligation","","",187],[11,"register_predicate_obligation","","",187],[11,"region_obligations","","",187],[11,"select_all_or_error","","",187],[11,"select_new_obligations","","Attempts to select obligations that were registered since the call to a selection routine.\nThis is used by the type checker to eagerly attempt to resolve obligations in hopes of\ngaining type information. It'd be equally valid to use `select_where_possible` but it\nresults in `O(n^2)` performance (#18208).",187],[11,"select_where_possible","","",187],[11,"pending_obligations","","",187],[11,"repr","","",169],[11,"clone","","",170],[11,"with","","",171],[11,"fold_with","","",171],[11,"repr","","",171],[11,"fmt","","",181],[11,"clone","","",181],[11,"repr","","",180],[11,"clone","","",188],[11,"fmt","","",183],[11,"new","","",189],[11,"intercrate","","",189],[11,"infcx","","",189],[11,"tcx","","",189],[11,"param_env","","",189],[11,"closure_typer","","",189],[11,"select","","Attempts to satisfy the obligation. If successful, this will affect the surrounding\ntype environment by performing unification.",189],[11,"evaluate_obligation","","Evaluates whether the obligation `obligation` can be satisfied (by any means).",189],[11,"evaluate_impl","","Evaluates whether the impl with id `impl_def_id` could be applied to the self type\n`obligation_self_ty`. This can be used either for trait or inherent impls.",189],[11,"new","","",188],[11,"next","core::option","",51],[11,"may_apply","rustc::middle::traits","",182],[11,"fmt","","",175],[11,"fmt","","",178],[11,"repr","","",172],[11,"repr","","",190],[11,"repr","","",175],[11,"repr","","",177],[11,"repr","","",176],[11,"repr","","",178],[11,"repr","","",185],[11,"repr","","",174],[11,"repr","","",186],[11,"fmt","","",186],[11,"repr","","",170],[11,"fmt","","",170],[6,"Supertraits","",""],[6,"PredicateObligation","",""],[6,"TraitObligation","",""],[6,"Obligations","",""],[6,"PredicateObligations","",""],[6,"TraitObligations","",""],[6,"Selection","",""],[6,"SelectionResult","","When performing resolution, it is typically the case that there\ncan be one of three outcomes:"],[11,"eq","","",172],[11,"ne","","",172],[11,"clone","","",172],[11,"eq","","",173],[11,"ne","","",173],[11,"clone","","",173],[11,"eq","","",184],[11,"ne","","",184],[11,"clone","","",184],[11,"eq","","",191],[11,"ne","","",191],[11,"clone","","",191],[11,"fmt","","",185],[11,"clone","","",185],[11,"clone","","",186],[11,"clone","","",190],[11,"fmt","","",190],[11,"eq","","",175],[11,"ne","","",175],[11,"clone","","",175],[11,"clone","","",176],[11,"fmt","","",176],[11,"clone","","",177],[11,"fmt","","",177],[11,"clone","","",178],[11,"eq","","",178],[11,"ne","","",178],[11,"new","","",172],[11,"misc","","",172],[11,"with","","",172],[11,"new","","",173],[11,"misc","","",173],[11,"dummy","","",173],[11,"iter_nested","","",190],[11,"map_nested","","",190],[11,"map_move_nested","","",190],[11,"iter_nested","","",175],[11,"map_nested","","",175],[11,"map_move_nested","","",175],[11,"iter_nested","","",176],[11,"map_nested","","",176],[11,"map_move_nested","","",176],[11,"iter_nested","","",177],[11,"map_nested","","",177],[11,"map_move_nested","","",177],[11,"is_overflow","","",174],[0,"ty","rustc::middle",""],[3,"CrateAnalysis","rustc::middle::ty","The complete set of all analyses described in this module. This is\nproduced by the driver and fed to trans and later passes."],[12,"export_map","","",192],[12,"exported_items","","",192],[12,"public_items","","",192],[12,"ty_cx","","",192],[12,"reachable","","",192],[12,"name","","",192],[12,"glob_map","","",192],[3,"field","",""],[12,"name","","",193],[12,"mt","","",193],[3,"Method","",""],[12,"name","","",194],[12,"generics","","",194],[12,"predicates","","",194],[12,"fty","","",194],[12,"explicit_self","","",194],[12,"vis","","",194],[12,"def_id","","",194],[12,"container","","",194],[12,"provided_source","","",194],[3,"AssociatedType","",""],[12,"name","","",195],[12,"vis","","",195],[12,"def_id","","",195],[12,"container","","",195],[3,"mt","",""],[12,"ty","","",196],[12,"mutbl","","",196],[3,"field_ty","",""],[12,"name","","",197],[12,"id","","",197],[12,"vis","","",197],[12,"origin","","",197],[3,"creader_cache_key","",""],[12,"cnum","","",198],[12,"pos","","",198],[12,"len","","",198],[3,"ItemVariances","",""],[12,"types","","",199],[12,"regions","","",199],[3,"AutoDerefRef","",""],[12,"autoderefs","","",200],[12,"autoref","","",200],[3,"param_index","",""],[12,"space","","",201],[12,"index","","",201],[3,"MethodParam","",""],[12,"trait_ref","","",202],[12,"method_num","","",202],[12,"impl_def_id","","The impl for the trait from which the method comes. This\nshould only be used for certain linting/heuristic purposes\nsince there is no guarantee that this is Some in every\nsituation that it could/should be.",202],[3,"MethodObject","",""],[12,"trait_ref","","",203],[12,"object_trait_id","","",203],[12,"method_num","","",203],[12,"vtable_index","","",203],[3,"MethodCallee","",""],[12,"origin","","",204],[12,"ty","","",204],[12,"substs","","",204],[3,"MethodCall","","With method calls, we store some extra information in\nside tables (i.e method_map). We use\nMethodCall as a key to index into these tables instead of\njust directly using the expression's NodeId. The reason\nfor this being that we may apply adjustments (coercions)\nwith the resulting expression also needing to use the\nside tables. The problem with this is that we don't\nassign a separate NodeId to this new expression\nand so it would clash with the base expression if both\nneeded to add to the side tables. Thus to disambiguate\nwe also keep track of whether there's an adjustment in\nour key."],[12,"expr_id","","",205],[12,"adjustment","","",205],[3,"TransmuteRestriction","","A restriction that certain types must be the same size. The use of\n`transmute` gives rise to these restrictions. These generally\ncannot be checked until trans; therefore, each call to `transmute`\nwill push one or more such restriction into the\n`transmute_restrictions` vector during `intrinsicck`. They are\nthen checked during `trans` by the fn `check_intrinsics`."],[12,"span","","The span whence the restriction comes.",206],[12,"original_from","","The type being transmuted from.",206],[12,"original_to","","The type being transmuted to.",206],[12,"substituted_from","","The type being transmuted from, with all type parameters\nsubstituted for an arbitrary representative. Not to be shown\nto the end user.",206],[12,"substituted_to","","The type being transmuted to, with all type parameters\nsubstituted for an arbitrary representative. Not to be shown\nto the end user.",206],[12,"id","","NodeId of the transmute intrinsic.",206],[3,"CtxtArenas","","Internal storage"],[3,"CommonTypes","",""],[12,"bool","","",207],[12,"char","","",207],[12,"int","","",207],[12,"i8","","",207],[12,"i16","","",207],[12,"i32","","",207],[12,"i64","","",207],[12,"uint","","",207],[12,"u8","","",207],[12,"u16","","",207],[12,"u32","","",207],[12,"u64","","",207],[12,"f32","","",207],[12,"f64","","",207],[12,"err","","",207],[3,"ctxt","","The data structure to keep track of all the information that typechecker\ngenerates so that so that it can be reused and doesn't have to be redone\nlater on."],[12,"types","","Common types, pre-interned for your convenience.",208],[12,"sess","","",208],[12,"def_map","","",208],[12,"named_region_map","","",208],[12,"region_maps","","",208],[12,"node_types","","Stores the types for various nodes in the AST.  Note that this table\nis not guaranteed to be populated until after typeck.  See\ntypeck::check::fn_ctxt for details.",208],[12,"item_substs","","Stores the type parameters which were substituted to obtain the type\nof this node.  This only applies to nodes that refer to entities\nparameterized by type parameters, such as generic fns, types, or\nother items.",208],[12,"impl_or_trait_items","","Maps from a trait item to the trait item \"descriptor\"",208],[12,"trait_item_def_ids","","Maps from a trait def-id to a list of the def-ids of its trait items",208],[12,"trait_items_cache","","A cache for the trait_items() routine",208],[12,"impl_trait_cache","","",208],[12,"impl_trait_refs","","",208],[12,"trait_defs","","",208],[12,"predicates","","Maps from the def-id of an item (trait/struct/enum/fn) to its\nassociated predicates.",208],[12,"super_predicates","","Maps from the def-id of a trait to the list of\nsuper-predicates. This is a subset of the full list of\npredicates. We store these in a separate map because we must\nevaluate them even during type conversion, often before the\nfull predicates are available (note that supertraits have\nadditional acyclicity requirements).",208],[12,"object_cast_map","","Maps from node-id of a trait object cast (like `foo as\nBox<Trait>`) to the trait reference.",208],[12,"map","","",208],[12,"intrinsic_defs","","",208],[12,"freevars","","",208],[12,"tcache","","",208],[12,"rcache","","",208],[12,"short_names_cache","","",208],[12,"tc_cache","","",208],[12,"ast_ty_to_ty_cache","","",208],[12,"enum_var_cache","","",208],[12,"ty_param_defs","","",208],[12,"adjustments","","",208],[12,"normalized_cache","","",208],[12,"lang_items","","",208],[12,"provided_method_sources","","A mapping of fake provided method def_ids to the default implementation",208],[12,"struct_fields","","",208],[12,"item_variance_map","","Maps from def-id of a type or region parameter to its\n(inferred) variance.",208],[12,"variance_computed","","True if the variance has been computed yet; false otherwise.",208],[12,"destructor_for_type","","A mapping from the def ID of an enum or struct type to the def ID\nof the method that implements its destructor. If the type is not\npresent in this map, it does not have a destructor. This map is\npopulated during the coherence phase of typechecking.",208],[12,"destructors","","A method will be in this list if and only if it is a destructor.",208],[12,"trait_impls","","Maps a trait onto a list of impls of that trait.",208],[12,"inherent_impls","","Maps a DefId of a type to a list of its inherent impls.\nContains implementations of methods that are inherent to a type.\nMethods in these implementations don't need to be exported.",208],[12,"impl_items","","Maps a DefId of an impl to a list of its items.\nNote that this contains all of the impls that we know about,\nincluding ones in other crates. It's not clear that this is the best\nway to do it.",208],[12,"used_unsafe","","Set of used unsafe nodes (functions or blocks). Unsafe nodes not\npresent in this set can be warned about.",208],[12,"used_mut_nodes","","Set of nodes which mark locals as mutable which end up getting used at\nsome point. Local variable definitions not in this set can be warned\nabout.",208],[12,"populated_external_types","","The set of external nominal types whose implementations have been read.\nThis is used for lazy resolution of methods.",208],[12,"populated_external_traits","","The set of external traits whose implementations have been read. This\nis used for lazy resolution of traits.",208],[12,"upvar_capture_map","","Borrows",208],[12,"extern_const_statics","","These two caches are used by const_eval when decoding external statics\nand variants that are found.",208],[12,"extern_const_variants","","",208],[12,"method_map","","",208],[12,"dependency_formats","","",208],[12,"closure_kinds","","Records the type of each closure. The def ID is the ID of the\nexpression defining the closure.",208],[12,"closure_tys","","Records the type of each closure. The def ID is the ID of the\nexpression defining the closure.",208],[12,"node_lint_levels","","",208],[12,"transmute_restrictions","","The types that must be asserted to be the same size for `transmute`\nto be valid. We gather up these restrictions in the intrinsicck pass\nand check them in trans.",208],[12,"stability","","Maps any item's def-id to its stability index.",208],[12,"associated_types","","Maps def IDs to true if and only if they're associated types.",208],[12,"selection_cache","","Caches the results of trait selection. This cache is used\nfor things that do not have to do with the parameters in scope.",208],[12,"repr_hint_cache","","Caches the representation hints for struct definitions.",208],[12,"type_impls_copy_cache","","Caches whether types are known to impl Copy. Note that type\nparameters are never placed into this cache, because their\nresults are dependent on the parameter environment.",208],[12,"type_impls_sized_cache","","Caches whether types are known to impl Sized. Note that type\nparameters are never placed into this cache, because their\nresults are dependent on the parameter environment.",208],[12,"object_safety_cache","","Caches whether traits are object safe",208],[12,"const_qualif_map","","Maps Expr NodeId's to their constant qualification.",208],[3,"TypeFlags","",""],[3,"TyS","",""],[12,"sty","","",209],[12,"flags","","",209],[3,"InternedTy","","An entry in the type interner."],[3,"BareFnTy","",""],[12,"unsafety","","",210],[12,"abi","","",210],[12,"sig","","",210],[3,"ClosureTy","",""],[12,"unsafety","","",211],[12,"abi","","",211],[12,"sig","","",211],[3,"FnSig","","Signature of a function type, which I have arbitrarily\ndecided to use to refer to the input/output types."],[12,"inputs","","",212],[12,"output","","",212],[12,"variadic","","",212],[3,"ParamTy","",""],[12,"space","","",213],[12,"idx","","",213],[12,"name","","",213],[3,"DebruijnIndex","","A [De Bruijn index][dbi] is a standard means of representing\nregions (and perhaps later types) in a higher-ranked setting. In\nparticular, imagine a type like this:"],[12,"depth","","",214],[3,"UpvarId","","Upvars do not get their own node-id. Instead, we use the pair of\nthe original var id (that is, the root variable that is referenced\nby the upvar) and the id of the closure expression."],[12,"var_id","","",215],[12,"closure_expr_id","","",215],[3,"UpvarBorrow","",""],[12,"kind","","The kind of borrow: by-ref upvars have access to shared\nimmutable borrows, which are not part of the normal language\nsyntax.",216],[12,"region","","Region of the resulting reference.",216],[3,"FreeRegion","","A \"free\" region `fr` can be interpreted as \"some region\nat least as big as the scope `fr.scope`\"."],[12,"scope","","",217],[12,"bound_region","","",217],[3,"TyTrait","",""],[12,"principal","","",218],[12,"bounds","","",218],[3,"TraitRef","","A complete reference to a trait. These take numerous guises in syntax,\nbut perhaps the most recognizable form is in a where clause:"],[12,"def_id","","",219],[12,"substs","","",219],[3,"Binder","","Binder is a binder for higher-ranked lifetimes. It is part of the\ncompiler's representation for things like `for<'a> Fn(&'a int)`\n(which would be represented by the type `PolyTraitRef ==\nBinder<TraitRef>`). Note that when we skolemize, instantiate,\nerase, or otherwise \"discharge\" these bound regions, we change the\ntype from `Binder<T>` to just `T` (see\ne.g. `liberate_late_bound_regions`)."],[3,"expected_found","",""],[12,"expected","","",220],[12,"found","","",220],[3,"ParamBounds","","Bounds suitable for a named type parameter like `A` in `fn foo<A>`\nas well as the existential type parameter in an object type."],[12,"region_bounds","","",221],[12,"builtin_bounds","","",221],[12,"trait_bounds","","",221],[12,"projection_bounds","","",221],[3,"ExistentialBounds","","Bounds suitable for an existentially quantified type parameter\nsuch as those that appear in object types or closure types. The\nmajor difference between this case and `ParamBounds` is that\ngeneral purpose trait bounds are omitted and there must be\n*exactly one* region."],[12,"region_bound","","",222],[12,"builtin_bounds","","",222],[12,"projection_bounds","","",222],[3,"TyVid","",""],[12,"index","","",223],[3,"IntVid","",""],[12,"index","","",224],[3,"FloatVid","",""],[12,"index","","",225],[3,"RegionVid","",""],[12,"index","","",226],[3,"TypeParameterDef","",""],[12,"name","","",227],[12,"def_id","","",227],[12,"space","","",227],[12,"index","","",227],[12,"default","","",227],[12,"object_lifetime_default","","",227],[3,"RegionParameterDef","",""],[12,"name","","",228],[12,"def_id","","",228],[12,"space","","",228],[12,"index","","",228],[12,"bounds","","",228],[3,"Generics","","Information about the formal type/lifetime parameters associated\nwith an item or method. Analogous to ast::Generics."],[12,"types","","",229],[12,"regions","","",229],[3,"GenericPredicates","","Bounds on generics."],[12,"predicates","","",230],[3,"TraitPredicate","",""],[12,"trait_ref","","",231],[3,"EquatePredicate","",""],[3,"OutlivesPredicate","",""],[3,"ProjectionPredicate","","This kind of predicate has no *direct* correspondent in the\nsyntax, but it roughly corresponds to the syntactic forms:"],[12,"projection_ty","","",232],[12,"ty","","",232],[3,"ProjectionTy","","Represents the projection of an associated type. In explicit UFCS\nform this would be written `<T as Trait<..>>::N`."],[12,"trait_ref","","The trait reference `T as Trait<..>`.",233],[12,"item_name","","The name `N` of the associated type.",233],[3,"InstantiatedPredicates","","Represents the bounds declared on a particular set of type\nparameters.  Should eventually be generalized into a flag list of\nwhere clauses.  You can obtain a `InstantiatedPredicates` list from a\n`GenericPredicates` by using the `instantiate` method. Note that this method\nreflects an important semantic invariant of `InstantiatedPredicates`: while\nthe `GenericPredicates` are expressed in terms of the bound type\nparameters of the impl/trait/whatever, an `InstantiatedPredicates` instance\nrepresented a set of bounds for some particular instantiation,\nmeaning that the generic parameters have been substituted with\ntheir values."],[12,"predicates","","",234],[3,"ParameterEnvironment","","When type checking, we use the `ParameterEnvironment` to track\ndetails about the type/lifetime parameters that are in scope.\nIt primarily stores the bounds information."],[12,"tcx","","",235],[12,"free_substs","","See `construct_free_substs` for details.",235],[12,"implicit_region_bound","","Each type parameter has an implicit region bound that\nindicates it must outlive at least the function body (the user\nmay specify stronger requirements). This field indicates the\nregion of the callee.",235],[12,"caller_bounds","","Obligations that the caller must satisfy. This is basically\nthe set of bounds on the in-scope type parameters, translated\ninto Obligations.",235],[12,"selection_cache","","Caches the results of trait selection. This cache is used\nfor things that have to do with the parameters in scope.",235],[3,"TypeScheme","","A \"type scheme\", in ML terminology, is a type combined with some\nset of generic types that the type is, well, generic over. In Rust\nterms, it is the \"type\" of a fn item or struct -- this type will\ninclude various generic parameters that must be substituted when\nthe item/struct is referenced. That is called converting the type\nscheme to a monotype."],[12,"generics","","",236],[12,"ty","","",236],[3,"TraitDef","","As `TypeScheme` but for a trait ref."],[12,"unsafety","","",237],[12,"paren_sugar","","If `true`, then this trait had the `#[rustc_paren_sugar]`\nattribute, indicating that it should be used with `Foo()`\nsugar. This is a temporary thing -- eventually any trait wil\nbe usable with the sugar (or without it).",237],[12,"generics","","Generic type definitions. Note that `Self` is listed in here\nas having a single bound, the trait itself (e.g., in the trait\n`Eq`, there is a single bound `Self : Eq`). This is so that\ndefault methods get to assume that the `Self` parameters\nimplements the trait.",237],[12,"trait_ref","","",237],[12,"associated_type_names","","A list of the associated types defined in this trait. Useful\nfor resolving `X::Foo` type markers.",237],[3,"ItemSubsts","","Records the substitutions used to translate the polytype for an\nitem into the monotype of an item reference."],[12,"substs","","",238],[3,"TypeContents","","Type contents is how the type checker reasons about kinds.\nThey track what kinds of things are found within a type.  You can\nthink of them as kind of an \"anti-kind\".  They track the kinds of values\nand thinks that are contained in types.  Having a larger contents for\na type tends to rule that type *out* from various kinds.  For example,\na type that contains a reference is not sendable."],[12,"bits","","",239],[3,"VariantInfo","",""],[12,"args","","",240],[12,"arg_names","","",240],[12,"ctor_ty","","",240],[12,"name","","",240],[12,"id","","",240],[12,"disr_val","","",240],[12,"vis","","",240],[3,"ClosureUpvar","",""],[12,"def","","",241],[12,"span","","",241],[12,"ty","","",241],[3,"Freevar","","A free variable referred to in a function."],[12,"def","","The variable being accessed free.",242],[12,"span","","",242],[4,"ImplOrTraitItemContainer","",""],[13,"TraitContainer","","",243],[13,"ImplContainer","","",243],[4,"ImplOrTraitItem","",""],[13,"MethodTraitItem","","",244],[13,"TypeTraitItem","","",244],[4,"ImplOrTraitItemId","",""],[13,"MethodTraitItemId","","",245],[13,"TypeTraitItemId","","",245],[4,"Variance","",""],[13,"Covariant","","",246],[13,"Invariant","","",246],[13,"Contravariant","","",246],[13,"Bivariant","","",246],[4,"AutoAdjustment","",""],[13,"AdjustReifyFnPointer","","",247],[13,"AdjustDerefRef","","",247],[4,"UnsizeKind","",""],[13,"UnsizeLength","","",248],[13,"UnsizeStruct","","",248],[13,"UnsizeVtable","","",248],[4,"AutoRef","",""],[13,"AutoPtr","","Convert from T to &T\nThe third field allows us to wrap other AutoRef adjustments.",249],[13,"AutoUnsize","","Convert [T, ..n] to [T] (or similar, depending on the kind)",249],[13,"AutoUnsizeUniq","","Convert Box<[T, ..n]> to Box<[T]> or something similar in a Box.\nWith DST and Box a library type, this should be replaced by UnsizeStruct.",249],[13,"AutoUnsafe","","Convert from T to *T\nValue to thin pointer\nThe second field allows us to wrap other AutoRef adjustments.",249],[4,"MethodOrigin","",""],[13,"MethodStatic","","",250],[13,"MethodStaticClosure","","",250],[13,"MethodTypeParam","","",250],[13,"MethodTraitObject","","",250],[4,"ExprAdjustment","",""],[13,"NoAdjustment","","",251],[13,"AutoDeref","","",251],[13,"AutoObject","","",251],[4,"vtable_origin","",""],[13,"vtable_static","","",252],[13,"vtable_param","","",252],[13,"vtable_closure","","",252],[13,"vtable_error","","",252],[4,"FnOutput","",""],[13,"FnConverging","","",253],[13,"FnDiverging","","",253],[4,"Region","","Representation of regions:"],[13,"ReEarlyBound","","",254],[13,"ReLateBound","","",254],[13,"ReFree","","When checking a function body, the types of all arguments and so forth\nthat refer to bound region parameters are modified to refer to free\nregion parameters.",254],[13,"ReScope","","A concrete region naming some statically determined extent\n(e.g. an expression or sequence of statements) within the\ncurrent function.",254],[13,"ReStatic","","Static data that has an \"infinite\" lifetime. Top in the region lattice.",254],[13,"ReInfer","","A region variable.  Should not exist after typeck.",254],[13,"ReEmpty","","Empty lifetime is for data that is never accessed.\nBottom in the region lattice. We treat ReEmpty somewhat\nspecially; at least right now, we do not generate instances of\nit during the GLB computations, but rather\ngenerate an error instead. This is to improve error messages.\nThe only way to get an instance of ReEmpty is to have a region\nvariable with no constraints.",254],[4,"BorrowKind","",""],[13,"ImmBorrow","","Data must be immutable and is aliasable.",255],[13,"UniqueImmBorrow","","Data must be immutable but not aliasable.  This kind of borrow\ncannot currently be expressed by the user and is used only in\nimplicit closure bindings. It is needed when you the closure\nis borrowing or mutating a mutable referent, e.g.:",255],[13,"MutBorrow","","Data is mutable and not aliasable.",255],[4,"UpvarCapture","","Information describing the capture of an upvar. This is computed\nduring `typeck`, specifically by `regionck`."],[13,"ByValue","","Upvar is captured by value. This is always true when the\nclosure is labeled `move`, but can also be true in other cases\ndepending on inference.",256],[13,"ByRef","","Upvar is captured by reference.",256],[4,"BoundRegion","",""],[13,"BrAnon","","An anonymous region parameter for a given fn (&T)",257],[13,"BrNamed","","Named region parameters for functions (a in &'a T)",257],[13,"BrFresh","","Fresh bound identifiers created during GLB computations.",257],[13,"BrEnv","","",257],[4,"sty","",""],[13,"ty_bool","","",258],[13,"ty_char","","",258],[13,"ty_int","","",258],[13,"ty_uint","","",258],[13,"ty_float","","",258],[13,"ty_enum","","Substs here, possibly against intuition, *may* contain `ty_param`s.\nThat is, even after substitution it is possible that there are type\nvariables. This happens when the `ty_enum` corresponds to an enum\ndefinition and not a concrete use of it. To get the correct `ty_enum`\nfrom the tcx, use the `NodeId` from the `ast::Ty` and look it up in\nthe `ast_ty_to_ty_cache`. This is probably true for `ty_struct` as\nwell.",258],[13,"ty_uniq","","",258],[13,"ty_str","","",258],[13,"ty_vec","","",258],[13,"ty_ptr","","",258],[13,"ty_rptr","","",258],[13,"ty_bare_fn","","",258],[13,"ty_trait","","",258],[13,"ty_struct","","",258],[13,"ty_closure","","",258],[13,"ty_tup","","",258],[13,"ty_projection","","",258],[13,"ty_param","","",258],[13,"ty_infer","","",258],[13,"ty_err","","",258],[4,"IntVarValue","",""],[13,"IntType","","",259],[13,"UintType","","",259],[4,"terr_vstore_kind","",""],[13,"terr_vec","","",260],[13,"terr_str","","",260],[13,"terr_fn","","",260],[13,"terr_trait","","",260],[4,"type_err","",""],[13,"terr_mismatch","","",261],[13,"terr_unsafety_mismatch","","",261],[13,"terr_abi_mismatch","","",261],[13,"terr_mutability","","",261],[13,"terr_box_mutability","","",261],[13,"terr_ptr_mutability","","",261],[13,"terr_ref_mutability","","",261],[13,"terr_vec_mutability","","",261],[13,"terr_tuple_size","","",261],[13,"terr_fixed_array_size","","",261],[13,"terr_ty_param_size","","",261],[13,"terr_arg_count","","",261],[13,"terr_regions_does_not_outlive","","",261],[13,"terr_regions_not_same","","",261],[13,"terr_regions_no_overlap","","",261],[13,"terr_regions_insufficiently_polymorphic","","",261],[13,"terr_regions_overly_polymorphic","","",261],[13,"terr_sorts","","",261],[13,"terr_integer_as_char","","",261],[13,"terr_int_mismatch","","",261],[13,"terr_float_mismatch","","",261],[13,"terr_traits","","",261],[13,"terr_builtin_bounds","","",261],[13,"terr_variadic_mismatch","","",261],[13,"terr_cyclic_ty","","",261],[13,"terr_convergence_mismatch","","",261],[13,"terr_projection_name_mismatched","","",261],[13,"terr_projection_bounds_length","","",261],[4,"BuiltinBound","",""],[13,"BoundSend","","",262],[13,"BoundSized","","",262],[13,"BoundCopy","","",262],[13,"BoundSync","","",262],[4,"InferTy","",""],[13,"TyVar","","",263],[13,"IntVar","","",263],[13,"FloatVar","","",263],[13,"FreshTy","","A `FreshTy` is one that is generated as a replacement for an\nunbound type variable. This is convenient for caching etc. See\n`middle::infer::freshen` for more details.",263],[13,"FreshIntTy","","",263],[4,"UnconstrainedNumeric","",""],[13,"UnconstrainedFloat","","",264],[13,"UnconstrainedInt","","",264],[13,"Neither","","",264],[4,"InferRegion","",""],[13,"ReVar","","",265],[13,"ReSkolemized","","",265],[4,"ObjectLifetimeDefault","","Default region to use for the bound of objects that are\nsupplied as the value for this type parameter. This is derived\nfrom `T:'a` annotations appearing in the type definition.  If\nthis is `None`, then the default is inherited from the\nsurrounding context. See RFC #599 for details."],[13,"Ambiguous","","Require an explicit annotation. Occurs when multiple\n`T:'a` constraints are found.",266],[13,"Specific","","Use the given region as the default.",266],[4,"Predicate","",""],[13,"Trait","","Corresponds to `where Foo : Bar<A,B,C>`. `Foo` here would be\nthe `Self` type of the trait reference and `A`, `B`, and `C`\nwould be the parameters in the `TypeSpace`.",267],[13,"Equate","","where `T1 == T2`.",267],[13,"RegionOutlives","","where 'a : 'b",267],[13,"TypeOutlives","","where T : 'a",267],[13,"Projection","","where <T as TraitRef>::Name == X, approximately.\nSee `ProjectionPredicate` struct for details.",267],[4,"ClosureKind","",""],[13,"FnClosureKind","","",268],[13,"FnMutClosureKind","","",268],[13,"FnOnceClosureKind","","",268],[4,"Representability","","Describes whether a type is representable. For types that are not\nrepresentable, 'SelfRecursive' and 'ContainsRecursive' are used to\ndistinguish between types that are recursive with themselves and types that\ncontain a different recursive type. These cases can therefore be treated\ndifferently when reporting errors."],[13,"Representable","","",269],[13,"ContainsRecursive","","",269],[13,"SelfRecursive","","",269],[4,"ExprKind","","We categorize expressions into three kinds.  The distinction between\nlvalue/rvalue is fundamental to the language.  The distinction between the\ntwo kinds of rvalues is an artifact of trans which reflects how we will\ngenerate code for that kind of expression.  See trans/expr.rs for more\ninformation."],[13,"LvalueExpr","","",270],[13,"RvalueDpsExpr","","",270],[13,"RvalueDatumExpr","","",270],[13,"RvalueStmtExpr","","",270],[4,"DtorKind","",""],[13,"NoDtor","","",271],[13,"TraitDtor","","",271],[4,"ExplicitSelfCategory","","The category of explicit self."],[13,"StaticExplicitSelfCategory","","",272],[13,"ByValueExplicitSelfCategory","","",272],[13,"ByReferenceExplicitSelfCategory","","",272],[13,"ByBoxExplicitSelfCategory","","",272],[4,"CopyImplementationError","",""],[13,"FieldDoesNotImplementCopy","","",273],[13,"VariantDoesNotImplementCopy","","",273],[13,"TypeIsStructural","","",273],[13,"TypeHasDestructor","","",273],[5,"adjusted_object_region","",""],[5,"adjust_is_object","",""],[5,"type_of_adjust","",""],[5,"type_has_params","",""],[5,"type_has_self","",""],[5,"type_has_ty_infer","",""],[5,"type_needs_infer","",""],[5,"type_has_projection","",""],[5,"type_has_late_bound_regions","",""],[5,"type_has_escaping_regions","","An \"escaping region\" is a bound region whose binder is not part of `t`."],[5,"type_escapes_depth","",""],[5,"empty_builtin_bounds","",""],[5,"all_builtin_bounds","",""],[5,"region_existential_bound","","An existential bound that does not implement any traits."],[5,"mk_ctxt","",""],[5,"mk_t","",""],[5,"mk_mach_int","",""],[5,"mk_mach_uint","",""],[5,"mk_mach_float","",""],[5,"mk_str","",""],[5,"mk_str_slice","",""],[5,"mk_enum","",""],[5,"mk_uniq","",""],[5,"mk_ptr","",""],[5,"mk_rptr","",""],[5,"mk_mut_rptr","",""],[5,"mk_imm_rptr","",""],[5,"mk_mut_ptr","",""],[5,"mk_imm_ptr","",""],[5,"mk_nil_ptr","",""],[5,"mk_vec","",""],[5,"mk_slice","",""],[5,"mk_tup","",""],[5,"mk_nil","",""],[5,"mk_bare_fn","",""],[5,"mk_ctor_fn","",""],[5,"mk_trait","",""],[5,"sort_bounds_list","",""],[5,"mk_projection","",""],[5,"mk_struct","",""],[5,"mk_closure","",""],[5,"mk_var","",""],[5,"mk_int_var","",""],[5,"mk_float_var","",""],[5,"mk_infer","",""],[5,"mk_param","",""],[5,"mk_self_type","",""],[5,"mk_param_from_def","",""],[5,"walk_ty","",""],[5,"maybe_walk_ty","","Walks `ty` and any types appearing within `ty`, invoking the\ncallback `f` on each type. If the callback returns false, then the\nchildren of the current type are ignored."],[5,"fold_ty","",""],[5,"type_is_nil","",""],[5,"type_is_error","",""],[5,"type_needs_subst","",""],[5,"trait_ref_contains_error","",""],[5,"type_is_ty_var","",""],[5,"type_is_bool","",""],[5,"type_is_self","",""],[5,"type_is_vec","",""],[5,"type_is_structural","",""],[5,"type_is_simd","",""],[5,"sequence_element_type","",""],[5,"simd_type","",""],[5,"simd_size","",""],[5,"type_is_region_ptr","",""],[5,"type_is_unsafe_ptr","",""],[5,"type_is_unique","",""],[5,"type_is_scalar","",""],[5,"type_is_floating_point","","Returns true if this type is a floating point type and false otherwise."],[5,"type_interior_is_unsafe","",""],[5,"type_contents","",""],[5,"type_moves_by_default","",""],[5,"type_is_sized","",""],[5,"is_ffi_safe","",""],[5,"is_instantiable","",""],[5,"is_type_representable","","Check whether a type is representable. This means it cannot contain unboxed\nstructural recursion. This check is needed for structs and enums."],[5,"type_is_trait","",""],[5,"type_trait_info","",""],[5,"type_is_integral","",""],[5,"type_is_fresh","",""],[5,"type_is_uint","",""],[5,"type_is_char","",""],[5,"type_is_bare_fn","",""],[5,"type_is_bare_fn_item","",""],[5,"type_is_fp","",""],[5,"type_is_numeric","",""],[5,"type_is_signed","",""],[5,"type_is_machine","",""],[5,"type_is_c_like_enum","",""],[5,"deref","",""],[5,"type_content","",""],[5,"index","",""],[5,"array_element_ty","",""],[5,"positional_element_ty","","Returns the type of element at index `i` in tuple or tuple-like type `t`.\nFor an enum `t`, `variant` is None only if `t` is a univariant enum."],[5,"named_element_ty","","Returns the type of element at field `n` in struct or struct-like type `t`.\nFor an enum `t`, `variant` must be some def id."],[5,"impl_id_to_trait_ref","",""],[5,"node_id_to_type","",""],[5,"node_id_to_type_opt","",""],[5,"node_id_item_substs","",""],[5,"fn_is_variadic","",""],[5,"ty_fn_sig","",""],[5,"ty_fn_abi","","Returns the ABI of the given function."],[5,"ty_fn_args","",""],[5,"ty_fn_ret","",""],[5,"is_fn_ty","",""],[5,"ty_region","",""],[5,"free_region_from_def","",""],[5,"pat_ty","",""],[5,"pat_ty_opt","",""],[5,"expr_ty","",""],[5,"expr_ty_opt","",""],[5,"expr_ty_adjusted","","Returns the type of `expr`, considering any `AutoAdjustment`\nentry recorded for that expression."],[5,"expr_span","",""],[5,"local_var_name_str","",""],[5,"adjust_ty","","See `expr_ty_adjusted`"],[5,"adjust_ty_for_autoref","",""],[5,"unsize_ty","",""],[5,"resolve_expr","",""],[5,"expr_is_lval","",""],[5,"expr_kind","",""],[5,"stmt_node_id","",""],[5,"field_idx_strict","",""],[5,"impl_or_trait_item_idx","",""],[5,"ty_sort_string","",""],[5,"type_err_to_str","","Explains the source of a type err in a short, human readable way. This is meant to be placed\nin parentheses after some larger message. You should also invoke `note_and_explain_type_err()`\nafterwards to present additional details, particularly when it comes to lifetime-related\nerrors."],[5,"note_and_explain_type_err","",""],[5,"provided_source","",""],[5,"provided_trait_methods","",""],[5,"trait_item","",""],[5,"trait_items","",""],[5,"trait_impl_polarity","",""],[5,"impl_or_trait_item","",""],[5,"is_associated_type","","Returns true if the given ID refers to an associated type and false if it\nrefers to anything else."],[5,"associated_type_parameter_index","","Returns the parameter index that the given associated type corresponds to."],[5,"trait_item_def_ids","",""],[5,"impl_trait_ref","",""],[5,"trait_ref_to_def_id","",""],[5,"try_add_builtin_trait","","Checks whether `trait_ref` refers to one of the builtin\ntraits, like `Send`, and adds the corresponding\nbound to the set `builtin_bounds` if so. Returns true if `trait_ref`\nis a builtin trait."],[5,"ty_to_def_id","",""],[5,"substd_enum_variants","",""],[5,"item_path_str","",""],[5,"ty_dtor","",""],[5,"has_dtor","",""],[5,"with_path","",""],[5,"enum_is_univariant","",""],[5,"type_is_empty","",""],[5,"enum_variants","",""],[5,"enum_variant_with_id","",""],[5,"lookup_item_type","",""],[5,"lookup_trait_def","","Given the did of a trait, returns its canonical trait ref."],[5,"lookup_predicates","","Given the did of an item, returns its full set of predicates."],[5,"lookup_super_predicates","","Given the did of a trait, returns its superpredicates."],[5,"predicates","",""],[5,"get_attrs","","Get the attributes of a definition."],[5,"has_attr","","Determine whether an item is annotated with an attribute"],[5,"lookup_packed","","Determine whether an item is annotated with `#[repr(packed)]`"],[5,"lookup_simd","","Determine whether an item is annotated with `#[simd]`"],[5,"lookup_repr_hints","","Obtain the representation annotation for a struct definition."],[5,"lookup_field_type","",""],[5,"lookup_struct_fields","",""],[5,"is_tuple_struct","",""],[5,"struct_fields","",""],[5,"tup_fields","",""],[5,"closure_upvars","",""],[5,"is_binopable","",""],[5,"eval_repeat_count","",""],[5,"each_bound_trait_and_supertraits","",""],[5,"required_region_bounds","","Given a set of predicates that apply to an object type, returns\nthe region bounds that the (erased) `Self` type must\noutlive. Precisely *because* the `Self` type is erased, the\nparameter `erased_self_ty` must be supplied to indicate what type\nhas been used to represent `Self` in the predicates\nthemselves. This should really be a unique type; `FreshTy(0)` is a\npopular choice."],[5,"get_tydesc_ty","",""],[5,"item_variances","",""],[5,"trait_has_default_impl","",""],[5,"record_trait_has_default_impl","","Records a trait-to-implementation mapping."],[5,"record_trait_implementation","","Records a trait-to-implementation mapping."],[5,"populate_implementations_for_type_if_necessary","","Populates the type context with all the implementations for the given type\nif necessary."],[5,"populate_implementations_for_trait_if_necessary","","Populates the type context with all the implementations for the given\ntrait if necessary."],[5,"trait_id_of_impl","","Given the def_id of an impl, return the def_id of the trait it implements.\nIf it implements no trait, return `None`."],[5,"impl_of_method","","If the given def ID describes a method belonging to an impl, return the\nID of the impl that the method belongs to. Otherwise, return `None`."],[5,"trait_of_item","","If the given def ID describes an item belonging to a trait (either a\ndefault method or an implementation of a trait method), return the ID of\nthe trait that the method belongs to. Otherwise, return `None`."],[5,"trait_item_of_item","","If the given def ID describes an item belonging to a trait, (either a\ndefault method or an implementation of a trait method), return the ID of\nthe method inside trait definition (this means that if the given def ID\nis already that of the original trait method, then the return value is\nthe same).\nOtherwise, return `None`."],[5,"hash_crate_independent","","Creates a hash of the type `Ty` which will be the same no matter what crate\ncontext it's calculated within. This is used by the `type_id` intrinsic."],[5,"empty_parameter_environment","","Construct a parameter environment suitable for static contexts or other contexts where there\nare no free type/lifetime parameters in scope."],[5,"construct_free_substs","","Constructs and returns a substitution that can be applied to move from\nthe \"outer\" view of a type or method to the \"inner\" view.\nIn general, this means converting from bound parameters to\nfree parameters. Since we currently represent bound/free type\nparameters in the same way, this only has an effect on regions."],[5,"construct_parameter_environment","","See `ParameterEnvironment` struct def'n for details"],[5,"accumulate_lifetimes_in_type","","Pushes all the lifetimes in the given type onto the given list. A\n\"lifetime in a type\" is a lifetime specified by a reference or a lifetime\nin a list of type substitutions. This does *not* traverse into nominal\ntypes, nor does it resolve fictitious types."],[5,"with_freevars","",""],[5,"liberate_late_bound_regions","","Replace any late-bound regions bound in `value` with free variants attached to scope-id\n`scope_id`."],[5,"count_late_bound_regions","",""],[5,"binds_late_bound_regions","",""],[5,"no_late_bound_regions","",""],[5,"erase_late_bound_regions","","Replace any late-bound regions bound in `value` with `'static`. Useful in trans but also\nmethod lookup and a few other places where precise region relationships are not required."],[5,"anonymize_late_bound_regions","","Rewrite any late-bound regions so that they are anonymous.  Region numbers are\nassigned starting at 1 and increasing monotonically in the order traversed\nby the fold operation."],[5,"replace_late_bound_regions","","Replaces the late-bound-regions in `value` that are bound by `value`."],[5,"make_substs_for_receiver_types","","Substitutes the values for the receiver's type parameters\nthat are found in method, leaving the method's type parameters\nintact."],[5,"can_type_implement_copy","",""],[6,"Disr","",""],[6,"MethodMap","",""],[6,"vtable_param_res","",""],[6,"vtable_res","",""],[6,"ObjectCastMap","",""],[6,"Ty","",""],[6,"PolyFnOutput","",""],[6,"PolyFnSig","",""],[6,"UpvarCaptureMap","",""],[6,"PolyTraitRef","",""],[6,"BuiltinBounds","",""],[6,"PolyTraitPredicate","",""],[6,"PolyEquatePredicate","",""],[6,"PolyOutlivesPredicate","",""],[6,"PolyRegionOutlivesPredicate","",""],[6,"PolyTypeOutlivesPredicate","",""],[6,"PolyProjectionPredicate","",""],[6,"FreevarMap","",""],[6,"CaptureModeMap","",""],[6,"TraitMap","",""],[6,"GlobMap","",""],[17,"INITIAL_DISCRIMINANT_VALUE","",""],[17,"NO_TYPE_FLAGS","",""],[17,"HAS_PARAMS","",""],[17,"HAS_SELF","",""],[17,"HAS_TY_INFER","",""],[17,"HAS_RE_INFER","",""],[17,"HAS_RE_LATE_BOUND","",""],[17,"HAS_REGIONS","",""],[17,"HAS_TY_ERR","",""],[17,"HAS_PROJECTION","",""],[17,"NEEDS_SUBST","",""],[8,"ToPolyTraitRef","",""],[10,"to_poly_trait_ref","","",274],[8,"AsPredicate","",""],[10,"as_predicate","","",275],[8,"ClosureTyper","",""],[11,"tcx","","",276],[10,"param_env","","",276],[10,"closure_kind","","Is this a `Fn`, `FnMut` or `FnOnce` closure? During typeck,\nreturns `None` if the kind of this closure has not yet been\ninferred.",276],[10,"closure_type","","Returns the argument/return types of this closure.",276],[10,"closure_upvars","","Returns the set of all upvars and their transformed\ntypes. During typeck, maybe return `None` if the upvar types\nhave not yet been inferred.",276],[8,"RegionEscape","",""],[11,"has_escaping_regions","","",277],[10,"has_regions_escaping_depth","","",277],[8,"HasProjectionTypes","",""],[10,"has_projection_types","","",278],[8,"ReferencesError","",""],[10,"references_error","","",279],[11,"hash","","",193],[11,"eq","","",193],[11,"ne","","",193],[11,"clone","","",193],[11,"fmt","","",243],[11,"clone","","",243],[11,"id","","",243],[11,"fmt","","",244],[11,"clone","","",244],[11,"def_id","","",244],[11,"name","","",244],[11,"container","","",244],[11,"as_opt_method","","",244],[11,"fmt","","",245],[11,"clone","","",245],[11,"def_id","","",245],[11,"fmt","","",194],[11,"clone","","",194],[11,"new","","",194],[11,"container_id","","",194],[11,"fmt","","",195],[11,"clone","","",195],[11,"fmt","","",196],[11,"hash","","",196],[11,"eq","","",196],[11,"ne","","",196],[11,"clone","","",196],[11,"fmt","","",197],[11,"clone","","",197],[11,"hash","","",198],[11,"eq","","",198],[11,"ne","","",198],[11,"encode","","",199],[11,"decode","","",199],[11,"eq","","",199],[11,"ne","","",199],[11,"clone","","",199],[11,"fmt","","",246],[11,"encode","","",246],[11,"decode","","",246],[11,"eq","","",246],[11,"ne","","",246],[11,"clone","","",246],[11,"fmt","","",247],[11,"clone","","",247],[11,"fmt","","",248],[11,"eq","","",248],[11,"ne","","",248],[11,"clone","","",248],[11,"fmt","","",200],[11,"clone","","",200],[11,"fmt","","",249],[11,"eq","","",249],[11,"ne","","",249],[11,"clone","","",249],[11,"fmt","","",201],[11,"partial_cmp","","",201],[11,"lt","","",201],[11,"le","","",201],[11,"gt","","",201],[11,"ge","","",201],[11,"eq","","",201],[11,"ne","","",201],[11,"decode","","",201],[11,"encode","","",201],[11,"clone","","",201],[11,"fmt","","",250],[11,"clone","","",250],[11,"fmt","","",202],[11,"clone","","",202],[11,"fmt","","",203],[11,"clone","","",203],[11,"clone","","",204],[11,"fmt","","",205],[11,"hash","","",205],[11,"eq","","",205],[11,"ne","","",205],[11,"clone","","",205],[11,"decode","","",251],[11,"encode","","",251],[11,"fmt","","",251],[11,"hash","","",251],[11,"eq","","",251],[11,"ne","","",251],[11,"clone","","",251],[11,"expr","","",205],[11,"autoobject","","",205],[11,"autoderef","","",205],[11,"clone","","",252],[11,"new","","",280],[11,"hash","","",281],[11,"cmp","","",281],[11,"partial_cmp","","",281],[11,"lt","","",281],[11,"le","","",281],[11,"gt","","",281],[11,"ge","","",281],[11,"clone","","",281],[11,"eq","","",281],[11,"ne","","",281],[11,"empty","","Returns an empty set of flags.",281],[11,"all","","Returns the set containing all flags.",281],[11,"bits","","Returns the raw value of the flags currently stored.",281],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",281],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",281],[11,"is_empty","","Returns `true` if no flags are currently stored.",281],[11,"is_all","","Returns `true` if all flags are currently set.",281],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",281],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",281],[11,"insert","","Inserts the specified flags in-place.",281],[11,"remove","","Removes the specified flags in-place.",281],[11,"toggle","","Toggles the specified flags in-place.",281],[6,"Output","",""],[11,"bitor","","Returns the union of the two sets of flags.",281],[6,"Output","",""],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",281],[6,"Output","",""],[11,"bitand","","Returns the intersection between the two sets of flags.",281],[6,"Output","",""],[11,"sub","","Returns the set difference of the two sets of flags.",281],[6,"Output","",""],[11,"not","","Returns the complement of this set of flags.",281],[11,"print_debug_stats","","",208],[11,"fmt","","",209],[11,"fmt","","",281],[11,"eq","","",209],[11,"hash","","",209],[11,"eq","","",282],[11,"hash","","",282],[11,"borrow","","",282],[11,"fmt","","",210],[11,"hash","","",210],[11,"eq","","",210],[11,"ne","","",210],[11,"clone","","",210],[11,"fmt","","",211],[11,"hash","","",211],[11,"eq","","",211],[11,"ne","","",211],[11,"clone","","",211],[11,"fmt","","",253],[11,"hash","","",253],[11,"eq","","",253],[11,"ne","","",253],[11,"clone","","",253],[11,"diverges","","",253],[11,"unwrap","","",253],[11,"diverges","","",283],[11,"hash","","",212],[11,"eq","","",212],[11,"ne","","",212],[11,"clone","","",212],[11,"inputs","","",284],[11,"input","","",284],[11,"output","","",284],[11,"variadic","","",284],[11,"fmt","","",213],[11,"hash","","",213],[11,"eq","","",213],[11,"ne","","",213],[11,"clone","","",213],[11,"fmt","","",214],[11,"decode","","",214],[11,"encode","","",214],[11,"hash","","",214],[11,"eq","","",214],[11,"ne","","",214],[11,"clone","","",214],[11,"fmt","","",254],[11,"decode","","",254],[11,"encode","","",254],[11,"hash","","",254],[11,"eq","","",254],[11,"ne","","",254],[11,"clone","","",254],[11,"fmt","","",215],[11,"hash","","",215],[11,"eq","","",215],[11,"ne","","",215],[11,"clone","","",215],[11,"decode","","",255],[11,"encode","","",255],[11,"fmt","","",255],[11,"hash","","",255],[11,"eq","","",255],[11,"ne","","",255],[11,"clone","","",255],[11,"fmt","","",256],[11,"decode","","",256],[11,"encode","","",256],[11,"clone","","",256],[11,"eq","","",256],[11,"ne","","",256],[11,"fmt","","",216],[11,"decode","","",216],[11,"encode","","",216],[11,"clone","","",216],[11,"eq","","",216],[11,"ne","","",216],[11,"is_bound","","",254],[11,"escapes_depth","","",254],[11,"fmt","","",217],[11,"decode","","",217],[11,"encode","","",217],[11,"hash","","",217],[11,"cmp","","",217],[11,"partial_cmp","","",217],[11,"lt","","",217],[11,"le","","",217],[11,"gt","","",217],[11,"ge","","",217],[11,"eq","","",217],[11,"ne","","",217],[11,"clone","","",217],[11,"fmt","","",257],[11,"decode","","",257],[11,"encode","","",257],[11,"hash","","",257],[11,"cmp","","",257],[11,"partial_cmp","","",257],[11,"lt","","",257],[11,"le","","",257],[11,"gt","","",257],[11,"ge","","",257],[11,"eq","","",257],[11,"ne","","",257],[11,"clone","","",257],[11,"fmt","","",258],[11,"hash","","",258],[11,"eq","","",258],[11,"ne","","",258],[11,"clone","","",258],[11,"fmt","","",218],[11,"hash","","",218],[11,"eq","","",218],[11,"ne","","",218],[11,"clone","","",218],[11,"principal_def_id","","",218],[11,"principal_trait_ref_with_self_ty","","Object types don't have a self-type specified. Therefore, when\nwe convert the principal trait-ref into a normal trait-ref,\nyou must give *some* self-type. A common choice is `mk_err()`\nor some skolemized type.",218],[11,"projection_bounds_with_self_ty","","",218],[11,"fmt","","",219],[11,"hash","","",219],[11,"eq","","",219],[11,"ne","","",219],[11,"clone","","",219],[11,"self_ty","","",285],[11,"def_id","","",285],[11,"substs","","",285],[11,"input_types","","",285],[11,"to_poly_trait_predicate","","",285],[11,"fmt","","",286],[11,"hash","","",286],[11,"eq","","",286],[11,"ne","","",286],[11,"clone","","",286],[11,"skip_binder","","Skips the binder and returns the \"bound\" value. This is a\nrisky thing to do because it's easy to get confused about\ndebruijn indices and the like. It is usually better to\ndischarge the binder using `no_late_bound_regions` or\n`replace_late_bound_regions` or something like\nthat. `skip_binder` is only valid when you are either\nextracting data that has nothing to do with bound regions, you\nare doing some sort of test that does not involve bound\nregions, or you are being very careful about your depth\naccounting.",286],[11,"eq","","",259],[11,"ne","","",259],[11,"clone","","",259],[11,"fmt","","",260],[11,"clone","","",260],[11,"fmt","","",220],[11,"clone","","",220],[11,"fmt","","",261],[11,"clone","","",261],[11,"fmt","","",221],[11,"clone","","",221],[11,"hash","","",221],[11,"eq","","",221],[11,"ne","","",221],[11,"fmt","","",222],[11,"clone","","",222],[11,"hash","","",222],[11,"eq","","",222],[11,"ne","","",222],[11,"fmt","","",262],[11,"hash","","",262],[11,"decode","","",262],[11,"eq","","",262],[11,"ne","","",262],[11,"encode","","",262],[11,"clone","","",262],[11,"to_usize","","",262],[11,"from_usize","","",262],[11,"hash","","",223],[11,"eq","","",223],[11,"ne","","",223],[11,"clone","","",223],[11,"hash","","",224],[11,"eq","","",224],[11,"ne","","",224],[11,"clone","","",224],[11,"hash","","",225],[11,"eq","","",225],[11,"ne","","",225],[11,"clone","","",225],[11,"hash","","",226],[11,"decode","","",226],[11,"encode","","",226],[11,"eq","","",226],[11,"ne","","",226],[11,"clone","","",226],[11,"hash","","",263],[11,"eq","","",263],[11,"ne","","",263],[11,"clone","","",263],[11,"fmt","","",264],[11,"hash","","",264],[11,"eq","","",264],[11,"ne","","",264],[11,"decode","","",264],[11,"encode","","",264],[11,"clone","","",264],[11,"fmt","","",265],[11,"hash","","",265],[11,"decode","","",265],[11,"encode","","",265],[11,"clone","","",265],[11,"eq","","",265],[11,"ne","","",265],[11,"fmt","","",223],[11,"fmt","","",224],[11,"fmt","","",225],[11,"fmt","","",226],[11,"fmt","","",212],[11,"fmt","","",263],[11,"fmt","","",259],[11,"fmt","","",266],[11,"clone","","",266],[11,"fmt","","",227],[11,"clone","","",227],[11,"fmt","","",228],[11,"clone","","",228],[11,"decode","","",228],[11,"encode","","",228],[11,"to_early_bound_region","","",228],[11,"fmt","","",229],[11,"clone","","",229],[11,"empty","","",229],[11,"is_empty","","",229],[11,"has_type_params","","",229],[11,"has_region_params","","",229],[11,"fmt","","",230],[11,"clone","","",230],[11,"empty","","",230],[11,"instantiate","","",230],[11,"instantiate_supertrait","","",230],[11,"fmt","","",267],[11,"hash","","",267],[11,"eq","","",267],[11,"ne","","",267],[11,"clone","","",267],[11,"subst_supertrait","","Performs a substituion suitable for going from a\npoly-trait-ref to supertraits that must hold if that\npoly-trait-ref holds. This is slightly different from a normal\nsubstitution in terms of what happens with bound regions.  See\nlengthy comment below for details.",267],[11,"fmt","","",231],[11,"hash","","",231],[11,"eq","","",231],[11,"ne","","",231],[11,"clone","","",231],[11,"def_id","","",231],[11,"input_types","","",231],[11,"self_ty","","",231],[11,"def_id","","",287],[11,"fmt","","",288],[11,"hash","","",288],[11,"eq","","",288],[11,"ne","","",288],[11,"clone","","",288],[11,"fmt","","",289],[11,"hash","","",289],[11,"eq","","",289],[11,"ne","","",289],[11,"clone","","",289],[11,"fmt","","",232],[11,"hash","","",232],[11,"eq","","",232],[11,"ne","","",232],[11,"clone","","",232],[11,"item_name","","",290],[11,"sort_key","","",290],[11,"fmt","","",233],[11,"hash","","",233],[11,"eq","","",233],[11,"ne","","",233],[11,"clone","","",233],[11,"sort_key","","",233],[11,"to_poly_trait_ref","alloc::rc","",100],[11,"to_poly_trait_ref","rustc::middle::ty","",287],[11,"to_poly_trait_ref","","",290],[11,"as_predicate","alloc::rc","",100],[11,"as_predicate","rustc::middle::ty","",285],[11,"as_predicate","","",291],[11,"as_predicate","","",292],[11,"as_predicate","","",293],[11,"as_predicate","","",290],[11,"walk_tys","","Iterates over the types in this predicate. Note that in all\ncases this is skipping over a binder, so late-bound regions\nwith depth 0 are bound by the predicate.",267],[11,"has_escaping_regions","","",267],[11,"to_opt_poly_trait_ref","","",267],[11,"fmt","","",234],[11,"clone","","",234],[11,"empty","","",234],[11,"has_escaping_regions","","",234],[11,"is_empty","","",234],[11,"new","","",219],[11,"self_ty","","",219],[11,"input_types","","",219],[11,"clone","","",235],[11,"with_caller_bounds","","",235],[11,"for_item","","",235],[11,"fmt","","",236],[11,"clone","","",236],[11,"clone","","",238],[11,"decode","","",268],[11,"encode","","",268],[11,"fmt","","",268],[11,"eq","","",268],[11,"ne","","",268],[11,"clone","","",268],[11,"trait_did","","",268],[11,"mk_substs","","",208],[11,"mk_bare_fn","","",208],[11,"mk_region","","",208],[11,"closure_kind","","",208],[11,"closure_type","","",208],[11,"type_parameter_def","","",208],[11,"walk","","Iterator that walks `self` and any types reachable from\n`self`, in depth-first order. Note that just walks the types\nthat appear in `self`, it does not descend into the fields of\nstructs or variants. For example:",209],[11,"walk_children","","Iterator that walks types reachable from `self`, in\ndepth-first order. Note that this is a shallow walk. For\nexample:",209],[11,"as_opt_param_ty","","",209],[11,"is_param","","",209],[11,"new","","",213],[11,"for_self","","",213],[11,"for_def","","",213],[11,"to_ty","","",213],[11,"is_self","","",213],[11,"empty","","",238],[11,"is_noop","","",238],[11,"empty","","",221],[11,"clone","","",239],[11,"when","","",239],[11,"intersects","","",239],[11,"owns_managed","","",239],[11,"owns_owned","","",239],[11,"is_sized","","",239],[11,"interior_param","","",239],[11,"interior_unsafe","","",239],[11,"interior_unsized","","",239],[11,"needs_drop","","",239],[11,"owned_pointer","","Includes only those bits that still apply when indirected through a `Box` pointer",239],[11,"reference","","Includes only those bits that still apply when indirected through a reference (`&`)",239],[11,"managed_pointer","","Includes only those bits that still apply when indirected through a managed pointer (`@`)",239],[11,"unsafe_pointer","","Includes only those bits that still apply when indirected through an unsafe pointer (`*`)",239],[11,"union","","",239],[11,"has_dtor","","",239],[6,"Output","",""],[11,"bitor","","",239],[6,"Output","",""],[11,"bitand","","",239],[6,"Output","",""],[11,"sub","","",239],[11,"fmt","","",239],[11,"fmt","","",269],[11,"eq","","",269],[11,"ne","","",269],[11,"cmp","","",269],[11,"partial_cmp","","",269],[11,"lt","","",269],[11,"le","","",269],[11,"gt","","",269],[11,"ge","","",269],[11,"repr","","",261],[11,"clone","","",240],[11,"from_ast_variant","","Creates a new VariantInfo from the corresponding ast representation.",240],[11,"is_present","","",271],[11,"has_drop_flag","","",271],[11,"clone","","",241],[11,"to_string","","",246],[11,"from_mutbl","","",255],[11,"to_mutbl_lossy","","Returns a mutability `m` such that an `&m T` pointer could be used to obtain this borrow\nkind. Because borrow kinds are richer than mutabilities, we sometimes have to pick a\nmutability that is stronger than necessary so that it at least *would permit* the borrow in\nquestion.",255],[11,"to_user_str","","",255],[11,"is_method_call","","",208],[11,"upvar_capture","","",208],[11,"node_ty","","",235],[11,"expr_ty_adjusted","","",235],[11,"node_method_ty","","",235],[11,"node_method_origin","","",235],[11,"adjustments","","",235],[11,"is_method_call","","",235],[11,"temporary_scope","","",235],[11,"upvar_capture","","",235],[11,"type_moves_by_default","","",235],[11,"param_env","","",235],[11,"closure_kind","","",235],[11,"closure_type","","",235],[11,"closure_upvars","","",235],[11,"fmt","","",272],[11,"eq","","",272],[11,"ne","","",272],[11,"clone","","",272],[11,"decode","","",242],[11,"encode","","",242],[11,"clone","","",242],[11,"is_identity","","",247],[11,"is_identity","","",200],[11,"new","","",214],[11,"shifted","","",214],[11,"repr","","",247],[11,"repr","","",248],[11,"repr","","",200],[11,"repr","","",249],[11,"repr","","",218],[11,"repr","","",267],[11,"repr","","",252],[11,"has_regions_escaping_depth","","",294],[11,"has_regions_escaping_depth","rustc::middle::subst","",162],[11,"has_regions_escaping_depth","","",167],[11,"has_regions_escaping_depth","rustc::middle::ty","",236],[11,"has_regions_escaping_depth","","",254],[11,"has_regions_escaping_depth","","",230],[11,"has_regions_escaping_depth","","",267],[11,"has_regions_escaping_depth","","",219],[11,"has_regions_escaping_depth","rustc::middle::subst","",164],[11,"has_regions_escaping_depth","rustc::middle::ty","",286],[11,"has_regions_escaping_depth","","",288],[11,"has_regions_escaping_depth","","",231],[11,"has_regions_escaping_depth","","",289],[11,"has_regions_escaping_depth","","",232],[11,"has_regions_escaping_depth","","",233],[11,"repr","","",232],[11,"has_projection_types","collections::vec","",295],[11,"has_projection_types","rustc::middle::subst","",167],[11,"has_projection_types","rustc::middle::ty","",211],[11,"has_projection_types","","",241],[11,"has_projection_types","","",234],[11,"has_projection_types","","",267],[11,"has_projection_types","","",231],[11,"has_projection_types","","",288],[11,"has_projection_types","","",254],[11,"has_projection_types","","",289],[11,"has_projection_types","","",232],[11,"has_projection_types","","",233],[11,"has_projection_types","","",294],[11,"has_projection_types","","",219],[11,"has_projection_types","rustc::middle::subst","",162],[11,"has_projection_types","core::option","",51],[11,"has_projection_types","alloc::rc","",100],[11,"has_projection_types","alloc::boxed","",296],[11,"has_projection_types","rustc::middle::ty","",286],[11,"has_projection_types","","",253],[11,"has_projection_types","","",212],[11,"has_projection_types","","",193],[11,"has_projection_types","","",210],[11,"references_error","","",286],[11,"references_error","alloc::rc","",100],[11,"references_error","rustc::middle::ty","",231],[11,"references_error","","",232],[11,"references_error","","",219],[11,"references_error","","",294],[11,"references_error","","",267],[11,"references_error","","",289],[11,"references_error","","",288],[11,"references_error","","",254],[11,"repr","","",211],[11,"repr","","",241],[11,"repr","","",193],[11,"repr","","",235],[11,"repr","","",266],[0,"ty_fold","rustc::middle","Generalized type folding mechanism. The setup is a bit convoluted\nbut allows for convenient usage. Let T be an instance of some\n\"foldable type\" (one which implements `TypeFoldable`) and F be an\ninstance of a \"folder\" (a type which implements `TypeFolder`). Then\nthe setup is intended to be:"],[3,"BottomUpFolder","rustc::middle::ty_fold",""],[12,"tcx","","",297],[12,"fldop","","",297],[3,"RegionFolder","","Folds over the substructure of a type, visiting its component\ntypes and all regions that occur *free* within it."],[3,"RegionEraser","",""],[5,"super_fold_binder","",""],[5,"super_fold_ty","",""],[5,"super_fold_substs","",""],[5,"super_fold_fn_sig","",""],[5,"super_fold_output","",""],[5,"super_fold_bare_fn_ty","",""],[5,"super_fold_closure_ty","",""],[5,"super_fold_trait_ref","",""],[5,"super_fold_mt","",""],[5,"super_fold_existential_bounds","",""],[5,"super_fold_autoref","",""],[5,"super_fold_item_substs","",""],[5,"collect_regions","",""],[5,"fold_regions","",""],[5,"erase_regions","",""],[5,"shift_region","",""],[5,"shift_regions","",""],[8,"TypeFoldable","","The TypeFoldable trait is implemented for every type that can be folded.\nBasically, every type that has a corresponding method in TypeFolder."],[10,"fold_with","","",298],[8,"TypeFolder","","The TypeFolder trait defines the actual *folding*. There is a\nmethod defined for every foldable type. Each of these has a\ndefault implementation that does an \"identity\" fold. Within each\nidentity fold, it should invoke `foo.fold_with(self)` to fold each\nsub-item."],[10,"tcx","","",299],[11,"enter_region_binder","","Invoked by the `super_*` routines when we enter a region\nbinding level (for example, when entering a function\nsignature). This is used by clients that want to track the\nDebruijn index nesting level.",299],[11,"exit_region_binder","","Invoked by the `super_*` routines when we exit a region\nbinding level. This is used by clients that want to\ntrack the Debruijn index nesting level.",299],[11,"fold_binder","","",299],[11,"fold_ty","","",299],[11,"fold_mt","","",299],[11,"fold_trait_ref","","",299],[11,"fold_substs","","",299],[11,"fold_fn_sig","","",299],[11,"fold_output","","",299],[11,"fold_bare_fn_ty","","",299],[11,"fold_closure_ty","","",299],[11,"fold_region","","",299],[11,"fold_existential_bounds","","",299],[11,"fold_autoref","","",299],[11,"fold_item_substs","","",299],[11,"fold_with","core::option","",51],[11,"fold_with","alloc::rc","",100],[11,"fold_with","alloc::boxed","",296],[11,"fold_with","collections::vec","",295],[11,"fold_with","rustc::middle::ty","",286],[11,"fold_with","syntax::owned_slice","",300],[11,"fold_with","rustc::middle::subst","",167],[11,"fold_with","rustc::middle::ty_fold","",294],[11,"fold_with","rustc::middle::ty","",210],[11,"fold_with","","",211],[11,"fold_with","","",196],[11,"fold_with","","",253],[11,"fold_with","","",212],[11,"fold_with","","",219],[11,"fold_with","","",193],[11,"fold_with","","",254],[11,"fold_with","rustc::middle::subst","",162],[11,"fold_with","rustc::middle::ty","",238],[11,"fold_with","","",249],[11,"fold_with","","",250],[11,"fold_with","","",252],[11,"fold_with","rustc::middle::ty_fold","",301],[11,"fold_with","rustc::middle::ty","",222],[11,"fold_with","","",221],[11,"fold_with","","",227],[11,"fold_with","","",266],[11,"fold_with","","",228],[11,"fold_with","","",229],[11,"fold_with","","",230],[11,"fold_with","","",267],[11,"fold_with","","",232],[11,"fold_with","","",233],[11,"fold_with","","",234],[11,"fold_with","","",248],[11,"fold_with","rustc::middle::traits","",172],[11,"fold_with","","",175],[11,"fold_with","","",176],[11,"fold_with","","",177],[11,"fold_with","","",190],[11,"fold_with","","",178],[11,"fold_with","rustc::middle::ty","",288],[11,"fold_with","","",231],[11,"fold_with","","",289],[11,"fold_with","","",241],[11,"fold_with","","",235],[11,"tcx","rustc::middle::ty_fold","",297],[11,"fold_ty","","",297],[11,"new","","",302],[11,"tcx","","",302],[11,"enter_region_binder","","",302],[11,"exit_region_binder","","",302],[11,"fold_region","","",302],[11,"tcx","","",303],[11,"fold_region","","",303],[0,"ty_walk","rustc::middle","An iterator over the type substructure."],[3,"TypeWalker","rustc::middle::ty_walk",""],[11,"new","","",304],[11,"skip_current_subtree","","Skips the subtree of types corresponding to the last type\nreturned by `next()`.",304],[6,"Item","",""],[11,"next","","",304],[0,"weak_lang_items","rustc::middle","Validity checking for weak lang items"],[5,"check_crate","rustc::middle::weak_lang_items","Checks the crate for usage of weak lang items, returning a vector of all the\nlanguage items required by this crate, but not defined yet."],[5,"link_name","",""],[0,"metadata","rustc",""],[0,"common","rustc::metadata",""],[3,"LinkMeta","rustc::metadata::common",""],[12,"crate_name","","",305],[12,"crate_hash","","",305],[4,"astencode_tag","",""],[13,"tag_ast","","",306],[13,"tag_tree","","",306],[13,"tag_id_range","","",306],[13,"tag_table","","",306],[13,"tag_table_def","","",306],[13,"tag_table_node_type","","",306],[13,"tag_table_item_subst","","",306],[13,"tag_table_freevars","","",306],[13,"tag_table_tcache","","",306],[13,"tag_table_param_defs","","",306],[13,"tag_table_mutbl","","",306],[13,"tag_table_last_use","","",306],[13,"tag_table_spill","","",306],[13,"tag_table_method_map","","",306],[13,"tag_table_vtable_map","","",306],[13,"tag_table_adjustments","","",306],[13,"tag_table_moves_map","","",306],[13,"tag_table_capture_map","","",306],[13,"tag_table_closure_tys","","",306],[13,"tag_table_closure_kinds","","",306],[13,"tag_table_upvar_capture_map","","",306],[13,"tag_table_capture_modes","","",306],[13,"tag_table_object_cast_map","","",306],[13,"tag_table_const_qualif","","",306],[17,"tag_items","",""],[17,"tag_paths_data_name","",""],[17,"tag_def_id","",""],[17,"tag_items_data","",""],[17,"tag_items_data_item","",""],[17,"tag_items_data_item_family","",""],[17,"tag_items_data_item_type","",""],[17,"tag_items_data_item_symbol","",""],[17,"tag_items_data_item_variant","",""],[17,"tag_items_data_parent_item","",""],[17,"tag_items_data_item_is_tuple_struct_ctor","",""],[17,"tag_index","",""],[17,"tag_index_buckets","",""],[17,"tag_index_buckets_bucket","",""],[17,"tag_index_buckets_bucket_elt","",""],[17,"tag_index_table","",""],[17,"tag_meta_item_name_value","",""],[17,"tag_meta_item_name","",""],[17,"tag_meta_item_value","",""],[17,"tag_attributes","",""],[17,"tag_attribute","",""],[17,"tag_meta_item_word","",""],[17,"tag_meta_item_list","",""],[17,"tag_crate_deps","",""],[17,"tag_crate_dep","",""],[17,"tag_crate_hash","",""],[17,"tag_crate_crate_name","",""],[17,"tag_crate_dep_crate_name","",""],[17,"tag_crate_dep_hash","",""],[17,"tag_mod_impl","",""],[17,"tag_item_trait_item","",""],[17,"tag_item_trait_ref","",""],[17,"tag_disr_val","",""],[17,"tag_path","",""],[17,"tag_path_len","",""],[17,"tag_path_elem_mod","",""],[17,"tag_path_elem_name","",""],[17,"tag_item_field","",""],[17,"tag_item_field_origin","",""],[17,"tag_item_variances","",""],[17,"tag_item_impl_item","",""],[17,"tag_item_trait_method_explicit_self","",""],[17,"tag_items_data_item_reexport","",""],[17,"tag_items_data_item_reexport_def_id","",""],[17,"tag_items_data_item_reexport_name","",""],[17,"tag_item_trait_item_sort","",""],[17,"tag_item_trait_parent_sort","",""],[17,"tag_item_impl_type_basename","",""],[17,"tag_crate_triple","",""],[17,"tag_dylib_dependency_formats","",""],[17,"tag_lang_items","",""],[17,"tag_lang_items_item","",""],[17,"tag_lang_items_item_id","",""],[17,"tag_lang_items_item_node_id","",""],[17,"tag_lang_items_missing","",""],[17,"tag_item_unnamed_field","",""],[17,"tag_items_data_item_visibility","",""],[17,"tag_item_method_tps","",""],[17,"tag_item_method_fty","",""],[17,"tag_mod_child","",""],[17,"tag_misc_info","",""],[17,"tag_misc_info_crate_items","",""],[17,"tag_item_method_provided_source","",""],[17,"tag_item_impl_vtables","",""],[17,"tag_impls","",""],[17,"tag_impls_impl","",""],[17,"tag_items_data_item_inherent_impl","",""],[17,"tag_items_data_item_extension_impl","",""],[17,"tag_native_libraries","",""],[17,"tag_native_libraries_lib","",""],[17,"tag_native_libraries_name","",""],[17,"tag_native_libraries_kind","",""],[17,"tag_plugin_registrar_fn","",""],[17,"tag_method_argument_names","",""],[17,"tag_method_argument_name","",""],[17,"tag_reachable_extern_fns","",""],[17,"tag_reachable_extern_fn_id","",""],[17,"tag_items_data_item_stability","",""],[17,"tag_items_data_item_repr","",""],[17,"tag_struct_fields","",""],[17,"tag_struct_field","",""],[17,"tag_struct_field_id","",""],[17,"tag_attribute_is_sugared_doc","",""],[17,"tag_items_data_region","",""],[17,"tag_region_param_def","",""],[17,"tag_region_param_def_ident","",""],[17,"tag_region_param_def_def_id","",""],[17,"tag_region_param_def_space","",""],[17,"tag_region_param_def_index","",""],[17,"tag_type_param_def","",""],[17,"tag_item_generics","",""],[17,"tag_method_ty_generics","",""],[17,"tag_predicate","",""],[17,"tag_predicate_space","",""],[17,"tag_predicate_data","",""],[17,"tag_unsafety","",""],[17,"tag_associated_type_names","",""],[17,"tag_associated_type_name","",""],[17,"tag_polarity","",""],[17,"tag_macro_defs","",""],[17,"tag_macro_def","",""],[17,"tag_macro_def_body","",""],[17,"tag_paren_sugar","",""],[17,"tag_codemap","",""],[17,"tag_codemap_filemap","",""],[17,"tag_item_super_predicates","",""],[17,"tag_defaulted_trait","",""],[11,"from_i64","","",306],[11,"from_u64","","",306],[11,"eq","","",306],[11,"ne","","",306],[11,"fmt","","",305],[11,"clone","","",305],[0,"tyencode","rustc::metadata",""],[3,"ctxt","rustc::metadata::tyencode",""],[12,"diag","","",307],[12,"ds","","",307],[12,"tcx","","",307],[12,"abbrevs","","",307],[3,"ty_abbrev","",""],[5,"enc_ty","",""],[5,"enc_substs","",""],[5,"enc_region","",""],[5,"enc_trait_ref","",""],[5,"enc_bare_fn_ty","",""],[5,"enc_closure_ty","",""],[5,"enc_builtin_bounds","",""],[5,"enc_existential_bounds","",""],[5,"enc_bounds","",""],[5,"enc_region_bounds","",""],[5,"enc_type_param_def","",""],[5,"enc_predicate","",""],[6,"abbrev_map","",""],[0,"tydecode","rustc::metadata",""],[3,"PState","rustc::metadata::tydecode",""],[4,"DefIdSource","",""],[13,"NominalType","","",308],[13,"TypeWithId","","",308],[13,"TypeParameter","","",308],[13,"RegionParameter","","",308],[13,"ClosureSource","","",308],[5,"parse_ident","",""],[5,"parse_name","",""],[5,"parse_state_from_data","",""],[5,"parse_ty_closure_data","",""],[5,"parse_ty_data","",""],[5,"parse_region_data","",""],[5,"parse_bare_fn_ty_data","",""],[5,"parse_trait_ref_data","",""],[5,"parse_substs_data","",""],[5,"parse_bounds_data","",""],[5,"parse_existential_bounds_data","",""],[5,"parse_builtin_bounds_data","",""],[5,"parse_def_id","",""],[5,"parse_predicate_data","",""],[5,"parse_predicate","",""],[5,"parse_type_param_def_data","",""],[11,"fmt","","",308],[0,"encoder","rustc::metadata",""],[3,"EncodeParams","rustc::metadata::encoder",""],[12,"diag","","",309],[12,"tcx","","",309],[12,"reexports","","",309],[12,"item_symbols","","",309],[12,"link_meta","","",309],[12,"cstore","","",309],[12,"encode_inlined_item","","",309],[12,"reachable","","",309],[3,"EncodeContext","",""],[12,"diag","","",310],[12,"tcx","","",310],[12,"reexports","","",310],[12,"item_symbols","","",310],[12,"link_meta","","",310],[12,"cstore","","",310],[12,"encode_inlined_item","","",310],[12,"type_abbrevs","","",310],[12,"reachable","","",310],[4,"InlinedItemRef","","A borrowed version of `ast::InlinedItem`."],[13,"IIItemRef","","",311],[13,"IITraitItemRef","","",311],[13,"IIImplItemRef","","",311],[13,"IIForeignRef","","",311],[5,"encode_def_id","",""],[5,"def_to_string","",""],[5,"write_closure_type","",""],[5,"write_type","",""],[5,"write_trait_ref","",""],[5,"write_region","",""],[5,"encode_metadata","",""],[5,"encoded_ty","",""],[6,"EncodeInlinedItem","",""],[17,"metadata_encoding_version","",""],[0,"decoder","rustc::metadata",""],[3,"CrateDep","rustc::metadata::decoder",""],[12,"cnum","","",312],[12,"name","","",312],[12,"hash","","",312],[4,"DefLike","",""],[13,"DlDef","","",313],[13,"DlImpl","","",313],[13,"DlField","","",313],[5,"maybe_find_item","",""],[5,"item_type","",""],[5,"get_trait_def","",""],[5,"get_predicates","",""],[5,"get_super_predicates","",""],[5,"get_type","",""],[5,"get_stability","",""],[5,"get_repr_attrs","",""],[5,"get_impl_polarity","",""],[5,"get_impl_trait","",""],[5,"get_impl_vtables","",""],[5,"get_symbol","",""],[5,"each_lang_item","","Iterates over the language items in the given crate."],[5,"each_child_of_item","","Iterates over each child of the given item."],[5,"each_top_level_item_of_crate","","Iterates over all the top-level crate items."],[5,"get_item_path","",""],[5,"maybe_get_item_ast","",""],[5,"get_enum_variant_defs","",""],[5,"get_enum_variants","",""],[5,"get_impl_items","","Returns the def IDs of all the items in the given implementation."],[5,"get_trait_name","",""],[5,"is_static_method","",""],[5,"get_impl_or_trait_item","",""],[5,"get_trait_item_def_ids","",""],[5,"get_item_variances","",""],[5,"get_provided_trait_methods","",""],[5,"get_type_name_if_impl","",""],[5,"get_methods_if_impl","",""],[5,"get_tuple_struct_definition_if_ctor","","If node_id is the constructor of a tuple struct, retrieve the NodeId of\nthe actual type definition, otherwise, return None"],[5,"get_item_attrs","",""],[5,"get_struct_field_attrs","",""],[5,"get_struct_fields","",""],[5,"get_crate_attributes","",""],[5,"get_crate_deps","",""],[5,"maybe_get_crate_hash","",""],[5,"get_crate_hash","",""],[5,"maybe_get_crate_name","",""],[5,"get_crate_triple","",""],[5,"get_crate_name","",""],[5,"list_crate_metadata","",""],[5,"translate_def_id","",""],[5,"each_impl","",""],[5,"each_implementation_for_type","",""],[5,"each_implementation_for_trait","",""],[5,"get_trait_of_item","",""],[5,"get_native_libraries","",""],[5,"get_plugin_registrar_fn","",""],[5,"each_exported_macro","",""],[5,"get_dylib_dependency_formats","",""],[5,"get_missing_lang_items","",""],[5,"get_method_arg_names","",""],[5,"get_reachable_extern_fns","",""],[5,"is_typedef","",""],[5,"is_associated_type","",""],[5,"is_defaulted_trait","",""],[5,"get_imported_filemaps","",""],[6,"Cmd","",""],[6,"DecodeInlinedItem","",""],[11,"fmt","","",313],[11,"clone","","",313],[11,"clone","","",312],[0,"creader","rustc::metadata","Validates all used crates and extern libraries and loads their metadata"],[3,"CrateReader","rustc::metadata::creader",""],[5,"validate_crate_name","",""],[11,"visit_item","","",314],[11,"new","","",314],[11,"read_crates","","",314],[11,"read_exported_macros","","Read exported macros.",314],[11,"find_plugin_registrar","","Look for a plugin registrar. Returns library path and symbol name.",314],[0,"cstore","rustc::metadata",""],[3,"ImportedFileMap","rustc::metadata::cstore","Holds information about a codemap::FileMap imported from another crate.\nSee creader::import_codemap() for more information."],[12,"original_start_pos","","This FileMap's byte-offset within the codemap of its original crate",315],[12,"original_end_pos","","The end of this FileMap within the codemap of its original crate",315],[12,"translated_filemap","","The imported FileMap's representation within the local codemap",315],[3,"crate_metadata","",""],[12,"name","","",316],[12,"data","","",316],[12,"cnum_map","","",316],[12,"cnum","","",316],[12,"codemap_import_info","","",316],[12,"span","","",316],[3,"CrateSource","",""],[12,"dylib","","",317],[12,"rlib","","",317],[12,"cnum","","",317],[3,"CStore","",""],[12,"intr","","",318],[4,"MetadataBlob","",""],[13,"MetadataVec","","",319],[13,"MetadataArchive","","",319],[4,"LinkagePreference","",""],[13,"RequireDynamic","","",320],[13,"RequireStatic","","",320],[4,"NativeLibraryKind","",""],[13,"NativeStatic","","",321],[13,"NativeFramework","","",321],[13,"NativeUnknown","","",321],[6,"cnum_map","",""],[11,"clone","","",320],[11,"eq","","",320],[11,"ne","","",320],[11,"fmt","","",320],[11,"from_i64","","",321],[11,"from_u64","","",321],[11,"eq","","",321],[11,"ne","","",321],[11,"clone","","",321],[11,"clone","","",317],[11,"eq","","",317],[11,"ne","","",317],[11,"new","","",318],[11,"next_crate_num","","",318],[11,"get_crate_data","","",318],[11,"get_crate_hash","","",318],[11,"set_crate_data","","",318],[11,"iter_crate_data","","",318],[11,"iter_crate_data_origins","","Like `iter_crate_data`, but passes source paths (if available) as well.",318],[11,"add_used_crate_source","","",318],[11,"get_used_crate_source","","",318],[11,"reset","","",318],[11,"get_used_crates","","",318],[11,"add_used_library","","",318],[11,"get_used_libraries","","",318],[11,"add_used_link_args","","",318],[11,"get_used_link_args","","",318],[11,"add_extern_mod_stmt_cnum","","",318],[11,"find_extern_mod_stmt_cnum","","",318],[11,"data","","",316],[11,"name","","",316],[11,"hash","","",316],[11,"as_slice","","",319],[0,"csearch","rustc::metadata",""],[3,"MethodInfo","rustc::metadata::csearch",""],[12,"name","","",322],[12,"def_id","","",322],[12,"vis","","",322],[4,"FoundAst","",""],[13,"Found","","",323],[13,"FoundParent","","",323],[13,"NotFound","","",323],[5,"get_symbol","",""],[5,"each_lang_item","","Iterates over all the language items in the given crate."],[5,"each_child_of_item","","Iterates over each child of the given item."],[5,"each_top_level_item_of_crate","","Iterates over each top-level crate item."],[5,"get_item_path","",""],[5,"maybe_get_item_ast","",""],[5,"get_enum_variant_defs","",""],[5,"get_enum_variants","",""],[5,"get_impl_items","","Returns information about the given implementation."],[5,"get_impl_or_trait_item","",""],[5,"get_trait_name","",""],[5,"is_static_method","",""],[5,"get_trait_item_def_ids","",""],[5,"get_item_variances","",""],[5,"get_provided_trait_methods","",""],[5,"get_type_name_if_impl","",""],[5,"get_methods_if_impl","",""],[5,"get_item_attrs","",""],[5,"get_struct_fields","",""],[5,"get_struct_field_attrs","",""],[5,"get_type","",""],[5,"get_trait_def","",""],[5,"get_predicates","",""],[5,"get_super_predicates","",""],[5,"get_field_type","",""],[5,"get_impl_polarity","",""],[5,"get_impl_trait","",""],[5,"get_impl_vtables","",""],[5,"get_native_libraries","",""],[5,"each_impl","",""],[5,"each_implementation_for_type","",""],[5,"each_implementation_for_trait","",""],[5,"get_trait_of_item","","If the given def ID describes an item belonging to a trait (either a\ndefault method or an implementation of a trait method), returns the ID of\nthe trait that the method belongs to. Otherwise, returns `None`."],[5,"get_tuple_struct_definition_if_ctor","",""],[5,"get_dylib_dependency_formats","",""],[5,"get_missing_lang_items","",""],[5,"get_method_arg_names","",""],[5,"get_reachable_extern_fns","",""],[5,"is_typedef","",""],[5,"get_stability","",""],[5,"is_staged_api","",""],[5,"get_repr_attrs","",""],[5,"is_associated_type","",""],[5,"is_defaulted_trait","",""],[0,"loader","rustc::metadata","Finds crate binaries and loads their metadata"],[3,"CrateMismatch","rustc::metadata::loader",""],[3,"Context","",""],[12,"sess","","",324],[12,"span","","",324],[12,"ident","","",324],[12,"crate_name","","",324],[12,"hash","","",324],[12,"target","","",324],[12,"triple","","",324],[12,"filesearch","","",324],[12,"root","","",324],[12,"rejected_via_hash","","",324],[12,"rejected_via_triple","","",324],[12,"rejected_via_kind","","",324],[12,"should_match_name","","",324],[3,"Library","",""],[12,"dylib","","",325],[12,"rlib","","",325],[12,"metadata","","",325],[3,"ArchiveMetadata","",""],[3,"CratePaths","",""],[12,"ident","","",326],[12,"dylib","","",326],[12,"rlib","","",326],[5,"note_crate_name","",""],[5,"meta_section_name","",""],[5,"read_meta_section_name","",""],[5,"list_file_metadata","",""],[11,"maybe_load_library_crate","","",324],[11,"load_library_crate","","",324],[11,"report_load_errs","","",324],[11,"as_slice","","",327],[0,"filesearch","rustc::metadata",""],[3,"FileSearch","rustc::metadata::filesearch",""],[12,"sysroot","","",328],[12,"search_paths","","",328],[12,"triple","","",328],[12,"kind","","",328],[4,"FileMatch","",""],[13,"FileMatches","","",329],[13,"FileDoesntMatch","","",329],[5,"relative_target_lib_path","",""],[5,"get_or_default_sysroot","",""],[5,"get_rust_path","","Returns RUST_PATH as a string, without default paths added"],[5,"rust_path","","Returns the value of RUST_PATH, as a list\nof Paths. Includes default entries for, if they exist:\n$HOME/.rust\nDIR/.rust for any DIR that's the current working directory\nor an ancestor of it"],[5,"rustlibdir","",""],[11,"for_each_lib_search_path","","",328],[11,"get_lib_path","","",328],[11,"search","","",328],[11,"new","","",328],[11,"get_dylib_search_paths","","",328],[11,"get_tools_search_paths","","",328],[0,"macro_import","rustc::metadata","Used by `rustc` when loading a crate with exported macros."],[5,"read_macro_defs","rustc::metadata::macro_import","Read exported macros."],[6,"MacroSelection","",""],[0,"session","rustc",""],[3,"Session","rustc::session",""],[12,"target","","",330],[12,"host","","",330],[12,"opts","","",330],[12,"cstore","","",330],[12,"parse_sess","","",330],[12,"entry_fn","","",330],[12,"entry_type","","",330],[12,"plugin_registrar_fn","","",330],[12,"default_sysroot","","",330],[12,"local_crate_source_file","","",330],[12,"working_dir","","",330],[12,"lint_store","","",330],[12,"lints","","",330],[12,"crate_types","","",330],[12,"crate_metadata","","",330],[12,"features","","",330],[12,"recursion_limit","","The maximum recursion limit for potentially infinitely recursive\noperations such as auto-dereference and monomorphization.",330],[12,"can_print_warnings","","",330],[5,"build_session","",""],[5,"build_session_","",""],[5,"expect","",""],[5,"early_error","",""],[5,"early_warn","",""],[0,"config","","Contains infrastructure for configuring the compiler, including parsing\ncommand line options."],[3,"Config","rustc::session::config",""],[12,"target","","",331],[12,"int_type","","",331],[12,"uint_type","","",331],[3,"Options","",""],[12,"crate_types","","",332],[12,"gc","","",332],[12,"optimize","","",332],[12,"debug_assertions","","",332],[12,"debuginfo","","",332],[12,"lint_opts","","",332],[12,"describe_lints","","",332],[12,"output_types","","",332],[12,"search_paths","","",332],[12,"libs","","",332],[12,"maybe_sysroot","","",332],[12,"target_triple","","",332],[12,"cfg","","",332],[12,"test","","",332],[12,"parse_only","","",332],[12,"no_trans","","",332],[12,"treat_err_as_bug","","",332],[12,"no_analysis","","",332],[12,"debugging_opts","","",332],[12,"write_dependency_info","","Whether to write dependency files. It's (enabled, optional filename).",332],[12,"prints","","",332],[12,"cg","","",332],[12,"color","","",332],[12,"show_span","","",332],[12,"externs","","",332],[12,"crate_name","","",332],[12,"alt_std_name","","An optional name to use as the crate for std during std injection,\nwritten `extern crate std = \"name\"`. Default to \"std\". Used by\nout-of-tree drivers.",332],[12,"unstable_features","","Indicates how the compiler should treat unstable features",332],[3,"OutputFilenames","",""],[12,"out_directory","","",333],[12,"out_filestem","","",333],[12,"single_output_file","","",333],[12,"extra","","",333],[3,"CodegenOptions","",""],[12,"ar","","",334],[12,"linker","","",334],[12,"link_args","","",334],[12,"lto","","",334],[12,"target_cpu","","",334],[12,"target_feature","","",334],[12,"passes","","",334],[12,"llvm_args","","",334],[12,"save_temps","","",334],[12,"rpath","","",334],[12,"no_prepopulate_passes","","",334],[12,"no_vectorize_loops","","",334],[12,"no_vectorize_slp","","",334],[12,"soft_float","","",334],[12,"prefer_dynamic","","",334],[12,"no_integrated_as","","",334],[12,"no_redzone","","",334],[12,"relocation_model","","",334],[12,"code_model","","",334],[12,"metadata","","",334],[12,"extra_filename","","",334],[12,"codegen_units","","",334],[12,"remark","","",334],[12,"no_stack_check","","",334],[12,"debuginfo","","",334],[12,"opt_level","","",334],[12,"debug_assertions","","",334],[3,"DebuggingOptions","",""],[12,"verbose","","",335],[12,"time_passes","","",335],[12,"count_llvm_insns","","",335],[12,"time_llvm_passes","","",335],[12,"trans_stats","","",335],[12,"asm_comments","","",335],[12,"no_verify","","",335],[12,"borrowck_stats","","",335],[12,"no_landing_pads","","",335],[12,"debug_llvm","","",335],[12,"count_type_sizes","","",335],[12,"meta_stats","","",335],[12,"print_link_args","","",335],[12,"gc","","",335],[12,"print_llvm_passes","","",335],[12,"ast_json","","",335],[12,"ast_json_noexpand","","",335],[12,"ls","","",335],[12,"save_analysis","","",335],[12,"print_move_fragments","","",335],[12,"flowgraph_print_loans","","",335],[12,"flowgraph_print_moves","","",335],[12,"flowgraph_print_assigns","","",335],[12,"flowgraph_print_all","","",335],[12,"print_region_graph","","",335],[12,"parse_only","","",335],[12,"no_trans","","",335],[12,"treat_err_as_bug","","",335],[12,"no_analysis","","",335],[12,"extra_plugins","","",335],[12,"unstable_options","","",335],[12,"print_enum_sizes","","",335],[12,"force_overflow_checks","","",335],[3,"RustcOptGroup","",""],[12,"opt_group","","",336],[12,"stability","","",336],[4,"OptLevel","",""],[13,"No","","",337],[13,"Less","","",337],[13,"Default","","",337],[13,"Aggressive","","",337],[4,"DebugInfoLevel","",""],[13,"NoDebugInfo","","",338],[13,"LimitedDebugInfo","","",338],[13,"FullDebugInfo","","",338],[4,"OutputType","",""],[13,"OutputTypeBitcode","","",339],[13,"OutputTypeAssembly","","",339],[13,"OutputTypeLlvmAssembly","","",339],[13,"OutputTypeObject","","",339],[13,"OutputTypeExe","","",339],[13,"OutputTypeDepInfo","","",339],[4,"UnstableFeatures","",""],[13,"Disallow","","Hard errors for unstable features are active, as on\nbeta/stable channels.",340],[13,"Default","","Use the default lint levels",340],[13,"Cheat","","Errors are bypassed for bootstrapping. This is required any time\nduring the build that feature-related lints are set to warn or above\nbecause the build turns on warnings-as-errors and uses lots of unstable\nfeatures. As a result, this this is always required for building Rust\nitself.",340],[4,"PrintRequest","",""],[13,"FileNames","","",341],[13,"Sysroot","","",341],[13,"CrateName","","",341],[4,"Input","",""],[13,"File","","Load source from file",342],[13,"Str","","The string is the source",342],[4,"EntryFnType","",""],[13,"EntryMain","","",343],[13,"EntryStart","","",343],[13,"EntryNone","","",343],[4,"CrateType","",""],[13,"CrateTypeExecutable","","",344],[13,"CrateTypeDylib","","",344],[13,"CrateTypeRlib","","",344],[13,"CrateTypeStaticlib","","",344],[4,"Passes","",""],[13,"SomePasses","","",345],[13,"AllPasses","","",345],[4,"OptionStability","",""],[13,"Stable","","",346],[13,"Unstable","","",346],[5,"host_triple","",""],[5,"basic_options","","Some reasonable defaults"],[5,"basic_codegen_options","",""],[5,"build_codegen_options","",""],[5,"basic_debugging_options","",""],[5,"build_debugging_options","",""],[5,"default_lib_output","",""],[5,"default_configuration","",""],[5,"append_configuration","",""],[5,"build_configuration","",""],[5,"build_target_config","",""],[5,"short_optgroups","","Returns the \"short\" subset of the stable rustc command line options."],[5,"optgroups","","Returns all of the stable rustc command line options."],[5,"rustc_short_optgroups","","Returns the \"short\" subset of the rustc command line options,\nincluding metadata for each option, such as whether the option is\npart of the stable long-term interface for rustc."],[5,"rustc_optgroups","","Returns all rustc command line options, including metadata for\neach option, such as whether the option is part of the stable\nlong-term interface for rustc."],[5,"parse_cfgspecs","",""],[5,"build_session_options","",""],[5,"get_unstable_features_setting","",""],[5,"parse_crate_types_from_list","",""],[6,"CodegenSetter","",""],[6,"DebuggingSetter","",""],[17,"CG_OPTIONS","",""],[17,"DB_OPTIONS","",""],[11,"eq","","",337],[11,"ne","","",337],[11,"clone","","",337],[11,"eq","","",338],[11,"ne","","",338],[11,"clone","","",338],[11,"cmp","","",339],[11,"partial_cmp","","",339],[11,"lt","","",339],[11,"le","","",339],[11,"gt","","",339],[11,"ge","","",339],[11,"eq","","",339],[11,"ne","","",339],[11,"clone","","",339],[11,"clone","","",332],[11,"clone","","",340],[11,"eq","","",341],[11,"ne","","",341],[11,"clone","","",341],[11,"filestem","","",342],[11,"clone","","",333],[11,"path","","",333],[11,"temp_path","","",333],[11,"with_extension","","",333],[11,"filestem","","",333],[11,"eq","","",343],[11,"ne","","",343],[11,"fmt","","",344],[11,"hash","","",344],[11,"cmp","","",344],[11,"clone","","",344],[11,"partial_cmp","","",344],[11,"lt","","",344],[11,"le","","",344],[11,"gt","","",344],[11,"ge","","",344],[11,"eq","","",344],[11,"ne","","",344],[11,"clone","","",345],[11,"is_empty","","",345],[11,"clone","","",334],[11,"clone","","",335],[11,"fmt","","",346],[11,"eq","","",346],[11,"ne","","",346],[11,"clone","","",346],[11,"eq","","",336],[11,"ne","","",336],[11,"clone","","",336],[11,"is_stable","","",336],[11,"fmt","","",344],[0,"search_paths","rustc::session",""],[3,"SearchPaths","rustc::session::search_paths",""],[3,"Iter","",""],[4,"PathKind","",""],[13,"Native","","",347],[13,"Crate","","",347],[13,"Dependency","","",347],[13,"Framework","","",347],[13,"ExternFlag","","",347],[13,"All","","",347],[11,"fmt","","",348],[11,"clone","","",348],[11,"fmt","","",347],[11,"clone","","",347],[11,"eq","","",347],[11,"ne","","",347],[11,"new","","",348],[11,"add_path","","",348],[11,"iter","","",348],[6,"Item","",""],[11,"next","","",349],[11,"span_fatal","rustc::session","",330],[11,"span_fatal_with_code","","",330],[11,"fatal","","",330],[11,"span_err","","",330],[11,"span_err_with_code","","",330],[11,"err","","",330],[11,"err_count","","",330],[11,"has_errors","","",330],[11,"abort_if_errors","","",330],[11,"span_warn","","",330],[11,"span_warn_with_code","","",330],[11,"warn","","",330],[11,"opt_span_warn","","",330],[11,"span_note","","",330],[11,"span_end_note","","",330],[11,"span_help","","",330],[11,"fileline_note","","",330],[11,"fileline_help","","",330],[11,"note","","",330],[11,"help","","",330],[11,"opt_span_bug","","",330],[11,"span_bug","","",330],[11,"bug","","",330],[11,"span_unimpl","","",330],[11,"unimpl","","",330],[11,"add_lint","","",330],[11,"next_node_id","","",330],[11,"reserve_node_ids","","",330],[11,"diagnostic","","",330],[11,"codemap","","",330],[11,"impossible_case","","",330],[11,"verbose","","",330],[11,"time_passes","","",330],[11,"count_llvm_insns","","",330],[11,"count_type_sizes","","",330],[11,"time_llvm_passes","","",330],[11,"trans_stats","","",330],[11,"meta_stats","","",330],[11,"asm_comments","","",330],[11,"no_verify","","",330],[11,"borrowck_stats","","",330],[11,"print_llvm_passes","","",330],[11,"lto","","",330],[11,"no_landing_pads","","",330],[11,"unstable_options","","",330],[11,"print_enum_sizes","","",330],[11,"sysroot","","",330],[11,"target_filesearch","","",330],[11,"host_filesearch","","",330],[0,"plugin","rustc","Infrastructure for compiler plugins."],[0,"registry","rustc::plugin","Used by plugin crates to tell `rustc` about the plugins they provide."],[3,"Registry","rustc::plugin::registry","Structure used to register plugins."],[12,"sess","","Compiler session. Useful if you want to emit diagnostic messages\nfrom the plugin registrar.",350],[11,"args","","Get the plugin's arguments, if any.",350],[11,"register_syntax_extension","","Register a syntax extension of any kind.",350],[11,"register_macro","","Register a macro of the usual kind.",350],[11,"register_lint_pass","","Register a compiler lint pass.",350],[11,"register_lint_group","","Register a lint group.",350],[0,"load","rustc::plugin","Used by `rustc` when loading a plugin."],[3,"PluginRegistrar","rustc::plugin::load",""],[12,"fun","","",351],[12,"args","","",351],[5,"load_plugins","","Read plugin metadata and dynamically load registrar functions."],[6,"PluginRegistrarFun","","Pointer to a registrar function."],[0,"build","rustc::plugin","Used by `rustc` when compiling a plugin crate."],[5,"find_plugin_registrar","rustc::plugin::build","Find the function marked with `#[plugin_registrar]`, if any."],[0,"lint","rustc","Lints, aka compiler warnings."],[3,"Context","rustc::lint","Context for lint checking."],[12,"tcx","","Type context we're checking in.",352],[12,"krate","","The crate being checked.",352],[12,"exported_items","","Items exported from the crate being checked.",352],[3,"LintStore","","Information about the registered lints."],[3,"GatherNodeLevels","",""],[3,"Lint","","Specification of a single lint."],[12,"name","","A string identifier for the lint.",353],[12,"default_level","","Default level for the lint.",353],[12,"desc","","Description of the lint or the issue it detects.",353],[3,"LintId","","Identifies a lint known to the compiler."],[4,"Level","","Setting for how to handle a lint."],[13,"Allow","","",354],[13,"Warn","","",354],[13,"Deny","","",354],[13,"Forbid","","",354],[4,"LintSource","","How a lint level was set."],[13,"Default","","Lint is at the default level as declared\nin rustc or a plugin.",355],[13,"Node","","Lint level was set by an attribute.",355],[13,"CommandLine","","Lint level was set by a command-line flag.",355],[13,"ReleaseChannel","","Lint level was set by the release channel.",355],[5,"raw_emit_lint","","Emit a lint as a warning or an error (or not at all)\naccording to `level`."],[5,"check_crate","","Perform lint checking on a crate."],[5,"gather_attrs","","Parse the lint attributes into a vector, with `Err`s for malformed lint\nattributes. Writing this as an iterator is an enormous mess."],[0,"builtin","","Some lints that are built in to the compiler."],[3,"HardwiredLints","rustc::lint::builtin","Does nothing as a lint pass, but registers some `Lint`s\nwhich are used by other parts of the compiler."],[7,"UNUSED_IMPORTS","",""],[7,"UNUSED_EXTERN_CRATES","",""],[7,"UNUSED_QUALIFICATIONS","",""],[7,"UNKNOWN_LINTS","",""],[7,"UNUSED_VARIABLES","",""],[7,"UNUSED_ASSIGNMENTS","",""],[7,"DEAD_CODE","",""],[7,"UNREACHABLE_CODE","",""],[7,"WARNINGS","",""],[7,"UNUSED_FEATURES","",""],[7,"STABLE_FEATURES","",""],[7,"UNKNOWN_CRATE_TYPES","",""],[7,"VARIANT_SIZE_DIFFERENCES","",""],[7,"FAT_PTR_TRANSMUTES","",""],[11,"get_lints","","",356],[11,"new","rustc::lint","",357],[11,"get_lints","","",357],[11,"get_lint_groups","","",357],[11,"register_pass","","",357],[11,"register_group","","",357],[11,"register_renamed","","",357],[11,"process_command_line","","",357],[11,"sess","","Get the overall compiler `Session` object.",352],[11,"current_level","","Get the level of `lint` at the current position of the lint\ntraversal.",352],[11,"lint","","Emit a lint at the appropriate level, with no associated span.",352],[11,"span_lint","","Emit a lint at the appropriate level, for a particular span.",352],[11,"visit_item","","",352],[11,"visit_foreign_item","","",352],[11,"visit_pat","","",352],[11,"visit_expr","","",352],[11,"visit_stmt","","",352],[11,"visit_fn","","",352],[11,"visit_ty_method","","",352],[11,"visit_struct_def","","",352],[11,"visit_struct_field","","",352],[11,"visit_variant","","",352],[11,"visit_ty","","",352],[11,"visit_ident","","",352],[11,"visit_mod","","",352],[11,"visit_local","","",352],[11,"visit_block","","",352],[11,"visit_arm","","",352],[11,"visit_decl","","",352],[11,"visit_expr_post","","",352],[11,"visit_generics","","",352],[11,"visit_trait_item","","",352],[11,"visit_opt_lifetime_ref","","",352],[11,"visit_lifetime_ref","","",352],[11,"visit_lifetime_def","","",352],[11,"visit_explicit_self","","",352],[11,"visit_mac","","",352],[11,"visit_path","","",352],[11,"visit_attribute","","",352],[11,"visit_id","","",352],[11,"get_lints","","",358],[11,"check_item","","",358],[6,"LintArray","",""],[6,"LintPassObject","","A lint pass boxed up as a trait object."],[6,"LevelSource","",""],[8,"LintPass","","Trait for types providing lint checks."],[10,"get_lints","","Get descriptions of the lints this `LintPass` object can emit.",359],[11,"check_crate","","",359],[11,"check_ident","","",359],[11,"check_mod","","",359],[11,"check_foreign_item","","",359],[11,"check_item","","",359],[11,"check_local","","",359],[11,"check_block","","",359],[11,"check_stmt","","",359],[11,"check_arm","","",359],[11,"check_pat","","",359],[11,"check_decl","","",359],[11,"check_expr","","",359],[11,"check_expr_post","","",359],[11,"check_ty","","",359],[11,"check_generics","","",359],[11,"check_fn","","",359],[11,"check_ty_method","","",359],[11,"check_trait_item","","",359],[11,"check_struct_def","","",359],[11,"check_struct_def_post","","",359],[11,"check_struct_field","","",359],[11,"check_variant","","",359],[11,"check_variant_post","","",359],[11,"check_opt_lifetime_ref","","",359],[11,"check_lifetime_ref","","",359],[11,"check_lifetime_def","","",359],[11,"check_explicit_self","","",359],[11,"check_mac","","",359],[11,"check_path","","",359],[11,"check_attribute","","",359],[11,"enter_lint_attrs","","Called when entering a syntax node that can have lint attributes such\nas `#[allow(...)]`. Called with *all* the attributes of that node.",359],[11,"exit_lint_attrs","","Counterpart to `enter_lint_attrs`.",359],[11,"fmt","","",353],[11,"name_lower","","Get the lint's name, with ASCII letters converted to lowercase.",353],[11,"clone","","",360],[11,"eq","","",360],[11,"hash","","",360],[11,"of","","Get the `LintId` for a `Lint`.",360],[11,"as_str","","Get the name of the lint.",360],[11,"fmt","","",354],[11,"cmp","","",354],[11,"partial_cmp","","",354],[11,"lt","","",354],[11,"le","","",354],[11,"gt","","",354],[11,"ge","","",354],[11,"eq","","",354],[11,"ne","","",354],[11,"clone","","",354],[11,"as_str","","Convert a level to a lower-case string.",354],[11,"from_str","","Convert a lower-case string to a level.",354],[11,"eq","","",355],[11,"ne","","",355],[11,"clone","","",355],[0,"util","rustc",""],[0,"fs","rustc::util",""],[5,"realpath","rustc::util::fs","Returns an absolute path in the filesystem that `path` points to. The\nreturned path does not contain any symlinks in its hierarchy."],[0,"sha2","rustc::util","This module implements only the Sha256 function since that is all that is needed for internal\nuse. This implementation is not intended for external use or for any use where security is\nimportant."],[8,"Digest","rustc::util::sha2","The Digest trait specifies an interface common to digest functions, such as SHA-1 and the SHA-2\nfamily of digest functions."],[10,"input","","Provide message data.",361],[10,"result","","Retrieve the digest result. This method may be called multiple times.",361],[10,"reset","","Reset the digest. This method must be called after result() and before supplying more\ndata.",361],[10,"output_bits","","Get the output size in bits.",361],[10,"input_str","","Convenience function that feeds a string into a digest.",361],[10,"result_bytes","","Convenience function that retrieves the result of a digest as a\nnewly allocated vec of bytes.",361],[10,"result_str","","Convenience function that retrieves the result of a digest as a\nString in hexadecimal format.",361],[3,"Sha256","","The SHA-256 hash algorithm"],[0,"common","rustc::util",""],[3,"ErrorReported","rustc::util::common",""],[3,"Indenter","",""],[5,"time","",""],[5,"indent","",""],[5,"indenter","",""],[5,"loop_query","",""],[5,"block_query","",""],[5,"can_reach","","K: Eq + Hash<S>, V, S, H: Hasher<S>"],[5,"memoized","","Memoizes a one-argument closure using the given RefCell containing\na type implementing MutableMap to serve as a cache."],[5,"path2cstr","",""],[17,"FN_OUTPUT_NAME","",""],[11,"fmt","","",362],[11,"clone","","",362],[11,"drop","","",363],[0,"ppaux","rustc::util",""],[5,"note_and_explain_region","rustc::util::ppaux",""],[5,"explain_region_and_span","",""],[5,"bound_region_ptr_to_string","",""],[5,"bound_region_to_string","",""],[5,"region_ptr_to_string","",""],[5,"region_to_string","",""],[5,"mutability_to_string","",""],[5,"mt_to_string","",""],[5,"vec_map_to_string","",""],[5,"ty_to_string","",""],[5,"explicit_self_category_to_str","",""],[5,"parameterized","",""],[5,"ty_to_short_str","",""],[8,"Repr","","Produces a string suitable for debugging output."],[10,"repr","","",364],[8,"UserString","","Produces a string suitable for showing to the user."],[10,"user_string","","",365],[11,"repr","core::option","",51],[11,"repr","syntax::ptr","",366],[11,"repr","core::result","",367],[11,"repr","alloc::rc","",100],[11,"repr","alloc::boxed","",296],[11,"repr","syntax::owned_slice","",300],[11,"repr","collections::vec","",295],[11,"user_string","","",295],[11,"repr","rustc::middle::def","",72],[11,"user_string","rustc::middle::ty","",218],[11,"repr","","",227],[11,"repr","","",228],[11,"repr","","",209],[11,"repr","","",196],[11,"repr","rustc::middle::subst","",162],[11,"repr","","",167],[11,"repr","rustc::middle::ty","",238],[11,"repr","rustc::middle::subst","",164],[11,"repr","rustc::util::ppaux","",301],[11,"repr","rustc::middle::ty","",221],[11,"repr","","",219],[11,"repr","","",237],[11,"repr","syntax::ast","",368],[11,"repr","","",149],[11,"repr","","",369],[11,"user_string","","",369],[11,"repr","","",370],[11,"repr","","",371],[11,"repr","","",372],[11,"repr","rustc::util::ppaux","",373],[11,"repr","syntax::ast","",150],[11,"repr","rustc::middle::ty","",257],[11,"repr","","",254],[11,"user_string","","",254],[11,"repr","","",217],[11,"repr","rustc::middle::region","",157],[11,"repr","","",155],[11,"repr","syntax::ast","",50],[11,"repr","rustc::middle::ty","",236],[11,"repr","","",229],[11,"repr","","",230],[11,"repr","","",234],[11,"repr","","",199],[11,"repr","","",246],[11,"repr","","",194],[11,"repr","syntax::ast","",41],[11,"user_string","","",41],[11,"repr","","",40],[11,"repr","","",374],[11,"repr","","",375],[11,"repr","rustc::middle::ty","",210],[11,"repr","","",212],[11,"repr","","",253],[11,"repr","","",204],[11,"repr","","",250],[11,"repr","","",202],[11,"repr","","",203],[11,"repr","","",262],[11,"user_string","","",262],[11,"repr","syntax::codemap","",52],[11,"user_string","alloc::rc","",100],[11,"user_string","rustc::middle::ty","",221],[11,"repr","","",222],[11,"user_string","rustc::util::ppaux","",301],[11,"user_string","rustc::middle::ty","",286],[11,"user_string","","",219],[11,"user_string","rustc::util::ppaux","",294],[11,"user_string","syntax::ast","",40],[11,"repr","syntax::abi","",376],[11,"user_string","","",376],[11,"repr","rustc::middle::ty","",215],[11,"repr","syntax::ast","",377],[11,"repr","rustc::middle::ty","",255],[11,"repr","","",216],[11,"repr","","",256],[11,"repr","","",224],[11,"repr","","",225],[11,"repr","","",226],[11,"repr","","",223],[11,"repr","","",259],[11,"repr","syntax::ast","",378],[11,"repr","","",379],[11,"repr","","",130],[11,"repr","rustc::middle::ty","",272],[11,"user_string","","",213],[11,"repr","","",213],[11,"repr","","",286],[11,"repr","std::collections::hash::map","",380],[11,"repr","rustc::middle::ty","",289],[11,"user_string","","",289],[11,"repr","","",288],[11,"user_string","","",288],[11,"repr","","",231],[11,"user_string","","",231],[11,"user_string","","",232],[11,"repr","","",233],[11,"user_string","","",233],[11,"user_string","","",267],[0,"nodemap","rustc::util","An efficient hash map for node IDs"],[3,"FnvHasher","rustc::util::nodemap","A speedy hash algorithm for node ids and def ids. The hashmap in\nlibcollections by default uses SipHash which isn't quite as speedy as we\nwant. In the compiler we're not really worried about DOS attempts, so we\njust default to a non-cryptographic hash."],[5,"FnvHashMap","",""],[5,"FnvHashSet","",""],[5,"NodeMap","",""],[5,"DefIdMap","",""],[5,"NodeSet","",""],[5,"DefIdSet","",""],[6,"FnvHashMap","",""],[6,"FnvHashSet","",""],[6,"NodeMap","",""],[6,"DefIdMap","",""],[6,"NodeSet","",""],[6,"DefIdSet","",""],[11,"default","","",381],[11,"write","","",381],[11,"finish","","",381],[0,"snapshot_vec","rustc::util","A utility class for implementing \"snapshottable\" things; a snapshottable data structure permits\nyou to take a snapshot (via `start_snapshot`) and then, after making some changes, elect either\nto rollback to the start of the snapshot or commit those changes."],[3,"SnapshotVec","rustc::util::snapshot_vec",""],[3,"Snapshot","",""],[4,"UndoLog","",""],[13,"OpenSnapshot","","Indicates where a snapshot started.",382],[13,"CommittedSnapshot","","Indicates a snapshot that has been committed.",382],[13,"NewElem","","New variable with given index was created.",382],[13,"SetElem","","Variable with given index was changed *from* the given value.",382],[13,"Other","","Extensible set of actions",382],[8,"SnapshotVecDelegate","",""],[16,"Value","rustc::util::snapshot_vec::SnapshotVecDelegate",""],[16,"Undo","",""],[10,"reverse","rustc::util::snapshot_vec","",383],[11,"new","","",384],[11,"record","","",384],[11,"push","","",384],[11,"get","","",384],[11,"get_mut","","Returns a mutable pointer into the vec; whatever changes you make here cannot be undone\nautomatically, so you should be sure call `record()` with some sort of suitable undo\naction.",384],[11,"set","","Updates the element at the given index. The old value will saved (and perhaps restored) if\na snapshot is active.",384],[11,"start_snapshot","","",384],[11,"actions_since_snapshot","","",384],[11,"rollback_to","","",384],[11,"commit","","Commits all changes since the last snapshot. Of course, they\ncan still be undone if there is a snapshot further out.",384],[0,"lev_distance","rustc::util",""],[5,"lev_distance","rustc::util::lev_distance",""],[0,"lib","rustc",""],[0,"llvm","rustc::lib",""],[0,"archive_ro","rustc::lib::llvm","A wrapper around LLVM's archive (.a) code"],[3,"ArchiveRO","rustc::lib::llvm::archive_ro",""],[0,"diagnostic","rustc::lib::llvm","LLVM diagnostic reports."],[4,"OptimizationDiagnosticKind","rustc::lib::llvm::diagnostic",""],[13,"OptimizationRemark","","",1],[13,"OptimizationMissed","","",1],[13,"OptimizationAnalysis","","",1],[13,"OptimizationFailure","","",1],[3,"OptimizationDiagnostic","",""],[12,"kind","","",15],[12,"pass_name","","",15],[12,"function","","",15],[12,"debug_loc","","",15],[12,"message","","",15],[3,"InlineAsmDiagnostic","",""],[12,"cookie","","",16],[12,"message","","",16],[12,"instruction","","",16],[4,"Diagnostic","",""],[13,"Optimization","","",2],[13,"InlineAsm","","",2],[13,"UnknownDiagnostic","","LLVM has other types that we do not wrap here.",2],[6,"Opcode","rustc::lib::llvm",""],[6,"Bool","",""],[17,"True","",""],[17,"False","",""],[4,"CallConv","",""],[13,"CCallConv","","",3],[13,"FastCallConv","","",3],[13,"ColdCallConv","","",3],[13,"X86StdcallCallConv","","",3],[13,"X86FastcallCallConv","","",3],[13,"X86_64_Win64","","",3],[4,"Visibility","",""],[13,"LLVMDefaultVisibility","","",17],[13,"HiddenVisibility","","",17],[13,"ProtectedVisibility","","",17],[4,"Linkage","",""],[13,"ExternalLinkage","","",18],[13,"AvailableExternallyLinkage","","",18],[13,"LinkOnceAnyLinkage","","",18],[13,"LinkOnceODRLinkage","","",18],[13,"WeakAnyLinkage","","",18],[13,"WeakODRLinkage","","",18],[13,"AppendingLinkage","","",18],[13,"InternalLinkage","","",18],[13,"PrivateLinkage","","",18],[13,"ExternalWeakLinkage","","",18],[13,"CommonLinkage","","",18],[4,"DiagnosticSeverity","",""],[13,"Error","","",4],[13,"Warning","","",4],[13,"Remark","","",4],[13,"Note","","",4],[3,"Attribute","",""],[17,"ZExtAttribute","",""],[17,"SExtAttribute","",""],[17,"NoReturnAttribute","",""],[17,"InRegAttribute","",""],[17,"StructRetAttribute","",""],[17,"NoUnwindAttribute","",""],[17,"NoAliasAttribute","",""],[17,"ByValAttribute","",""],[17,"NestAttribute","",""],[17,"ReadNoneAttribute","",""],[17,"ReadOnlyAttribute","",""],[17,"NoInlineAttribute","",""],[17,"AlwaysInlineAttribute","",""],[17,"OptimizeForSizeAttribute","",""],[17,"StackProtectAttribute","",""],[17,"StackProtectReqAttribute","",""],[17,"AlignmentAttribute","",""],[17,"NoCaptureAttribute","",""],[17,"NoRedZoneAttribute","",""],[17,"NoImplicitFloatAttribute","",""],[17,"NakedAttribute","",""],[17,"InlineHintAttribute","",""],[17,"StackAttribute","",""],[17,"ReturnsTwiceAttribute","",""],[17,"UWTableAttribute","",""],[17,"NonLazyBindAttribute","",""],[4,"OtherAttribute","",""],[13,"SanitizeAddressAttribute","","",6],[13,"MinSizeAttribute","","",6],[13,"NoDuplicateAttribute","","",6],[13,"StackProtectStrongAttribute","","",6],[13,"SanitizeThreadAttribute","","",6],[13,"SanitizeMemoryAttribute","","",6],[13,"NoBuiltinAttribute","","",6],[13,"ReturnedAttribute","","",6],[13,"ColdAttribute","","",6],[13,"BuiltinAttribute","","",6],[13,"OptimizeNoneAttribute","","",6],[13,"InAllocaAttribute","","",6],[13,"NonNullAttribute","","",6],[4,"SpecialAttribute","",""],[13,"DereferenceableAttribute","","",7],[4,"AttributeSet","",""],[13,"ReturnIndex","","",19],[13,"FunctionIndex","","",19],[8,"AttrHelper","",""],[10,"apply_llfn","","",20],[10,"apply_callsite","","",20],[3,"AttrBuilder","",""],[4,"IntPredicate","",""],[13,"IntEQ","","",21],[13,"IntNE","","",21],[13,"IntUGT","","",21],[13,"IntUGE","","",21],[13,"IntULT","","",21],[13,"IntULE","","",21],[13,"IntSGT","","",21],[13,"IntSGE","","",21],[13,"IntSLT","","",21],[13,"IntSLE","","",21],[4,"RealPredicate","",""],[13,"RealPredicateFalse","","",22],[13,"RealOEQ","","",22],[13,"RealOGT","","",22],[13,"RealOGE","","",22],[13,"RealOLT","","",22],[13,"RealOLE","","",22],[13,"RealONE","","",22],[13,"RealORD","","",22],[13,"RealUNO","","",22],[13,"RealUEQ","","",22],[13,"RealUGT","","",22],[13,"RealUGE","","",22],[13,"RealULT","","",22],[13,"RealULE","","",22],[13,"RealUNE","","",22],[13,"RealPredicateTrue","","",22],[4,"TypeKind","",""],[13,"Void","","",9],[13,"Half","","",9],[13,"Float","","",9],[13,"Double","","",9],[13,"X86_FP80","","",9],[13,"FP128","","",9],[13,"PPC_FP128","","",9],[13,"Label","","",9],[13,"Integer","","",9],[13,"Function","","",9],[13,"Struct","","",9],[13,"Array","","",9],[13,"Pointer","","",9],[13,"Vector","","",9],[13,"Metadata","","",9],[13,"X86_MMX","","",9],[4,"AtomicBinOp","",""],[13,"AtomicXchg","","",23],[13,"AtomicAdd","","",23],[13,"AtomicSub","","",23],[13,"AtomicAnd","","",23],[13,"AtomicNand","","",23],[13,"AtomicOr","","",23],[13,"AtomicXor","","",23],[13,"AtomicMax","","",23],[13,"AtomicMin","","",23],[13,"AtomicUMax","","",23],[13,"AtomicUMin","","",23],[4,"AtomicOrdering","",""],[13,"NotAtomic","","",24],[13,"Unordered","","",24],[13,"Monotonic","","",24],[13,"Acquire","","",24],[13,"Release","","",24],[13,"AcquireRelease","","",24],[13,"SequentiallyConsistent","","",24],[4,"FileType","",""],[13,"AssemblyFileType","","",25],[13,"ObjectFileType","","",25],[4,"MetadataType","",""],[13,"MD_dbg","","",26],[13,"MD_tbaa","","",26],[13,"MD_prof","","",26],[13,"MD_fpmath","","",26],[13,"MD_range","","",26],[13,"MD_tbaa_struct","","",26],[13,"MD_invariant_load","","",26],[13,"MD_alias_scope","","",26],[13,"MD_noalias","","",26],[13,"MD_nontemporal","","",26],[13,"MD_mem_parallel_loop_access","","",26],[13,"MD_nonnull","","",26],[4,"AsmDialect","",""],[13,"AD_ATT","","",27],[13,"AD_Intel","","",27],[4,"CodeGenOptLevel","",""],[13,"CodeGenLevelNone","","",10],[13,"CodeGenLevelLess","","",10],[13,"CodeGenLevelDefault","","",10],[13,"CodeGenLevelAggressive","","",10],[4,"RelocMode","",""],[13,"RelocDefault","","",11],[13,"RelocStatic","","",11],[13,"RelocPIC","","",11],[13,"RelocDynamicNoPic","","",11],[4,"CodeGenModel","",""],[13,"CodeModelDefault","","",28],[13,"CodeModelJITDefault","","",28],[13,"CodeModelSmall","","",28],[13,"CodeModelKernel","","",28],[13,"CodeModelMedium","","",28],[13,"CodeModelLarge","","",28],[4,"DiagnosticKind","",""],[13,"DK_InlineAsm","","",29],[13,"DK_StackSize","","",29],[13,"DK_DebugMetadataVersion","","",29],[13,"DK_SampleProfile","","",29],[13,"DK_OptimizationRemark","","",29],[13,"DK_OptimizationRemarkMissed","","",29],[13,"DK_OptimizationRemarkAnalysis","","",29],[13,"DK_OptimizationFailure","","",29],[4,"Module_opaque","",""],[6,"ModuleRef","",""],[4,"Context_opaque","",""],[6,"ContextRef","",""],[4,"Type_opaque","",""],[6,"TypeRef","",""],[4,"Value_opaque","",""],[6,"ValueRef","",""],[4,"Metadata_opaque","",""],[6,"MetadataRef","",""],[4,"BasicBlock_opaque","",""],[6,"BasicBlockRef","",""],[4,"Builder_opaque","",""],[6,"BuilderRef","",""],[4,"ExecutionEngine_opaque","",""],[6,"ExecutionEngineRef","",""],[4,"RustJITMemoryManager_opaque","",""],[6,"RustJITMemoryManagerRef","",""],[4,"MemoryBuffer_opaque","",""],[6,"MemoryBufferRef","",""],[4,"PassManager_opaque","",""],[6,"PassManagerRef","",""],[4,"PassManagerBuilder_opaque","",""],[6,"PassManagerBuilderRef","",""],[4,"Use_opaque","",""],[6,"UseRef","",""],[4,"TargetData_opaque","",""],[6,"TargetDataRef","",""],[4,"ObjectFile_opaque","",""],[6,"ObjectFileRef","",""],[4,"SectionIterator_opaque","",""],[6,"SectionIteratorRef","",""],[4,"Pass_opaque","",""],[6,"PassRef","",""],[4,"TargetMachine_opaque","",""],[6,"TargetMachineRef","",""],[4,"Archive_opaque","",""],[6,"ArchiveRef","",""],[4,"Twine_opaque","",""],[6,"TwineRef","",""],[4,"DiagnosticInfo_opaque","",""],[6,"DiagnosticInfoRef","",""],[4,"DebugLoc_opaque","",""],[6,"DebugLocRef","",""],[4,"SMDiagnostic_opaque","",""],[6,"SMDiagnosticRef","",""],[6,"DiagnosticHandler","",""],[6,"InlineAsmDiagHandler","",""],[0,"debuginfo","",""],[4,"DIBuilder_opaque","rustc::lib::llvm::debuginfo",""],[6,"DIBuilderRef","",""],[6,"DIDescriptor","",""],[6,"DIScope","",""],[6,"DILocation","",""],[6,"DIFile","",""],[6,"DILexicalBlock","",""],[6,"DISubprogram","",""],[6,"DINameSpace","",""],[6,"DIType","",""],[6,"DIBasicType","",""],[6,"DIDerivedType","",""],[6,"DICompositeType","",""],[6,"DIVariable","",""],[6,"DIGlobalVariable","",""],[6,"DIArray","",""],[6,"DISubrange","",""],[6,"DIEnumerator","",""],[6,"DITemplateTypeParameter","",""],[4,"DIDescriptorFlags","",""],[13,"FlagPrivate","","",30],[13,"FlagProtected","","",30],[13,"FlagFwdDecl","","",30],[13,"FlagAppleBlock","","",30],[13,"FlagBlockByrefStruct","","",30],[13,"FlagVirtual","","",30],[13,"FlagArtificial","","",30],[13,"FlagExplicit","","",30],[13,"FlagPrototyped","","",30],[13,"FlagObjcClassComplete","","",30],[13,"FlagObjectPointer","","",30],[13,"FlagVector","","",30],[13,"FlagStaticMember","","",30],[13,"FlagIndirectVariable","","",30],[13,"FlagLValueReference","","",30],[13,"FlagRValueReference","","",30],[5,"LLVMContextCreate","rustc::lib::llvm",""],[5,"LLVMContextDispose","",""],[5,"LLVMGetMDKindIDInContext","",""],[5,"LLVMModuleCreateWithNameInContext","",""],[5,"LLVMGetModuleContext","",""],[5,"LLVMDisposeModule","",""],[5,"LLVMGetDataLayout","","Data layout. See Module::getDataLayout."],[5,"LLVMSetDataLayout","",""],[5,"LLVMGetTarget","","Target triple. See Module::getTargetTriple."],[5,"LLVMSetTarget","",""],[5,"LLVMDumpModule","","See Module::dump."],[5,"LLVMSetModuleInlineAsm","","See Module::setModuleInlineAsm."],[5,"LLVMGetTypeKind","","See llvm::LLVMTypeKind::getTypeID."],[5,"LLVMGetTypeContext","","See llvm::LLVMType::getContext."],[5,"LLVMInt1TypeInContext","",""],[5,"LLVMInt8TypeInContext","",""],[5,"LLVMInt16TypeInContext","",""],[5,"LLVMInt32TypeInContext","",""],[5,"LLVMInt64TypeInContext","",""],[5,"LLVMIntTypeInContext","",""],[5,"LLVMGetIntTypeWidth","",""],[5,"LLVMFloatTypeInContext","",""],[5,"LLVMDoubleTypeInContext","",""],[5,"LLVMX86FP80TypeInContext","",""],[5,"LLVMFP128TypeInContext","",""],[5,"LLVMPPCFP128TypeInContext","",""],[5,"LLVMFunctionType","",""],[5,"LLVMIsFunctionVarArg","",""],[5,"LLVMGetReturnType","",""],[5,"LLVMCountParamTypes","",""],[5,"LLVMGetParamTypes","",""],[5,"LLVMStructTypeInContext","",""],[5,"LLVMCountStructElementTypes","",""],[5,"LLVMGetStructElementTypes","",""],[5,"LLVMIsPackedStruct","",""],[5,"LLVMRustArrayType","",""],[5,"LLVMPointerType","",""],[5,"LLVMVectorType","",""],[5,"LLVMGetElementType","",""],[5,"LLVMGetArrayLength","",""],[5,"LLVMGetPointerAddressSpace","",""],[5,"LLVMGetPointerToGlobal","",""],[5,"LLVMGetVectorSize","",""],[5,"LLVMVoidTypeInContext","",""],[5,"LLVMLabelTypeInContext","",""],[5,"LLVMMetadataTypeInContext","",""],[5,"LLVMTypeOf","",""],[5,"LLVMGetValueName","",""],[5,"LLVMSetValueName","",""],[5,"LLVMDumpValue","",""],[5,"LLVMReplaceAllUsesWith","",""],[5,"LLVMHasMetadata","",""],[5,"LLVMGetMetadata","",""],[5,"LLVMSetMetadata","",""],[5,"LLVMGetFirstUse","",""],[5,"LLVMGetNextUse","",""],[5,"LLVMGetUser","",""],[5,"LLVMGetUsedValue","",""],[5,"LLVMGetNumOperands","",""],[5,"LLVMGetOperand","",""],[5,"LLVMSetOperand","",""],[5,"LLVMConstNull","",""],[5,"LLVMConstAllOnes","",""],[5,"LLVMConstICmp","",""],[5,"LLVMConstFCmp","",""],[5,"LLVMGetUndef","",""],[5,"LLVMIsConstant","",""],[5,"LLVMIsNull","",""],[5,"LLVMIsUndef","",""],[5,"LLVMConstPointerNull","",""],[5,"LLVMMDStringInContext","",""],[5,"LLVMMDNodeInContext","",""],[5,"LLVMAddNamedMetadataOperand","",""],[5,"LLVMConstInt","",""],[5,"LLVMConstIntOfString","",""],[5,"LLVMConstIntOfStringAndSize","",""],[5,"LLVMConstReal","",""],[5,"LLVMConstRealOfString","",""],[5,"LLVMConstRealOfStringAndSize","",""],[5,"LLVMConstIntGetZExtValue","",""],[5,"LLVMConstIntGetSExtValue","",""],[5,"LLVMConstStringInContext","",""],[5,"LLVMConstStructInContext","",""],[5,"LLVMConstArray","",""],[5,"LLVMConstVector","",""],[5,"LLVMAlignOf","",""],[5,"LLVMSizeOf","",""],[5,"LLVMConstNeg","",""],[5,"LLVMConstNSWNeg","",""],[5,"LLVMConstNUWNeg","",""],[5,"LLVMConstFNeg","",""],[5,"LLVMConstNot","",""],[5,"LLVMConstAdd","",""],[5,"LLVMConstNSWAdd","",""],[5,"LLVMConstNUWAdd","",""],[5,"LLVMConstFAdd","",""],[5,"LLVMConstSub","",""],[5,"LLVMConstNSWSub","",""],[5,"LLVMConstNUWSub","",""],[5,"LLVMConstFSub","",""],[5,"LLVMConstMul","",""],[5,"LLVMConstNSWMul","",""],[5,"LLVMConstNUWMul","",""],[5,"LLVMConstFMul","",""],[5,"LLVMConstUDiv","",""],[5,"LLVMConstSDiv","",""],[5,"LLVMConstExactSDiv","",""],[5,"LLVMConstFDiv","",""],[5,"LLVMConstURem","",""],[5,"LLVMConstSRem","",""],[5,"LLVMConstFRem","",""],[5,"LLVMConstAnd","",""],[5,"LLVMConstOr","",""],[5,"LLVMConstXor","",""],[5,"LLVMConstShl","",""],[5,"LLVMConstLShr","",""],[5,"LLVMConstAShr","",""],[5,"LLVMConstGEP","",""],[5,"LLVMConstInBoundsGEP","",""],[5,"LLVMConstTrunc","",""],[5,"LLVMConstSExt","",""],[5,"LLVMConstZExt","",""],[5,"LLVMConstFPTrunc","",""],[5,"LLVMConstFPExt","",""],[5,"LLVMConstUIToFP","",""],[5,"LLVMConstSIToFP","",""],[5,"LLVMConstFPToUI","",""],[5,"LLVMConstFPToSI","",""],[5,"LLVMConstPtrToInt","",""],[5,"LLVMConstIntToPtr","",""],[5,"LLVMConstBitCast","",""],[5,"LLVMConstZExtOrBitCast","",""],[5,"LLVMConstSExtOrBitCast","",""],[5,"LLVMConstTruncOrBitCast","",""],[5,"LLVMConstPointerCast","",""],[5,"LLVMConstIntCast","",""],[5,"LLVMConstFPCast","",""],[5,"LLVMConstSelect","",""],[5,"LLVMConstExtractElement","",""],[5,"LLVMConstInsertElement","",""],[5,"LLVMConstShuffleVector","",""],[5,"LLVMConstExtractValue","",""],[5,"LLVMConstInsertValue","",""],[5,"LLVMConstInlineAsm","",""],[5,"LLVMBlockAddress","",""],[5,"LLVMGetGlobalParent","",""],[5,"LLVMIsDeclaration","",""],[5,"LLVMGetLinkage","",""],[5,"LLVMSetLinkage","",""],[5,"LLVMGetSection","",""],[5,"LLVMSetSection","",""],[5,"LLVMGetVisibility","",""],[5,"LLVMSetVisibility","",""],[5,"LLVMGetAlignment","",""],[5,"LLVMSetAlignment","",""],[5,"LLVMIsAGlobalVariable","",""],[5,"LLVMAddGlobal","",""],[5,"LLVMAddGlobalInAddressSpace","",""],[5,"LLVMGetNamedGlobal","",""],[5,"LLVMGetFirstGlobal","",""],[5,"LLVMGetLastGlobal","",""],[5,"LLVMGetNextGlobal","",""],[5,"LLVMGetPreviousGlobal","",""],[5,"LLVMDeleteGlobal","",""],[5,"LLVMGetInitializer","",""],[5,"LLVMSetInitializer","",""],[5,"LLVMIsThreadLocal","",""],[5,"LLVMSetThreadLocal","",""],[5,"LLVMIsGlobalConstant","",""],[5,"LLVMSetGlobalConstant","",""],[5,"LLVMAddAlias","",""],[5,"LLVMAddFunction","",""],[5,"LLVMGetNamedFunction","",""],[5,"LLVMGetFirstFunction","",""],[5,"LLVMGetLastFunction","",""],[5,"LLVMGetNextFunction","",""],[5,"LLVMGetPreviousFunction","",""],[5,"LLVMDeleteFunction","",""],[5,"LLVMGetOrInsertFunction","",""],[5,"LLVMGetIntrinsicID","",""],[5,"LLVMGetFunctionCallConv","",""],[5,"LLVMSetFunctionCallConv","",""],[5,"LLVMGetGC","",""],[5,"LLVMSetGC","",""],[5,"LLVMAddDereferenceableAttr","",""],[5,"LLVMAddFunctionAttribute","",""],[5,"LLVMAddFunctionAttrString","",""],[5,"LLVMRemoveFunctionAttrString","",""],[5,"LLVMGetFunctionAttr","",""],[5,"LLVMCountParams","",""],[5,"LLVMGetParams","",""],[5,"LLVMGetParam","",""],[5,"LLVMGetParamParent","",""],[5,"LLVMGetFirstParam","",""],[5,"LLVMGetLastParam","",""],[5,"LLVMGetNextParam","",""],[5,"LLVMGetPreviousParam","",""],[5,"LLVMAddAttribute","",""],[5,"LLVMRemoveAttribute","",""],[5,"LLVMGetAttribute","",""],[5,"LLVMSetParamAlignment","",""],[5,"LLVMBasicBlockAsValue","",""],[5,"LLVMValueIsBasicBlock","",""],[5,"LLVMValueAsBasicBlock","",""],[5,"LLVMGetBasicBlockParent","",""],[5,"LLVMCountBasicBlocks","",""],[5,"LLVMGetBasicBlocks","",""],[5,"LLVMGetFirstBasicBlock","",""],[5,"LLVMGetLastBasicBlock","",""],[5,"LLVMGetNextBasicBlock","",""],[5,"LLVMGetPreviousBasicBlock","",""],[5,"LLVMGetEntryBasicBlock","",""],[5,"LLVMAppendBasicBlockInContext","",""],[5,"LLVMInsertBasicBlockInContext","",""],[5,"LLVMDeleteBasicBlock","",""],[5,"LLVMMoveBasicBlockAfter","",""],[5,"LLVMMoveBasicBlockBefore","",""],[5,"LLVMGetInstructionParent","",""],[5,"LLVMGetFirstInstruction","",""],[5,"LLVMGetLastInstruction","",""],[5,"LLVMGetNextInstruction","",""],[5,"LLVMGetPreviousInstruction","",""],[5,"LLVMInstructionEraseFromParent","",""],[5,"LLVMSetInstructionCallConv","",""],[5,"LLVMGetInstructionCallConv","",""],[5,"LLVMAddInstrAttribute","",""],[5,"LLVMRemoveInstrAttribute","",""],[5,"LLVMSetInstrParamAlignment","",""],[5,"LLVMAddCallSiteAttribute","",""],[5,"LLVMAddDereferenceableCallSiteAttr","",""],[5,"LLVMIsTailCall","",""],[5,"LLVMSetTailCall","",""],[5,"LLVMGetVolatile","",""],[5,"LLVMSetVolatile","",""],[5,"LLVMAddIncoming","",""],[5,"LLVMCountIncoming","",""],[5,"LLVMGetIncomingValue","",""],[5,"LLVMGetIncomingBlock","",""],[5,"LLVMCreateBuilderInContext","",""],[5,"LLVMPositionBuilder","",""],[5,"LLVMPositionBuilderBefore","",""],[5,"LLVMPositionBuilderAtEnd","",""],[5,"LLVMGetInsertBlock","",""],[5,"LLVMClearInsertionPosition","",""],[5,"LLVMInsertIntoBuilder","",""],[5,"LLVMInsertIntoBuilderWithName","",""],[5,"LLVMDisposeBuilder","",""],[5,"LLVMRustCreateJITMemoryManager","",""],[5,"LLVMBuildExecutionEngine","",""],[5,"LLVMDisposeExecutionEngine","",""],[5,"LLVMExecutionEngineFinalizeObject","",""],[5,"LLVMRustLoadDynamicLibrary","",""],[5,"LLVMExecutionEngineAddModule","",""],[5,"LLVMExecutionEngineRemoveModule","",""],[5,"LLVMSetCurrentDebugLocation","",""],[5,"LLVMGetCurrentDebugLocation","",""],[5,"LLVMSetInstDebugLocation","",""],[5,"LLVMBuildRetVoid","",""],[5,"LLVMBuildRet","",""],[5,"LLVMBuildAggregateRet","",""],[5,"LLVMBuildBr","",""],[5,"LLVMBuildCondBr","",""],[5,"LLVMBuildSwitch","",""],[5,"LLVMBuildIndirectBr","",""],[5,"LLVMBuildInvoke","",""],[5,"LLVMBuildLandingPad","",""],[5,"LLVMBuildResume","",""],[5,"LLVMBuildUnreachable","",""],[5,"LLVMAddCase","",""],[5,"LLVMAddDestination","",""],[5,"LLVMAddClause","",""],[5,"LLVMSetCleanup","",""],[5,"LLVMBuildAdd","",""],[5,"LLVMBuildNSWAdd","",""],[5,"LLVMBuildNUWAdd","",""],[5,"LLVMBuildFAdd","",""],[5,"LLVMBuildSub","",""],[5,"LLVMBuildNSWSub","",""],[5,"LLVMBuildNUWSub","",""],[5,"LLVMBuildFSub","",""],[5,"LLVMBuildMul","",""],[5,"LLVMBuildNSWMul","",""],[5,"LLVMBuildNUWMul","",""],[5,"LLVMBuildFMul","",""],[5,"LLVMBuildUDiv","",""],[5,"LLVMBuildSDiv","",""],[5,"LLVMBuildExactSDiv","",""],[5,"LLVMBuildFDiv","",""],[5,"LLVMBuildURem","",""],[5,"LLVMBuildSRem","",""],[5,"LLVMBuildFRem","",""],[5,"LLVMBuildShl","",""],[5,"LLVMBuildLShr","",""],[5,"LLVMBuildAShr","",""],[5,"LLVMBuildAnd","",""],[5,"LLVMBuildOr","",""],[5,"LLVMBuildXor","",""],[5,"LLVMBuildBinOp","",""],[5,"LLVMBuildNeg","",""],[5,"LLVMBuildNSWNeg","",""],[5,"LLVMBuildNUWNeg","",""],[5,"LLVMBuildFNeg","",""],[5,"LLVMBuildNot","",""],[5,"LLVMBuildMalloc","",""],[5,"LLVMBuildArrayMalloc","",""],[5,"LLVMBuildAlloca","",""],[5,"LLVMBuildArrayAlloca","",""],[5,"LLVMBuildFree","",""],[5,"LLVMBuildLoad","",""],[5,"LLVMBuildStore","",""],[5,"LLVMBuildGEP","",""],[5,"LLVMBuildInBoundsGEP","",""],[5,"LLVMBuildStructGEP","",""],[5,"LLVMBuildGlobalString","",""],[5,"LLVMBuildGlobalStringPtr","",""],[5,"LLVMBuildTrunc","",""],[5,"LLVMBuildZExt","",""],[5,"LLVMBuildSExt","",""],[5,"LLVMBuildFPToUI","",""],[5,"LLVMBuildFPToSI","",""],[5,"LLVMBuildUIToFP","",""],[5,"LLVMBuildSIToFP","",""],[5,"LLVMBuildFPTrunc","",""],[5,"LLVMBuildFPExt","",""],[5,"LLVMBuildPtrToInt","",""],[5,"LLVMBuildIntToPtr","",""],[5,"LLVMBuildBitCast","",""],[5,"LLVMBuildZExtOrBitCast","",""],[5,"LLVMBuildSExtOrBitCast","",""],[5,"LLVMBuildTruncOrBitCast","",""],[5,"LLVMBuildCast","",""],[5,"LLVMBuildPointerCast","",""],[5,"LLVMBuildIntCast","",""],[5,"LLVMBuildFPCast","",""],[5,"LLVMBuildICmp","",""],[5,"LLVMBuildFCmp","",""],[5,"LLVMBuildPhi","",""],[5,"LLVMBuildCall","",""],[5,"LLVMBuildSelect","",""],[5,"LLVMBuildVAArg","",""],[5,"LLVMBuildExtractElement","",""],[5,"LLVMBuildInsertElement","",""],[5,"LLVMBuildShuffleVector","",""],[5,"LLVMBuildExtractValue","",""],[5,"LLVMBuildInsertValue","",""],[5,"LLVMBuildIsNull","",""],[5,"LLVMBuildIsNotNull","",""],[5,"LLVMBuildPtrDiff","",""],[5,"LLVMBuildAtomicLoad","",""],[5,"LLVMBuildAtomicStore","",""],[5,"LLVMBuildAtomicCmpXchg","",""],[5,"LLVMBuildAtomicRMW","",""],[5,"LLVMBuildAtomicFence","",""],[5,"LLVMIsATerminatorInst","",""],[5,"LLVMIsAStoreInst","",""],[5,"LLVMWriteBitcodeToFile","","Writes a module to the specified path. Returns 0 on success."],[5,"LLVMCreateTargetData","","Creates target data from a target layout string."],[5,"LLVMAddTargetData","","Adds the target data to the given pass manager. The pass manager\nreferences the target data only weakly."],[5,"LLVMStoreSizeOfType","","Number of bytes clobbered when doing a Store to *T."],[5,"LLVMSizeOfTypeInBits","","Number of bytes clobbered when doing a Store to *T."],[5,"LLVMABISizeOfType","","Distance between successive elements in an array of T. Includes ABI padding."],[5,"LLVMPreferredAlignmentOfType","","Returns the preferred alignment of a type."],[5,"LLVMABIAlignmentOfType","","Returns the minimum alignment of a type."],[5,"LLVMOffsetOfElement","","Computes the byte offset of the indexed struct element for a\ntarget."],[5,"LLVMCallFrameAlignmentOfType","","Returns the minimum alignment of a type when part of a call frame."],[5,"LLVMDisposeTargetData","","Disposes target data."],[5,"LLVMCreatePassManager","","Creates a pass manager."],[5,"LLVMCreateFunctionPassManagerForModule","","Creates a function-by-function pass manager"],[5,"LLVMDisposePassManager","","Disposes a pass manager."],[5,"LLVMRunPassManager","","Runs a pass manager on a module."],[5,"LLVMRunFunctionPassManager","","Runs the function passes on the provided function."],[5,"LLVMInitializeFunctionPassManager","","Initializes all the function passes scheduled in the manager"],[5,"LLVMFinalizeFunctionPassManager","","Finalizes all the function passes scheduled in the manager"],[5,"LLVMInitializePasses","",""],[5,"LLVMAddVerifierPass","","Adds a verification pass."],[5,"LLVMAddGlobalOptimizerPass","",""],[5,"LLVMAddIPSCCPPass","",""],[5,"LLVMAddDeadArgEliminationPass","",""],[5,"LLVMAddInstructionCombiningPass","",""],[5,"LLVMAddCFGSimplificationPass","",""],[5,"LLVMAddFunctionInliningPass","",""],[5,"LLVMAddFunctionAttrsPass","",""],[5,"LLVMAddScalarReplAggregatesPass","",""],[5,"LLVMAddScalarReplAggregatesPassSSA","",""],[5,"LLVMAddJumpThreadingPass","",""],[5,"LLVMAddConstantPropagationPass","",""],[5,"LLVMAddReassociatePass","",""],[5,"LLVMAddLoopRotatePass","",""],[5,"LLVMAddLICMPass","",""],[5,"LLVMAddLoopUnswitchPass","",""],[5,"LLVMAddLoopDeletionPass","",""],[5,"LLVMAddLoopUnrollPass","",""],[5,"LLVMAddGVNPass","",""],[5,"LLVMAddMemCpyOptPass","",""],[5,"LLVMAddSCCPPass","",""],[5,"LLVMAddDeadStoreEliminationPass","",""],[5,"LLVMAddStripDeadPrototypesPass","",""],[5,"LLVMAddConstantMergePass","",""],[5,"LLVMAddArgumentPromotionPass","",""],[5,"LLVMAddTailCallEliminationPass","",""],[5,"LLVMAddIndVarSimplifyPass","",""],[5,"LLVMAddAggressiveDCEPass","",""],[5,"LLVMAddGlobalDCEPass","",""],[5,"LLVMAddCorrelatedValuePropagationPass","",""],[5,"LLVMAddPruneEHPass","",""],[5,"LLVMAddSimplifyLibCallsPass","",""],[5,"LLVMAddLoopIdiomPass","",""],[5,"LLVMAddEarlyCSEPass","",""],[5,"LLVMAddTypeBasedAliasAnalysisPass","",""],[5,"LLVMAddBasicAliasAnalysisPass","",""],[5,"LLVMPassManagerBuilderCreate","",""],[5,"LLVMPassManagerBuilderDispose","",""],[5,"LLVMPassManagerBuilderSetOptLevel","",""],[5,"LLVMPassManagerBuilderSetSizeLevel","",""],[5,"LLVMPassManagerBuilderSetDisableUnitAtATime","",""],[5,"LLVMPassManagerBuilderSetDisableUnrollLoops","",""],[5,"LLVMPassManagerBuilderSetDisableSimplifyLibCalls","",""],[5,"LLVMPassManagerBuilderUseInlinerWithThreshold","",""],[5,"LLVMPassManagerBuilderPopulateModulePassManager","",""],[5,"LLVMPassManagerBuilderPopulateFunctionPassManager","",""],[5,"LLVMPassManagerBuilderPopulateLTOPassManager","",""],[5,"LLVMDisposeMemoryBuffer","","Destroys a memory buffer."],[5,"LLVMCreateObjectFile","","Opens an object file."],[5,"LLVMDisposeObjectFile","","Closes an object file."],[5,"LLVMGetSections","","Enumerates the sections in an object file."],[5,"LLVMDisposeSectionIterator","","Destroys a section iterator."],[5,"LLVMIsSectionIteratorAtEnd","","Returns true if the section iterator is at the end of the section\nlist:"],[5,"LLVMMoveToNextSection","","Moves the section iterator to point to the next section."],[5,"LLVMGetSectionSize","","Returns the current section size."],[5,"LLVMGetSectionContents","","Returns the current section contents as a string buffer."],[5,"LLVMRustCreateMemoryBufferWithContentsOfFile","","Reads the given file and returns it as a memory buffer. Use\nLLVMDisposeMemoryBuffer() to get rid of it."],[5,"LLVMCreateMemoryBufferWithMemoryRange","","Borrows the contents of the memory buffer (doesn't copy it)"],[5,"LLVMCreateMemoryBufferWithMemoryRangeCopy","",""],[5,"LLVMIsMultithreaded","",""],[5,"LLVMStartMultithreaded","",""],[5,"LLVMRustGetLastError","","Returns a string describing the last error caused by an LLVMRust* call."],[5,"LLVMRustPrintPassTimings","","Print the pass timings since static dtors aren't picking them up."],[5,"LLVMStructCreateNamed","",""],[5,"LLVMStructSetBody","",""],[5,"LLVMConstNamedStruct","",""],[5,"LLVMSetDebug","","Enables LLVM debug output."],[5,"LLVMInlineAsm","","Prepares inline assembly."],[7,"LLVMRustDebugMetadataVersion","",""],[5,"LLVMRustAddModuleFlag","",""],[5,"LLVMDIBuilderCreate","",""],[5,"LLVMDIBuilderDispose","",""],[5,"LLVMDIBuilderFinalize","",""],[5,"LLVMDIBuilderCreateCompileUnit","",""],[5,"LLVMDIBuilderCreateFile","",""],[5,"LLVMDIBuilderCreateSubroutineType","",""],[5,"LLVMDIBuilderCreateFunction","",""],[5,"LLVMDIBuilderCreateBasicType","",""],[5,"LLVMDIBuilderCreatePointerType","",""],[5,"LLVMDIBuilderCreateStructType","",""],[5,"LLVMDIBuilderCreateMemberType","",""],[5,"LLVMDIBuilderCreateLexicalBlock","",""],[5,"LLVMDIBuilderCreateStaticVariable","",""],[5,"LLVMDIBuilderCreateVariable","",""],[5,"LLVMDIBuilderCreateArrayType","",""],[5,"LLVMDIBuilderCreateVectorType","",""],[5,"LLVMDIBuilderGetOrCreateSubrange","",""],[5,"LLVMDIBuilderGetOrCreateArray","",""],[5,"LLVMDIBuilderInsertDeclareAtEnd","",""],[5,"LLVMDIBuilderInsertDeclareBefore","",""],[5,"LLVMDIBuilderCreateEnumerator","",""],[5,"LLVMDIBuilderCreateEnumerationType","",""],[5,"LLVMDIBuilderCreateUnionType","",""],[5,"LLVMSetUnnamedAddr","",""],[5,"LLVMDIBuilderCreateTemplateTypeParameter","",""],[5,"LLVMDIBuilderCreateOpDeref","",""],[5,"LLVMDIBuilderCreateOpPlus","",""],[5,"LLVMDIBuilderCreateNameSpace","",""],[5,"LLVMDIBuilderCreateDebugLocation","",""],[5,"LLVMDICompositeTypeSetTypeArray","",""],[5,"LLVMWriteTypeToString","",""],[5,"LLVMWriteValueToString","",""],[5,"LLVMIsAArgument","",""],[5,"LLVMIsAAllocaInst","",""],[5,"LLVMInitializeX86TargetInfo","",""],[5,"LLVMInitializeX86Target","",""],[5,"LLVMInitializeX86TargetMC","",""],[5,"LLVMInitializeX86AsmPrinter","",""],[5,"LLVMInitializeX86AsmParser","",""],[5,"LLVMInitializeARMTargetInfo","",""],[5,"LLVMInitializeARMTarget","",""],[5,"LLVMInitializeARMTargetMC","",""],[5,"LLVMInitializeARMAsmPrinter","",""],[5,"LLVMInitializeARMAsmParser","",""],[5,"LLVMInitializeAArch64TargetInfo","",""],[5,"LLVMInitializeAArch64Target","",""],[5,"LLVMInitializeAArch64TargetMC","",""],[5,"LLVMInitializeAArch64AsmPrinter","",""],[5,"LLVMInitializeAArch64AsmParser","",""],[5,"LLVMInitializeMipsTargetInfo","",""],[5,"LLVMInitializeMipsTarget","",""],[5,"LLVMInitializeMipsTargetMC","",""],[5,"LLVMInitializeMipsAsmPrinter","",""],[5,"LLVMInitializeMipsAsmParser","",""],[5,"LLVMInitializePowerPCTargetInfo","",""],[5,"LLVMInitializePowerPCTarget","",""],[5,"LLVMInitializePowerPCTargetMC","",""],[5,"LLVMInitializePowerPCAsmPrinter","",""],[5,"LLVMInitializePowerPCAsmParser","",""],[5,"LLVMRustAddPass","",""],[5,"LLVMRustCreateTargetMachine","",""],[5,"LLVMRustDisposeTargetMachine","",""],[5,"LLVMRustAddAnalysisPasses","",""],[5,"LLVMRustAddBuilderLibraryInfo","",""],[5,"LLVMRustAddLibraryInfo","",""],[5,"LLVMRustRunFunctionPassManager","",""],[5,"LLVMRustWriteOutputFile","",""],[5,"LLVMRustPrintModule","",""],[5,"LLVMRustSetLLVMOptions","",""],[5,"LLVMRustPrintPasses","",""],[5,"LLVMRustSetNormalizedTarget","",""],[5,"LLVMRustAddAlwaysInlinePass","",""],[5,"LLVMRustLinkInExternalBitcode","",""],[5,"LLVMRustRunRestrictionPass","",""],[5,"LLVMRustMarkAllFunctionsNounwind","",""],[5,"LLVMRustOpenArchive","",""],[5,"LLVMRustArchiveReadSection","",""],[5,"LLVMRustDestroyArchive","",""],[5,"LLVMRustSetDLLExportStorageClass","",""],[5,"LLVMVersionMajor","",""],[5,"LLVMVersionMinor","",""],[5,"LLVMRustGetSectionName","",""],[5,"LLVMWriteTwineToString","",""],[5,"LLVMContextSetDiagnosticHandler","",""],[5,"LLVMUnpackOptimizationDiagnostic","",""],[5,"LLVMUnpackInlineAsmDiagnostic","",""],[5,"LLVMWriteDiagnosticInfoToString","",""],[5,"LLVMGetDiagInfoSeverity","",""],[5,"LLVMGetDiagInfoKind","",""],[5,"LLVMWriteDebugLocToString","",""],[5,"LLVMSetInlineAsmDiagnosticHandler","",""],[5,"LLVMWriteSMDiagnosticToString","",""],[5,"SetInstructionCallConv","",""],[5,"SetFunctionCallConv","",""],[5,"SetLinkage","",""],[5,"SetUnnamedAddr","",""],[5,"set_thread_local","",""],[5,"ConstICmp","",""],[5,"ConstFCmp","",""],[5,"SetFunctionAttribute","",""],[3,"TargetData","",""],[12,"lltd","","",12],[5,"mk_target_data","",""],[3,"ObjectFile","",""],[12,"llof","","",13],[3,"SectionIter","",""],[12,"llsi","","",14],[5,"mk_section_iter","",""],[5,"get_param","","Safe wrapper around `LLVMGetParam`, because segfaults are no fun."],[4,"RustString_opaque","",""],[6,"RustStringRef","",""],[5,"rust_llvm_string_write_impl","","Appending to a Rust string -- used by raw_rust_string_ostream."],[5,"build_string","",""],[5,"twine_to_string","",""],[5,"debug_loc_to_string","",""],[14,"lint_initializer!","rustc","Build a `Lint` initializer."],[14,"declare_lint!","","Declare a static item of type `&'static Lint`."],[14,"lint_array!","","Declare a static `LintArray` and return it as an expression."],[11,"tr","rustc::middle::def","",72],[11,"tr","rustc::middle::ty","",254],[11,"tr","","",217],[11,"tr","rustc::middle::region","",157],[11,"tr","","",155],[11,"tr","rustc::middle::ty","",257],[11,"tr","","",242],[11,"tr","","",216],[11,"tr","","",256],[11,"tr","","",250],[11,"ty_str_ctxt","rustc::metadata::encoder","",310],[11,"repr","rustc::middle::ty","",206],[11,"combine","","",219],[11,"combine","","",294],[11,"combine","","",232],[11,"combine","","",212],[11,"resolve","","",294],[11,"contains_error","","",294],[11,"resolve","","",285],[11,"contains_error","","",285],[11,"relate_bound","rustc::middle::infer::lub","",106],[11,"index","rustc::middle::ty","",224],[11,"from_index","","",224],[11,"unification_table","","",224],[11,"tag","","",224],[11,"to_type","","",259],[11,"to_type_err","","",259],[11,"index","","",225],[11,"from_index","","",225],[11,"unification_table","","",225],[11,"tag","","",225],[11,"repr","","",268]],"paths":[[3,"ArchiveRO"],[4,"OptimizationDiagnosticKind"],[4,"Diagnostic"],[4,"CallConv"],[4,"DiagnosticSeverity"],[3,"Attribute"],[4,"OtherAttribute"],[4,"SpecialAttribute"],[3,"AttrBuilder"],[4,"TypeKind"],[4,"CodeGenOptLevel"],[4,"RelocMode"],[3,"TargetData"],[3,"ObjectFile"],[3,"SectionIter"],[3,"OptimizationDiagnostic"],[3,"InlineAsmDiagnostic"],[4,"Visibility"],[4,"Linkage"],[4,"AttributeSet"],[8,"AttrHelper"],[4,"IntPredicate"],[4,"RealPredicate"],[4,"AtomicBinOp"],[4,"AtomicOrdering"],[4,"FileType"],[4,"MetadataType"],[4,"AsmDialect"],[4,"CodeGenModel"],[4,"DiagnosticKind"],[4,"DIDescriptorFlags"],[3,"Archive"],[3,"ArchiveBuilder"],[3,"TempDir"],[3,"FixedBuffer64"],[3,"Sha256"],[3,"Svh"],[4,"SawAbiComponent"],[4,"SawExprComponent"],[4,"SawStmtComponent"],[3,"Ident"],[3,"Name"],[3,"StrictVersionHashVisitor"],[4,"Arch"],[3,"Target"],[3,"TargetOptions"],[3,"ArchiveConfig"],[3,"RPathConfig"],[3,"t"],[8,"vtable_decoder_helpers"],[3,"DefId"],[4,"Option"],[3,"Span"],[3,"Decoder"],[3,"Encoder"],[3,"CFG"],[3,"CFGEdgeData"],[4,"CFGNodeData"],[3,"LabelledCFG"],[3,"ConstQualif"],[3,"MatchCheckCtxt"],[3,"StaticInliner"],[4,"Constructor"],[3,"ConstEvalErr"],[4,"const_val"],[4,"ErrKind"],[4,"EntryOrExit"],[8,"BitwiseOperator"],[8,"DataFlowOperator"],[3,"DataFlowContext"],[3,"PathResolution"],[3,"Export"],[4,"Def"],[4,"MethodProvenance"],[4,"LoanCause"],[4,"ConsumeMode"],[4,"MoveReason"],[4,"MatchMode"],[4,"MutateMode"],[8,"Delegate"],[3,"ExprUseVisitor"],[4,"SimplifiedType"],[3,"Node"],[3,"Edge"],[3,"NodeIndex"],[3,"EdgeIndex"],[3,"Direction"],[3,"Graph"],[3,"DepthFirstTraversal"],[3,"InferCtxt"],[4,"TypeOrigin"],[4,"ValuePairs"],[4,"SubregionOrigin"],[4,"LateBoundRegionConversionTime"],[4,"RegionVariableOrigin"],[4,"fixup_err"],[3,"Bivariate"],[3,"CombineFields"],[8,"Combine"],[8,"Combineable"],[3,"Rc"],[3,"Equate"],[8,"ErrorReporting"],[8,"Resolvable"],[3,"Glb"],[8,"LatticeDir"],[3,"Lub"],[3,"SameRegions"],[4,"Constraint"],[4,"Verify"],[4,"GenericKind"],[4,"UndoLogEntry"],[4,"CombineMapType"],[4,"RegionResolutionError"],[4,"VarValue"],[3,"TwoRegions"],[3,"RegionSnapshot"],[3,"RegionVarBindings"],[3,"OpportunisticTypeResolver"],[3,"TypeFreshener"],[3,"Sub"],[4,"RelationDir"],[3,"TypeVariableTable"],[3,"Node"],[4,"VarValue"],[8,"UnifyKey"],[8,"SimplyUnifiable"],[8,"InferCtxtMethodsForSimplyUnifiableTypes"],[3,"UnificationTable"],[3,"Delegate"],[4,"FloatTy"],[3,"TypeTrace"],[3,"LanguageItems"],[4,"LangItem"],[3,"Upvar"],[3,"cmt_"],[4,"categorization"],[4,"PointerKind"],[4,"InteriorKind"],[4,"FieldName"],[4,"InteriorOffsetKind"],[4,"ElementKind"],[4,"MutabilityCategory"],[4,"Note"],[4,"deref_kind"],[4,"InteriorSafety"],[4,"AliasableReason"],[8,"ast_node"],[8,"Typer"],[3,"Expr"],[3,"Pat"],[3,"MemCategorizationContext"],[4,"LastPrivate"],[4,"PrivateDep"],[4,"ImportUse"],[3,"DestructionScopeData"],[3,"BlockRemainder"],[4,"CodeExtent"],[3,"Context"],[3,"RegionMaps"],[4,"DefRegion"],[3,"Index"],[3,"Substs"],[3,"SeparateVecsPerParamSpace"],[4,"RegionSubsts"],[4,"ParamSpace"],[8,"Subst"],[3,"VecPerParamSpace"],[3,"EnumeratedItems"],[3,"RegionObligation"],[3,"MismatchedProjectionTypes"],[3,"Normalized"],[3,"Obligation"],[3,"ObligationCause"],[3,"FulfillmentError"],[3,"VtableImplData"],[3,"VtableDefaultImplData"],[3,"VtableBuiltinData"],[3,"VtableObjectData"],[4,"OrphanCheckErr"],[4,"ObjectSafetyViolation"],[4,"MethodViolationCode"],[4,"MethodMatchResult"],[4,"MethodMatchedData"],[4,"ObligationCauseCode"],[4,"SelectionError"],[4,"FulfillmentErrorCode"],[3,"FulfillmentContext"],[3,"SelectionCache"],[3,"SelectionContext"],[4,"Vtable"],[3,"DerivedObligationCause"],[3,"CrateAnalysis"],[3,"field"],[3,"Method"],[3,"AssociatedType"],[3,"mt"],[3,"field_ty"],[3,"creader_cache_key"],[3,"ItemVariances"],[3,"AutoDerefRef"],[3,"param_index"],[3,"MethodParam"],[3,"MethodObject"],[3,"MethodCallee"],[3,"MethodCall"],[3,"TransmuteRestriction"],[3,"CommonTypes"],[3,"ctxt"],[3,"TyS"],[3,"BareFnTy"],[3,"ClosureTy"],[3,"FnSig"],[3,"ParamTy"],[3,"DebruijnIndex"],[3,"UpvarId"],[3,"UpvarBorrow"],[3,"FreeRegion"],[3,"TyTrait"],[3,"TraitRef"],[3,"expected_found"],[3,"ParamBounds"],[3,"ExistentialBounds"],[3,"TyVid"],[3,"IntVid"],[3,"FloatVid"],[3,"RegionVid"],[3,"TypeParameterDef"],[3,"RegionParameterDef"],[3,"Generics"],[3,"GenericPredicates"],[3,"TraitPredicate"],[3,"ProjectionPredicate"],[3,"ProjectionTy"],[3,"InstantiatedPredicates"],[3,"ParameterEnvironment"],[3,"TypeScheme"],[3,"TraitDef"],[3,"ItemSubsts"],[3,"TypeContents"],[3,"VariantInfo"],[3,"ClosureUpvar"],[3,"Freevar"],[4,"ImplOrTraitItemContainer"],[4,"ImplOrTraitItem"],[4,"ImplOrTraitItemId"],[4,"Variance"],[4,"AutoAdjustment"],[4,"UnsizeKind"],[4,"AutoRef"],[4,"MethodOrigin"],[4,"ExprAdjustment"],[4,"vtable_origin"],[4,"FnOutput"],[4,"Region"],[4,"BorrowKind"],[4,"UpvarCapture"],[4,"BoundRegion"],[4,"sty"],[4,"IntVarValue"],[4,"terr_vstore_kind"],[4,"type_err"],[4,"BuiltinBound"],[4,"InferTy"],[4,"UnconstrainedNumeric"],[4,"InferRegion"],[4,"ObjectLifetimeDefault"],[4,"Predicate"],[4,"ClosureKind"],[4,"Representability"],[4,"ExprKind"],[4,"DtorKind"],[4,"ExplicitSelfCategory"],[4,"CopyImplementationError"],[8,"ToPolyTraitRef"],[8,"AsPredicate"],[8,"ClosureTyper"],[8,"RegionEscape"],[8,"HasProjectionTypes"],[8,"ReferencesError"],[3,"CtxtArenas"],[3,"TypeFlags"],[3,"InternedTy"],[6,"PolyFnOutput"],[6,"PolyFnSig"],[6,"PolyTraitRef"],[3,"Binder"],[6,"PolyTraitPredicate"],[3,"EquatePredicate"],[3,"OutlivesPredicate"],[6,"PolyProjectionPredicate"],[6,"PolyEquatePredicate"],[6,"PolyRegionOutlivesPredicate"],[6,"PolyTypeOutlivesPredicate"],[6,"Ty"],[3,"Vec"],[3,"Box"],[3,"BottomUpFolder"],[8,"TypeFoldable"],[8,"TypeFolder"],[3,"OwnedSlice"],[6,"BuiltinBounds"],[3,"RegionFolder"],[3,"RegionEraser"],[3,"TypeWalker"],[3,"LinkMeta"],[4,"astencode_tag"],[3,"ctxt"],[4,"DefIdSource"],[3,"EncodeParams"],[3,"EncodeContext"],[4,"InlinedItemRef"],[3,"CrateDep"],[4,"DefLike"],[3,"CrateReader"],[3,"ImportedFileMap"],[3,"crate_metadata"],[3,"CrateSource"],[3,"CStore"],[4,"MetadataBlob"],[4,"LinkagePreference"],[4,"NativeLibraryKind"],[3,"MethodInfo"],[4,"FoundAst"],[3,"Context"],[3,"Library"],[3,"CratePaths"],[3,"ArchiveMetadata"],[3,"FileSearch"],[4,"FileMatch"],[3,"Session"],[3,"Config"],[3,"Options"],[3,"OutputFilenames"],[3,"CodegenOptions"],[3,"DebuggingOptions"],[3,"RustcOptGroup"],[4,"OptLevel"],[4,"DebugInfoLevel"],[4,"OutputType"],[4,"UnstableFeatures"],[4,"PrintRequest"],[4,"Input"],[4,"EntryFnType"],[4,"CrateType"],[4,"Passes"],[4,"OptionStability"],[4,"PathKind"],[3,"SearchPaths"],[3,"Iter"],[3,"Registry"],[3,"PluginRegistrar"],[3,"Context"],[3,"Lint"],[4,"Level"],[4,"LintSource"],[3,"HardwiredLints"],[3,"LintStore"],[3,"GatherNodeLevels"],[8,"LintPass"],[3,"LintId"],[8,"Digest"],[3,"ErrorReported"],[3,"Indenter"],[8,"Repr"],[8,"UserString"],[3,"P"],[4,"Result"],[4,"TraitItem"],[3,"Path"],[3,"Ty"],[3,"Item"],[3,"Lifetime"],[6,"Stmt"],[4,"ExplicitSelf_"],[4,"Visibility"],[4,"Abi"],[4,"Mutability"],[4,"IntTy"],[4,"UintTy"],[3,"HashMap"],[3,"FnvHasher"],[4,"UndoLog"],[8,"SnapshotVecDelegate"],[3,"SnapshotVec"]]};
searchIndex['rustdoc'] = {"items":[[0,"","rustdoc",""],[5,"main","",""],[5,"opts","",""],[5,"usage","",""],[5,"main_args","",""],[0,"externalfiles","",""],[3,"ExternalHtml","rustdoc::externalfiles",""],[12,"in_header","","",0],[12,"before_content","","",0],[12,"after_content","","",0],[5,"load_string","",""],[5,"load_external_files","",""],[11,"clone","","",0],[11,"load","","",0],[0,"clean","rustdoc","This module contains the \"cleaned\" pieces of the AST, and the functions\nthat clean them."],[3,"Crate","rustdoc::clean",""],[12,"name","","",1],[12,"src","","",1],[12,"module","","",1],[12,"externs","","",1],[12,"primitives","","",1],[3,"ExternalCrate","",""],[12,"name","","",2],[12,"attrs","","",2],[12,"primitives","","",2],[3,"Item","","Anything with a source location and set of attributes and, optionally, a\nname. That is, anything that can be documented. This doesn't correspond\ndirectly to the AST's concept of an item; it's a strict superset."],[12,"source","","Stringified span",3],[12,"name","","Not everything has a name. E.g., impls",3],[12,"attrs","","",3],[12,"inner","","",3],[12,"visibility","","",3],[12,"def_id","","",3],[12,"stability","","",3],[3,"Module","",""],[12,"items","","",4],[12,"is_crate","","",4],[3,"TyParam","",""],[12,"name","","",5],[12,"did","","",5],[12,"bounds","","",5],[12,"default","","",5],[3,"Lifetime","",""],[3,"Generics","",""],[12,"lifetimes","","",6],[12,"type_params","","",6],[12,"where_predicates","","",6],[3,"Method","",""],[12,"generics","","",7],[12,"self_","","",7],[12,"unsafety","","",7],[12,"decl","","",7],[12,"abi","","",7],[3,"TyMethod","",""],[12,"unsafety","","",8],[12,"decl","","",8],[12,"generics","","",8],[12,"self_","","",8],[12,"abi","","",8],[3,"Function","",""],[12,"decl","","",9],[12,"generics","","",9],[12,"unsafety","","",9],[3,"FnDecl","",""],[12,"inputs","","",10],[12,"output","","",10],[12,"attrs","","",10],[3,"Arguments","",""],[12,"values","","",11],[3,"Argument","",""],[12,"type_","","",12],[12,"name","","",12],[12,"id","","",12],[3,"Trait","",""],[12,"unsafety","","",13],[12,"items","","",13],[12,"generics","","",13],[12,"bounds","","",13],[3,"PolyTrait","","A trait reference, which may have higher ranked lifetimes."],[12,"trait_","","",14],[12,"lifetimes","","",14],[3,"Struct","",""],[12,"struct_type","","",15],[12,"generics","","",15],[12,"fields","","",15],[12,"fields_stripped","","",15],[3,"VariantStruct","","This is a more limited form of the standard Struct, different in that\nit lacks the things most items have (name, id, parameterization). Found\nonly as a variant in an enum."],[12,"struct_type","","",16],[12,"fields","","",16],[12,"fields_stripped","","",16],[3,"Enum","",""],[12,"variants","","",17],[12,"generics","","",17],[12,"variants_stripped","","",17],[3,"Variant","",""],[12,"kind","","",18],[3,"Span","",""],[12,"filename","","",19],[12,"loline","","",19],[12,"locol","","",19],[12,"hiline","","",19],[12,"hicol","","",19],[3,"Path","",""],[12,"global","","",20],[12,"segments","","",20],[3,"PathSegment","",""],[12,"name","","",21],[12,"params","","",21],[3,"Typedef","",""],[12,"type_","","",22],[12,"generics","","",22],[3,"BareFunctionDecl","",""],[12,"unsafety","","",23],[12,"generics","","",23],[12,"decl","","",23],[12,"abi","","",23],[3,"Static","",""],[12,"type_","","",24],[12,"mutability","","",24],[12,"expr","","It's useful to have the value of a static documented, but I have no\ndesire to represent expressions (that'd basically be all of the AST,\nwhich is huge!). So, have a string.",24],[3,"Constant","",""],[12,"type_","","",25],[12,"expr","","",25],[3,"Impl","",""],[12,"generics","","",26],[12,"trait_","","",26],[12,"for_","","",26],[12,"items","","",26],[12,"derived","","",26],[12,"polarity","","",26],[3,"ImportSource","",""],[12,"path","","",27],[12,"did","","",27],[3,"ViewListIdent","",""],[12,"name","","",28],[12,"source","","",28],[3,"Macro","",""],[12,"source","","",29],[3,"Stability","",""],[12,"level","","",30],[12,"feature","","",30],[12,"since","","",30],[12,"deprecated_since","","",30],[12,"reason","","",30],[3,"TypeBinding","","An equality constraint on an associated type, e.g. `A=Bar` in `Foo<A=Bar>`"],[12,"name","","",31],[12,"ty","","",31],[4,"ItemEnum","",""],[13,"ExternCrateItem","","",32],[13,"ImportItem","","",32],[13,"StructItem","","",32],[13,"EnumItem","","",32],[13,"FunctionItem","","",32],[13,"ModuleItem","","",32],[13,"TypedefItem","","",32],[13,"StaticItem","","",32],[13,"ConstantItem","","",32],[13,"TraitItem","","",32],[13,"ImplItem","","",32],[13,"TyMethodItem","","A method signature only. Used for required methods in traits (ie,\nnon-default-methods).",32],[13,"MethodItem","","A method with a body.",32],[13,"StructFieldItem","","",32],[13,"VariantItem","","",32],[13,"ForeignFunctionItem","","`fn`s from an extern block",32],[13,"ForeignStaticItem","","`static`s from an extern block",32],[13,"MacroItem","","",32],[13,"PrimitiveItem","","",32],[13,"AssociatedTypeItem","","",32],[4,"Attribute","",""],[13,"Word","","",33],[13,"List","","",33],[13,"NameValue","","",33],[4,"TyParamBound","",""],[13,"RegionBound","","",34],[13,"TraitBound","","",34],[4,"WherePredicate","",""],[13,"BoundPredicate","","",35],[12,"ty","rustdoc::clean::WherePredicate","",35],[12,"bounds","","",35],[13,"RegionPredicate","rustdoc::clean","",35],[12,"lifetime","rustdoc::clean::WherePredicate","",35],[12,"bounds","","",35],[13,"EqPredicate","rustdoc::clean","",35],[12,"lhs","rustdoc::clean::WherePredicate","",35],[12,"rhs","","",35],[4,"SelfTy","rustdoc::clean",""],[13,"SelfStatic","","",36],[13,"SelfValue","","",36],[13,"SelfBorrowed","","",36],[13,"SelfExplicit","","",36],[4,"FunctionRetTy","",""],[13,"Return","","",37],[13,"DefaultReturn","","",37],[13,"NoReturn","","",37],[4,"TraitMethod","","An item belonging to a trait, whether a method or associated. Could be named\nTraitItem except that's already taken by an exported enum variant."],[13,"RequiredMethod","","",38],[13,"ProvidedMethod","","",38],[13,"TypeTraitItem","","",38],[4,"ImplMethod","",""],[13,"MethodImplItem","","",39],[13,"TypeImplItem","","",39],[4,"Type","","A representation of a Type suitable for hyperlinking purposes. Ideally one can get the original\ntype out of the AST/ty::ctxt given one of these, if more information is needed. Most importantly\nit does not preserve mutability or boxes."],[13,"ResolvedPath","","structs/enums/traits (anything that'd be an ast::TyPath)",40],[12,"path","rustdoc::clean::Type","",40],[12,"typarams","","",40],[12,"did","","",40],[13,"Generic","rustdoc::clean","For parameterized types, so the consumer of the JSON don't go\nlooking for types which don't exist anywhere.",40],[13,"Primitive","","Primitives are just the fixed-size numeric types (plus int/uint/float), and char.",40],[13,"BareFunction","","extern \"ABI\" fn",40],[13,"Tuple","","",40],[13,"Vector","","",40],[13,"FixedVector","","",40],[13,"Bottom","","aka TyBot",40],[13,"Unique","","",40],[13,"RawPointer","","",40],[13,"BorrowedRef","","",40],[12,"lifetime","rustdoc::clean::Type","",40],[12,"mutability","","",40],[12,"type_","","",40],[13,"QPath","rustdoc::clean","",40],[12,"name","rustdoc::clean::Type","",40],[12,"self_type","","",40],[12,"trait_","","",40],[13,"Infer","rustdoc::clean","",40],[13,"PolyTraitRef","","",40],[4,"PrimitiveType","",""],[13,"Isize","","",41],[13,"I8","","",41],[13,"I16","","",41],[13,"I32","","",41],[13,"I64","","",41],[13,"Usize","","",41],[13,"U8","","",41],[13,"U16","","",41],[13,"U32","","",41],[13,"U64","","",41],[13,"F32","","",41],[13,"F64","","",41],[13,"Char","","",41],[13,"Bool","","",41],[13,"Str","","",41],[13,"Slice","","",41],[13,"PrimitiveTuple","","",41],[4,"TypeKind","",""],[13,"TypeEnum","","",42],[13,"TypeFunction","","",42],[13,"TypeModule","","",42],[13,"TypeConst","","",42],[13,"TypeStatic","","",42],[13,"TypeStruct","","",42],[13,"TypeTrait","","",42],[13,"TypeVariant","","",42],[13,"TypeTypedef","","",42],[4,"StructField","",""],[13,"HiddenStructField","","",43],[13,"TypedStructField","","",43],[4,"VariantKind","",""],[13,"CLikeVariant","","",44],[13,"TupleVariant","","",44],[13,"StructVariant","","",44],[4,"PathParameters","",""],[13,"AngleBracketed","","",45],[12,"lifetimes","rustdoc::clean::PathParameters","",45],[12,"types","","",45],[12,"bindings","","",45],[13,"Parenthesized","rustdoc::clean","",45],[12,"inputs","rustdoc::clean::PathParameters","",45],[12,"output","","",45],[4,"Mutability","rustdoc::clean",""],[13,"Mutable","","",46],[13,"Immutable","","",46],[4,"ImplPolarity","",""],[13,"Positive","","",47],[13,"Negative","","",47],[4,"Import","",""],[13,"SimpleImport","","",48],[13,"GlobImport","","",48],[13,"ImportList","","",48],[6,"Visibility","",""],[7,"SCHEMA_VERSION","","A stable identifier to the particular version of JSON output.\nIncrement this when the `Crate` and related structures change."],[8,"Clean","",""],[10,"clean","","",49],[11,"clean","collections::vec","",50],[11,"clean","rustc::middle::subst","",51],[11,"clean","syntax::ptr","",52],[11,"clean","alloc::rc","",53],[11,"clean","core::option","",54],[11,"clean","rustc::middle::ty","",55],[11,"clean","syntax::owned_slice","",56],[11,"fmt","rustdoc::clean","",1],[11,"decode","","",1],[11,"encode","","",1],[11,"clone","","",1],[11,"fmt","","",2],[11,"decode","","",2],[11,"encode","","",2],[11,"clone","","",2],[11,"clean","rustc::metadata::cstore","",57],[11,"fmt","rustdoc::clean","",3],[11,"decode","","",3],[11,"encode","","",3],[11,"clone","","",3],[11,"doc_list","","Finds the `doc` attribute as a List and returns the list of attributes\nnested inside.",3],[11,"doc_value","","Finds the `doc` attribute as a NameValue and returns the corresponding\nvalue found.",3],[11,"is_hidden_from_doc","","",3],[11,"is_mod","","",3],[11,"is_trait","","",3],[11,"is_struct","","",3],[11,"is_enum","","",3],[11,"is_fn","","",3],[11,"fmt","","",32],[11,"decode","","",32],[11,"encode","","",32],[11,"clone","","",32],[11,"fmt","","",4],[11,"decode","","",4],[11,"encode","","",4],[11,"clone","","",4],[11,"fmt","","",33],[11,"eq","","",33],[11,"ne","","",33],[11,"decode","","",33],[11,"encode","","",33],[11,"clone","","",33],[11,"clean","","",58],[11,"clean","","",59],[11,"name","","",33],[11,"value_str","","",33],[11,"meta_item_list","","",33],[11,"span","","",33],[11,"fmt","","",5],[11,"eq","","",5],[11,"ne","","",5],[11,"decode","","",5],[11,"encode","","",5],[11,"clone","","",5],[11,"clean","syntax::ast","",60],[11,"clean","rustc::middle::ty","",61],[11,"fmt","rustdoc::clean","",34],[11,"eq","","",34],[11,"ne","","",34],[11,"decode","","",34],[11,"encode","","",34],[11,"clone","","",34],[11,"clean","syntax::ast","",62],[11,"clean","rustc::middle::ty","",63],[11,"clean","","",64],[11,"clean","","",65],[11,"clean","","",66],[11,"clean","rustc::middle::subst","",67],[11,"fmt","rustdoc::clean","",68],[11,"eq","","",68],[11,"ne","","",68],[11,"decode","","",68],[11,"encode","","",68],[11,"clone","","",68],[11,"get_ref","","",68],[11,"statik","","",68],[11,"clean","syntax::ast","",69],[11,"clean","","",70],[11,"clean","rustc::middle::ty","",71],[11,"clean","","",72],[11,"fmt","rustdoc::clean","",35],[11,"eq","","",35],[11,"ne","","",35],[11,"decode","","",35],[11,"encode","","",35],[11,"clone","","",35],[11,"clean","syntax::ast","",73],[11,"clean","rustc::middle::ty","",74],[11,"clean","","",75],[11,"clean","","",76],[11,"clean","","",77],[11,"clean","","",77],[11,"clean","","",78],[11,"clean","","",79],[11,"fmt","rustdoc::clean","",6],[11,"eq","","",6],[11,"ne","","",6],[11,"decode","","",6],[11,"encode","","",6],[11,"clone","","",6],[11,"clean","syntax::ast","",80],[11,"fmt","rustdoc::clean","",7],[11,"decode","","",7],[11,"encode","","",7],[11,"clone","","",7],[11,"clean","syntax::ast","",81],[11,"fmt","rustdoc::clean","",8],[11,"decode","","",8],[11,"encode","","",8],[11,"clone","","",8],[11,"clean","syntax::ast","",82],[11,"fmt","rustdoc::clean","",36],[11,"eq","","",36],[11,"ne","","",36],[11,"decode","","",36],[11,"encode","","",36],[11,"clone","","",36],[11,"clean","syntax::ast","",83],[11,"fmt","rustdoc::clean","",9],[11,"decode","","",9],[11,"encode","","",9],[11,"clone","","",9],[11,"fmt","","",10],[11,"eq","","",10],[11,"ne","","",10],[11,"decode","","",10],[11,"encode","","",10],[11,"clone","","",10],[11,"fmt","","",11],[11,"eq","","",11],[11,"ne","","",11],[11,"decode","","",11],[11,"encode","","",11],[11,"clone","","",11],[11,"clean","syntax::ast","",84],[11,"clean","rustc::middle::ty","",85],[11,"fmt","rustdoc::clean","",12],[11,"eq","","",12],[11,"ne","","",12],[11,"decode","","",12],[11,"encode","","",12],[11,"clone","","",12],[11,"clean","syntax::ast","",86],[11,"fmt","rustdoc::clean","",37],[11,"eq","","",37],[11,"ne","","",37],[11,"decode","","",37],[11,"encode","","",37],[11,"clone","","",37],[11,"clean","syntax::ast","",87],[11,"fmt","rustdoc::clean","",13],[11,"decode","","",13],[11,"encode","","",13],[11,"clone","","",13],[11,"clean","syntax::ast","",88],[11,"clean","","",89],[11,"fmt","rustdoc::clean","",38],[11,"decode","","",38],[11,"encode","","",38],[11,"clone","","",38],[11,"is_req","","",38],[11,"is_def","","",38],[11,"is_type","","",38],[11,"item","","",38],[11,"clean","syntax::ast","",90],[11,"fmt","rustdoc::clean","",39],[11,"decode","","",39],[11,"encode","","",39],[11,"clone","","",39],[11,"clean","syntax::ast","",91],[11,"clean","rustc::middle::ty","",92],[11,"clean","","",93],[11,"fmt","rustdoc::clean","",14],[11,"eq","","",14],[11,"ne","","",14],[11,"decode","","",14],[11,"encode","","",14],[11,"clone","","",14],[11,"fmt","","",40],[11,"eq","","",40],[11,"ne","","",40],[11,"decode","","",40],[11,"encode","","",40],[11,"clone","","",40],[11,"fmt","","",41],[11,"hash","","",41],[11,"eq","","",41],[11,"ne","","",41],[11,"decode","","",41],[11,"encode","","",41],[11,"clone","","",41],[11,"fmt","","",42],[11,"decode","","",42],[11,"encode","","",42],[11,"clone","","",42],[11,"to_string","","",41],[11,"to_url_str","","",41],[11,"to_node_id","","Creates a rustdoc-specific node id for primitive types.",41],[11,"clean","syntax::ast","",94],[11,"clean","rustdoc::clean","",95],[11,"fmt","","",43],[11,"decode","","",43],[11,"encode","","",43],[11,"clone","","",43],[11,"clean","","",96],[11,"clean","rustc::middle::ty","",97],[11,"clean","syntax::ast","",98],[11,"fmt","rustdoc::clean","",15],[11,"decode","","",15],[11,"encode","","",15],[11,"clone","","",15],[11,"fmt","","",16],[11,"decode","","",16],[11,"encode","","",16],[11,"clone","","",16],[11,"clean","syntax::ast","",99],[11,"fmt","rustdoc::clean","",17],[11,"decode","","",17],[11,"encode","","",17],[11,"clone","","",17],[11,"fmt","","",18],[11,"decode","","",18],[11,"encode","","",18],[11,"clone","","",18],[11,"clean","rustc::middle::ty","",100],[11,"fmt","rustdoc::clean","",44],[11,"decode","","",44],[11,"encode","","",44],[11,"clone","","",44],[11,"clean","syntax::ast","",101],[11,"fmt","rustdoc::clean","",19],[11,"decode","","",19],[11,"encode","","",19],[11,"clone","","",19],[11,"clean","syntax::codemap","",102],[11,"fmt","rustdoc::clean","",20],[11,"eq","","",20],[11,"ne","","",20],[11,"decode","","",20],[11,"encode","","",20],[11,"clone","","",20],[11,"clean","syntax::ast","",103],[11,"fmt","rustdoc::clean","",45],[11,"eq","","",45],[11,"ne","","",45],[11,"decode","","",45],[11,"encode","","",45],[11,"clone","","",45],[11,"clean","syntax::ast","",104],[11,"fmt","rustdoc::clean","",21],[11,"eq","","",21],[11,"ne","","",21],[11,"decode","","",21],[11,"encode","","",21],[11,"clone","","",21],[11,"clean","syntax::ast","",105],[11,"clean","","",106],[11,"clean","","",107],[11,"fmt","rustdoc::clean","",22],[11,"decode","","",22],[11,"encode","","",22],[11,"clone","","",22],[11,"fmt","","",23],[11,"eq","","",23],[11,"ne","","",23],[11,"decode","","",23],[11,"encode","","",23],[11,"clone","","",23],[11,"clean","syntax::ast","",108],[11,"fmt","rustdoc::clean","",24],[11,"decode","","",24],[11,"encode","","",24],[11,"clone","","",24],[11,"fmt","","",25],[11,"decode","","",25],[11,"encode","","",25],[11,"clone","","",25],[11,"eq","","",46],[11,"ne","","",46],[11,"decode","","",46],[11,"encode","","",46],[11,"clone","","",46],[11,"fmt","","",46],[11,"clean","syntax::ast","",109],[11,"fmt","rustdoc::clean","",47],[11,"eq","","",47],[11,"ne","","",47],[11,"decode","","",47],[11,"encode","","",47],[11,"clone","","",47],[11,"clean","syntax::ast","",110],[11,"fmt","rustdoc::clean","",26],[11,"decode","","",26],[11,"encode","","",26],[11,"clone","","",26],[11,"fmt","","",48],[11,"decode","","",48],[11,"encode","","",48],[11,"clone","","",48],[11,"fmt","","",27],[11,"decode","","",27],[11,"encode","","",27],[11,"clone","","",27],[11,"fmt","","",28],[11,"decode","","",28],[11,"encode","","",28],[11,"clone","","",28],[11,"clean","","",111],[11,"clean","syntax::ast","",112],[11,"clean","","",113],[11,"fmt","rustdoc::clean","",29],[11,"decode","","",29],[11,"encode","","",29],[11,"clone","","",29],[11,"fmt","","",30],[11,"decode","","",30],[11,"encode","","",30],[11,"clone","","",30],[11,"clean","syntax::attr","",114],[11,"clean","syntax::ast","",115],[11,"clean","rustc::middle::ty","",116],[11,"clean","syntax::ast","",117],[11,"fmt","rustdoc::clean","",31],[11,"encode","","",31],[11,"decode","","",31],[11,"eq","","",31],[11,"ne","","",31],[11,"clone","","",31],[11,"clean","syntax::ast","",118],[0,"core","rustdoc",""],[11,"filestem","rustc::session::config","",119],[11,"open","rustc_back::archive","Opens an existing static archive",120],[11,"remove_file","","Removes a file from this archive",120],[11,"files","","Lists all files in an archive",120],[11,"extend","","Creates an `ArchiveBuilder` for adding files to this archive.",120],[11,"create","","Create a new static archive, ready for adding files.",121],[11,"add_native_library","","Adds all of the contents of a native library to this archive. This will\nsearch in the relevant locations for a library named `name`.",121],[11,"add_rlib","","Adds all of the contents of the rlib at the specified path to this\narchive.",121],[11,"add_file","","Adds an arbitrary file to this archive",121],[11,"update_symbols","","Indicate that the next call to `build` should updates all symbols in\nthe archive (run 'ar s' over it).",121],[11,"build","","Combine the provided files, rlibs, and native libraries into a single\n`Archive`.",121],[11,"fmt","rustc_back::svh","",122],[11,"eq","","",122],[11,"ne","","",122],[11,"clone","","",122],[11,"new","","",122],[11,"as_str","","",122],[11,"calculate","","",122],[11,"fmt","","",122],[11,"hash","rustc_back::svh::svh_visitor","",123],[11,"hash","","",124],[11,"hash","","",125],[11,"get_content","syntax::ast","",106],[11,"get_content","","",107],[11,"visit_mac","rustc_back::svh::svh_visitor","",126],[11,"visit_struct_def","","",126],[11,"visit_variant","","",126],[11,"visit_opt_lifetime_ref","","",126],[11,"visit_ident","","",126],[11,"visit_lifetime_ref","","",126],[11,"visit_lifetime_def","","",126],[11,"visit_expr","","",126],[11,"visit_stmt","","",126],[11,"visit_foreign_item","","",126],[11,"visit_item","","",126],[11,"visit_mod","","",126],[11,"visit_decl","","",126],[11,"visit_ty","","",126],[11,"visit_generics","","",126],[11,"visit_fn","","",126],[11,"visit_ty_method","","",126],[11,"visit_trait_item","","",126],[11,"visit_struct_field","","",126],[11,"visit_explicit_self","","",126],[11,"visit_path","","",126],[11,"visit_block","","",126],[11,"visit_pat","","",126],[11,"visit_local","","",126],[11,"visit_arm","","",126],[11,"tr_id","rustc::middle::astencode","Translates an internal id, meaning a node id that is known to refer to some part of the\nitem currently being inlined, such as a local variable or argument.  All naked node-ids\nthat appear in types have this property, since if something might refer to an external item\nwe would use a def-id to allow for the possibility that the item resides in another crate.",127],[11,"tr_def_id","","Translates an EXTERNAL def-id, converting the crate number from the one used in the encoded\ndata to the current crate numbers..  By external, I mean that it be translated to a\nreference to the item in its original crate, as opposed to being translated to a reference\nto the inlined version of the item.  This is typically, but not always, what you want,\nbecause most def-ids refer to external things like types or other fns that may or may not\nbe inlined.  Note that even when the inlined function is referencing itself recursively, we\nwould want `tr_def_id` for that reference--- conceptually the function calls the original,\nnon-inlined version, and trans deals with linking that recursive call to the inlined copy.",127],[11,"tr_intern_def_id","","Translates an INTERNAL def-id, meaning a def-id that is\nknown to refer to some part of the item currently being\ninlined.  In that case, we want to convert the def-id to\nrefer to the current crate and to the new, inlined node-id.",127],[11,"tr_span","","Translates a `Span` from an extern crate to the corresponding `Span`\nwithin the local crate's codemap. `creader::import_codemap()` will\nalready have allocated any additionally needed FileMaps in the local\ncodemap as a side-effect of creating the crate_metadata's\n`codemap_import_info`.",127],[11,"tr_intern","syntax::ast","",128],[11,"tr","","",128],[11,"tr","core::option","",54],[11,"tr","syntax::codemap","",102],[11,"fold_block","rustc::middle::astencode","",129],[11,"tr","rustc::middle::def","",130],[11,"tr","rustc::middle::ty","",72],[11,"tr","","",131],[11,"tr","rustc::middle::region","",132],[11,"tr","","",133],[11,"tr","rustc::middle::ty","",134],[11,"read_freevar_entry","rbml::reader","",135],[11,"read_capture_mode","","",135],[11,"tr","rustc::middle::ty","",136],[11,"tr","","",137],[11,"tr","","",138],[11,"read_method_callee","rbml::reader","",135],[11,"tr","rustc::middle::ty","",139],[11,"read_vec_per_param_space","rbml::reader","",135],[11,"read_vtable_res_with_key","","",135],[11,"read_vtable_res","","",135],[11,"read_vtable_param_res","","",135],[11,"read_vtable_origin","","",135],[11,"ty_str_ctxt","rustc::metadata::encoder","",140],[11,"emit_closure_type","rbml::writer","",141],[11,"emit_method_origin","","",141],[11,"emit_ty","","",141],[11,"emit_tys","","",141],[11,"emit_trait_ref","","",141],[11,"emit_type_param_def","","",141],[11,"emit_predicate","","",141],[11,"emit_type_scheme","","",141],[11,"emit_existential_bounds","","",141],[11,"emit_builtin_bounds","","",141],[11,"emit_substs","","",141],[11,"emit_auto_adjustment","","",141],[11,"emit_autoref","","",141],[11,"emit_auto_deref_ref","","",141],[11,"emit_unsize_kind","","",141],[11,"tag","","",141],[11,"id","","",141],[11,"visit_id","rustc::middle::astencode","",142],[11,"as_int","rbml","",143],[11,"opt_child","","",143],[11,"read_ty_nodcx","rbml::reader","",135],[11,"read_tys_nodcx","","",135],[11,"read_substs_nodcx","","",135],[11,"read_method_origin","","",135],[11,"read_ty","","",135],[11,"read_tys","","",135],[11,"read_trait_ref","","",135],[11,"read_poly_trait_ref","","",135],[11,"read_type_param_def","","",135],[11,"read_predicate","","",135],[11,"read_type_scheme","","",135],[11,"read_existential_bounds","","",135],[11,"read_substs","","",135],[11,"read_auto_adjustment","","",135],[11,"read_auto_deref_ref","","",135],[11,"read_autoref","","",135],[11,"read_unsize_kind","","",135],[11,"read_closure_kind","","",135],[11,"read_closure_ty","","",135],[11,"convert_def_id","","Converts a def-id that appears in a type.  The correct\ntranslation will depend on what kind of def-id this is.\nThis is a subtle point: type definitions are not\ninlined into the current crate, so if the def-id names\na nominal type or type alias, then it should be\ntranslated to refer to the source crate.",135],[11,"graph_id","rustc::middle::cfg::graphviz","",144],[11,"node_id","","",144],[11,"node_label","","",144],[11,"edge_label","","",144],[11,"nodes","","",144],[11,"edges","","",144],[11,"source","","",144],[11,"target","","",144],[11,"eq","rustc::middle::cfg","",145],[11,"ne","","",145],[11,"id","","",145],[11,"new","","",146],[11,"node_is_reachable","","",146],[11,"hash","rustc::middle::check_const","",147],[11,"cmp","","",147],[11,"partial_cmp","","",147],[11,"lt","","",147],[11,"le","","",147],[11,"gt","","",147],[11,"ge","","",147],[11,"clone","","",147],[11,"eq","","",147],[11,"ne","","",147],[11,"decode","","",147],[11,"encode","","",147],[11,"empty","","Returns an empty set of flags.",147],[11,"all","","Returns the set containing all flags.",147],[11,"bits","","Returns the raw value of the flags currently stored.",147],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",147],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",147],[11,"is_empty","","Returns `true` if no flags are currently stored.",147],[11,"is_all","","Returns `true` if all flags are currently set.",147],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",147],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",147],[11,"insert","","Inserts the specified flags in-place.",147],[11,"remove","","Removes the specified flags in-place.",147],[11,"toggle","","Toggles the specified flags in-place.",147],[6,"Output","rustdoc::core",""],[11,"bitor","rustc::middle::check_const","Returns the union of the two sets of flags.",147],[6,"Output","rustdoc::core",""],[11,"bitxor","rustc::middle::check_const","Returns the left flags, but with all the right flags toggled.",147],[6,"Output","rustdoc::core",""],[11,"bitand","rustc::middle::check_const","Returns the intersection between the two sets of flags.",147],[6,"Output","rustdoc::core",""],[11,"sub","rustc::middle::check_const","Returns the set difference of the two sets of flags.",147],[6,"Output","rustdoc::core",""],[11,"not","rustc::middle::check_const","Returns the complement of this set of flags.",147],[11,"eq","","",148],[11,"ne","","",148],[11,"visit_item","","",149],[11,"visit_fn","","",149],[11,"visit_pat","","",149],[11,"visit_expr","","",149],[11,"consume","","",149],[11,"borrow","","",149],[11,"decl_without_init","","",149],[11,"mutate","","",149],[11,"matched_pat","","",149],[11,"consume_pat","","",149],[11,"visit_item","rustc::middle::check_static_recursion","",150],[11,"visit_item","","",151],[11,"visit_expr","","",151],[11,"eq","rustc::middle::check_loop","",152],[11,"ne","","",152],[11,"clone","","",152],[11,"visit_item","","",153],[11,"visit_expr","","",153],[11,"fmt","rustc::middle::check_match","",154],[11,"from_iter","","",154],[11,"eq","","",155],[11,"ne","","",155],[11,"clone","","",155],[11,"eq","","",156],[11,"ne","","",156],[11,"clone","","",156],[11,"visit_expr","","",157],[11,"visit_local","","",157],[11,"visit_fn","","",157],[11,"new","","",158],[11,"visit_id","","",159],[11,"fold_pat","","",158],[11,"matched_pat","","",160],[11,"consume","","",160],[11,"consume_pat","","",160],[11,"borrow","","",160],[11,"decl_without_init","","",160],[11,"mutate","","",160],[11,"visit_pat","","",161],[11,"visit_fn","rustc::middle::check_rvalues","",162],[11,"consume","","",163],[11,"matched_pat","","",163],[11,"consume_pat","","",163],[11,"borrow","","",163],[11,"decl_without_init","","",163],[11,"mutate","","",163],[11,"eq","rustc::middle::const_eval","",164],[11,"ne","","",164],[11,"clone","","",164],[11,"clone","","",165],[11,"clone","","",166],[11,"description","","",165],[11,"fmt","rustc::middle::dataflow","",167],[11,"clone","","",168],[11,"pre","","",168],[11,"new","","",168],[11,"add_gen","","Indicates that `id` generates `bit`",168],[11,"add_kill","","Indicates that `id` kills `bit`",168],[11,"each_bit_on_entry","","Iterates through each bit that is set on entry to `id`.\nOnly useful after `propagate()` has been called.",168],[11,"each_bit_for_node","","Iterates through each bit that is set on entry/exit to `cfgidx`.\nOnly useful after `propagate()` has been called.",168],[11,"each_gen_bit","","Iterates through each bit in the gen set for `id`.",168],[11,"add_kills_from_flow_exits","","Whenever you have a `break` or `continue` statement, flow\nexits through any number of enclosing scopes on its way to\nthe new destination. This function infers the kill bits of\nthose control operators based on the kill bits associated\nwith those scopes.",168],[11,"propagate","","Performs the data flow analysis.",168],[11,"join","","",169],[11,"join","","",170],[11,"visit_struct_def","rustc::middle::dead","",171],[11,"visit_expr","","",171],[11,"visit_pat","","",171],[11,"visit_path","","",171],[11,"visit_item","","",171],[11,"visit_item","","",172],[11,"visit_fn","","",172],[11,"visit_item","","",173],[11,"visit_foreign_item","","",173],[11,"visit_fn","","",173],[11,"visit_struct_field","","",173],[11,"visit_trait_item","","",173],[11,"fmt","rustc::middle::def","",130],[11,"hash","","",130],[11,"decode","","",130],[11,"encode","","",130],[11,"eq","","",130],[11,"ne","","",130],[11,"clone","","",130],[11,"fmt","","",174],[11,"full_def","","Get the definition, if fully resolved, otherwise panic.",174],[11,"def_id","","Get the DefId, if fully resolved, otherwise panic.",174],[11,"fmt","","",175],[11,"hash","","",175],[11,"decode","","",175],[11,"encode","","",175],[11,"eq","","",175],[11,"ne","","",175],[11,"clone","","",175],[11,"map","","",175],[11,"local_node_id","","",130],[11,"def_id","","",130],[11,"variant_def_ids","","",130],[11,"eq","rustc::middle::effect","",176],[11,"ne","","",176],[11,"visit_fn","","",177],[11,"visit_block","","",177],[11,"visit_expr","","",177],[11,"visit_item","rustc::middle::entry","",178],[11,"fmt","rustc::middle::expr_use_visitor","",179],[11,"eq","","",179],[11,"ne","","",179],[11,"fmt","","",180],[11,"eq","","",180],[11,"ne","","",180],[11,"fmt","","",181],[11,"eq","","",181],[11,"ne","","",181],[11,"fmt","","",182],[11,"eq","","",182],[11,"ne","","",182],[11,"fmt","","",183],[11,"eq","","",183],[11,"ne","","",183],[11,"fmt","","",184],[11,"eq","","",184],[11,"ne","","",184],[11,"new","","",185],[11,"walk_fn","","",185],[11,"consume_expr","","",185],[11,"walk_expr","","",185],[11,"hash","rustc::middle::fast_reject","",186],[11,"eq","","",186],[11,"ne","","",186],[11,"clone","","",186],[11,"fmt","rustc::middle::graph","",187],[11,"fmt","","",188],[11,"eq","","",188],[11,"ne","","",188],[11,"clone","","",188],[11,"fmt","","",189],[11,"eq","","",189],[11,"ne","","",189],[11,"fmt","","",190],[11,"node_id","","Returns unique id (unique with respect to the graph holding associated node).",188],[11,"edge_id","","Returns unique id (unique with respect to the graph holding associated edge).",189],[11,"new","","",191],[11,"with_capacity","","",191],[11,"all_nodes","","",191],[11,"all_edges","","",191],[11,"next_node_index","","",191],[11,"add_node","","",191],[11,"mut_node_data","","",191],[11,"node_data","","",191],[11,"node","","",191],[11,"next_edge_index","","",191],[11,"add_edge","","",191],[11,"mut_edge_data","","",191],[11,"edge_data","","",191],[11,"edge","","",191],[11,"first_adjacent","","Accesses the index of the first edge adjacent to `node`.\nThis is useful if you wish to modify the graph while walking\nthe linked list of edges.",191],[11,"next_adjacent","","Accesses the next edge in a given direction.\nThis is useful if you wish to modify the graph while walking\nthe linked list of edges.",191],[11,"each_node","","Iterates over all edges defined in the graph.",191],[11,"each_edge","","Iterates over all edges defined in the graph",191],[11,"each_outgoing_edge","","Iterates over all outgoing edges from the node `from`",191],[11,"each_incoming_edge","","Iterates over all incoming edges to the node `target`",191],[11,"each_adjacent_edge","","Iterates over all edges adjacent to the node `node`\nin the direction `dir` (either `Outgoing` or `Incoming)",191],[11,"iterate_until_fixed_point","","",191],[11,"depth_traverse","","",191],[6,"Item","rustdoc::core",""],[11,"next","rustc::middle::graph","",192],[11,"source","","",187],[11,"target","","",187],[11,"visit_fn","rustc::middle::intrinsicck","",193],[11,"visit_expr","","",193],[11,"repr","rustc::middle::ty","",194],[11,"tag","rustc::middle::infer::bivariate","",195],[11,"fields","","",195],[11,"tys_with_variance","","",195],[11,"regions_with_variance","","",195],[11,"regions","","",195],[11,"mts","","",195],[11,"unsafeties","","",195],[11,"builtin_bounds","","",195],[11,"tys","","",195],[11,"binders","","",195],[11,"combine","alloc::rc","",53],[11,"combine","rustc::middle::ty","",65],[11,"combine","","",78],[11,"combine","","",196],[11,"clone","rustc::middle::infer::combine","",197],[11,"switch_expected","","",197],[11,"instantiate","","",197],[11,"tcx","","",198],[11,"fold_ty","","",198],[11,"fold_region","","",198],[11,"tag","rustc::middle::infer::equate","",199],[11,"fields","","",199],[11,"tys_with_variance","","",199],[11,"regions_with_variance","","",199],[11,"regions","","",199],[11,"mts","","",199],[11,"unsafeties","","",199],[11,"builtin_bounds","","",199],[11,"tys","","",199],[11,"binders","","",199],[11,"report_region_errors","rustc::middle::infer","",200],[11,"process_errors","","",200],[11,"report_type_error","","",200],[11,"report_and_explain_type_error","","",200],[11,"values_str","","Returns a string of the form \"expected `{}`, found `{}`\", or None if this is a derived\nerror.",200],[11,"expected_found_str","","",200],[11,"report_generic_bound_failure","","",200],[11,"report_concrete_failure","","",200],[11,"report_sub_sup_conflict","","",200],[11,"report_sup_sup_conflict","","",200],[11,"report_processed_errors","","",200],[11,"give_suggestion","","",200],[11,"give_expl_lifetime_param","","",200],[11,"report_inference_failure","","",200],[11,"note_region_origin","","",200],[11,"resolve","alloc::rc","",53],[11,"contains_error","","",53],[11,"resolve","rustc::middle::ty","",55],[11,"contains_error","","",55],[11,"tag","rustc::middle::infer::glb","",201],[11,"fields","","",201],[11,"tys_with_variance","","",201],[11,"regions_with_variance","","",201],[11,"mts","","",201],[11,"unsafeties","","",201],[11,"builtin_bounds","","",201],[11,"regions","","",201],[11,"tys","","",201],[11,"binders","","",201],[11,"tainted_regions","rustc::middle::infer","",200],[11,"region_vars_confined_to_snapshot","","Returns the set of region variables that do not affect any\ntypes/regions which existed before `snapshot` was\nstarted. This is used in the sub/lub/glb computations. The\nidea here is that when we are computing lub/glb of two\nregions, we sometimes create intermediate region variables.\nThose region variables may touch some of the skolemized or\nother \"forbidden\" regions we created to replace bound\nregions, but they don't really represent an \"external\"\nconstraint.",200],[11,"relate_bound","rustc::middle::infer::lub","",202],[11,"relate_bound","rustc::middle::infer::glb","",201],[11,"tag","rustc::middle::infer::lub","",202],[11,"fields","","",202],[11,"tys_with_variance","","",202],[11,"regions_with_variance","","",202],[11,"mts","","",202],[11,"unsafeties","","",202],[11,"builtin_bounds","","",202],[11,"regions","","",202],[11,"tys","","",202],[11,"binders","","",202],[11,"fmt","rustc::middle::infer::region_inference::graphviz","",203],[11,"eq","","",203],[11,"ne","","",203],[11,"hash","","",203],[11,"clone","","",203],[11,"fmt","","",204],[11,"eq","","",204],[11,"ne","","",204],[11,"clone","","",204],[11,"graph_id","","",205],[11,"node_id","","",205],[11,"node_label","","",205],[11,"edge_label","","",205],[11,"nodes","","",205],[11,"edges","","",205],[11,"source","","",205],[11,"target","","",205],[11,"fmt","rustc::middle::infer::region_inference","",206],[11,"hash","","",206],[11,"eq","","",206],[11,"ne","","",206],[11,"clone","","",206],[11,"eq","","",207],[11,"ne","","",207],[11,"fmt","","",207],[11,"clone","","",207],[11,"hash","","",208],[11,"eq","","",208],[11,"ne","","",208],[11,"eq","","",209],[11,"ne","","",209],[11,"eq","","",210],[11,"ne","","",210],[11,"fmt","","",211],[11,"clone","","",211],[11,"fmt","","",212],[11,"clone","","",212],[11,"contains","","",212],[11,"push","","",212],[11,"fmt","","",213],[11,"new","","",214],[11,"start_snapshot","","",214],[11,"commit","","",214],[11,"rollback_to","","",214],[11,"num_vars","","",214],[11,"new_region_var","","",214],[11,"new_skolemized","","Creates a new skolemized region. Skolemized regions are fresh\nregions used when performing higher-ranked computations. They\nmust be used in a very particular way and are never supposed\nto \"escape\" out into error messages or the code at large.",214],[11,"new_bound","","",214],[11,"add_given","","",214],[11,"make_eqregion","","",214],[11,"make_subregion","","",214],[11,"verify_generic_bound","","See `Verify::VerifyGenericBound`",214],[11,"lub_regions","","",214],[11,"glb_regions","","",214],[11,"resolve_var","","",214],[11,"combine_vars","","",214],[11,"vars_created_since_snapshot","","",214],[11,"tainted","","Computes all regions that have been related to `r0` in any way since the mark `mark` was\nmade---`r0` itself will be the first entry. This is used when checking whether skolemized\nregions are being improperly related to other regions.",214],[11,"resolve_regions","","This function performs the actual region resolution.  It must be\ncalled after all constraints have been added.  It performs a\nfixed-point iteration to find region values which satisfy all\nconstraints, assuming such values can be found; if they cannot,\nerrors are reported.",214],[11,"fmt","","",215],[11,"eq","","",215],[11,"ne","","",215],[11,"repr","","",206],[11,"repr","","",216],[11,"repr","","",217],[11,"repr","","",218],[11,"repr","","",207],[11,"user_string","","",207],[11,"to_ty","","",207],[11,"new","rustc::middle::infer::resolve","",219],[11,"tcx","","",219],[11,"fold_ty","","",219],[11,"tcx","","",220],[11,"fold_ty","","",220],[11,"fold_region","","",220],[11,"new","rustc::middle::infer::freshen","",221],[11,"tcx","","",221],[11,"fold_region","","",221],[11,"fold_ty","","",221],[11,"tag","rustc::middle::infer::sub","",222],[11,"fields","","",222],[11,"tys_with_variance","","",222],[11,"regions_with_variance","","",222],[11,"regions","","",222],[11,"mts","","",222],[11,"unsafeties","","",222],[11,"builtin_bounds","","",222],[11,"tys","","",222],[11,"binders","","",222],[11,"fmt","rustc::middle::infer::type_variable","",223],[11,"eq","","",223],[11,"ne","","",223],[11,"new","","",224],[11,"var_diverges","","",224],[11,"relate_vars","","Records that `a <: b`, `a :> b`, or `a == b`, depending on `dir`.",224],[11,"instantiate_and_push","","Instantiates `vid` with the type `ty` and then pushes an entry onto `stack` for each of the\nrelations of `vid` to other variables. The relations will have the form `(ty, dir, vid1)`\nwhere `vid1` is some other variable id.",224],[11,"new_var","","",224],[11,"probe","","",224],[11,"replace_if_possible","","",224],[11,"snapshot","","",224],[11,"rollback_to","","",224],[11,"commit","","",224],[11,"types_escaping_snapshot","","Find the set of type variables that existed *before* `s`\nbut which have only been unified since `s` started, and\nreturn the types with which they were unified. So if we had\na type variable `V0`, then we started the snapshot, then we\ncreated a type variable `V1`, unifed `V0` with `T0`, and\nunified `V1` with `T1`, this function would return `{T0}`.",224],[6,"Value","rustdoc::core",""],[6,"Undo","",""],[11,"reverse","rustc::middle::infer::type_variable","",225],[11,"fmt","rustc::middle::infer::unify","",226],[11,"clone","","",226],[11,"eq","","",226],[11,"ne","","",226],[11,"new","","",227],[11,"snapshot","","Starts a new snapshot. Each snapshot must be either\nrolled back or committed in a \"LIFO\" (stack) order.",227],[11,"rollback_to","","Reverses all changes since the last snapshot. Also\nremoves any keys that have been created since then.",227],[11,"commit","","Commits all changes since the last snapshot. Of course, they\ncan still be undone if there is a snapshot further out.",227],[11,"new_key","","",227],[11,"get","","Find the root node for `vid`. This uses the standard union-find algorithm with path\ncompression: http://en.wikipedia.org/wiki/Disjoint-set_data_structure",227],[11,"set","","Sets the value for `vid` to `new_value`. `vid` MUST be a root node! Also, we must be in the\nmiddle of a snapshot.",227],[11,"unify","","Either redirects node_a to node_b or vice versa, depending on the relative rank. Returns\nthe new root and rank. You should then update the value of the new root to something\nsuitable.",227],[6,"Value","rustdoc::core",""],[6,"Undo","",""],[11,"reverse","rustc::middle::infer::unify","",228],[11,"simple_vars","rustc::middle::infer","Unifies two simple keys. Because simple keys do not have any subtyping relationships, if\nboth keys have already been associated with a value, then those two values must be the\nsame.",200],[11,"simple_var_t","","Sets the value of the key `a_id` to `b`. Because simple keys do not have any subtyping\nrelationships, if `a_id` already has a value, it must be the same as `b`.",200],[11,"probe_var","","",200],[6,"Value","rustdoc::core",""],[11,"index","rustc::middle::ty","",229],[11,"from_index","","",229],[11,"unification_table","","",229],[11,"tag","","",229],[11,"to_type","","",230],[11,"to_type_err","","",230],[6,"Value","rustdoc::core",""],[11,"index","rustc::middle::ty","",231],[11,"from_index","","",231],[11,"unification_table","","",231],[11,"tag","","",231],[11,"to_type","syntax::ast","",232],[11,"to_type_err","","",232],[11,"fmt","rustc::middle::infer","",233],[11,"clone","","",233],[11,"fmt","","",234],[11,"clone","","",234],[11,"fmt","","",235],[11,"clone","","",235],[11,"fmt","","",236],[11,"clone","","",236],[11,"fmt","","",237],[11,"clone","","",237],[11,"fmt","","",238],[11,"clone","","",238],[11,"fmt","","",239],[11,"then","core::result","",240],[11,"to_ures","","",240],[11,"compare","","",240],[11,"freshen","rustc::middle::infer","",200],[11,"type_var_diverges","","",200],[11,"freshener","","",200],[11,"type_is_unconstrained_numeric","","",200],[11,"combine_fields","","",200],[11,"equate","","",200],[11,"sub","","",200],[11,"lub","","",200],[11,"commit_unconditionally","","Execute `f` and commit the bindings",200],[11,"commit_if_ok","","Execute `f` and commit the bindings if successful",200],[11,"commit_regions_if_ok","","Execute `f` and commit only the region bindings if successful.\nThe function f must be very careful not to leak any non-region\nvariables that get created.",200],[11,"try","","Execute `f`, unroll bindings on panic",200],[11,"probe","","Execute `f` then unroll any bindings it creates",200],[11,"add_given","","",200],[11,"sub_types","","",200],[11,"eq_types","","",200],[11,"sub_trait_refs","","",200],[11,"sub_poly_trait_refs","","",200],[11,"skolemize_late_bound_regions","","See `higher_ranked::skolemize_late_bound_regions`",200],[11,"leak_check","","See `higher_ranked::leak_check`",200],[11,"plug_leaks","","See `higher_ranked::plug_leaks`",200],[11,"equality_predicate","","",200],[11,"region_outlives_predicate","","",200],[11,"next_ty_var_id","","",200],[11,"next_ty_var","","",200],[11,"next_diverging_ty_var","","",200],[11,"next_ty_vars","","",200],[11,"next_int_var_id","","",200],[11,"next_float_var_id","","",200],[11,"next_region_var","","",200],[11,"region_vars_for_defs","","",200],[11,"fresh_substs_for_generics","","Given a set of generics defined on a type or impl, returns a substitution mapping each\ntype/region parameter to a fresh inference variable.",200],[11,"fresh_substs_for_trait","","Given a set of generics defined on a trait, returns a substitution mapping each output\ntype/region parameter to a fresh inference variable, and mapping the self type to\n`self_ty`.",200],[11,"fresh_bound_region","","",200],[11,"resolve_regions_and_report_errors","","",200],[11,"ty_to_string","","",200],[11,"tys_to_string","","",200],[11,"trait_ref_to_string","","",200],[11,"shallow_resolve","","",200],[11,"resolve_type_vars_if_possible","","Where possible, replaces type/int/float variables in\n`value` with their final value. Note that region variables\nare unaffected. If a type variable has not been unified, it\nis left as is.  This is an idempotent operation that does\nnot affect inference state in any way and so you can do it\nat will.",200],[11,"fully_resolve","","Attempts to resolve all type/region variables in\n`value`. Region inference must have been run already (e.g.,\nby calling `resolve_regions_and_report_errors`).  If some\nvariable was never unified, an `Err` results.",200],[11,"type_error_message_str","","",200],[11,"type_error_message_str_with_expected","","",200],[11,"type_error_message","","",200],[11,"report_mismatched_types","","",200],[11,"replace_late_bound_regions_with_fresh_var","","",200],[11,"verify_generic_bound","","See `verify_generic_bound` method in `region_inference`",200],[11,"can_equate","","",200],[11,"span","","",235],[11,"types","","",235],[11,"dummy","","",235],[11,"repr","","",235],[11,"span","","",233],[11,"repr","","",233],[11,"span","","",236],[11,"repr","","",236],[11,"span","","",238],[11,"repr","","",238],[11,"hash","rustc::middle::lang_items","",241],[11,"eq","","",241],[11,"ne","","",241],[11,"from_i64","","",241],[11,"from_u64","","",241],[11,"new","","",242],[11,"items","","",242],[11,"item_name","","",242],[11,"require","","",242],[11,"from_builtin_kind","","",242],[11,"to_builtin_kind","","",242],[11,"fn_trait_kind","","",242],[11,"send_trait","","",242],[11,"sized_trait","","",242],[11,"copy_trait","","",242],[11,"sync_trait","","",242],[11,"drop_trait","","",242],[11,"add_trait","","",242],[11,"sub_trait","","",242],[11,"mul_trait","","",242],[11,"div_trait","","",242],[11,"rem_trait","","",242],[11,"neg_trait","","",242],[11,"not_trait","","",242],[11,"bitxor_trait","","",242],[11,"bitand_trait","","",242],[11,"bitor_trait","","",242],[11,"shl_trait","","",242],[11,"shr_trait","","",242],[11,"index_trait","","",242],[11,"index_mut_trait","","",242],[11,"range_struct","","",242],[11,"range_from_struct","","",242],[11,"range_to_struct","","",242],[11,"range_full_struct","","",242],[11,"unsafe_cell_type","","",242],[11,"deref_trait","","",242],[11,"deref_mut_trait","","",242],[11,"fn_trait","","",242],[11,"fn_mut_trait","","",242],[11,"fn_once_trait","","",242],[11,"eq_trait","","",242],[11,"ord_trait","","",242],[11,"str_eq_fn","","",242],[11,"panic_fn","","",242],[11,"panic_bounds_check_fn","","",242],[11,"panic_fmt","","",242],[11,"exchange_malloc_fn","","",242],[11,"exchange_free_fn","","",242],[11,"strdup_uniq_fn","","",242],[11,"start_fn","","",242],[11,"ty_desc","","",242],[11,"opaque","","",242],[11,"eh_personality","","",242],[11,"exchange_heap","","",242],[11,"owned_box","","",242],[11,"phantom_fn","","",242],[11,"phantom_data","","",242],[11,"covariant_type","","",242],[11,"contravariant_type","","",242],[11,"invariant_type","","",242],[11,"covariant_lifetime","","",242],[11,"contravariant_lifetime","","",242],[11,"invariant_lifetime","","",242],[11,"no_copy_bound","","",242],[11,"managed_bound","","",242],[11,"non_zero","","",242],[11,"stack_exhausted","","",242],[11,"debug_trait","","",242],[11,"visit_item","","",243],[11,"new","","",243],[11,"collect_item","","",243],[11,"collect_local_language_items","","",243],[11,"collect_external_language_items","","",243],[11,"collect","","",243],[11,"eq","rustc::middle::liveness","",244],[11,"ne","","",244],[11,"eq","","",245],[11,"ne","","",245],[11,"clone","","",245],[11,"fmt","","",246],[11,"eq","","",246],[11,"ne","","",246],[11,"visit_fn","","",247],[11,"visit_local","","",247],[11,"visit_expr","","",247],[11,"visit_arm","","",247],[11,"fmt","","",245],[11,"fmt","","",244],[11,"fmt","","",248],[11,"fmt","","",249],[11,"visit_fn","","",250],[11,"visit_local","","",250],[11,"visit_expr","","",250],[11,"visit_arm","","",250],[11,"clone","","",251],[11,"fmt","rustc::middle::mem_categorization","",252],[11,"eq","","",252],[11,"ne","","",252],[11,"clone","","",252],[11,"fmt","","",253],[11,"eq","","",253],[11,"ne","","",253],[11,"clone","","",253],[11,"fmt","","",254],[11,"hash","","",254],[11,"eq","","",254],[11,"ne","","",254],[11,"clone","","",254],[11,"fmt","","",255],[11,"hash","","",255],[11,"eq","","",255],[11,"ne","","",255],[11,"clone","","",255],[11,"fmt","","",256],[11,"hash","","",256],[11,"eq","","",256],[11,"ne","","",256],[11,"clone","","",256],[11,"fmt","","",257],[11,"hash","","",257],[11,"eq","","",257],[11,"ne","","",257],[11,"clone","","",257],[11,"fmt","","",258],[11,"hash","","",258],[11,"eq","","",258],[11,"ne","","",258],[11,"clone","","",258],[11,"fmt","","",259],[11,"hash","","",259],[11,"eq","","",259],[11,"ne","","",259],[11,"clone","","",259],[11,"fmt","","",260],[11,"eq","","",260],[11,"ne","","",260],[11,"clone","","",260],[11,"fmt","","",261],[11,"eq","","",261],[11,"ne","","",261],[11,"clone","","",261],[11,"id","syntax::ast","",262],[11,"span","","",262],[11,"id","","",263],[11,"span","","",263],[11,"from_mutbl","rustc::middle::mem_categorization","",259],[11,"from_borrow_kind","","",259],[11,"from_pointer_kind","","",259],[11,"inherit","","",259],[11,"is_mutable","","",259],[11,"is_immutable","","",259],[11,"to_user_str","","",259],[11,"new","","",264],[11,"cat_expr","","",264],[11,"cat_expr_autoderefd","","",264],[11,"cat_expr_unadjusted","","",264],[11,"cat_def","","",264],[11,"cat_rvalue_node","","",264],[11,"cat_rvalue","","",264],[11,"cat_field","","",264],[11,"cat_tup_field","","",264],[11,"cat_index","","Creates a cmt for an indexing operation (`[]`).",264],[11,"cat_slice_pattern","","Given a pattern P like: `[_, ..Q, _]`, where `vec_cmt` is the cmt for `P`, `slice_pat` is\nthe pattern `Q`, returns:",264],[11,"cat_imm_interior","","",264],[11,"cat_downcast","","",264],[11,"cat_pattern","","",264],[11,"guarantor","","Returns `self` after stripping away any owned pointer derefs or\ninterior content. The return value is basically the `cmt` which\ndetermines how long the value in `self` remains live.",261],[11,"freely_aliasable","","Returns `Some(_)` if this lvalue represents a freely aliasable pointer type.",261],[11,"upvar","","",261],[11,"descriptive_string","","",261],[11,"repr","","",261],[11,"repr","","",252],[11,"repr","","",254],[11,"repr","","",255],[11,"repr","rustc::middle::ty","",265],[11,"repr","rustc::middle::mem_categorization","",253],[11,"user_string","","",253],[11,"fmt","rustc::middle::privacy","",266],[11,"fmt","","",267],[11,"fmt","","",268],[11,"eq","","",268],[11,"ne","","",268],[11,"or","","",266],[11,"visit_expr","rustc::middle::reachable","",269],[11,"visit_item","","",269],[11,"fmt","rustc::middle::region","",132],[11,"decode","","",132],[11,"encode","","",132],[11,"hash","","",132],[11,"cmp","","",132],[11,"partial_cmp","","",132],[11,"lt","","",132],[11,"le","","",132],[11,"gt","","",132],[11,"ge","","",132],[11,"eq","","",132],[11,"ne","","",132],[11,"clone","","",132],[11,"fmt","","",133],[11,"decode","","",133],[11,"encode","","",133],[11,"hash","","",133],[11,"cmp","","",133],[11,"partial_cmp","","",133],[11,"lt","","",133],[11,"le","","",133],[11,"gt","","",133],[11,"ge","","",133],[11,"eq","","",133],[11,"ne","","",133],[11,"clone","","",133],[11,"new","","",133],[11,"to_code_extent","","",133],[11,"fmt","","",270],[11,"decode","","",270],[11,"encode","","",270],[11,"hash","","",270],[11,"cmp","","",270],[11,"partial_cmp","","",270],[11,"lt","","",270],[11,"le","","",270],[11,"gt","","",270],[11,"ge","","",270],[11,"eq","","",270],[11,"ne","","",270],[11,"clone","","",270],[11,"from_node_id","","Creates a scope that represents the dynamic extent associated\nwith `node_id`.",132],[11,"node_id","","Returns a node id associated with this scope.",132],[11,"map_id","","Maps this scope to a potentially new one according to the\nNodeId transformer `f_id`.",132],[11,"span","","Returns the span of this CodeExtent.  Note that in general the\nreturned span may not correspond to the span of any node id in\nthe AST.",132],[11,"fmt","","",271],[11,"eq","","",271],[11,"ne","","",271],[11,"fmt","","",272],[11,"eq","","",272],[11,"ne","","",272],[11,"fmt","","",273],[11,"eq","","",273],[11,"ne","","",273],[11,"fmt","","",274],[11,"each_encl_scope","","",275],[11,"each_var_scope","","",275],[11,"each_encl_free_region","","",275],[11,"each_rvalue_scope","","",275],[11,"each_terminating_scope","","",275],[11,"relate_free_regions","","",275],[11,"record_encl_scope","","",275],[11,"record_var_scope","","",275],[11,"record_rvalue_scope","","",275],[11,"mark_as_terminating_scope","","Records that a scope is a TERMINATING SCOPE. Whenever we create automatic temporaries --\ne.g. by an expression like `a().f` -- they will be freed within the innermost terminating\nscope.",275],[11,"opt_encl_scope","","Returns the narrowest scope that encloses `id`, if any.",275],[11,"encl_scope","","Returns the narrowest scope that encloses `id`, if any.",275],[11,"var_scope","","Returns the lifetime of the local variable `var_id`",275],[11,"temporary_scope","","Returns the scope when temp created by expr_id will be cleaned up",275],[11,"var_region","","Returns the lifetime of the variable `id`.",275],[11,"scopes_intersect","","",275],[11,"is_subscope_of","","Returns true if `subscope` is equal to or is lexically nested inside `superscope` and false\notherwise.",275],[11,"sub_free_region","","Determines whether two free regions have a subregion relationship\nby walking the graph encoded in `free_region_map`.  Note that\nit is possible that `sub != sup` and `sub <= sup` and `sup <= sub`\n(that is, the user can give two different names to the same lifetime).",275],[11,"is_subregion_of","","Determines whether one region is a subregion of another.  This is intended to run *after\ninference* and sadly the logic is somewhat duplicated with the code in infer.rs.",275],[11,"nearest_common_ancestor","","Finds the nearest common ancestor (if any) of two scopes.  That is, finds the smallest\nscope which is greater than or equal to both `scope_a` and `scope_b`.",275],[11,"visit_block","","",276],[11,"visit_item","","",276],[11,"visit_fn","","",276],[11,"visit_arm","","",276],[11,"visit_pat","","",276],[11,"visit_stmt","","",276],[11,"visit_expr","","",276],[11,"visit_local","","",276],[11,"fmt","rustc::middle::resolve_lifetime","",277],[11,"decode","","",277],[11,"encode","","",277],[11,"hash","","",277],[11,"eq","","",277],[11,"ne","","",277],[11,"clone","","",277],[11,"visit_item","","",278],[11,"visit_fn","","",278],[11,"visit_ty","","",278],[11,"visit_ty_method","","",278],[11,"visit_block","","",278],[11,"visit_lifetime_ref","","",278],[11,"visit_generics","","",278],[11,"visit_poly_trait_ref","","",278],[11,"fmt","","",279],[11,"visit_item","rustc::middle::stability","",280],[11,"visit_fn","","",280],[11,"visit_trait_item","","",280],[11,"visit_variant","","",280],[11,"visit_struct_field","","",280],[11,"visit_foreign_item","","",280],[11,"build","","Construct the stability index for a crate being compiled.",281],[11,"new","","",281],[11,"visit_item","","",282],[11,"visit_expr","","",282],[11,"visit_path","","",282],[11,"visit_pat","","",282],[11,"fmt","rustc::middle::subst","",67],[11,"hash","","",67],[11,"eq","","",67],[11,"ne","","",67],[11,"clone","","",67],[11,"fmt","","",283],[11,"hash","","",283],[11,"eq","","",283],[11,"ne","","",283],[11,"clone","","",283],[11,"new","","",67],[11,"new_type","","",67],[11,"new_trait","","",67],[11,"erased","","",67],[11,"empty","","",67],[11,"trans_empty","","",67],[11,"is_noop","","",67],[11,"type_for_def","","",67],[11,"has_regions_escaping_depth","","",67],[11,"self_ty","","",67],[11,"with_self_ty","","",67],[11,"erase_regions","","",67],[11,"regions","","Since ErasedRegions are only to be used in trans, most of the compiler can use this method\nto easily access the set of region substitutions.",67],[11,"mut_regions","","Since ErasedRegions are only to be used in trans, most of the compiler can use this method\nto easily access the set of region substitutions.",67],[11,"with_method","","",67],[11,"is_erased","","",283],[11,"fmt","","",284],[11,"decode","","",284],[11,"encode","","",284],[11,"hash","","",284],[11,"clone","","",284],[11,"eq","","",284],[11,"ne","","",284],[11,"cmp","","",284],[11,"partial_cmp","","",284],[11,"lt","","",284],[11,"le","","",284],[11,"gt","","",284],[11,"ge","","",284],[11,"all","","",284],[11,"to_uint","","",284],[11,"from_uint","","",284],[11,"decode","","",51],[11,"encode","","",51],[11,"hash","","",51],[11,"clone","","",51],[11,"eq","","",51],[11,"ne","","",51],[11,"fmt","","",51],[11,"empty","","",51],[11,"params_from_type","","",51],[11,"new","","`t` is the type space.\n`s` is the self space.\n`a` is the assoc space.\n`f` is the fn space.",51],[11,"push","","Appends `value` to the vector associated with `space`.",51],[11,"extend","","Appends `values` to the vector associated with `space`.",51],[11,"pop","","",51],[11,"truncate","","",51],[11,"replace","","",51],[11,"get_self","","",51],[11,"len","","",51],[11,"is_empty_in","","",51],[11,"get_slice","","",51],[11,"get_mut_slice","","",51],[11,"opt_get","","",51],[11,"get","","",51],[11,"iter","","",51],[11,"into_iter","","",51],[11,"iter_enumerated","","",51],[11,"as_slice","","",51],[11,"into_vec","","",51],[11,"all_vecs","","",51],[11,"all","","",51],[11,"any","","",51],[11,"is_empty","","",51],[11,"map","","",51],[11,"map_enumerated","","",51],[11,"map_move","","",51],[11,"split","","",51],[11,"with_vec","","",51],[11,"clone","","",285],[6,"Item","rustdoc::core",""],[11,"next","rustc::middle::subst","",285],[6,"Item","rustdoc::core",""],[6,"IntoIter","",""],[11,"into_iter","rustc::middle::subst","",51],[6,"Item","rustdoc::core",""],[6,"IntoIter","",""],[11,"tcx","rustc::middle::subst","",286],[11,"enter_region_binder","","",286],[11,"exit_region_binder","","",286],[11,"fold_region","","",286],[11,"fold_ty","","",286],[11,"clone","rustc::middle::traits::fulfill","",287],[11,"new","","",288],[11,"normalize_projection_type","","\"Normalize\" a projection type `<SomeType as SomeTrait>::X` by\ncreating a fresh type variable `$0` as well as a projection\npredicate `<SomeType as SomeTrait>::X == $0`. When the\ninference engine runs, it will attempt to find an impl of\n`SomeTrait` or a where clause that lets us unify `$0` with\nsomething concrete. If this fails, we'll unify `$0` with\n`projection_ty` again.",288],[11,"register_builtin_bound","","",288],[11,"register_region_obligation","","",288],[11,"register_predicate_obligation","","",288],[11,"region_obligations","","",288],[11,"select_all_or_error","","",288],[11,"select_new_obligations","","Attempts to select obligations that were registered since the call to a selection routine.\nThis is used by the type checker to eagerly attempt to resolve obligations in hopes of\ngaining type information. It'd be equally valid to use `select_where_possible` but it\nresults in `O(n^2)` performance (#18208).",288],[11,"select_where_possible","","",288],[11,"pending_obligations","","",288],[11,"repr","","",287],[11,"clone","rustc::middle::traits::project","",289],[11,"eq","","",290],[11,"ne","","",290],[11,"tcx","","",291],[11,"fold_ty","","",291],[11,"with","","",292],[11,"repr","","",293],[11,"repr","","",290],[11,"fold_with","","",292],[11,"repr","","",292],[11,"fmt","rustc::middle::traits::object_safety","",294],[11,"clone","","",294],[11,"repr","","",295],[11,"clone","rustc::middle::traits::select","",296],[11,"fmt","","",297],[11,"clone","","",298],[11,"fmt","","",298],[11,"eq","","",298],[11,"ne","","",298],[11,"fmt","","",299],[11,"new","","",300],[11,"intercrate","","",300],[11,"infcx","","",300],[11,"tcx","","",300],[11,"param_env","","",300],[11,"closure_typer","","",300],[11,"select","","Attempts to satisfy the obligation. If successful, this will affect the surrounding\ntype environment by performing unification.",300],[11,"evaluate_obligation","","Evaluates whether the obligation `obligation` can be satisfied (by any means).",300],[11,"evaluate_impl","","Evaluates whether the impl with id `impl_def_id` could be applied to the self type\n`obligation_self_ty`. This can be used either for trait or inherent impls.",300],[11,"repr","","",298],[11,"new","","",296],[6,"Item","rustdoc::core",""],[11,"next","core::option","",54],[11,"repr","rustc::middle::traits::select","",301],[11,"may_apply","","",302],[11,"filter_to_traits","rustc::middle::traits::util","",303],[6,"Item","rustdoc::core",""],[11,"next","rustc::middle::traits::util","",303],[6,"Item","rustdoc::core",""],[11,"next","rustc::middle::traits::util","",304],[11,"fmt","rustc::middle::traits","",305],[11,"fmt","","",306],[11,"repr","","",307],[11,"repr","","",308],[11,"repr","","",305],[11,"repr","","",309],[11,"repr","","",310],[11,"repr","","",306],[11,"repr","","",311],[11,"repr","","",312],[11,"repr","","",313],[11,"fmt","","",313],[11,"repr","rustc::middle::traits::project","",289],[11,"fmt","","",289],[11,"eq","rustc::middle::traits","",307],[11,"ne","","",307],[11,"clone","","",307],[11,"eq","","",314],[11,"ne","","",314],[11,"clone","","",314],[11,"eq","","",315],[11,"ne","","",315],[11,"clone","","",315],[11,"eq","","",316],[11,"ne","","",316],[11,"clone","","",316],[11,"fmt","","",311],[11,"clone","","",311],[11,"clone","","",313],[11,"clone","","",308],[11,"fmt","","",308],[11,"eq","","",305],[11,"ne","","",305],[11,"clone","","",305],[11,"clone","","",310],[11,"fmt","","",310],[11,"clone","","",309],[11,"fmt","","",309],[11,"clone","","",306],[11,"eq","","",306],[11,"ne","","",306],[11,"new","","",307],[11,"misc","","",307],[11,"with","","",307],[11,"new","","",314],[11,"misc","","",314],[11,"dummy","","",314],[11,"iter_nested","","",308],[11,"map_nested","","",308],[11,"map_move_nested","","",308],[11,"iter_nested","","",305],[11,"map_nested","","",305],[11,"map_move_nested","","",305],[11,"iter_nested","","",310],[11,"map_nested","","",310],[11,"map_move_nested","","",310],[11,"iter_nested","","",309],[11,"map_nested","","",309],[11,"map_move_nested","","",309],[11,"is_overflow","","",312],[11,"hash","rustc::middle::ty","",317],[11,"eq","","",317],[11,"ne","","",317],[11,"clone","","",317],[11,"fmt","","",318],[11,"clone","","",318],[11,"id","","",318],[11,"fmt","","",93],[11,"clone","","",93],[11,"def_id","","",93],[11,"name","","",93],[11,"container","","",93],[11,"as_opt_method","","",93],[11,"fmt","","",319],[11,"clone","","",319],[11,"def_id","","",319],[11,"fmt","","",92],[11,"clone","","",92],[11,"new","","",92],[11,"container_id","","",92],[11,"fmt","","",116],[11,"clone","","",116],[11,"fmt","","",320],[11,"hash","","",320],[11,"eq","","",320],[11,"ne","","",320],[11,"clone","","",320],[11,"fmt","","",97],[11,"clone","","",97],[11,"hash","","",321],[11,"eq","","",321],[11,"ne","","",321],[11,"encode","","",322],[11,"decode","","",322],[11,"eq","","",322],[11,"ne","","",322],[11,"clone","","",322],[11,"fmt","","",323],[11,"encode","","",323],[11,"decode","","",323],[11,"eq","","",323],[11,"ne","","",323],[11,"clone","","",323],[11,"fmt","","",324],[11,"clone","","",324],[11,"fmt","","",325],[11,"eq","","",325],[11,"ne","","",325],[11,"clone","","",325],[11,"fmt","","",326],[11,"clone","","",326],[11,"fmt","","",327],[11,"eq","","",327],[11,"ne","","",327],[11,"clone","","",327],[11,"fmt","","",328],[11,"partial_cmp","","",328],[11,"lt","","",328],[11,"le","","",328],[11,"gt","","",328],[11,"ge","","",328],[11,"eq","","",328],[11,"ne","","",328],[11,"decode","","",328],[11,"encode","","",328],[11,"clone","","",328],[11,"fmt","","",139],[11,"clone","","",139],[11,"fmt","","",329],[11,"clone","","",329],[11,"fmt","","",330],[11,"clone","","",330],[11,"clone","","",331],[11,"fmt","","",332],[11,"hash","","",332],[11,"eq","","",332],[11,"ne","","",332],[11,"clone","","",332],[11,"decode","","",333],[11,"encode","","",333],[11,"fmt","","",333],[11,"hash","","",333],[11,"eq","","",333],[11,"ne","","",333],[11,"clone","","",333],[11,"expr","","",332],[11,"autoobject","","",332],[11,"autoderef","","",332],[11,"clone","","",334],[11,"new","","",335],[11,"hash","","",336],[11,"cmp","","",336],[11,"partial_cmp","","",336],[11,"lt","","",336],[11,"le","","",336],[11,"gt","","",336],[11,"ge","","",336],[11,"clone","","",336],[11,"eq","","",336],[11,"ne","","",336],[11,"empty","","Returns an empty set of flags.",336],[11,"all","","Returns the set containing all flags.",336],[11,"bits","","Returns the raw value of the flags currently stored.",336],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",336],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",336],[11,"is_empty","","Returns `true` if no flags are currently stored.",336],[11,"is_all","","Returns `true` if all flags are currently set.",336],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",336],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",336],[11,"insert","","Inserts the specified flags in-place.",336],[11,"remove","","Removes the specified flags in-place.",336],[11,"toggle","","Toggles the specified flags in-place.",336],[6,"Output","rustdoc::core",""],[11,"bitor","rustc::middle::ty","Returns the union of the two sets of flags.",336],[6,"Output","rustdoc::core",""],[11,"bitxor","rustc::middle::ty","Returns the left flags, but with all the right flags toggled.",336],[6,"Output","rustdoc::core",""],[11,"bitand","rustc::middle::ty","Returns the intersection between the two sets of flags.",336],[6,"Output","rustdoc::core",""],[11,"sub","rustc::middle::ty","Returns the set difference of the two sets of flags.",336],[6,"Output","rustdoc::core",""],[11,"not","rustc::middle::ty","Returns the complement of this set of flags.",336],[11,"print_debug_stats","","",337],[11,"fmt","","",338],[11,"fmt","","",336],[11,"eq","","",338],[11,"hash","","",338],[11,"eq","","",339],[11,"hash","","",339],[11,"borrow","","",339],[11,"fmt","","",340],[11,"hash","","",340],[11,"eq","","",340],[11,"ne","","",340],[11,"clone","","",340],[11,"fmt","","",341],[11,"hash","","",341],[11,"eq","","",341],[11,"ne","","",341],[11,"clone","","",341],[11,"fmt","","",85],[11,"hash","","",85],[11,"eq","","",85],[11,"ne","","",85],[11,"clone","","",85],[11,"diverges","","",85],[11,"unwrap","","",85],[11,"diverges","","",55],[11,"hash","","",196],[11,"eq","","",196],[11,"ne","","",196],[11,"clone","","",196],[11,"inputs","","",55],[11,"input","","",55],[11,"output","","",55],[11,"variadic","","",55],[11,"fmt","","",342],[11,"hash","","",342],[11,"eq","","",342],[11,"ne","","",342],[11,"clone","","",342],[11,"fmt","","",343],[11,"decode","","",343],[11,"encode","","",343],[11,"hash","","",343],[11,"eq","","",343],[11,"ne","","",343],[11,"clone","","",343],[11,"fmt","","",72],[11,"decode","","",72],[11,"encode","","",72],[11,"hash","","",72],[11,"eq","","",72],[11,"ne","","",72],[11,"clone","","",72],[11,"fmt","","",344],[11,"hash","","",344],[11,"eq","","",344],[11,"ne","","",344],[11,"clone","","",344],[11,"decode","","",345],[11,"encode","","",345],[11,"fmt","","",345],[11,"hash","","",345],[11,"eq","","",345],[11,"ne","","",345],[11,"clone","","",345],[11,"fmt","","",138],[11,"decode","","",138],[11,"encode","","",138],[11,"clone","","",138],[11,"eq","","",138],[11,"ne","","",138],[11,"fmt","","",137],[11,"decode","","",137],[11,"encode","","",137],[11,"clone","","",137],[11,"eq","","",137],[11,"ne","","",137],[11,"is_bound","","",72],[11,"escapes_depth","","",72],[11,"fmt","","",131],[11,"decode","","",131],[11,"encode","","",131],[11,"hash","","",131],[11,"cmp","","",131],[11,"partial_cmp","","",131],[11,"lt","","",131],[11,"le","","",131],[11,"gt","","",131],[11,"ge","","",131],[11,"eq","","",131],[11,"ne","","",131],[11,"clone","","",131],[11,"fmt","","",134],[11,"decode","","",134],[11,"encode","","",134],[11,"hash","","",134],[11,"cmp","","",134],[11,"partial_cmp","","",134],[11,"lt","","",134],[11,"le","","",134],[11,"gt","","",134],[11,"ge","","",134],[11,"eq","","",134],[11,"ne","","",134],[11,"clone","","",134],[11,"fmt","","",346],[11,"hash","","",346],[11,"eq","","",346],[11,"ne","","",346],[11,"clone","","",346],[11,"fmt","","",347],[11,"hash","","",347],[11,"eq","","",347],[11,"ne","","",347],[11,"clone","","",347],[11,"principal_def_id","","",347],[11,"principal_trait_ref_with_self_ty","","Object types don't have a self-type specified. Therefore, when\nwe convert the principal trait-ref into a normal trait-ref,\nyou must give *some* self-type. A common choice is `mk_err()`\nor some skolemized type.",347],[11,"projection_bounds_with_self_ty","","",347],[11,"fmt","","",65],[11,"hash","","",65],[11,"eq","","",65],[11,"ne","","",65],[11,"clone","","",65],[11,"self_ty","","",55],[11,"def_id","","",55],[11,"substs","","",55],[11,"input_types","","",55],[11,"to_poly_trait_predicate","","",55],[11,"fmt","","",55],[11,"hash","","",55],[11,"eq","","",55],[11,"ne","","",55],[11,"clone","","",55],[11,"skip_binder","","Skips the binder and returns the \"bound\" value. This is a\nrisky thing to do because it's easy to get confused about\ndebruijn indices and the like. It is usually better to\ndischarge the binder using `no_late_bound_regions` or\n`replace_late_bound_regions` or something like\nthat. `skip_binder` is only valid when you are either\nextracting data that has nothing to do with bound regions, you\nare doing some sort of test that does not involve bound\nregions, or you are being very careful about your depth\naccounting.",55],[11,"eq","","",230],[11,"ne","","",230],[11,"clone","","",230],[11,"fmt","","",348],[11,"clone","","",348],[11,"fmt","","",349],[11,"clone","","",349],[11,"fmt","","",350],[11,"clone","","",350],[11,"fmt","","",66],[11,"clone","","",66],[11,"hash","","",66],[11,"eq","","",66],[11,"ne","","",66],[11,"fmt","","",63],[11,"clone","","",63],[11,"hash","","",63],[11,"eq","","",63],[11,"ne","","",63],[11,"fmt","","",64],[11,"hash","","",64],[11,"decode","","",64],[11,"eq","","",64],[11,"ne","","",64],[11,"encode","","",64],[11,"clone","","",64],[11,"to_usize","","",64],[11,"from_usize","","",64],[11,"hash","","",351],[11,"eq","","",351],[11,"ne","","",351],[11,"clone","","",351],[11,"hash","","",229],[11,"eq","","",229],[11,"ne","","",229],[11,"clone","","",229],[11,"hash","","",231],[11,"eq","","",231],[11,"ne","","",231],[11,"clone","","",231],[11,"hash","","",352],[11,"decode","","",352],[11,"encode","","",352],[11,"eq","","",352],[11,"ne","","",352],[11,"clone","","",352],[11,"hash","","",353],[11,"eq","","",353],[11,"ne","","",353],[11,"clone","","",353],[11,"fmt","","",354],[11,"hash","","",354],[11,"eq","","",354],[11,"ne","","",354],[11,"decode","","",354],[11,"encode","","",354],[11,"clone","","",354],[11,"fmt","","",355],[11,"hash","","",355],[11,"decode","","",355],[11,"encode","","",355],[11,"clone","","",355],[11,"eq","","",355],[11,"ne","","",355],[11,"fmt","","",351],[11,"fmt","","",229],[11,"fmt","","",231],[11,"fmt","","",352],[11,"fmt","","",196],[11,"fmt","","",353],[11,"fmt","","",230],[11,"fmt","","",356],[11,"clone","","",356],[11,"fmt","","",61],[11,"clone","","",61],[11,"fmt","","",71],[11,"clone","","",71],[11,"decode","","",71],[11,"encode","","",71],[11,"to_early_bound_region","","",71],[11,"fmt","","",357],[11,"clone","","",357],[11,"empty","","",357],[11,"is_empty","","",357],[11,"has_type_params","","",357],[11,"has_region_params","","",357],[11,"fmt","","",358],[11,"clone","","",358],[11,"empty","","",358],[11,"instantiate","","",358],[11,"instantiate_supertrait","","",358],[11,"fmt","","",74],[11,"hash","","",74],[11,"eq","","",74],[11,"ne","","",74],[11,"clone","","",74],[11,"subst_supertrait","","Performs a substituion suitable for going from a\npoly-trait-ref to supertraits that must hold if that\npoly-trait-ref holds. This is slightly different from a normal\nsubstitution in terms of what happens with bound regions.  See\nlengthy comment below for details.",74],[11,"fmt","","",75],[11,"hash","","",75],[11,"eq","","",75],[11,"ne","","",75],[11,"clone","","",75],[11,"def_id","","",75],[11,"input_types","","",75],[11,"self_ty","","",75],[11,"def_id","","",55],[11,"fmt","","",76],[11,"hash","","",76],[11,"eq","","",76],[11,"ne","","",76],[11,"clone","","",76],[11,"fmt","","",77],[11,"hash","","",77],[11,"eq","","",77],[11,"ne","","",77],[11,"clone","","",77],[11,"fmt","","",78],[11,"hash","","",78],[11,"eq","","",78],[11,"ne","","",78],[11,"clone","","",78],[11,"item_name","","",55],[11,"sort_key","","",55],[11,"fmt","","",79],[11,"hash","","",79],[11,"eq","","",79],[11,"ne","","",79],[11,"clone","","",79],[11,"sort_key","","",79],[11,"to_poly_trait_ref","alloc::rc","",53],[11,"to_poly_trait_ref","rustc::middle::ty","",55],[11,"to_poly_trait_ref","","",55],[11,"as_predicate","alloc::rc","",53],[11,"as_predicate","rustc::middle::ty","",55],[11,"as_predicate","","",55],[11,"as_predicate","","",55],[11,"as_predicate","","",55],[11,"as_predicate","","",55],[11,"walk_tys","","Iterates over the types in this predicate. Note that in all\ncases this is skipping over a binder, so late-bound regions\nwith depth 0 are bound by the predicate.",74],[11,"has_escaping_regions","","",74],[11,"to_opt_poly_trait_ref","","",74],[11,"fmt","","",359],[11,"clone","","",359],[11,"empty","","",359],[11,"has_escaping_regions","","",359],[11,"is_empty","","",359],[11,"new","","",65],[11,"self_ty","","",65],[11,"input_types","","",65],[11,"clone","","",360],[11,"with_caller_bounds","","",360],[11,"for_item","","",360],[11,"fmt","","",361],[11,"clone","","",361],[11,"clone","","",362],[11,"decode","","",265],[11,"encode","","",265],[11,"fmt","","",265],[11,"eq","","",265],[11,"ne","","",265],[11,"clone","","",265],[11,"trait_did","","",265],[11,"mk_substs","","",337],[11,"mk_bare_fn","","",337],[11,"mk_region","","",337],[11,"closure_kind","","",337],[11,"closure_type","","",337],[11,"type_parameter_def","","",337],[11,"walk","","Iterator that walks `self` and any types reachable from\n`self`, in depth-first order. Note that just walks the types\nthat appear in `self`, it does not descend into the fields of\nstructs or variants. For example:",338],[11,"walk_children","","Iterator that walks types reachable from `self`, in\ndepth-first order. Note that this is a shallow walk. For\nexample:",338],[11,"as_opt_param_ty","","",338],[11,"is_param","","",338],[11,"new","","",342],[11,"for_self","","",342],[11,"for_def","","",342],[11,"to_ty","","",342],[11,"is_self","","",342],[11,"empty","","",362],[11,"is_noop","","",362],[11,"empty","","",66],[11,"clone","","",363],[11,"when","","",363],[11,"intersects","","",363],[11,"owns_managed","","",363],[11,"owns_owned","","",363],[11,"is_sized","","",363],[11,"interior_param","","",363],[11,"interior_unsafe","","",363],[11,"interior_unsized","","",363],[11,"needs_drop","","",363],[11,"owned_pointer","","Includes only those bits that still apply when indirected through a `Box` pointer",363],[11,"reference","","Includes only those bits that still apply when indirected through a reference (`&`)",363],[11,"managed_pointer","","Includes only those bits that still apply when indirected through a managed pointer (`@`)",363],[11,"unsafe_pointer","","Includes only those bits that still apply when indirected through an unsafe pointer (`*`)",363],[11,"union","","",363],[11,"has_dtor","","",363],[6,"Output","rustdoc::core",""],[11,"bitor","rustc::middle::ty","",363],[6,"Output","rustdoc::core",""],[11,"bitand","rustc::middle::ty","",363],[6,"Output","rustdoc::core",""],[11,"sub","rustc::middle::ty","",363],[11,"fmt","","",363],[11,"fmt","","",364],[11,"eq","","",364],[11,"ne","","",364],[11,"cmp","","",364],[11,"partial_cmp","","",364],[11,"lt","","",364],[11,"le","","",364],[11,"gt","","",364],[11,"ge","","",364],[11,"repr","","",350],[11,"clone","","",100],[11,"from_ast_variant","","Creates a new VariantInfo from the corresponding ast representation.",100],[11,"is_present","","",365],[11,"has_drop_flag","","",365],[11,"clone","","",366],[11,"to_string","","",323],[11,"from_mutbl","","",345],[11,"to_mutbl_lossy","","Returns a mutability `m` such that an `&m T` pointer could be used to obtain this borrow\nkind. Because borrow kinds are richer than mutabilities, we sometimes have to pick a\nmutability that is stronger than necessary so that it at least *would permit* the borrow in\nquestion.",345],[11,"to_user_str","","",345],[11,"is_method_call","","",337],[11,"upvar_capture","","",337],[11,"node_ty","","",360],[11,"expr_ty_adjusted","","",360],[11,"node_method_ty","","",360],[11,"node_method_origin","","",360],[11,"adjustments","","",360],[11,"is_method_call","","",360],[11,"temporary_scope","","",360],[11,"upvar_capture","","",360],[11,"type_moves_by_default","","",360],[11,"param_env","","",360],[11,"closure_kind","","",360],[11,"closure_type","","",360],[11,"closure_upvars","","",360],[11,"fmt","","",367],[11,"eq","","",367],[11,"ne","","",367],[11,"clone","","",367],[11,"decode","","",136],[11,"encode","","",136],[11,"clone","","",136],[11,"is_identity","","",324],[11,"is_identity","","",326],[11,"new","","",343],[11,"shifted","","",343],[11,"repr","","",324],[11,"repr","","",325],[11,"repr","","",326],[11,"repr","","",327],[11,"repr","","",347],[11,"repr","","",74],[11,"repr","","",334],[11,"has_regions_escaping_depth","rustc::middle::subst","",67],[11,"has_regions_escaping_depth","","",51],[11,"has_regions_escaping_depth","rustc::middle::ty","",361],[11,"has_regions_escaping_depth","","",72],[11,"has_regions_escaping_depth","","",358],[11,"has_regions_escaping_depth","","",74],[11,"has_regions_escaping_depth","","",65],[11,"has_regions_escaping_depth","rustc::middle::subst","",283],[11,"has_regions_escaping_depth","rustc::middle::ty","",55],[11,"has_regions_escaping_depth","","",76],[11,"has_regions_escaping_depth","","",75],[11,"has_regions_escaping_depth","","",77],[11,"has_regions_escaping_depth","","",78],[11,"has_regions_escaping_depth","","",79],[11,"repr","","",78],[11,"has_projection_types","collections::vec","",50],[11,"has_projection_types","rustc::middle::subst","",51],[11,"has_projection_types","rustc::middle::ty","",341],[11,"has_projection_types","","",366],[11,"has_projection_types","","",359],[11,"has_projection_types","","",74],[11,"has_projection_types","","",75],[11,"has_projection_types","","",76],[11,"has_projection_types","","",72],[11,"has_projection_types","","",77],[11,"has_projection_types","","",78],[11,"has_projection_types","","",79],[11,"has_projection_types","","",65],[11,"has_projection_types","rustc::middle::subst","",67],[11,"has_projection_types","core::option","",54],[11,"has_projection_types","alloc::rc","",53],[11,"has_projection_types","alloc::boxed","",368],[11,"has_projection_types","rustc::middle::ty","",55],[11,"has_projection_types","","",85],[11,"has_projection_types","","",196],[11,"has_projection_types","","",317],[11,"has_projection_types","","",340],[11,"references_error","","",55],[11,"references_error","alloc::rc","",53],[11,"references_error","rustc::middle::ty","",75],[11,"references_error","","",78],[11,"references_error","","",65],[11,"references_error","","",74],[11,"references_error","","",77],[11,"references_error","","",76],[11,"references_error","","",72],[11,"repr","","",341],[11,"repr","","",366],[11,"repr","","",317],[11,"repr","","",360],[11,"repr","","",356],[11,"fold_with","core::option","",54],[11,"fold_with","alloc::rc","",53],[11,"fold_with","alloc::boxed","",368],[11,"fold_with","collections::vec","",50],[11,"fold_with","rustc::middle::ty","",55],[11,"fold_with","syntax::owned_slice","",56],[11,"fold_with","rustc::middle::subst","",51],[11,"fold_with","rustc::middle::ty","",340],[11,"fold_with","","",341],[11,"fold_with","","",320],[11,"fold_with","","",85],[11,"fold_with","","",196],[11,"fold_with","","",65],[11,"fold_with","","",317],[11,"fold_with","","",72],[11,"fold_with","rustc::middle::subst","",67],[11,"fold_with","rustc::middle::ty","",362],[11,"fold_with","","",327],[11,"fold_with","","",139],[11,"fold_with","","",334],[11,"fold_with","collections::enum_set","",369],[11,"fold_with","rustc::middle::ty","",63],[11,"fold_with","","",66],[11,"fold_with","","",61],[11,"fold_with","","",356],[11,"fold_with","","",71],[11,"fold_with","","",357],[11,"fold_with","","",358],[11,"fold_with","","",74],[11,"fold_with","","",78],[11,"fold_with","","",79],[11,"fold_with","","",359],[11,"fold_with","","",325],[11,"fold_with","rustc::middle::traits","",307],[11,"fold_with","","",305],[11,"fold_with","","",310],[11,"fold_with","","",309],[11,"fold_with","","",308],[11,"fold_with","","",306],[11,"fold_with","rustc::middle::ty","",76],[11,"fold_with","","",75],[11,"fold_with","","",77],[11,"fold_with","","",366],[11,"fold_with","","",360],[11,"tcx","rustc::middle::ty_fold","",370],[11,"fold_ty","","",370],[11,"new","","",371],[11,"tcx","","",371],[11,"enter_region_binder","","",371],[11,"exit_region_binder","","",371],[11,"fold_region","","",371],[11,"tcx","","",372],[11,"fold_region","","",372],[11,"new","rustc::middle::ty_walk","",373],[11,"skip_current_subtree","","Skips the subtree of types corresponding to the last type\nreturned by `next()`.",373],[6,"Item","rustdoc::core",""],[11,"next","rustc::middle::ty_walk","",373],[11,"visit_foreign_item","rustc::middle::weak_lang_items","",374],[11,"from_i64","rustc::metadata::common","",375],[11,"from_u64","","",375],[11,"eq","","",375],[11,"ne","","",375],[11,"fmt","","",376],[11,"clone","","",376],[11,"fmt","rustc::metadata::tydecode","",377],[11,"clone","rustc::metadata::encoder","",378],[11,"visit_expr","","",379],[11,"visit_item","","",379],[11,"visit_foreign_item","","",379],[11,"visit_item","","",380],[11,"eq","rustc::metadata::decoder","",381],[11,"ne","","",381],[11,"fmt","","",382],[11,"clone","","",382],[11,"clone","","",383],[11,"visit_item","rustc::metadata::creader","",384],[11,"as_slice","","",385],[11,"new","","",384],[11,"read_crates","","",384],[11,"read_exported_macros","","Read exported macros.",384],[11,"find_plugin_registrar","","Look for a plugin registrar. Returns library path and symbol name.",384],[11,"clone","rustc::metadata::cstore","",386],[11,"eq","","",386],[11,"ne","","",386],[11,"fmt","","",386],[11,"from_i64","","",387],[11,"from_u64","","",387],[11,"eq","","",387],[11,"ne","","",387],[11,"clone","","",387],[11,"clone","","",388],[11,"eq","","",388],[11,"ne","","",388],[11,"new","","",389],[11,"next_crate_num","","",389],[11,"get_crate_data","","",389],[11,"get_crate_hash","","",389],[11,"set_crate_data","","",389],[11,"iter_crate_data","","",389],[11,"iter_crate_data_origins","","Like `iter_crate_data`, but passes source paths (if available) as well.",389],[11,"add_used_crate_source","","",389],[11,"get_used_crate_source","","",389],[11,"reset","","",389],[11,"get_used_crates","","",389],[11,"add_used_library","","",389],[11,"get_used_libraries","","",389],[11,"add_used_link_args","","",389],[11,"get_used_link_args","","",389],[11,"add_extern_mod_stmt_cnum","","",389],[11,"find_extern_mod_stmt_cnum","","",389],[11,"data","","",57],[11,"name","","",57],[11,"hash","","",57],[11,"as_slice","","",390],[11,"maybe_load_library_crate","rustc::metadata::loader","",391],[11,"load_library_crate","","",391],[11,"report_load_errs","","",391],[11,"as_slice","","",392],[11,"for_each_lib_search_path","rustc::metadata::filesearch","",393],[11,"get_lib_path","","",393],[11,"search","","",393],[11,"new","","",393],[11,"get_dylib_search_paths","","",393],[11,"get_tools_search_paths","","",393],[11,"visit_item","rustc::metadata::macro_import","",394],[11,"visit_mac","","",394],[11,"eq","rustc::session::config","",395],[11,"ne","","",395],[11,"clone","","",395],[11,"eq","","",396],[11,"ne","","",396],[11,"clone","","",396],[11,"cmp","","",397],[11,"partial_cmp","","",397],[11,"lt","","",397],[11,"le","","",397],[11,"gt","","",397],[11,"ge","","",397],[11,"eq","","",397],[11,"ne","","",397],[11,"clone","","",397],[11,"clone","","",398],[11,"clone","","",399],[11,"eq","","",400],[11,"ne","","",400],[11,"clone","","",400],[11,"clone","","",401],[11,"path","","",401],[11,"temp_path","","",401],[11,"with_extension","","",401],[11,"filestem","","",401],[11,"eq","","",402],[11,"ne","","",402],[11,"fmt","","",403],[11,"hash","","",403],[11,"cmp","","",403],[11,"clone","","",403],[11,"partial_cmp","","",403],[11,"lt","","",403],[11,"le","","",403],[11,"gt","","",403],[11,"ge","","",403],[11,"eq","","",403],[11,"ne","","",403],[11,"clone","","",404],[11,"is_empty","","",404],[11,"clone","","",405],[11,"clone","","",406],[11,"fmt","","",407],[11,"eq","","",407],[11,"ne","","",407],[11,"clone","","",407],[11,"eq","","",408],[11,"ne","","",408],[11,"clone","","",408],[11,"is_stable","","",408],[11,"fmt","","",403],[11,"fmt","rustc::session::search_paths","",409],[11,"clone","","",409],[11,"fmt","","",410],[11,"clone","","",410],[11,"eq","","",410],[11,"ne","","",410],[11,"new","","",409],[11,"add_path","","",409],[11,"iter","","",409],[6,"Item","rustdoc::core",""],[11,"next","rustc::session::search_paths","",411],[11,"span_fatal","rustc::session","",412],[11,"span_fatal_with_code","","",412],[11,"fatal","","",412],[11,"span_err","","",412],[11,"span_err_with_code","","",412],[11,"err","","",412],[11,"err_count","","",412],[11,"has_errors","","",412],[11,"abort_if_errors","","",412],[11,"span_warn","","",412],[11,"span_warn_with_code","","",412],[11,"warn","","",412],[11,"opt_span_warn","","",412],[11,"span_note","","",412],[11,"span_end_note","","",412],[11,"span_help","","",412],[11,"fileline_note","","",412],[11,"fileline_help","","",412],[11,"note","","",412],[11,"help","","",412],[11,"opt_span_bug","","",412],[11,"span_bug","","",412],[11,"bug","","",412],[11,"span_unimpl","","",412],[11,"unimpl","","",412],[11,"add_lint","","",412],[11,"next_node_id","","",412],[11,"reserve_node_ids","","",412],[11,"diagnostic","","",412],[11,"codemap","","",412],[11,"impossible_case","","",412],[11,"verbose","","",412],[11,"time_passes","","",412],[11,"count_llvm_insns","","",412],[11,"count_type_sizes","","",412],[11,"time_llvm_passes","","",412],[11,"trans_stats","","",412],[11,"meta_stats","","",412],[11,"asm_comments","","",412],[11,"no_verify","","",412],[11,"borrowck_stats","","",412],[11,"print_llvm_passes","","",412],[11,"lto","","",412],[11,"no_landing_pads","","",412],[11,"unstable_options","","",412],[11,"print_enum_sizes","","",412],[11,"sysroot","","",412],[11,"target_filesearch","","",412],[11,"host_filesearch","","",412],[11,"args","rustc::plugin::registry","Get the plugin's arguments, if any.",413],[11,"register_syntax_extension","","Register a syntax extension of any kind.",413],[11,"register_macro","","Register a macro of the usual kind.",413],[11,"register_lint_pass","","Register a compiler lint pass.",413],[11,"register_lint_group","","Register a lint group.",413],[11,"visit_item","rustc::plugin::build","",414],[11,"fmt","rustc::lint","",415],[11,"name_lower","","Get the lint's name, with ASCII letters converted to lowercase.",415],[11,"clone","","",416],[11,"eq","","",416],[11,"hash","","",416],[11,"of","","Get the `LintId` for a `Lint`.",416],[11,"as_str","","Get the name of the lint.",416],[11,"fmt","","",417],[11,"cmp","","",417],[11,"partial_cmp","","",417],[11,"lt","","",417],[11,"le","","",417],[11,"gt","","",417],[11,"ge","","",417],[11,"eq","","",417],[11,"ne","","",417],[11,"clone","","",417],[11,"as_str","","Convert a level to a lower-case string.",417],[11,"from_str","","Convert a lower-case string to a level.",417],[11,"eq","","",418],[11,"ne","","",418],[11,"clone","","",418],[11,"get_lints","rustc::lint::builtin","",419],[11,"new","rustc::lint::context","",420],[11,"get_lints","","",420],[11,"get_lint_groups","","",420],[11,"register_pass","","",420],[11,"register_group","","",420],[11,"register_renamed","","",420],[11,"process_command_line","","",420],[11,"sess","","Get the overall compiler `Session` object.",421],[11,"current_level","","Get the level of `lint` at the current position of the lint\ntraversal.",421],[11,"lint","","Emit a lint at the appropriate level, with no associated span.",421],[11,"span_lint","","Emit a lint at the appropriate level, for a particular span.",421],[11,"visit_item","","",421],[11,"visit_foreign_item","","",421],[11,"visit_pat","","",421],[11,"visit_expr","","",421],[11,"visit_stmt","","",421],[11,"visit_fn","","",421],[11,"visit_ty_method","","",421],[11,"visit_struct_def","","",421],[11,"visit_struct_field","","",421],[11,"visit_variant","","",421],[11,"visit_ty","","",421],[11,"visit_ident","","",421],[11,"visit_mod","","",421],[11,"visit_local","","",421],[11,"visit_block","","",421],[11,"visit_arm","","",421],[11,"visit_decl","","",421],[11,"visit_expr_post","","",421],[11,"visit_generics","","",421],[11,"visit_trait_item","","",421],[11,"visit_opt_lifetime_ref","","",421],[11,"visit_lifetime_ref","","",421],[11,"visit_lifetime_def","","",421],[11,"visit_explicit_self","","",421],[11,"visit_mac","","",421],[11,"visit_path","","",421],[11,"visit_attribute","","",421],[11,"visit_id","","",421],[11,"get_lints","","",422],[11,"check_item","","",422],[11,"fmt","rustc::util::common","",423],[11,"clone","","",423],[11,"drop","","",424],[11,"visit_expr","","",425],[11,"visit_expr","","",426],[11,"repr","core::option","",54],[11,"repr","syntax::ptr","",52],[11,"repr","core::result","",240],[11,"repr","alloc::rc","",53],[11,"repr","alloc::boxed","",368],[11,"repr","syntax::owned_slice","",56],[11,"repr","collections::vec","",50],[11,"user_string","","",50],[11,"repr","rustc::middle::def","",130],[11,"user_string","rustc::middle::ty","",347],[11,"repr","","",61],[11,"repr","","",71],[11,"repr","","",338],[11,"repr","","",320],[11,"repr","rustc::middle::subst","",67],[11,"repr","","",51],[11,"repr","rustc::middle::ty","",362],[11,"repr","rustc::middle::subst","",283],[11,"repr","collections::enum_set","",369],[11,"repr","rustc::middle::ty","",66],[11,"repr","","",65],[11,"repr","","",427],[11,"repr","syntax::ast","",90],[11,"repr","","",262],[11,"repr","","",103],[11,"user_string","","",103],[11,"repr","","",94],[11,"repr","","",428],[11,"repr","","",69],[11,"repr","syntax::codemap","",429],[11,"repr","syntax::ast","",263],[11,"repr","rustc::middle::ty","",134],[11,"repr","","",72],[11,"user_string","","",72],[11,"repr","","",131],[11,"repr","rustc::middle::region","",132],[11,"repr","","",133],[11,"repr","syntax::ast","",128],[11,"repr","rustc::middle::ty","",361],[11,"repr","","",357],[11,"repr","","",358],[11,"repr","","",359],[11,"repr","","",322],[11,"repr","","",323],[11,"repr","","",92],[11,"repr","syntax::ast","",107],[11,"user_string","","",107],[11,"repr","","",106],[11,"repr","","",83],[11,"repr","","",98],[11,"repr","rustc::middle::ty","",340],[11,"repr","","",196],[11,"repr","","",85],[11,"repr","","",331],[11,"repr","","",139],[11,"repr","","",329],[11,"repr","","",330],[11,"repr","","",64],[11,"user_string","","",64],[11,"repr","syntax::codemap","",102],[11,"user_string","alloc::rc","",53],[11,"user_string","rustc::middle::ty","",66],[11,"repr","","",63],[11,"user_string","collections::enum_set","",369],[11,"user_string","rustc::middle::ty","",55],[11,"user_string","","",65],[11,"user_string","syntax::ast","",106],[11,"repr","syntax::abi","",430],[11,"user_string","","",430],[11,"repr","rustc::middle::ty","",344],[11,"repr","syntax::ast","",109],[11,"repr","rustc::middle::ty","",345],[11,"repr","","",137],[11,"repr","","",138],[11,"repr","","",229],[11,"repr","","",231],[11,"repr","","",352],[11,"repr","","",351],[11,"repr","","",230],[11,"repr","syntax::ast","",431],[11,"repr","","",432],[11,"repr","","",232],[11,"repr","rustc::middle::ty","",367],[11,"user_string","","",342],[11,"repr","","",342],[11,"repr","","",55],[11,"repr","std::collections::hash::map","",433],[11,"repr","rustc::middle::ty","",77],[11,"user_string","","",77],[11,"repr","","",76],[11,"user_string","","",76],[11,"repr","","",75],[11,"user_string","","",75],[11,"user_string","","",78],[11,"repr","","",79],[11,"user_string","","",79],[11,"user_string","","",74],[11,"default","rustc::util::nodemap","",434],[11,"write","","",434],[11,"finish","","",434],[11,"new","rustc::util::snapshot_vec","",435],[11,"record","","",435],[11,"push","","",435],[11,"get","","",435],[11,"get_mut","","Returns a mutable pointer into the vec; whatever changes you make here cannot be undone\nautomatically, so you should be sure call `record()` with some sort of suitable undo\naction.",435],[11,"set","","Updates the element at the given index. The old value will saved (and perhaps restored) if\na snapshot is active.",435],[11,"start_snapshot","","",435],[11,"actions_since_snapshot","","",435],[11,"rollback_to","","",435],[11,"commit","","Commits all changes since the last snapshot. Of course, they\ncan still be undone if there is a snapshot further out.",435],[11,"input","rustc_back::sha2","",436],[11,"reset","","",436],[11,"zero_until","","",436],[11,"next","","",436],[11,"full_buffer","","",436],[11,"position","","",436],[11,"remaining","","",436],[11,"size","","",436],[11,"new","","Construct a new instance of a SHA-256 digest.",437],[11,"input","","",437],[11,"result","","",437],[11,"reset","","",437],[11,"output_bits","","",437],[11,"open","rustc_llvm::archive_ro","Opens a static archive for read-only purposes. This is more optimized\nthan the `open` method because it uses LLVM's internal `Archive` class\nrather than shelling out to `ar` for everything.",438],[11,"read","","Reads a file in the archive",438],[11,"drop","","",438],[11,"describe","rustc_llvm::diagnostic","",439],[11,"unpack","","",440],[11,"eq","rustc_llvm","",441],[11,"ne","","",441],[11,"fmt","","",442],[11,"hash","","",443],[11,"cmp","","",443],[11,"partial_cmp","","",443],[11,"lt","","",443],[11,"le","","",443],[11,"gt","","",443],[11,"ge","","",443],[11,"clone","","",443],[11,"eq","","",443],[11,"ne","","",443],[11,"empty","","Returns an empty set of flags.",443],[11,"all","","Returns the set containing all flags.",443],[11,"bits","","Returns the raw value of the flags currently stored.",443],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",443],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",443],[11,"is_empty","","Returns `true` if no flags are currently stored.",443],[11,"is_all","","Returns `true` if all flags are currently set.",443],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",443],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",443],[11,"insert","","Inserts the specified flags in-place.",443],[11,"remove","","Removes the specified flags in-place.",443],[11,"toggle","","Toggles the specified flags in-place.",443],[6,"Output","rustdoc::core",""],[11,"bitor","rustc_llvm","Returns the union of the two sets of flags.",443],[6,"Output","rustdoc::core",""],[11,"bitxor","rustc_llvm","Returns the left flags, but with all the right flags toggled.",443],[6,"Output","rustdoc::core",""],[11,"bitand","rustc_llvm","Returns the intersection between the two sets of flags.",443],[6,"Output","rustdoc::core",""],[11,"sub","rustc_llvm","Returns the set difference of the two sets of flags.",443],[6,"Output","rustdoc::core",""],[11,"not","rustc_llvm","Returns the complement of this set of flags.",443],[11,"apply_llfn","","",443],[11,"apply_callsite","","",443],[11,"apply_llfn","","",444],[11,"apply_callsite","","",444],[11,"apply_llfn","","",445],[11,"apply_callsite","","",445],[11,"new","","",446],[11,"arg","","",446],[11,"ret","","",446],[11,"apply_llfn","","",446],[11,"apply_callsite","","",446],[11,"fmt","","",447],[11,"eq","","",447],[11,"ne","","",447],[11,"clone","","",448],[11,"eq","","",448],[11,"ne","","",448],[11,"eq","","",449],[11,"ne","","",449],[11,"drop","","",450],[11,"new","","",451],[11,"drop","","",451],[11,"drop","","",452],[4,"Input","rustdoc::core",""],[13,"File","","Load source from file",119],[13,"Str","","The string is the source",119],[3,"SearchPaths","",""],[3,"DocContext","",""],[12,"krate","","",453],[12,"maybe_typed","","",453],[12,"input","","",453],[12,"external_paths","","",453],[12,"external_traits","","",453],[12,"external_typarams","","",453],[12,"inlined","","",453],[12,"populated_crate_impls","","",453],[3,"CrateAnalysis","",""],[12,"exported_items","","",454],[12,"public_items","","",454],[12,"external_paths","","",454],[12,"external_traits","","",454],[12,"external_typarams","","",454],[12,"inlined","","",454],[4,"MaybeTyped","","Are we generating documentation (`Typed`) or tests (`NotTyped`)?"],[13,"Typed","","",455],[13,"NotTyped","","",455],[5,"run_core","",""],[6,"ExternalPaths","",""],[6,"Externs","",""],[11,"sess","","",453],[11,"tcx_opt","","",453],[11,"tcx","","",453],[0,"doctree","rustdoc","This module is used to store stuff from Rust's AST in a more convenient\nmanner (and with prettier names) before cleaning."],[3,"Module","rustdoc::doctree",""],[12,"name","","",456],[12,"attrs","","",456],[12,"where_outer","","",456],[12,"where_inner","","",456],[12,"extern_crates","","",456],[12,"imports","","",456],[12,"structs","","",456],[12,"enums","","",456],[12,"fns","","",456],[12,"mods","","",456],[12,"id","","",456],[12,"typedefs","","",456],[12,"statics","","",456],[12,"constants","","",456],[12,"traits","","",456],[12,"vis","","",456],[12,"stab","","",456],[12,"impls","","",456],[12,"def_traits","","",456],[12,"foreigns","","",456],[12,"macros","","",456],[12,"is_crate","","",456],[3,"Struct","",""],[12,"vis","","",457],[12,"stab","","",457],[12,"id","","",457],[12,"struct_type","","",457],[12,"name","","",457],[12,"generics","","",457],[12,"attrs","","",457],[12,"fields","","",457],[12,"whence","","",457],[3,"Enum","",""],[12,"vis","","",458],[12,"stab","","",458],[12,"variants","","",458],[12,"generics","","",458],[12,"attrs","","",458],[12,"id","","",458],[12,"whence","","",458],[12,"name","","",458],[3,"Variant","",""],[12,"name","","",459],[12,"attrs","","",459],[12,"kind","","",459],[12,"id","","",459],[12,"vis","","",459],[12,"stab","","",459],[12,"whence","","",459],[3,"Function","",""],[12,"decl","","",460],[12,"attrs","","",460],[12,"id","","",460],[12,"name","","",460],[12,"vis","","",460],[12,"stab","","",460],[12,"unsafety","","",460],[12,"whence","","",460],[12,"generics","","",460],[3,"Typedef","",""],[12,"ty","","",461],[12,"gen","","",461],[12,"name","","",461],[12,"id","","",461],[12,"attrs","","",461],[12,"whence","","",461],[12,"vis","","",461],[12,"stab","","",461],[3,"Static","",""],[12,"type_","","",462],[12,"mutability","","",462],[12,"expr","","",462],[12,"name","","",462],[12,"attrs","","",462],[12,"vis","","",462],[12,"stab","","",462],[12,"id","","",462],[12,"whence","","",462],[3,"Constant","",""],[12,"type_","","",463],[12,"expr","","",463],[12,"name","","",463],[12,"attrs","","",463],[12,"vis","","",463],[12,"stab","","",463],[12,"id","","",463],[12,"whence","","",463],[3,"Trait","",""],[12,"unsafety","","",464],[12,"name","","",464],[12,"items","","",464],[12,"generics","","",464],[12,"bounds","","",464],[12,"attrs","","",464],[12,"id","","",464],[12,"whence","","",464],[12,"vis","","",464],[12,"stab","","",464],[3,"Impl","",""],[12,"unsafety","","",465],[12,"polarity","","",465],[12,"generics","","",465],[12,"trait_","","",465],[12,"for_","","",465],[12,"items","","",465],[12,"attrs","","",465],[12,"whence","","",465],[12,"vis","","",465],[12,"stab","","",465],[12,"id","","",465],[3,"DefaultImpl","",""],[12,"unsafety","","",466],[12,"trait_","","",466],[12,"id","","",466],[3,"Macro","",""],[12,"name","","",467],[12,"id","","",467],[12,"attrs","","",467],[12,"whence","","",467],[12,"stab","","",467],[3,"ExternCrate","",""],[12,"name","","",468],[12,"path","","",468],[12,"vis","","",468],[12,"attrs","","",468],[12,"whence","","",468],[3,"Import","",""],[12,"id","","",469],[12,"vis","","",469],[12,"attrs","","",469],[12,"node","","",469],[12,"whence","","",469],[4,"StructType","",""],[13,"Plain","","A normal struct",470],[13,"Tuple","","A tuple struct",470],[13,"Newtype","","A newtype struct (tuple struct with one element)",470],[13,"Unit","","A unit struct",470],[4,"TypeBound","",""],[13,"RegionBound","","",471],[13,"TraitBound","","",471],[5,"struct_type_from_def","",""],[11,"new","","",456],[11,"decode","","",470],[11,"encode","","",470],[11,"clone","","",470],[11,"fmt","","",470],[11,"fmt","","",462],[0,"fold","rustdoc",""],[8,"DocFolder","rustdoc::fold",""],[11,"fold_item","","",472],[11,"fold_item_recur","","don't override!",472],[11,"fold_mod","","",472],[11,"fold_crate","","",472],[0,"html","rustdoc",""],[0,"highlight","rustdoc::html","Basic html highlighting functionality"],[5,"highlight","rustdoc::html::highlight","Highlights some source code, returning the HTML output."],[0,"escape","rustdoc::html","HTML Escaping"],[3,"Escape","rustdoc::html::escape","Wrapper struct which will emit the HTML-escaped version of the contained\nstring when passed to a format string."],[11,"fmt","","",473],[0,"item_type","rustdoc::html","Item types."],[4,"ItemType","rustdoc::html::item_type","Item type. Corresponds to `clean::ItemEnum` variants."],[13,"Module","","",474],[13,"ExternCrate","","",474],[13,"Import","","",474],[13,"Struct","","",474],[13,"Enum","","",474],[13,"Function","","",474],[13,"Typedef","","",474],[13,"Static","","",474],[13,"Trait","","",474],[13,"Impl","","",474],[13,"TyMethod","","",474],[13,"Method","","",474],[13,"StructField","","",474],[13,"Variant","","",474],[13,"Macro","","",474],[13,"Primitive","","",474],[13,"AssociatedType","","",474],[13,"Constant","","",474],[11,"clone","","",474],[11,"eq","","",474],[11,"ne","","",474],[11,"from_item","","",474],[11,"from_type_kind","","",474],[11,"to_static_str","","",474],[11,"fmt","","",474],[0,"format","rustdoc::html","HTML formatting module"],[3,"VisSpace","rustdoc::html::format","Helper to render an optional visibility with a space after it (if the\nvisibility is preset)"],[3,"UnsafetySpace","","Similarly to VisSpace, this structure is used to render a function style with a\nspace after it."],[3,"Method","","Wrapper struct for properly emitting a method declaration."],[3,"MutableSpace","","Similar to VisSpace, but used for mutability"],[3,"RawMutableSpace","","Similar to VisSpace, but used for mutability"],[3,"Stability","","Wrapper struct for properly emitting the stability level."],[3,"ConciseStability","","Wrapper struct for emitting the stability level concisely."],[3,"WhereClause","","Wrapper struct for emitting a where clause from Generics."],[3,"TyParamBounds","","Wrapper struct for emitting type parameter bounds."],[3,"CommaSep","","Wrapper struct for emitting a comma-separated list of items"],[11,"get","","",475],[11,"get","","",476],[11,"fmt","","",477],[11,"fmt","","",478],[11,"fmt","rustdoc::clean","",6],[11,"fmt","rustdoc::html::format","",479],[11,"fmt","rustdoc::clean","",68],[11,"fmt","","",14],[11,"fmt","","",34],[11,"fmt","","",45],[11,"fmt","","",21],[11,"fmt","","",20],[11,"fmt","","",40],[11,"fmt","","",11],[11,"fmt","","",37],[11,"fmt","","",10],[11,"fmt","rustdoc::html::format","",480],[11,"fmt","","",475],[11,"fmt","","",476],[11,"fmt","rustdoc::clean","",48],[11,"fmt","","",27],[11,"fmt","","",28],[11,"fmt","","",31],[11,"fmt","rustdoc::html::format","",481],[11,"fmt","","",482],[11,"fmt","","",483],[11,"fmt","","",484],[0,"layout","rustdoc::html",""],[3,"Layout","rustdoc::html::layout",""],[12,"logo","","",485],[12,"favicon","","",485],[12,"external_html","","",485],[12,"krate","","",485],[12,"playground_url","","",485],[3,"Page","",""],[12,"title","","",486],[12,"ty","","",486],[12,"root_path","","",486],[12,"description","","",486],[12,"keywords","","",486],[5,"render","",""],[5,"redirect","",""],[11,"clone","","",485],[0,"markdown","rustdoc::html","Markdown formatting for rustdoc"],[3,"Markdown","rustdoc::html::markdown","A unit struct which has the `fmt::String` trait implemented. When\nformatted, this struct will emit the HTML corresponding to the rendered\nversion of the contained markdown string."],[3,"MarkdownWithToc","","A unit struct like `Markdown`, that renders the markdown with a\ntable of contents."],[5,"render","",""],[5,"find_testable_code","",""],[5,"reset_headers","","By default this markdown renderer generates anchors for each header in the\nrendered document. The anchor name is the contents of the header separated\nby hyphens, and a task-local map is used to disambiguate among duplicate\nheaders (numbers are appended)."],[5,"plain_summary_line","",""],[7,"PLAYGROUND_KRATE","",""],[11,"fmt","","",487],[11,"fmt","","",488],[0,"render","rustdoc::html","Rustdoc's HTML Rendering module"],[3,"Context","rustdoc::html::render","Major driving force in all rustdoc rendering. This contains information\nabout where in the tree-like hierarchy rendering is occurring and controls\nhow the current page is being rendered."],[12,"current","","Current hierarchy of components leading down to what's currently being\nrendered",489],[12,"root_path","","String representation of how to get back to the root path of the 'doc/'\nfolder in terms of a relative URL.",489],[12,"src_root","","The path to the crate root source minus the file name.\nUsed for simplifying paths to the highlighted source code files.",489],[12,"dst","","The current destination folder of where HTML artifacts should be placed.\nThis changes as the context descends into the module hierarchy.",489],[12,"layout","","This describes the layout of each page, and is not modified after\ncreation of the context (contains info like the favicon and added html).",489],[12,"include_sources","","This flag indicates whether [src] links should be generated or not. If\nthe source files are present in the html rendering, then this will be\n`true`.",489],[12,"render_redirect_pages","","A flag, which when turned off, will render pages which redirect to the\nreal location of an item. This is used to allow external links to\npublicly reused items to redirect to the right location.",489],[12,"passes","","All the passes that were run on this crate.",489],[3,"Implementor","","Metadata about an implementor of a trait."],[12,"def_id","","",490],[12,"generics","","",490],[12,"trait_","","",490],[12,"for_","","",490],[12,"stability","","",490],[3,"Impl","","Metadata about implementations for a type."],[12,"impl_","","",491],[12,"dox","","",491],[12,"stability","","",491],[3,"Cache","","This cache is used to store information about the `clean::Crate` being\nrendered in order to provide more useful documentation. This contains\ninformation like all implementors of a trait, all traits a type implements,\ndocumentation for all known traits, etc."],[12,"typarams","","Mapping of typaram ids to the name of the type parameter. This is used\nwhen pretty-printing a type (so pretty printing doesn't have to\npainfully maintain a context like this)",492],[12,"impls","","Maps a type id to all known implementations for that type. This is only\nrecognized for intra-crate `ResolvedPath` types, and is used to print\nout extra documentation on the page of an enum/struct.",492],[12,"paths","","Maintains a mapping of local crate node ids to the fully qualified name\nand \"short type description\" of that node. This is used when generating\nURLs when a type is being linked to. External paths are not located in\nthis map because the `External` type itself has all the information\nnecessary.",492],[12,"external_paths","","Similar to `paths`, but only holds external paths. This is only used for\ngenerating explicit hyperlinks to other crates.",492],[12,"traits","","This map contains information about all known traits of this crate.\nImplementations of a crate should inherit the documentation of the\nparent trait if no extra documentation is specified, and default methods\nshould show up in documentation about trait implementations.",492],[12,"implementors","","When rendering traits, it's often useful to be able to list all\nimplementors of the trait, and this mapping is exactly, that: a mapping\nof trait ids to the list of known implementors of the trait",492],[12,"extern_locations","","Cache of where external crate documentation can be found.",492],[12,"primitive_locations","","Cache of where documentation for primitives can be found.",492],[12,"inlined","","Set of definitions which have been inlined from external crates.",492],[4,"ExternalLocation","","Indicates where an external crate can be found."],[13,"Remote","","Remote URL root of the external crate",493],[13,"Local","","This external crate can be found in the local doc/ folder",493],[13,"Unknown","","The external crate could not be found.",493],[5,"run","","Generates the documentation for `crate` into the directory `dst`"],[5,"cache","",""],[6,"NameDoc","","A pair of name and its optional document."],[7,"CURRENT_LOCATION_KEY","",""],[11,"clone","","",489],[11,"clone","","",491],[11,"default","","",492],[11,"fold_item","","",492],[0,"toc","rustdoc::html","Table-of-contents creation."],[3,"Toc","rustdoc::html::toc","A (recursive) table of contents"],[3,"TocEntry","",""],[3,"TocBuilder","","Progressive construction of a table of contents."],[11,"eq","","",494],[11,"ne","","",494],[11,"eq","","",495],[11,"ne","","",495],[11,"eq","","",496],[11,"ne","","",496],[11,"new","","",496],[11,"into_toc","","Convert into a true `Toc` struct.",496],[11,"push","","Push a level `level` heading into the appropriate place in the\nhierarchy, returning a string containing the section number in\n`<num>.<num>.<num>` format.",496],[11,"fmt","","",494],[11,"fmt","","",494],[0,"markdown","rustdoc",""],[5,"render","rustdoc::markdown","Render `input` (e.g. \"foo.md\") into an HTML file in `output`\n(e.g. output = \"bar\" => \"bar/foo.html\")."],[5,"test","","Run any tests/code examples in the markdown file `input`."],[0,"passes","rustdoc",""],[5,"strip_hidden","rustdoc::passes","Strip items marked `#[doc(hidden)]`"],[5,"strip_private","","Strip private items from the point of view of a crate or externally from a\ncrate, specified by the `xcrate` flag."],[5,"unindent_comments","",""],[5,"collapse_docs","",""],[5,"unindent","",""],[0,"plugins","rustdoc",""],[3,"PluginManager","rustdoc::plugins","Manages loading and running of plugins"],[12,"prefix","","The directory plugins will be loaded from",497],[6,"PluginJson","",""],[6,"PluginResult","",""],[6,"PluginCallback","",""],[11,"new","","Create a new plugin manager",497],[11,"load_plugin","","Load a plugin with the given name.",497],[11,"add_plugin","","Load a normal Rust function as a plugin.",497],[11,"run_plugins","","Run all the loaded plugins over the crate, returning their results",497],[0,"stability_summary","rustdoc","This module crawls a `clean::Crate` and produces a summarization of the\nstability levels within the crate. The summary contains the module\nhierarchy, with item counts for every stability level per module. A parent\nmodule's count includes its children's."],[3,"Counts","rustdoc::stability_summary","The counts for each stability level."],[12,"deprecated","","",498],[12,"unstable","","",498],[12,"stable","","",498],[12,"unmarked","","No stability level, inherited or otherwise.",498],[3,"ModuleSummary","","A summarized module, which includes total counts and summarized children\nmodules."],[12,"name","","",499],[12,"counts","","",499],[12,"submodules","","",499],[5,"build","","Summarizes the stability levels in a crate."],[11,"eq","","",498],[11,"ne","","",498],[11,"decode","","",498],[11,"encode","","",498],[6,"Output","",""],[11,"add","","",498],[11,"total","","",498],[11,"eq","","",499],[11,"ne","","",499],[11,"decode","","",499],[11,"encode","","",499],[11,"partial_cmp","","",499],[11,"cmp","","",499],[0,"visit_ast","rustdoc","Rust AST Visitor. Extracts useful information and massages it into a form\nusable for clean"],[3,"RustdocVisitor","rustdoc::visit_ast",""],[12,"module","","",500],[12,"attrs","","",500],[12,"cx","","",500],[12,"analysis","","",500],[11,"new","","",500],[11,"visit","","",500],[11,"visit_struct_def","","",500],[11,"visit_enum_def","","",500],[11,"visit_fn","","",500],[11,"visit_mod_contents","","",500],[11,"visit_item","","",500],[0,"test","rustdoc",""],[3,"Collector","rustdoc::test",""],[12,"tests","","",501],[5,"run","",""],[5,"maketest","",""],[11,"new","","",501],[11,"add_test","","",501],[11,"register_header","","",501],[11,"fold_item","","",501],[7,"ANALYSISKEY","rustdoc",""],[11,"clean","rustdoc::visit_ast","",500],[11,"clean","rustdoc::doctree","",456],[11,"clean","","",460],[11,"clean","","",464],[11,"clean","","",457],[11,"clean","","",458],[11,"clean","","",459],[11,"clean","","",461],[11,"clean","","",462],[11,"clean","","",463],[11,"clean","","",465],[11,"clean","","",468],[11,"clean","","",469],[11,"clean","","",467],[11,"fmt","rustdoc::stability_summary","",499]],"paths":[[3,"ExternalHtml"],[3,"Crate"],[3,"ExternalCrate"],[3,"Item"],[3,"Module"],[3,"TyParam"],[3,"Generics"],[3,"Method"],[3,"TyMethod"],[3,"Function"],[3,"FnDecl"],[3,"Arguments"],[3,"Argument"],[3,"Trait"],[3,"PolyTrait"],[3,"Struct"],[3,"VariantStruct"],[3,"Enum"],[3,"Variant"],[3,"Span"],[3,"Path"],[3,"PathSegment"],[3,"Typedef"],[3,"BareFunctionDecl"],[3,"Static"],[3,"Constant"],[3,"Impl"],[3,"ImportSource"],[3,"ViewListIdent"],[3,"Macro"],[3,"Stability"],[3,"TypeBinding"],[4,"ItemEnum"],[4,"Attribute"],[4,"TyParamBound"],[4,"WherePredicate"],[4,"SelfTy"],[4,"FunctionRetTy"],[4,"TraitMethod"],[4,"ImplMethod"],[4,"Type"],[4,"PrimitiveType"],[4,"TypeKind"],[4,"StructField"],[4,"VariantKind"],[4,"PathParameters"],[4,"Mutability"],[4,"ImplPolarity"],[4,"Import"],[8,"Clean"],[3,"Vec"],[3,"VecPerParamSpace"],[3,"P"],[3,"Rc"],[4,"Option"],[3,"Binder"],[3,"OwnedSlice"],[3,"crate_metadata"],[6,"MetaItem"],[6,"Attribute"],[3,"TyParam"],[3,"TypeParameterDef"],[4,"TyParamBound"],[3,"ExistentialBounds"],[4,"BuiltinBound"],[3,"TraitRef"],[3,"ParamBounds"],[3,"Substs"],[3,"Lifetime"],[3,"Lifetime"],[3,"LifetimeDef"],[3,"RegionParameterDef"],[4,"Region"],[4,"WherePredicate"],[4,"Predicate"],[3,"TraitPredicate"],[3,"EquatePredicate"],[3,"OutlivesPredicate"],[3,"ProjectionPredicate"],[3,"ProjectionTy"],[3,"Generics"],[3,"Method"],[3,"TypeMethod"],[4,"ExplicitSelf_"],[3,"FnDecl"],[4,"FnOutput"],[3,"Arg"],[4,"FunctionRetTy"],[3,"TraitRef"],[3,"PolyTraitRef"],[4,"TraitItem"],[4,"ImplItem"],[3,"Method"],[4,"ImplOrTraitItem"],[3,"Ty"],[6,"Ty"],[6,"StructField"],[3,"field_ty"],[4,"Visibility"],[3,"StructDef"],[3,"VariantInfo"],[4,"VariantKind"],[3,"Span"],[3,"Path"],[4,"PathParameters"],[3,"PathSegment"],[3,"Ident"],[3,"Name"],[3,"BareFnTy"],[4,"Mutability"],[4,"ImplPolarity"],[6,"PathListItem"],[3,"ForeignMod"],[3,"ForeignItem"],[3,"Stability"],[3,"AssociatedType"],[3,"AssociatedType"],[3,"Typedef"],[3,"TypeBinding"],[4,"Input"],[3,"Archive"],[3,"ArchiveBuilder"],[3,"Svh"],[4,"SawAbiComponent"],[4,"SawExprComponent"],[4,"SawStmtComponent"],[3,"StrictVersionHashVisitor"],[3,"DecodeContext"],[3,"DefId"],[3,"NestedItemsDropper"],[4,"Def"],[3,"FreeRegion"],[4,"CodeExtent"],[3,"DestructionScopeData"],[4,"BoundRegion"],[3,"Decoder"],[3,"Freevar"],[3,"UpvarBorrow"],[4,"UpvarCapture"],[4,"MethodOrigin"],[3,"EncodeContext"],[3,"Encoder"],[3,"SideTableEncodingIdVisitor"],[3,"Doc"],[3,"LabelledCFG"],[4,"CFGNodeData"],[3,"CFG"],[3,"ConstQualif"],[4,"Mode"],[3,"CheckCrateVisitor"],[3,"CheckCrateVisitor"],[3,"CheckItemRecursionVisitor"],[4,"Context"],[3,"CheckLoopVisitor"],[3,"Matrix"],[4,"Constructor"],[4,"Usefulness"],[3,"MatchCheckCtxt"],[3,"StaticInliner"],[3,"RenamingRecorder"],[3,"MutationChecker"],[3,"AtBindingPatternVisitor"],[3,"RvalueContext"],[3,"RvalueContextDelegate"],[4,"const_val"],[3,"ConstEvalErr"],[4,"ErrKind"],[4,"EntryOrExit"],[3,"DataFlowContext"],[3,"Union"],[3,"Subtract"],[3,"MarkSymbolVisitor"],[3,"LifeSeeder"],[3,"DeadVisitor"],[3,"PathResolution"],[4,"MethodProvenance"],[4,"UnsafeContext"],[3,"EffectCheckVisitor"],[3,"EntryContext"],[4,"LoanCause"],[4,"ConsumeMode"],[4,"MoveReason"],[4,"MatchMode"],[4,"TrackMatchMode"],[4,"MutateMode"],[3,"ExprUseVisitor"],[4,"SimplifiedType"],[3,"Edge"],[3,"NodeIndex"],[3,"EdgeIndex"],[3,"Direction"],[3,"Graph"],[3,"DepthFirstTraversal"],[3,"IntrinsicCheckingVisitor"],[3,"TransmuteRestriction"],[3,"Bivariate"],[3,"FnSig"],[3,"CombineFields"],[3,"Generalizer"],[3,"Equate"],[3,"InferCtxt"],[3,"Glb"],[3,"Lub"],[4,"Node"],[4,"Edge"],[3,"ConstraintGraph"],[4,"Constraint"],[4,"GenericKind"],[3,"TwoRegions"],[4,"UndoLogEntry"],[4,"CombineMapType"],[4,"RegionResolutionError"],[3,"SameRegions"],[3,"RegionSnapshot"],[3,"RegionVarBindings"],[4,"Classification"],[4,"Verify"],[4,"VarValue"],[3,"RegionAndOrigin"],[3,"OpportunisticTypeResolver"],[3,"FullTypeResolver"],[3,"TypeFreshener"],[3,"Sub"],[4,"RelationDir"],[3,"TypeVariableTable"],[3,"Delegate"],[4,"VarValue"],[3,"UnificationTable"],[3,"Delegate"],[3,"IntVid"],[4,"IntVarValue"],[3,"FloatVid"],[4,"FloatTy"],[4,"TypeOrigin"],[4,"ValuePairs"],[3,"TypeTrace"],[4,"SubregionOrigin"],[4,"LateBoundRegionConversionTime"],[4,"RegionVariableOrigin"],[4,"fixup_err"],[4,"Result"],[4,"LangItem"],[3,"LanguageItems"],[3,"LanguageItemCollector"],[3,"Variable"],[3,"LiveNode"],[4,"LiveNodeKind"],[3,"IrMaps"],[3,"LocalInfo"],[4,"VarKind"],[3,"Liveness"],[3,"Users"],[4,"categorization"],[3,"Upvar"],[4,"PointerKind"],[4,"InteriorKind"],[4,"FieldName"],[4,"InteriorOffsetKind"],[4,"ElementKind"],[4,"MutabilityCategory"],[4,"Note"],[3,"cmt_"],[3,"Expr"],[3,"Pat"],[3,"MemCategorizationContext"],[4,"ClosureKind"],[4,"LastPrivate"],[4,"PrivateDep"],[4,"ImportUse"],[3,"ReachableContext"],[3,"BlockRemainder"],[4,"InnermostDeclaringBlock"],[3,"DeclaringStatementContext"],[4,"InnermostEnclosingExpr"],[3,"Context"],[3,"RegionMaps"],[3,"RegionResolutionVisitor"],[4,"DefRegion"],[3,"LifetimeContext"],[4,"ScopeChain"],[3,"Annotator"],[3,"Index"],[3,"Checker"],[4,"RegionSubsts"],[4,"ParamSpace"],[3,"EnumeratedItems"],[3,"SubstFolder"],[3,"RegionObligation"],[3,"FulfillmentContext"],[3,"MismatchedProjectionTypes"],[4,"ProjectionTyCandidate"],[3,"AssociatedTypeNormalizer"],[3,"Normalized"],[4,"ProjectionTyError"],[4,"MethodViolationCode"],[4,"ObjectSafetyViolation"],[3,"SelectionCache"],[4,"MethodMatchedData"],[4,"SelectionCandidate"],[4,"EvaluationResult"],[3,"SelectionContext"],[3,"TraitObligationStack"],[4,"MethodMatchResult"],[3,"Elaborator"],[3,"FilterToTraits"],[3,"VtableImplData"],[3,"VtableObjectData"],[3,"Obligation"],[4,"Vtable"],[3,"VtableBuiltinData"],[3,"VtableDefaultImplData"],[4,"SelectionError"],[3,"FulfillmentError"],[4,"FulfillmentErrorCode"],[3,"ObligationCause"],[4,"ObligationCauseCode"],[3,"DerivedObligationCause"],[3,"field"],[4,"ImplOrTraitItemContainer"],[4,"ImplOrTraitItemId"],[3,"mt"],[3,"creader_cache_key"],[3,"ItemVariances"],[4,"Variance"],[4,"AutoAdjustment"],[4,"UnsizeKind"],[3,"AutoDerefRef"],[4,"AutoRef"],[3,"param_index"],[3,"MethodParam"],[3,"MethodObject"],[3,"MethodCallee"],[3,"MethodCall"],[4,"ExprAdjustment"],[4,"vtable_origin"],[3,"CtxtArenas"],[3,"TypeFlags"],[3,"ctxt"],[3,"TyS"],[3,"InternedTy"],[3,"BareFnTy"],[3,"ClosureTy"],[3,"ParamTy"],[3,"DebruijnIndex"],[3,"UpvarId"],[4,"BorrowKind"],[4,"sty"],[3,"TyTrait"],[4,"terr_vstore_kind"],[3,"expected_found"],[4,"type_err"],[3,"TyVid"],[3,"RegionVid"],[4,"InferTy"],[4,"UnconstrainedNumeric"],[4,"InferRegion"],[4,"ObjectLifetimeDefault"],[3,"Generics"],[3,"GenericPredicates"],[3,"InstantiatedPredicates"],[3,"ParameterEnvironment"],[3,"TypeScheme"],[3,"ItemSubsts"],[3,"TypeContents"],[4,"Representability"],[4,"DtorKind"],[3,"ClosureUpvar"],[4,"ExplicitSelfCategory"],[3,"Box"],[3,"EnumSet"],[3,"BottomUpFolder"],[3,"RegionFolder"],[3,"RegionEraser"],[3,"TypeWalker"],[3,"Context"],[4,"astencode_tag"],[3,"LinkMeta"],[4,"DefIdSource"],[3,"entry"],[3,"EncodeVisitor"],[3,"ImplVisitor"],[4,"Family"],[4,"DefLike"],[3,"CrateDep"],[3,"CrateReader"],[4,"PMDSource"],[4,"LinkagePreference"],[4,"NativeLibraryKind"],[3,"CrateSource"],[3,"CStore"],[4,"MetadataBlob"],[3,"Context"],[3,"ArchiveMetadata"],[3,"FileSearch"],[3,"MacroLoader"],[4,"OptLevel"],[4,"DebugInfoLevel"],[4,"OutputType"],[3,"Options"],[4,"UnstableFeatures"],[4,"PrintRequest"],[3,"OutputFilenames"],[4,"EntryFnType"],[4,"CrateType"],[4,"Passes"],[3,"CodegenOptions"],[3,"DebuggingOptions"],[4,"OptionStability"],[3,"RustcOptGroup"],[3,"SearchPaths"],[4,"PathKind"],[3,"Iter"],[3,"Session"],[3,"Registry"],[3,"RegistrarFinder"],[3,"Lint"],[3,"LintId"],[4,"Level"],[4,"LintSource"],[3,"HardwiredLints"],[3,"LintStore"],[3,"Context"],[3,"GatherNodeLevels"],[3,"ErrorReported"],[3,"Indenter"],[3,"LoopQueryVisitor"],[3,"BlockQueryVisitor"],[3,"TraitDef"],[3,"Item"],[3,"Spanned"],[4,"Abi"],[4,"IntTy"],[4,"UintTy"],[3,"HashMap"],[3,"FnvHasher"],[3,"SnapshotVec"],[3,"FixedBuffer64"],[3,"Sha256"],[3,"ArchiveRO"],[4,"OptimizationDiagnosticKind"],[4,"Diagnostic"],[4,"CallConv"],[4,"DiagnosticSeverity"],[3,"Attribute"],[4,"OtherAttribute"],[4,"SpecialAttribute"],[3,"AttrBuilder"],[4,"TypeKind"],[4,"CodeGenOptLevel"],[4,"RelocMode"],[3,"TargetData"],[3,"ObjectFile"],[3,"SectionIter"],[3,"DocContext"],[3,"CrateAnalysis"],[4,"MaybeTyped"],[3,"Module"],[3,"Struct"],[3,"Enum"],[3,"Variant"],[3,"Function"],[3,"Typedef"],[3,"Static"],[3,"Constant"],[3,"Trait"],[3,"Impl"],[3,"DefaultImpl"],[3,"Macro"],[3,"ExternCrate"],[3,"Import"],[4,"StructType"],[4,"TypeBound"],[8,"DocFolder"],[3,"Escape"],[4,"ItemType"],[3,"VisSpace"],[3,"UnsafetySpace"],[3,"CommaSep"],[3,"TyParamBounds"],[3,"WhereClause"],[3,"Method"],[3,"MutableSpace"],[3,"RawMutableSpace"],[3,"Stability"],[3,"ConciseStability"],[3,"Layout"],[3,"Page"],[3,"Markdown"],[3,"MarkdownWithToc"],[3,"Context"],[3,"Implementor"],[3,"Impl"],[3,"Cache"],[4,"ExternalLocation"],[3,"Toc"],[3,"TocEntry"],[3,"TocBuilder"],[3,"PluginManager"],[3,"Counts"],[3,"ModuleSummary"],[3,"RustdocVisitor"],[3,"Collector"]]};
searchIndex['rustc_llvm'] = {"items":[[0,"","rustc_llvm",""],[3,"Attribute","",""],[3,"AttrBuilder","",""],[3,"TargetData","",""],[12,"lltd","","",0],[3,"ObjectFile","",""],[12,"llof","","",1],[3,"SectionIter","",""],[12,"llsi","","",2],[4,"CallConv","",""],[13,"CCallConv","","",3],[13,"FastCallConv","","",3],[13,"ColdCallConv","","",3],[13,"X86StdcallCallConv","","",3],[13,"X86FastcallCallConv","","",3],[13,"X86_64_Win64","","",3],[4,"Visibility","",""],[13,"LLVMDefaultVisibility","","",4],[13,"HiddenVisibility","","",4],[13,"ProtectedVisibility","","",4],[4,"Linkage","",""],[13,"ExternalLinkage","","",5],[13,"AvailableExternallyLinkage","","",5],[13,"LinkOnceAnyLinkage","","",5],[13,"LinkOnceODRLinkage","","",5],[13,"WeakAnyLinkage","","",5],[13,"WeakODRLinkage","","",5],[13,"AppendingLinkage","","",5],[13,"InternalLinkage","","",5],[13,"PrivateLinkage","","",5],[13,"ExternalWeakLinkage","","",5],[13,"CommonLinkage","","",5],[4,"DiagnosticSeverity","",""],[13,"Error","","",6],[13,"Warning","","",6],[13,"Remark","","",6],[13,"Note","","",6],[4,"OtherAttribute","",""],[13,"SanitizeAddressAttribute","","",7],[13,"MinSizeAttribute","","",7],[13,"NoDuplicateAttribute","","",7],[13,"StackProtectStrongAttribute","","",7],[13,"SanitizeThreadAttribute","","",7],[13,"SanitizeMemoryAttribute","","",7],[13,"NoBuiltinAttribute","","",7],[13,"ReturnedAttribute","","",7],[13,"ColdAttribute","","",7],[13,"BuiltinAttribute","","",7],[13,"OptimizeNoneAttribute","","",7],[13,"InAllocaAttribute","","",7],[13,"NonNullAttribute","","",7],[4,"SpecialAttribute","",""],[13,"DereferenceableAttribute","","",8],[4,"AttributeSet","",""],[13,"ReturnIndex","","",9],[13,"FunctionIndex","","",9],[4,"IntPredicate","",""],[13,"IntEQ","","",10],[13,"IntNE","","",10],[13,"IntUGT","","",10],[13,"IntUGE","","",10],[13,"IntULT","","",10],[13,"IntULE","","",10],[13,"IntSGT","","",10],[13,"IntSGE","","",10],[13,"IntSLT","","",10],[13,"IntSLE","","",10],[4,"RealPredicate","",""],[13,"RealPredicateFalse","","",11],[13,"RealOEQ","","",11],[13,"RealOGT","","",11],[13,"RealOGE","","",11],[13,"RealOLT","","",11],[13,"RealOLE","","",11],[13,"RealONE","","",11],[13,"RealORD","","",11],[13,"RealUNO","","",11],[13,"RealUEQ","","",11],[13,"RealUGT","","",11],[13,"RealUGE","","",11],[13,"RealULT","","",11],[13,"RealULE","","",11],[13,"RealUNE","","",11],[13,"RealPredicateTrue","","",11],[4,"TypeKind","",""],[13,"Void","","",12],[13,"Half","","",12],[13,"Float","","",12],[13,"Double","","",12],[13,"X86_FP80","","",12],[13,"FP128","","",12],[13,"PPC_FP128","","",12],[13,"Label","","",12],[13,"Integer","","",12],[13,"Function","","",12],[13,"Struct","","",12],[13,"Array","","",12],[13,"Pointer","","",12],[13,"Vector","","",12],[13,"Metadata","","",12],[13,"X86_MMX","","",12],[4,"AtomicBinOp","",""],[13,"AtomicXchg","","",13],[13,"AtomicAdd","","",13],[13,"AtomicSub","","",13],[13,"AtomicAnd","","",13],[13,"AtomicNand","","",13],[13,"AtomicOr","","",13],[13,"AtomicXor","","",13],[13,"AtomicMax","","",13],[13,"AtomicMin","","",13],[13,"AtomicUMax","","",13],[13,"AtomicUMin","","",13],[4,"AtomicOrdering","",""],[13,"NotAtomic","","",14],[13,"Unordered","","",14],[13,"Monotonic","","",14],[13,"Acquire","","",14],[13,"Release","","",14],[13,"AcquireRelease","","",14],[13,"SequentiallyConsistent","","",14],[4,"FileType","",""],[13,"AssemblyFileType","","",15],[13,"ObjectFileType","","",15],[4,"MetadataType","",""],[13,"MD_dbg","","",16],[13,"MD_tbaa","","",16],[13,"MD_prof","","",16],[13,"MD_fpmath","","",16],[13,"MD_range","","",16],[13,"MD_tbaa_struct","","",16],[13,"MD_invariant_load","","",16],[13,"MD_alias_scope","","",16],[13,"MD_noalias","","",16],[13,"MD_nontemporal","","",16],[13,"MD_mem_parallel_loop_access","","",16],[13,"MD_nonnull","","",16],[4,"AsmDialect","",""],[13,"AD_ATT","","",17],[13,"AD_Intel","","",17],[4,"CodeGenOptLevel","",""],[13,"CodeGenLevelNone","","",18],[13,"CodeGenLevelLess","","",18],[13,"CodeGenLevelDefault","","",18],[13,"CodeGenLevelAggressive","","",18],[4,"RelocMode","",""],[13,"RelocDefault","","",19],[13,"RelocStatic","","",19],[13,"RelocPIC","","",19],[13,"RelocDynamicNoPic","","",19],[4,"CodeGenModel","",""],[13,"CodeModelDefault","","",20],[13,"CodeModelJITDefault","","",20],[13,"CodeModelSmall","","",20],[13,"CodeModelKernel","","",20],[13,"CodeModelMedium","","",20],[13,"CodeModelLarge","","",20],[4,"DiagnosticKind","",""],[13,"DK_InlineAsm","","",21],[13,"DK_StackSize","","",21],[13,"DK_DebugMetadataVersion","","",21],[13,"DK_SampleProfile","","",21],[13,"DK_OptimizationRemark","","",21],[13,"DK_OptimizationRemarkMissed","","",21],[13,"DK_OptimizationRemarkAnalysis","","",21],[13,"DK_OptimizationFailure","","",21],[4,"Module_opaque","",""],[4,"Context_opaque","",""],[4,"Type_opaque","",""],[4,"Value_opaque","",""],[4,"Metadata_opaque","",""],[4,"BasicBlock_opaque","",""],[4,"Builder_opaque","",""],[4,"ExecutionEngine_opaque","",""],[4,"RustJITMemoryManager_opaque","",""],[4,"MemoryBuffer_opaque","",""],[4,"PassManager_opaque","",""],[4,"PassManagerBuilder_opaque","",""],[4,"Use_opaque","",""],[4,"TargetData_opaque","",""],[4,"ObjectFile_opaque","",""],[4,"SectionIterator_opaque","",""],[4,"Pass_opaque","",""],[4,"TargetMachine_opaque","",""],[4,"Archive_opaque","",""],[4,"Twine_opaque","",""],[4,"DiagnosticInfo_opaque","",""],[4,"DebugLoc_opaque","",""],[4,"SMDiagnostic_opaque","",""],[4,"RustString_opaque","",""],[5,"SetInstructionCallConv","",""],[5,"SetFunctionCallConv","",""],[5,"SetLinkage","",""],[5,"SetUnnamedAddr","",""],[5,"set_thread_local","",""],[5,"ConstICmp","",""],[5,"ConstFCmp","",""],[5,"SetFunctionAttribute","",""],[5,"mk_target_data","",""],[5,"mk_section_iter","",""],[5,"get_param","","Safe wrapper around `LLVMGetParam`, because segfaults are no fun."],[5,"rust_llvm_string_write_impl","","Appending to a Rust string -- used by raw_rust_string_ostream."],[5,"build_string","",""],[5,"twine_to_string","",""],[5,"debug_loc_to_string","",""],[5,"LLVMContextCreate","",""],[5,"LLVMContextDispose","",""],[5,"LLVMGetMDKindIDInContext","",""],[5,"LLVMModuleCreateWithNameInContext","",""],[5,"LLVMGetModuleContext","",""],[5,"LLVMDisposeModule","",""],[5,"LLVMGetDataLayout","","Data layout. See Module::getDataLayout."],[5,"LLVMSetDataLayout","",""],[5,"LLVMGetTarget","","Target triple. See Module::getTargetTriple."],[5,"LLVMSetTarget","",""],[5,"LLVMDumpModule","","See Module::dump."],[5,"LLVMSetModuleInlineAsm","","See Module::setModuleInlineAsm."],[5,"LLVMGetTypeKind","","See llvm::LLVMTypeKind::getTypeID."],[5,"LLVMGetTypeContext","","See llvm::LLVMType::getContext."],[5,"LLVMInt1TypeInContext","",""],[5,"LLVMInt8TypeInContext","",""],[5,"LLVMInt16TypeInContext","",""],[5,"LLVMInt32TypeInContext","",""],[5,"LLVMInt64TypeInContext","",""],[5,"LLVMIntTypeInContext","",""],[5,"LLVMGetIntTypeWidth","",""],[5,"LLVMFloatTypeInContext","",""],[5,"LLVMDoubleTypeInContext","",""],[5,"LLVMX86FP80TypeInContext","",""],[5,"LLVMFP128TypeInContext","",""],[5,"LLVMPPCFP128TypeInContext","",""],[5,"LLVMFunctionType","",""],[5,"LLVMIsFunctionVarArg","",""],[5,"LLVMGetReturnType","",""],[5,"LLVMCountParamTypes","",""],[5,"LLVMGetParamTypes","",""],[5,"LLVMStructTypeInContext","",""],[5,"LLVMCountStructElementTypes","",""],[5,"LLVMGetStructElementTypes","",""],[5,"LLVMIsPackedStruct","",""],[5,"LLVMRustArrayType","",""],[5,"LLVMPointerType","",""],[5,"LLVMVectorType","",""],[5,"LLVMGetElementType","",""],[5,"LLVMGetArrayLength","",""],[5,"LLVMGetPointerAddressSpace","",""],[5,"LLVMGetPointerToGlobal","",""],[5,"LLVMGetVectorSize","",""],[5,"LLVMVoidTypeInContext","",""],[5,"LLVMLabelTypeInContext","",""],[5,"LLVMMetadataTypeInContext","",""],[5,"LLVMTypeOf","",""],[5,"LLVMGetValueName","",""],[5,"LLVMSetValueName","",""],[5,"LLVMDumpValue","",""],[5,"LLVMReplaceAllUsesWith","",""],[5,"LLVMHasMetadata","",""],[5,"LLVMGetMetadata","",""],[5,"LLVMSetMetadata","",""],[5,"LLVMGetFirstUse","",""],[5,"LLVMGetNextUse","",""],[5,"LLVMGetUser","",""],[5,"LLVMGetUsedValue","",""],[5,"LLVMGetNumOperands","",""],[5,"LLVMGetOperand","",""],[5,"LLVMSetOperand","",""],[5,"LLVMConstNull","",""],[5,"LLVMConstAllOnes","",""],[5,"LLVMConstICmp","",""],[5,"LLVMConstFCmp","",""],[5,"LLVMGetUndef","",""],[5,"LLVMIsConstant","",""],[5,"LLVMIsNull","",""],[5,"LLVMIsUndef","",""],[5,"LLVMConstPointerNull","",""],[5,"LLVMMDStringInContext","",""],[5,"LLVMMDNodeInContext","",""],[5,"LLVMAddNamedMetadataOperand","",""],[5,"LLVMConstInt","",""],[5,"LLVMConstIntOfString","",""],[5,"LLVMConstIntOfStringAndSize","",""],[5,"LLVMConstReal","",""],[5,"LLVMConstRealOfString","",""],[5,"LLVMConstRealOfStringAndSize","",""],[5,"LLVMConstIntGetZExtValue","",""],[5,"LLVMConstIntGetSExtValue","",""],[5,"LLVMConstStringInContext","",""],[5,"LLVMConstStructInContext","",""],[5,"LLVMConstArray","",""],[5,"LLVMConstVector","",""],[5,"LLVMAlignOf","",""],[5,"LLVMSizeOf","",""],[5,"LLVMConstNeg","",""],[5,"LLVMConstNSWNeg","",""],[5,"LLVMConstNUWNeg","",""],[5,"LLVMConstFNeg","",""],[5,"LLVMConstNot","",""],[5,"LLVMConstAdd","",""],[5,"LLVMConstNSWAdd","",""],[5,"LLVMConstNUWAdd","",""],[5,"LLVMConstFAdd","",""],[5,"LLVMConstSub","",""],[5,"LLVMConstNSWSub","",""],[5,"LLVMConstNUWSub","",""],[5,"LLVMConstFSub","",""],[5,"LLVMConstMul","",""],[5,"LLVMConstNSWMul","",""],[5,"LLVMConstNUWMul","",""],[5,"LLVMConstFMul","",""],[5,"LLVMConstUDiv","",""],[5,"LLVMConstSDiv","",""],[5,"LLVMConstExactSDiv","",""],[5,"LLVMConstFDiv","",""],[5,"LLVMConstURem","",""],[5,"LLVMConstSRem","",""],[5,"LLVMConstFRem","",""],[5,"LLVMConstAnd","",""],[5,"LLVMConstOr","",""],[5,"LLVMConstXor","",""],[5,"LLVMConstShl","",""],[5,"LLVMConstLShr","",""],[5,"LLVMConstAShr","",""],[5,"LLVMConstGEP","",""],[5,"LLVMConstInBoundsGEP","",""],[5,"LLVMConstTrunc","",""],[5,"LLVMConstSExt","",""],[5,"LLVMConstZExt","",""],[5,"LLVMConstFPTrunc","",""],[5,"LLVMConstFPExt","",""],[5,"LLVMConstUIToFP","",""],[5,"LLVMConstSIToFP","",""],[5,"LLVMConstFPToUI","",""],[5,"LLVMConstFPToSI","",""],[5,"LLVMConstPtrToInt","",""],[5,"LLVMConstIntToPtr","",""],[5,"LLVMConstBitCast","",""],[5,"LLVMConstZExtOrBitCast","",""],[5,"LLVMConstSExtOrBitCast","",""],[5,"LLVMConstTruncOrBitCast","",""],[5,"LLVMConstPointerCast","",""],[5,"LLVMConstIntCast","",""],[5,"LLVMConstFPCast","",""],[5,"LLVMConstSelect","",""],[5,"LLVMConstExtractElement","",""],[5,"LLVMConstInsertElement","",""],[5,"LLVMConstShuffleVector","",""],[5,"LLVMConstExtractValue","",""],[5,"LLVMConstInsertValue","",""],[5,"LLVMConstInlineAsm","",""],[5,"LLVMBlockAddress","",""],[5,"LLVMGetGlobalParent","",""],[5,"LLVMIsDeclaration","",""],[5,"LLVMGetLinkage","",""],[5,"LLVMSetLinkage","",""],[5,"LLVMGetSection","",""],[5,"LLVMSetSection","",""],[5,"LLVMGetVisibility","",""],[5,"LLVMSetVisibility","",""],[5,"LLVMGetAlignment","",""],[5,"LLVMSetAlignment","",""],[5,"LLVMIsAGlobalVariable","",""],[5,"LLVMAddGlobal","",""],[5,"LLVMAddGlobalInAddressSpace","",""],[5,"LLVMGetNamedGlobal","",""],[5,"LLVMGetFirstGlobal","",""],[5,"LLVMGetLastGlobal","",""],[5,"LLVMGetNextGlobal","",""],[5,"LLVMGetPreviousGlobal","",""],[5,"LLVMDeleteGlobal","",""],[5,"LLVMGetInitializer","",""],[5,"LLVMSetInitializer","",""],[5,"LLVMIsThreadLocal","",""],[5,"LLVMSetThreadLocal","",""],[5,"LLVMIsGlobalConstant","",""],[5,"LLVMSetGlobalConstant","",""],[5,"LLVMAddAlias","",""],[5,"LLVMAddFunction","",""],[5,"LLVMGetNamedFunction","",""],[5,"LLVMGetFirstFunction","",""],[5,"LLVMGetLastFunction","",""],[5,"LLVMGetNextFunction","",""],[5,"LLVMGetPreviousFunction","",""],[5,"LLVMDeleteFunction","",""],[5,"LLVMGetOrInsertFunction","",""],[5,"LLVMGetIntrinsicID","",""],[5,"LLVMGetFunctionCallConv","",""],[5,"LLVMSetFunctionCallConv","",""],[5,"LLVMGetGC","",""],[5,"LLVMSetGC","",""],[5,"LLVMAddDereferenceableAttr","",""],[5,"LLVMAddFunctionAttribute","",""],[5,"LLVMAddFunctionAttrString","",""],[5,"LLVMRemoveFunctionAttrString","",""],[5,"LLVMGetFunctionAttr","",""],[5,"LLVMCountParams","",""],[5,"LLVMGetParams","",""],[5,"LLVMGetParam","",""],[5,"LLVMGetParamParent","",""],[5,"LLVMGetFirstParam","",""],[5,"LLVMGetLastParam","",""],[5,"LLVMGetNextParam","",""],[5,"LLVMGetPreviousParam","",""],[5,"LLVMAddAttribute","",""],[5,"LLVMRemoveAttribute","",""],[5,"LLVMGetAttribute","",""],[5,"LLVMSetParamAlignment","",""],[5,"LLVMBasicBlockAsValue","",""],[5,"LLVMValueIsBasicBlock","",""],[5,"LLVMValueAsBasicBlock","",""],[5,"LLVMGetBasicBlockParent","",""],[5,"LLVMCountBasicBlocks","",""],[5,"LLVMGetBasicBlocks","",""],[5,"LLVMGetFirstBasicBlock","",""],[5,"LLVMGetLastBasicBlock","",""],[5,"LLVMGetNextBasicBlock","",""],[5,"LLVMGetPreviousBasicBlock","",""],[5,"LLVMGetEntryBasicBlock","",""],[5,"LLVMAppendBasicBlockInContext","",""],[5,"LLVMInsertBasicBlockInContext","",""],[5,"LLVMDeleteBasicBlock","",""],[5,"LLVMMoveBasicBlockAfter","",""],[5,"LLVMMoveBasicBlockBefore","",""],[5,"LLVMGetInstructionParent","",""],[5,"LLVMGetFirstInstruction","",""],[5,"LLVMGetLastInstruction","",""],[5,"LLVMGetNextInstruction","",""],[5,"LLVMGetPreviousInstruction","",""],[5,"LLVMInstructionEraseFromParent","",""],[5,"LLVMSetInstructionCallConv","",""],[5,"LLVMGetInstructionCallConv","",""],[5,"LLVMAddInstrAttribute","",""],[5,"LLVMRemoveInstrAttribute","",""],[5,"LLVMSetInstrParamAlignment","",""],[5,"LLVMAddCallSiteAttribute","",""],[5,"LLVMAddDereferenceableCallSiteAttr","",""],[5,"LLVMIsTailCall","",""],[5,"LLVMSetTailCall","",""],[5,"LLVMGetVolatile","",""],[5,"LLVMSetVolatile","",""],[5,"LLVMAddIncoming","",""],[5,"LLVMCountIncoming","",""],[5,"LLVMGetIncomingValue","",""],[5,"LLVMGetIncomingBlock","",""],[5,"LLVMCreateBuilderInContext","",""],[5,"LLVMPositionBuilder","",""],[5,"LLVMPositionBuilderBefore","",""],[5,"LLVMPositionBuilderAtEnd","",""],[5,"LLVMGetInsertBlock","",""],[5,"LLVMClearInsertionPosition","",""],[5,"LLVMInsertIntoBuilder","",""],[5,"LLVMInsertIntoBuilderWithName","",""],[5,"LLVMDisposeBuilder","",""],[5,"LLVMRustCreateJITMemoryManager","",""],[5,"LLVMBuildExecutionEngine","",""],[5,"LLVMDisposeExecutionEngine","",""],[5,"LLVMExecutionEngineFinalizeObject","",""],[5,"LLVMRustLoadDynamicLibrary","",""],[5,"LLVMExecutionEngineAddModule","",""],[5,"LLVMExecutionEngineRemoveModule","",""],[5,"LLVMSetCurrentDebugLocation","",""],[5,"LLVMGetCurrentDebugLocation","",""],[5,"LLVMSetInstDebugLocation","",""],[5,"LLVMBuildRetVoid","",""],[5,"LLVMBuildRet","",""],[5,"LLVMBuildAggregateRet","",""],[5,"LLVMBuildBr","",""],[5,"LLVMBuildCondBr","",""],[5,"LLVMBuildSwitch","",""],[5,"LLVMBuildIndirectBr","",""],[5,"LLVMBuildInvoke","",""],[5,"LLVMBuildLandingPad","",""],[5,"LLVMBuildResume","",""],[5,"LLVMBuildUnreachable","",""],[5,"LLVMAddCase","",""],[5,"LLVMAddDestination","",""],[5,"LLVMAddClause","",""],[5,"LLVMSetCleanup","",""],[5,"LLVMBuildAdd","",""],[5,"LLVMBuildNSWAdd","",""],[5,"LLVMBuildNUWAdd","",""],[5,"LLVMBuildFAdd","",""],[5,"LLVMBuildSub","",""],[5,"LLVMBuildNSWSub","",""],[5,"LLVMBuildNUWSub","",""],[5,"LLVMBuildFSub","",""],[5,"LLVMBuildMul","",""],[5,"LLVMBuildNSWMul","",""],[5,"LLVMBuildNUWMul","",""],[5,"LLVMBuildFMul","",""],[5,"LLVMBuildUDiv","",""],[5,"LLVMBuildSDiv","",""],[5,"LLVMBuildExactSDiv","",""],[5,"LLVMBuildFDiv","",""],[5,"LLVMBuildURem","",""],[5,"LLVMBuildSRem","",""],[5,"LLVMBuildFRem","",""],[5,"LLVMBuildShl","",""],[5,"LLVMBuildLShr","",""],[5,"LLVMBuildAShr","",""],[5,"LLVMBuildAnd","",""],[5,"LLVMBuildOr","",""],[5,"LLVMBuildXor","",""],[5,"LLVMBuildBinOp","",""],[5,"LLVMBuildNeg","",""],[5,"LLVMBuildNSWNeg","",""],[5,"LLVMBuildNUWNeg","",""],[5,"LLVMBuildFNeg","",""],[5,"LLVMBuildNot","",""],[5,"LLVMBuildMalloc","",""],[5,"LLVMBuildArrayMalloc","",""],[5,"LLVMBuildAlloca","",""],[5,"LLVMBuildArrayAlloca","",""],[5,"LLVMBuildFree","",""],[5,"LLVMBuildLoad","",""],[5,"LLVMBuildStore","",""],[5,"LLVMBuildGEP","",""],[5,"LLVMBuildInBoundsGEP","",""],[5,"LLVMBuildStructGEP","",""],[5,"LLVMBuildGlobalString","",""],[5,"LLVMBuildGlobalStringPtr","",""],[5,"LLVMBuildTrunc","",""],[5,"LLVMBuildZExt","",""],[5,"LLVMBuildSExt","",""],[5,"LLVMBuildFPToUI","",""],[5,"LLVMBuildFPToSI","",""],[5,"LLVMBuildUIToFP","",""],[5,"LLVMBuildSIToFP","",""],[5,"LLVMBuildFPTrunc","",""],[5,"LLVMBuildFPExt","",""],[5,"LLVMBuildPtrToInt","",""],[5,"LLVMBuildIntToPtr","",""],[5,"LLVMBuildBitCast","",""],[5,"LLVMBuildZExtOrBitCast","",""],[5,"LLVMBuildSExtOrBitCast","",""],[5,"LLVMBuildTruncOrBitCast","",""],[5,"LLVMBuildCast","",""],[5,"LLVMBuildPointerCast","",""],[5,"LLVMBuildIntCast","",""],[5,"LLVMBuildFPCast","",""],[5,"LLVMBuildICmp","",""],[5,"LLVMBuildFCmp","",""],[5,"LLVMBuildPhi","",""],[5,"LLVMBuildCall","",""],[5,"LLVMBuildSelect","",""],[5,"LLVMBuildVAArg","",""],[5,"LLVMBuildExtractElement","",""],[5,"LLVMBuildInsertElement","",""],[5,"LLVMBuildShuffleVector","",""],[5,"LLVMBuildExtractValue","",""],[5,"LLVMBuildInsertValue","",""],[5,"LLVMBuildIsNull","",""],[5,"LLVMBuildIsNotNull","",""],[5,"LLVMBuildPtrDiff","",""],[5,"LLVMBuildAtomicLoad","",""],[5,"LLVMBuildAtomicStore","",""],[5,"LLVMBuildAtomicCmpXchg","",""],[5,"LLVMBuildAtomicRMW","",""],[5,"LLVMBuildAtomicFence","",""],[5,"LLVMIsATerminatorInst","",""],[5,"LLVMIsAStoreInst","",""],[5,"LLVMWriteBitcodeToFile","","Writes a module to the specified path. Returns 0 on success."],[5,"LLVMCreateTargetData","","Creates target data from a target layout string."],[5,"LLVMAddTargetData","","Adds the target data to the given pass manager. The pass manager\nreferences the target data only weakly."],[5,"LLVMStoreSizeOfType","","Number of bytes clobbered when doing a Store to *T."],[5,"LLVMSizeOfTypeInBits","","Number of bytes clobbered when doing a Store to *T."],[5,"LLVMABISizeOfType","","Distance between successive elements in an array of T. Includes ABI padding."],[5,"LLVMPreferredAlignmentOfType","","Returns the preferred alignment of a type."],[5,"LLVMABIAlignmentOfType","","Returns the minimum alignment of a type."],[5,"LLVMOffsetOfElement","","Computes the byte offset of the indexed struct element for a\ntarget."],[5,"LLVMCallFrameAlignmentOfType","","Returns the minimum alignment of a type when part of a call frame."],[5,"LLVMDisposeTargetData","","Disposes target data."],[5,"LLVMCreatePassManager","","Creates a pass manager."],[5,"LLVMCreateFunctionPassManagerForModule","","Creates a function-by-function pass manager"],[5,"LLVMDisposePassManager","","Disposes a pass manager."],[5,"LLVMRunPassManager","","Runs a pass manager on a module."],[5,"LLVMRunFunctionPassManager","","Runs the function passes on the provided function."],[5,"LLVMInitializeFunctionPassManager","","Initializes all the function passes scheduled in the manager"],[5,"LLVMFinalizeFunctionPassManager","","Finalizes all the function passes scheduled in the manager"],[5,"LLVMInitializePasses","",""],[5,"LLVMAddVerifierPass","","Adds a verification pass."],[5,"LLVMAddGlobalOptimizerPass","",""],[5,"LLVMAddIPSCCPPass","",""],[5,"LLVMAddDeadArgEliminationPass","",""],[5,"LLVMAddInstructionCombiningPass","",""],[5,"LLVMAddCFGSimplificationPass","",""],[5,"LLVMAddFunctionInliningPass","",""],[5,"LLVMAddFunctionAttrsPass","",""],[5,"LLVMAddScalarReplAggregatesPass","",""],[5,"LLVMAddScalarReplAggregatesPassSSA","",""],[5,"LLVMAddJumpThreadingPass","",""],[5,"LLVMAddConstantPropagationPass","",""],[5,"LLVMAddReassociatePass","",""],[5,"LLVMAddLoopRotatePass","",""],[5,"LLVMAddLICMPass","",""],[5,"LLVMAddLoopUnswitchPass","",""],[5,"LLVMAddLoopDeletionPass","",""],[5,"LLVMAddLoopUnrollPass","",""],[5,"LLVMAddGVNPass","",""],[5,"LLVMAddMemCpyOptPass","",""],[5,"LLVMAddSCCPPass","",""],[5,"LLVMAddDeadStoreEliminationPass","",""],[5,"LLVMAddStripDeadPrototypesPass","",""],[5,"LLVMAddConstantMergePass","",""],[5,"LLVMAddArgumentPromotionPass","",""],[5,"LLVMAddTailCallEliminationPass","",""],[5,"LLVMAddIndVarSimplifyPass","",""],[5,"LLVMAddAggressiveDCEPass","",""],[5,"LLVMAddGlobalDCEPass","",""],[5,"LLVMAddCorrelatedValuePropagationPass","",""],[5,"LLVMAddPruneEHPass","",""],[5,"LLVMAddSimplifyLibCallsPass","",""],[5,"LLVMAddLoopIdiomPass","",""],[5,"LLVMAddEarlyCSEPass","",""],[5,"LLVMAddTypeBasedAliasAnalysisPass","",""],[5,"LLVMAddBasicAliasAnalysisPass","",""],[5,"LLVMPassManagerBuilderCreate","",""],[5,"LLVMPassManagerBuilderDispose","",""],[5,"LLVMPassManagerBuilderSetOptLevel","",""],[5,"LLVMPassManagerBuilderSetSizeLevel","",""],[5,"LLVMPassManagerBuilderSetDisableUnitAtATime","",""],[5,"LLVMPassManagerBuilderSetDisableUnrollLoops","",""],[5,"LLVMPassManagerBuilderSetDisableSimplifyLibCalls","",""],[5,"LLVMPassManagerBuilderUseInlinerWithThreshold","",""],[5,"LLVMPassManagerBuilderPopulateModulePassManager","",""],[5,"LLVMPassManagerBuilderPopulateFunctionPassManager","",""],[5,"LLVMPassManagerBuilderPopulateLTOPassManager","",""],[5,"LLVMDisposeMemoryBuffer","","Destroys a memory buffer."],[5,"LLVMCreateObjectFile","","Opens an object file."],[5,"LLVMDisposeObjectFile","","Closes an object file."],[5,"LLVMGetSections","","Enumerates the sections in an object file."],[5,"LLVMDisposeSectionIterator","","Destroys a section iterator."],[5,"LLVMIsSectionIteratorAtEnd","","Returns true if the section iterator is at the end of the section\nlist:"],[5,"LLVMMoveToNextSection","","Moves the section iterator to point to the next section."],[5,"LLVMGetSectionSize","","Returns the current section size."],[5,"LLVMGetSectionContents","","Returns the current section contents as a string buffer."],[5,"LLVMRustCreateMemoryBufferWithContentsOfFile","","Reads the given file and returns it as a memory buffer. Use\nLLVMDisposeMemoryBuffer() to get rid of it."],[5,"LLVMCreateMemoryBufferWithMemoryRange","","Borrows the contents of the memory buffer (doesn't copy it)"],[5,"LLVMCreateMemoryBufferWithMemoryRangeCopy","",""],[5,"LLVMIsMultithreaded","",""],[5,"LLVMStartMultithreaded","",""],[5,"LLVMRustGetLastError","","Returns a string describing the last error caused by an LLVMRust* call."],[5,"LLVMRustPrintPassTimings","","Print the pass timings since static dtors aren't picking them up."],[5,"LLVMStructCreateNamed","",""],[5,"LLVMStructSetBody","",""],[5,"LLVMConstNamedStruct","",""],[5,"LLVMSetDebug","","Enables LLVM debug output."],[5,"LLVMInlineAsm","","Prepares inline assembly."],[7,"LLVMRustDebugMetadataVersion","",""],[5,"LLVMRustAddModuleFlag","",""],[5,"LLVMDIBuilderCreate","",""],[5,"LLVMDIBuilderDispose","",""],[5,"LLVMDIBuilderFinalize","",""],[5,"LLVMDIBuilderCreateCompileUnit","",""],[5,"LLVMDIBuilderCreateFile","",""],[5,"LLVMDIBuilderCreateSubroutineType","",""],[5,"LLVMDIBuilderCreateFunction","",""],[5,"LLVMDIBuilderCreateBasicType","",""],[5,"LLVMDIBuilderCreatePointerType","",""],[5,"LLVMDIBuilderCreateStructType","",""],[5,"LLVMDIBuilderCreateMemberType","",""],[5,"LLVMDIBuilderCreateLexicalBlock","",""],[5,"LLVMDIBuilderCreateStaticVariable","",""],[5,"LLVMDIBuilderCreateVariable","",""],[5,"LLVMDIBuilderCreateArrayType","",""],[5,"LLVMDIBuilderCreateVectorType","",""],[5,"LLVMDIBuilderGetOrCreateSubrange","",""],[5,"LLVMDIBuilderGetOrCreateArray","",""],[5,"LLVMDIBuilderInsertDeclareAtEnd","",""],[5,"LLVMDIBuilderInsertDeclareBefore","",""],[5,"LLVMDIBuilderCreateEnumerator","",""],[5,"LLVMDIBuilderCreateEnumerationType","",""],[5,"LLVMDIBuilderCreateUnionType","",""],[5,"LLVMSetUnnamedAddr","",""],[5,"LLVMDIBuilderCreateTemplateTypeParameter","",""],[5,"LLVMDIBuilderCreateOpDeref","",""],[5,"LLVMDIBuilderCreateOpPlus","",""],[5,"LLVMDIBuilderCreateNameSpace","",""],[5,"LLVMDIBuilderCreateDebugLocation","",""],[5,"LLVMDICompositeTypeSetTypeArray","",""],[5,"LLVMWriteTypeToString","",""],[5,"LLVMWriteValueToString","",""],[5,"LLVMIsAArgument","",""],[5,"LLVMIsAAllocaInst","",""],[5,"LLVMInitializeX86TargetInfo","",""],[5,"LLVMInitializeX86Target","",""],[5,"LLVMInitializeX86TargetMC","",""],[5,"LLVMInitializeX86AsmPrinter","",""],[5,"LLVMInitializeX86AsmParser","",""],[5,"LLVMInitializeARMTargetInfo","",""],[5,"LLVMInitializeARMTarget","",""],[5,"LLVMInitializeARMTargetMC","",""],[5,"LLVMInitializeARMAsmPrinter","",""],[5,"LLVMInitializeARMAsmParser","",""],[5,"LLVMInitializeAArch64TargetInfo","",""],[5,"LLVMInitializeAArch64Target","",""],[5,"LLVMInitializeAArch64TargetMC","",""],[5,"LLVMInitializeAArch64AsmPrinter","",""],[5,"LLVMInitializeAArch64AsmParser","",""],[5,"LLVMInitializeMipsTargetInfo","",""],[5,"LLVMInitializeMipsTarget","",""],[5,"LLVMInitializeMipsTargetMC","",""],[5,"LLVMInitializeMipsAsmPrinter","",""],[5,"LLVMInitializeMipsAsmParser","",""],[5,"LLVMInitializePowerPCTargetInfo","",""],[5,"LLVMInitializePowerPCTarget","",""],[5,"LLVMInitializePowerPCTargetMC","",""],[5,"LLVMInitializePowerPCAsmPrinter","",""],[5,"LLVMInitializePowerPCAsmParser","",""],[5,"LLVMRustAddPass","",""],[5,"LLVMRustCreateTargetMachine","",""],[5,"LLVMRustDisposeTargetMachine","",""],[5,"LLVMRustAddAnalysisPasses","",""],[5,"LLVMRustAddBuilderLibraryInfo","",""],[5,"LLVMRustAddLibraryInfo","",""],[5,"LLVMRustRunFunctionPassManager","",""],[5,"LLVMRustWriteOutputFile","",""],[5,"LLVMRustPrintModule","",""],[5,"LLVMRustSetLLVMOptions","",""],[5,"LLVMRustPrintPasses","",""],[5,"LLVMRustSetNormalizedTarget","",""],[5,"LLVMRustAddAlwaysInlinePass","",""],[5,"LLVMRustLinkInExternalBitcode","",""],[5,"LLVMRustRunRestrictionPass","",""],[5,"LLVMRustMarkAllFunctionsNounwind","",""],[5,"LLVMRustOpenArchive","",""],[5,"LLVMRustArchiveReadSection","",""],[5,"LLVMRustDestroyArchive","",""],[5,"LLVMRustSetDLLExportStorageClass","",""],[5,"LLVMVersionMajor","",""],[5,"LLVMVersionMinor","",""],[5,"LLVMRustGetSectionName","",""],[5,"LLVMWriteTwineToString","",""],[5,"LLVMContextSetDiagnosticHandler","",""],[5,"LLVMUnpackOptimizationDiagnostic","",""],[5,"LLVMUnpackInlineAsmDiagnostic","",""],[5,"LLVMWriteDiagnosticInfoToString","",""],[5,"LLVMGetDiagInfoSeverity","",""],[5,"LLVMGetDiagInfoKind","",""],[5,"LLVMWriteDebugLocToString","",""],[5,"LLVMSetInlineAsmDiagnosticHandler","",""],[5,"LLVMWriteSMDiagnosticToString","",""],[0,"archive_ro","","A wrapper around LLVM's archive (.a) code"],[3,"ArchiveRO","rustc_llvm::archive_ro",""],[11,"open","","Opens a static archive for read-only purposes. This is more optimized\nthan the `open` method because it uses LLVM's internal `Archive` class\nrather than shelling out to `ar` for everything.",22],[11,"read","","Reads a file in the archive",22],[11,"drop","","",22],[0,"diagnostic","rustc_llvm","LLVM diagnostic reports."],[3,"OptimizationDiagnostic","rustc_llvm::diagnostic",""],[12,"kind","","",23],[12,"pass_name","","",23],[12,"function","","",23],[12,"debug_loc","","",23],[12,"message","","",23],[3,"InlineAsmDiagnostic","",""],[12,"cookie","","",24],[12,"message","","",24],[12,"instruction","","",24],[4,"OptimizationDiagnosticKind","",""],[13,"OptimizationRemark","","",25],[13,"OptimizationMissed","","",25],[13,"OptimizationAnalysis","","",25],[13,"OptimizationFailure","","",25],[4,"Diagnostic","",""],[13,"Optimization","","",26],[13,"InlineAsm","","",26],[13,"UnknownDiagnostic","","LLVM has other types that we do not wrap here.",26],[11,"describe","","",25],[11,"unpack","","",26],[0,"debuginfo","rustc_llvm",""],[4,"DIBuilder_opaque","rustc_llvm::debuginfo",""],[4,"DIDescriptorFlags","",""],[13,"FlagPrivate","","",27],[13,"FlagProtected","","",27],[13,"FlagFwdDecl","","",27],[13,"FlagAppleBlock","","",27],[13,"FlagBlockByrefStruct","","",27],[13,"FlagVirtual","","",27],[13,"FlagArtificial","","",27],[13,"FlagExplicit","","",27],[13,"FlagPrototyped","","",27],[13,"FlagObjcClassComplete","","",27],[13,"FlagObjectPointer","","",27],[13,"FlagVector","","",27],[13,"FlagStaticMember","","",27],[13,"FlagIndirectVariable","","",27],[13,"FlagLValueReference","","",27],[13,"FlagRValueReference","","",27],[6,"DIBuilderRef","",""],[6,"DIDescriptor","",""],[6,"DIScope","",""],[6,"DILocation","",""],[6,"DIFile","",""],[6,"DILexicalBlock","",""],[6,"DISubprogram","",""],[6,"DINameSpace","",""],[6,"DIType","",""],[6,"DIBasicType","",""],[6,"DIDerivedType","",""],[6,"DICompositeType","",""],[6,"DIVariable","",""],[6,"DIGlobalVariable","",""],[6,"DIArray","",""],[6,"DISubrange","",""],[6,"DIEnumerator","",""],[6,"DITemplateTypeParameter","",""],[6,"Opcode","rustc_llvm",""],[6,"Bool","",""],[6,"ModuleRef","",""],[6,"ContextRef","",""],[6,"TypeRef","",""],[6,"ValueRef","",""],[6,"MetadataRef","",""],[6,"BasicBlockRef","",""],[6,"BuilderRef","",""],[6,"ExecutionEngineRef","",""],[6,"RustJITMemoryManagerRef","",""],[6,"MemoryBufferRef","",""],[6,"PassManagerRef","",""],[6,"PassManagerBuilderRef","",""],[6,"UseRef","",""],[6,"TargetDataRef","",""],[6,"ObjectFileRef","",""],[6,"SectionIteratorRef","",""],[6,"PassRef","",""],[6,"TargetMachineRef","",""],[6,"ArchiveRef","",""],[6,"TwineRef","",""],[6,"DiagnosticInfoRef","",""],[6,"DebugLocRef","",""],[6,"SMDiagnosticRef","",""],[6,"DiagnosticHandler","",""],[6,"InlineAsmDiagHandler","",""],[6,"RustStringRef","",""],[17,"True","",""],[17,"False","",""],[17,"ZExtAttribute","",""],[17,"SExtAttribute","",""],[17,"NoReturnAttribute","",""],[17,"InRegAttribute","",""],[17,"StructRetAttribute","",""],[17,"NoUnwindAttribute","",""],[17,"NoAliasAttribute","",""],[17,"ByValAttribute","",""],[17,"NestAttribute","",""],[17,"ReadNoneAttribute","",""],[17,"ReadOnlyAttribute","",""],[17,"NoInlineAttribute","",""],[17,"AlwaysInlineAttribute","",""],[17,"OptimizeForSizeAttribute","",""],[17,"StackProtectAttribute","",""],[17,"StackProtectReqAttribute","",""],[17,"AlignmentAttribute","",""],[17,"NoCaptureAttribute","",""],[17,"NoRedZoneAttribute","",""],[17,"NoImplicitFloatAttribute","",""],[17,"NakedAttribute","",""],[17,"InlineHintAttribute","",""],[17,"StackAttribute","",""],[17,"ReturnsTwiceAttribute","",""],[17,"UWTableAttribute","",""],[17,"NonLazyBindAttribute","",""],[8,"AttrHelper","",""],[10,"apply_llfn","","",28],[10,"apply_callsite","","",28],[11,"eq","","",3],[11,"ne","","",3],[11,"fmt","","",6],[11,"hash","","",29],[11,"cmp","","",29],[11,"partial_cmp","","",29],[11,"lt","","",29],[11,"le","","",29],[11,"gt","","",29],[11,"ge","","",29],[11,"clone","","",29],[11,"eq","","",29],[11,"ne","","",29],[11,"empty","","Returns an empty set of flags.",29],[11,"all","","Returns the set containing all flags.",29],[11,"bits","","Returns the raw value of the flags currently stored.",29],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",29],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",29],[11,"is_empty","","Returns `true` if no flags are currently stored.",29],[11,"is_all","","Returns `true` if all flags are currently set.",29],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",29],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",29],[11,"insert","","Inserts the specified flags in-place.",29],[11,"remove","","Removes the specified flags in-place.",29],[11,"toggle","","Toggles the specified flags in-place.",29],[6,"Output","",""],[11,"bitor","","Returns the union of the two sets of flags.",29],[6,"Output","",""],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",29],[6,"Output","",""],[11,"bitand","","Returns the intersection between the two sets of flags.",29],[6,"Output","",""],[11,"sub","","Returns the set difference of the two sets of flags.",29],[6,"Output","",""],[11,"not","","Returns the complement of this set of flags.",29],[11,"apply_llfn","","",29],[11,"apply_callsite","","",29],[11,"apply_llfn","","",7],[11,"apply_callsite","","",7],[11,"apply_llfn","","",8],[11,"apply_callsite","","",8],[11,"new","","",30],[11,"arg","","",30],[11,"ret","","",30],[11,"apply_llfn","","",30],[11,"apply_callsite","","",30],[11,"fmt","","",12],[11,"eq","","",12],[11,"ne","","",12],[11,"clone","","",18],[11,"eq","","",18],[11,"ne","","",18],[11,"eq","","",19],[11,"ne","","",19],[11,"drop","","",0],[11,"new","","",1],[11,"drop","","",1],[11,"drop","","",2]],"paths":[[3,"TargetData"],[3,"ObjectFile"],[3,"SectionIter"],[4,"CallConv"],[4,"Visibility"],[4,"Linkage"],[4,"DiagnosticSeverity"],[4,"OtherAttribute"],[4,"SpecialAttribute"],[4,"AttributeSet"],[4,"IntPredicate"],[4,"RealPredicate"],[4,"TypeKind"],[4,"AtomicBinOp"],[4,"AtomicOrdering"],[4,"FileType"],[4,"MetadataType"],[4,"AsmDialect"],[4,"CodeGenOptLevel"],[4,"RelocMode"],[4,"CodeGenModel"],[4,"DiagnosticKind"],[3,"ArchiveRO"],[3,"OptimizationDiagnostic"],[3,"InlineAsmDiagnostic"],[4,"OptimizationDiagnosticKind"],[4,"Diagnostic"],[4,"DIDescriptorFlags"],[8,"AttrHelper"],[3,"Attribute"],[3,"AttrBuilder"]]};
searchIndex['rustc_back'] = {"items":[[0,"","rustc_back","Some stuff used by rustc that doesn't have many dependencies"],[0,"abi","",""],[17,"BOX_FIELD_DROP_GLUE","rustc_back::abi",""],[17,"BOX_FIELD_BODY","",""],[17,"FAT_PTR_ADDR","","The first half of a fat pointer.\n- For a closure, this is the code address.\n- For an object or trait instance, this is the address of the box.\n- For a slice, this is the base address."],[17,"FAT_PTR_EXTRA","","The second half of a fat pointer.\n- For a closure, this is the address of the environment.\n- For an object or trait instance, this is the address of the vtable.\n- For a slice, this is the length."],[0,"archive","rustc_back","A helper class for dealing with static archives"],[3,"ArchiveConfig","rustc_back::archive",""],[12,"handler","","",0],[12,"dst","","",0],[12,"lib_search_paths","","",0],[12,"slib_prefix","","",0],[12,"slib_suffix","","",0],[12,"maybe_ar_prog","","",0],[3,"Archive","",""],[3,"ArchiveBuilder","","Helper for adding many files to an archive with a single invocation of\n`ar`."],[5,"find_library","",""],[17,"METADATA_FILENAME","",""],[11,"open","","Opens an existing static archive",1],[11,"remove_file","","Removes a file from this archive",1],[11,"files","","Lists all files in an archive",1],[11,"extend","","Creates an `ArchiveBuilder` for adding files to this archive.",1],[11,"create","","Create a new static archive, ready for adding files.",2],[11,"add_native_library","","Adds all of the contents of a native library to this archive. This will\nsearch in the relevant locations for a library named `name`.",2],[11,"add_rlib","","Adds all of the contents of the rlib at the specified path to this\narchive.",2],[11,"add_file","","Adds an arbitrary file to this archive",2],[11,"update_symbols","","Indicate that the next call to `build` should updates all symbols in\nthe archive (run 'ar s' over it).",2],[11,"build","","Combine the provided files, rlibs, and native libraries into a single\n`Archive`.",2],[0,"tempdir","rustc_back",""],[3,"TempDir","rustc_back::tempdir","A wrapper for a path to temporary directory implementing automatic\nscope-based deletion."],[11,"new_in","","Attempts to make a temporary directory inside of `tmpdir` whose name\nwill have the prefix `prefix`. The directory will be automatically\ndeleted once the returned wrapper is destroyed.",3],[11,"new","","Attempts to make a temporary directory inside of `env::temp_dir()` whose\nname will have the prefix `prefix`. The directory will be automatically\ndeleted once the returned wrapper is destroyed.",3],[11,"into_path","","Unwrap the wrapped `std::path::Path` from the `TempDir` wrapper.\nThis discards the wrapper so that the automatic deletion of the\ntemporary directory is prevented.",3],[11,"path","","Access the wrapped `std::path::Path` to the temporary directory.",3],[11,"close","","Close and remove the temporary directory",3],[11,"drop","","",3],[0,"arm","rustc_back",""],[5,"get_target_strs","rustc_back::arm",""],[0,"fs","rustc_back",""],[5,"realpath","rustc_back::fs","Returns an absolute path in the filesystem that `path` points to. The\nreturned path does not contain any symlinks in its hierarchy."],[0,"mips","rustc_back",""],[5,"get_target_strs","rustc_back::mips",""],[0,"mipsel","rustc_back",""],[5,"get_target_strs","rustc_back::mipsel",""],[0,"rpath","rustc_back",""],[3,"RPathConfig","rustc_back::rpath",""],[12,"used_crates","","",4],[12,"out_filename","","",4],[12,"is_like_osx","","",4],[12,"has_rpath","","",4],[12,"get_install_prefix_lib_path","","",4],[12,"realpath","","",4],[5,"get_rpath_flags","",""],[0,"sha2","rustc_back","This module implements only the Sha256 function since that is all that is needed for internal\nuse. This implementation is not intended for external use or for any use where security is\nimportant."],[3,"Sha256","rustc_back::sha2","The SHA-256 hash algorithm"],[8,"Digest","","The Digest trait specifies an interface common to digest functions, such as SHA-1 and the SHA-2\nfamily of digest functions."],[10,"input","","Provide message data.",5],[10,"result","","Retrieve the digest result. This method may be called multiple times.",5],[10,"reset","","Reset the digest. This method must be called after result() and before supplying more\ndata.",5],[10,"output_bits","","Get the output size in bits.",5],[11,"input_str","","Convenience function that feeds a string into a digest.",5],[11,"result_bytes","","Convenience function that retrieves the result of a digest as a\nnewly allocated vec of bytes.",5],[11,"result_str","","Convenience function that retrieves the result of a digest as a\nString in hexadecimal format.",5],[11,"new","","Construct a new instance of a SHA-256 digest.",6],[11,"input","","",6],[11,"result","","",6],[11,"reset","","",6],[11,"output_bits","","",6],[0,"svh","rustc_back","Calculation and management of a Strict Version Hash for crates"],[3,"Svh","rustc_back::svh",""],[11,"fmt","","",7],[11,"eq","","",7],[11,"ne","","",7],[11,"clone","","",7],[11,"new","","",7],[11,"as_str","","",7],[11,"calculate","","",7],[11,"fmt","","",7],[0,"target_strs","rustc_back",""],[3,"t","rustc_back::target_strs",""],[12,"module_asm","","",8],[12,"data_layout","","",8],[12,"target_triple","","",8],[12,"cc_args","","",8],[0,"x86","rustc_back",""],[5,"get_target_strs","rustc_back::x86",""],[0,"x86_64","rustc_back",""],[5,"get_target_strs","rustc_back::x86_64",""],[0,"target","rustc_back","[Flexible target specification.](https://github.com/rust-lang/rfcs/pull/131)"],[3,"Target","rustc_back::target","Everything `rustc` knows about how to compile for a specific target."],[12,"data_layout","","[Data layout](http://llvm.org/docs/LangRef.html#data-layout) to pass to LLVM.",9],[12,"llvm_target","","Target triple to pass to LLVM.",9],[12,"target_endian","","String to use as the `target_endian` `cfg` variable.",9],[12,"target_pointer_width","","String to use as the `target_pointer_width` `cfg` variable.",9],[12,"target_os","","OS name to use for conditional compilation.",9],[12,"arch","","Architecture to use for ABI considerations. Valid options: \"x86\", \"x86_64\", \"arm\",\n\"aarch64\", \"mips\", and \"powerpc\". \"mips\" includes \"mipsel\".",9],[12,"options","","Optional settings with defaults.",9],[3,"TargetOptions","","Optional aspects of a target specification."],[12,"linker","","Linker to invoke. Defaults to \"cc\".",10],[12,"pre_link_args","","Linker arguments that are unconditionally passed *before* any user-defined libraries.",10],[12,"post_link_args","","Linker arguments that are unconditionally passed *after* any user-defined libraries.",10],[12,"cpu","","Default CPU to pass to LLVM. Corresponds to `llc -mcpu=$cpu`. Defaults to \"default\".",10],[12,"features","","Default target features to pass to LLVM. These features will *always* be passed, and cannot\nbe disabled even via `-C`. Corresponds to `llc -mattr=$features`.",10],[12,"dynamic_linking","","Whether dynamic linking is available on this target. Defaults to false.",10],[12,"executables","","Whether executables are available on this target. iOS, for example, only allows static\nlibraries. Defaults to false.",10],[12,"morestack","","Whether LLVM's segmented stack prelude is supported by whatever runtime is available.\nWill emit stack checks and calls to __morestack. Defaults to false.",10],[12,"relocation_model","","Relocation model to use in object file. Corresponds to `llc\n-relocation-model=$relocation_model`. Defaults to \"pic\".",10],[12,"code_model","","Code model to use. Corresponds to `llc -code-model=$code_model`. Defaults to \"default\".",10],[12,"disable_redzone","","Do not emit code that uses the \"red zone\", if the ABI has one. Defaults to false.",10],[12,"eliminate_frame_pointer","","Eliminate frame pointers from stack frames if possible. Defaults to true.",10],[12,"function_sections","","Emit each function in its own section. Defaults to true.",10],[12,"dll_prefix","","String to prepend to the name of every dynamic library. Defaults to \"lib\".",10],[12,"dll_suffix","","String to append to the name of every dynamic library. Defaults to \".so\".",10],[12,"exe_suffix","","String to append to the name of every executable.",10],[12,"staticlib_prefix","","String to prepend to the name of every static library. Defaults to \"lib\".",10],[12,"staticlib_suffix","","String to append to the name of every static library. Defaults to \".a\".",10],[12,"is_like_osx","","Whether the target toolchain is like OSX's. Only useful for compiling against iOS/OS X, in\nparticular running dsymutil and some other stuff like `-dead_strip`. Defaults to false.",10],[12,"is_like_windows","","Whether the target toolchain is like Windows'. Only useful for compiling against Windows,\nonly realy used for figuring out how to find libraries, since Windows uses its own\nlibrary naming convention. Defaults to false.",10],[12,"is_like_android","","Whether the target toolchain is like Android's. Only useful for compiling against Android.\nDefaults to false.",10],[12,"linker_is_gnu","","Whether the linker support GNU-like arguments such as -O. Defaults to false.",10],[12,"has_rpath","","Whether the linker support rpaths or not. Defaults to false.",10],[12,"no_compiler_rt","","Whether to disable linking to compiler-rt. Defaults to false, as LLVM will emit references\nto the functions that compiler-rt provides.",10],[12,"position_independent_executables","","Dynamically linked executables can be compiled as position independent if the default\nrelocation model of position independent code is not changed. This is a requirement to take\nadvantage of ASLR, as otherwise the functions in the executable are not randomized and can\nbe used during an exploit of a vulnerability in any code.",10],[11,"fmt","","",9],[11,"clone","","",9],[11,"fmt","","",10],[11,"clone","","",10],[11,"default","","Create a set of \"sane defaults\" for any target. This is still incomplete, and if used for\ncompilation, will certainly not work.",10],[11,"adjust_abi","","Given a function ABI, turn \"System\" into the correct ABI for this target.",9],[11,"from_json","","Load a target descriptor from a JSON object.",9],[11,"search","","Search RUST_TARGET_PATH for a JSON file specifying the given target\ntriple. Note that it could also just be a bare filename already, so also\ncheck for that. If one of the hardcoded targets we know about, just\nreturn it directly.",9]],"paths":[[3,"ArchiveConfig"],[3,"Archive"],[3,"ArchiveBuilder"],[3,"TempDir"],[3,"RPathConfig"],[8,"Digest"],[3,"Sha256"],[3,"Svh"],[3,"t"],[3,"Target"],[3,"TargetOptions"]]};
searchIndex['unicode'] = {"items":[[0,"","unicode","# The Unicode Library"],[0,"regex","",""],[17,"UNICODE_CLASSES","unicode::regex",""],[17,"PERLD","",""],[17,"PERLS","",""],[17,"PERLW","",""],[0,"char","unicode","Character manipulation (`char` type, Unicode Scalar Value)"],[17,"MAX","unicode::char","The highest valid code point"],[5,"from_u32","","Converts a `u32` to an `Option<char>`."],[5,"from_digit","","Converts a number to the character representing it."],[11,"clone","core::num::wrapping","",0],[11,"cmp","","",0],[11,"partial_cmp","","",0],[11,"lt","","",0],[11,"le","","",0],[11,"gt","","",0],[11,"ge","","",0],[11,"eq","","",0],[11,"ne","","",0],[6,"Output","unicode::char",""],[11,"add","core::num::wrapping","",0],[6,"Output","unicode::char",""],[11,"sub","core::num::wrapping","",0],[6,"Output","unicode::char",""],[11,"mul","core::num::wrapping","",0],[6,"Output","unicode::char",""],[11,"not","core::num::wrapping","",0],[6,"Output","unicode::char",""],[11,"bitxor","core::num::wrapping","",0],[6,"Output","unicode::char",""],[11,"bitor","core::num::wrapping","",0],[6,"Output","unicode::char",""],[11,"bitand","core::num::wrapping","",0],[6,"Output","unicode::char",""],[11,"shl","core::num::wrapping","",0],[6,"Output","unicode::char",""],[11,"shr","core::num::wrapping","",0],[11,"fmt","core::num","",1],[11,"eq","","",1],[11,"ne","","",1],[6,"Err","unicode::char",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[11,"eq","core::num","",2],[11,"ne","","",2],[11,"clone","","",2],[11,"fmt","","",2],[11,"eq","","",3],[11,"ne","","",3],[11,"clone","","",3],[11,"fmt","","",3],[11,"fmt","","",2],[11,"description","","",2],[11,"eq","","",4],[11,"ne","","",4],[11,"clone","","",4],[11,"fmt","","",4],[11,"eq","","",5],[11,"ne","","",5],[11,"clone","","",5],[11,"fmt","","",5],[11,"fmt","","",4],[11,"description","","",4],[11,"hash","core::nonzero","",6],[11,"fmt","","",6],[11,"partial_cmp","","",6],[11,"lt","","",6],[11,"le","","",6],[11,"gt","","",6],[11,"ge","","",6],[11,"cmp","","",6],[11,"eq","","",6],[11,"ne","","",6],[11,"clone","","",6],[11,"new","","Create an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually \"non-zero\".",6],[6,"Target","unicode::char",""],[11,"deref","core::nonzero","",6],[6,"Target","unicode::char",""],[6,"Target","",""],[6,"Target","",""],[11,"new","core::ptr","Create a new `Unique`.",7],[11,"get","","Dereference the content.",7],[11,"get_mut","","Mutably dereference the content.",7],[6,"Target","unicode::char",""],[11,"deref","core::ptr","",7],[11,"cmp","core::marker","",8],[11,"partial_cmp","","",8],[11,"lt","","",8],[11,"le","","",8],[11,"gt","","",8],[11,"ge","","",8],[11,"eq","","",8],[11,"ne","","",8],[11,"clone","","",8],[11,"cmp","","",9],[11,"partial_cmp","","",9],[11,"lt","","",9],[11,"le","","",9],[11,"gt","","",9],[11,"ge","","",9],[11,"eq","","",9],[11,"ne","","",9],[11,"clone","","",9],[11,"hash","","",10],[11,"eq","","",10],[11,"partial_cmp","","",10],[11,"cmp","","",10],[11,"clone","","",10],[6,"Output","unicode::char",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[11,"eq","core::ops","",11],[11,"ne","","",11],[11,"clone","","",11],[11,"fmt","","",11],[11,"eq","","",12],[11,"ne","","",12],[11,"clone","","",12],[11,"fmt","","",12],[11,"eq","","",13],[11,"ne","","",13],[11,"clone","","",13],[11,"fmt","","",13],[11,"eq","","",14],[11,"ne","","",14],[11,"clone","","",14],[11,"fmt","","",14],[6,"Target","unicode::char",""],[6,"Target","",""],[6,"Output","",""],[6,"Output","",""],[11,"fmt","core::cmp","",15],[11,"eq","","",15],[11,"ne","","",15],[11,"clone","","",15],[11,"reverse","","Reverse the `Ordering`.",15],[11,"cmp","","",15],[11,"partial_cmp","","",15],[11,"is","unicode","Returns true if the boxed type is the same as `T`",16],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",16],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",16],[11,"hash","core::any","",17],[11,"fmt","","",17],[11,"eq","","",17],[11,"ne","","",17],[11,"clone","","",17],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",17],[11,"new","core::atomic","Creates a new `AtomicBool`.",18],[11,"load","","Loads a value from the bool.",18],[11,"store","","Stores a value into the bool.",18],[11,"swap","","Stores a value into the bool, returning the old value.",18],[11,"compare_and_swap","","Stores a value into the bool if the current value is the same as the expected value.",18],[11,"fetch_and","","Logical \"and\" with a boolean value.",18],[11,"fetch_nand","","Logical \"nand\" with a boolean value.",18],[11,"fetch_or","","Logical \"or\" with a boolean value.",18],[11,"fetch_xor","","Logical \"xor\" with a boolean value.",18],[11,"new","","Creates a new `AtomicIsize`.",19],[11,"load","","Loads a value from the isize.",19],[11,"store","","Stores a value into the isize.",19],[11,"swap","","Stores a value into the isize, returning the old value.",19],[11,"compare_and_swap","","Stores a value into the isize if the current value is the same as the expected value.",19],[11,"fetch_add","","Add an isize to the current value, returning the previous value.",19],[11,"fetch_sub","","Subtract an isize from the current value, returning the previous value.",19],[11,"fetch_and","","Bitwise and with the current isize, returning the previous value.",19],[11,"fetch_or","","Bitwise or with the current isize, returning the previous value.",19],[11,"fetch_xor","","Bitwise xor with the current isize, returning the previous value.",19],[11,"new","","Creates a new `AtomicUsize`.",20],[11,"load","","Loads a value from the usize.",20],[11,"store","","Stores a value into the usize.",20],[11,"swap","","Stores a value into the usize, returning the old value.",20],[11,"compare_and_swap","","Stores a value into the usize if the current value is the same as the expected value.",20],[11,"fetch_add","","Add to the current usize, returning the previous value.",20],[11,"fetch_sub","","Subtract from the current usize, returning the previous value.",20],[11,"fetch_and","","Bitwise and with the current usize, returning the previous value.",20],[11,"fetch_or","","Bitwise or with the current usize, returning the previous value.",20],[11,"fetch_xor","","Bitwise xor with the current usize, returning the previous value.",20],[11,"new","","Creates a new `AtomicPtr`.",21],[11,"load","","Loads a value from the pointer.",21],[11,"store","","Stores a value into the pointer.",21],[11,"swap","","Stores a value into the pointer, returning the old value.",21],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the expected value.",21],[11,"new","","",22],[11,"load","","",22],[11,"store","","",22],[11,"swap","","",22],[11,"compare_and_swap","","",22],[11,"fetch_add","","",22],[11,"fetch_sub","","",22],[11,"fetch_and","","",22],[11,"fetch_or","","",22],[11,"fetch_xor","","",22],[11,"new","","",23],[11,"load","","",23],[11,"store","","",23],[11,"swap","","",23],[11,"compare_and_swap","","",23],[11,"fetch_add","","",23],[11,"fetch_sub","","",23],[11,"fetch_and","","",23],[11,"fetch_or","","",23],[11,"fetch_xor","","",23],[11,"new","core::cell","Creates a new `Cell` containing the given value.",24],[11,"get","","Returns a copy of the contained value.",24],[11,"set","","Sets the contained value.",24],[11,"as_unsafe_cell","","Get a reference to the underlying `UnsafeCell`.",24],[11,"clone","","",24],[11,"default","","",24],[11,"eq","","",24],[11,"fmt","","",25],[11,"eq","","",25],[11,"ne","","",25],[11,"clone","","",25],[11,"new","","Creates a new `RefCell` containing `value`.",26],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",26],[11,"borrow_state","","Query the current state of this `RefCell`",26],[11,"try_borrow","","Attempts to immutably borrow the wrapped value.",26],[11,"borrow","","Immutably borrows the wrapped value.",26],[11,"try_borrow_mut","","Mutably borrows the wrapped value.",26],[11,"borrow_mut","","Mutably borrows the wrapped value.",26],[11,"as_unsafe_cell","","Get a reference to the underlying `UnsafeCell`.",26],[11,"clone","","",26],[11,"default","","",26],[11,"eq","","",26],[11,"drop","","",27],[11,"clone","","",27],[6,"Target","unicode::char",""],[11,"deref","core::cell","",28],[11,"drop","","",29],[6,"Target","unicode::char",""],[11,"deref","core::cell","",30],[11,"deref_mut","","",30],[11,"new","","Construct a new instance of `UnsafeCell` which will wrap the specified\nvalue.",31],[11,"get","","Gets a mutable pointer to the wrapped value.",31],[11,"into_inner","","Unwraps the value",31],[11,"clone","core::char","",32],[11,"clone","","",33],[6,"Item","unicode::char",""],[11,"next","core::char","",32],[11,"clone","","",34],[11,"clone","","",35],[6,"Item","unicode::char",""],[11,"next","core::char","",34],[11,"drop","core::finally","",36],[6,"Item","unicode::char",""],[6,"Item","",""],[6,"IntoIter","",""],[11,"clone","core::iter","",37],[6,"Item","unicode::char",""],[11,"next","core::iter","",37],[11,"size_hint","","",37],[11,"next_back","","",37],[11,"indexable","","",37],[11,"idx","","",37],[11,"fmt","","",38],[11,"eq","","",38],[11,"ne","","",38],[11,"clone","","",38],[11,"into_option","","`into_option` creates an `Option` of type `(T,T)`. The returned `Option` has variant\n`None` if and only if the `MinMaxResult` has variant `NoElements`. Otherwise variant\n`Some(x,y)` is returned where `x <= y`. If `MinMaxResult` has variant `OneElement(x)`,\nperforming this operation will make one clone of `x`.",38],[11,"clone","","",39],[6,"Item","unicode::char",""],[11,"next","core::iter","",39],[11,"size_hint","","",39],[11,"next_back","","",39],[11,"indexable","","",39],[11,"idx","","",39],[11,"clone","","",40],[6,"Item","unicode::char",""],[11,"next","core::iter","",40],[11,"size_hint","","",40],[11,"indexable","","",40],[11,"idx","","",40],[11,"clone","","",41],[6,"Item","unicode::char",""],[11,"next","core::iter","",41],[11,"size_hint","","",41],[11,"next_back","","",41],[11,"indexable","","",41],[11,"idx","","",41],[11,"clone","","",42],[6,"Item","unicode::char",""],[11,"next","core::iter","",42],[11,"size_hint","","",42],[11,"next_back","","",42],[11,"indexable","","",42],[11,"idx","","",42],[11,"clone","","",43],[6,"Item","unicode::char",""],[11,"next","core::iter","",43],[11,"size_hint","","",43],[11,"next_back","","",43],[11,"indexable","","",43],[11,"idx","","",43],[11,"clone","","",44],[6,"Item","unicode::char",""],[11,"next","core::iter","",44],[11,"size_hint","","",44],[11,"next_back","","",44],[11,"clone","","",45],[6,"Item","unicode::char",""],[11,"next","core::iter","",45],[11,"size_hint","","",45],[11,"next_back","","",45],[11,"clone","","",46],[6,"Item","unicode::char",""],[11,"next","core::iter","",46],[11,"size_hint","","",46],[11,"next_back","","",46],[11,"indexable","","",46],[11,"idx","","",46],[11,"clone","","",47],[6,"Item","unicode::char",""],[11,"next","core::iter","",47],[11,"size_hint","","",47],[11,"peek","","Return a reference to the next element of the iterator with out\nadvancing it, or None if the iterator is exhausted.",47],[11,"is_empty","","Check whether peekable iterator is empty or not.",47],[11,"clone","","",48],[6,"Item","unicode::char",""],[11,"next","core::iter","",48],[11,"size_hint","","",48],[11,"clone","","",49],[6,"Item","unicode::char",""],[11,"next","core::iter","",49],[11,"size_hint","","",49],[11,"clone","","",50],[6,"Item","unicode::char",""],[11,"next","core::iter","",50],[11,"size_hint","","",50],[11,"indexable","","",50],[11,"idx","","",50],[11,"clone","","",51],[6,"Item","unicode::char",""],[11,"next","core::iter","",51],[11,"size_hint","","",51],[11,"indexable","","",51],[11,"idx","","",51],[11,"clone","","",52],[6,"Item","unicode::char",""],[11,"next","core::iter","",52],[11,"size_hint","","",52],[11,"clone","","",53],[6,"Item","unicode::char",""],[11,"next","core::iter","",53],[11,"size_hint","","",53],[11,"next_back","","",53],[11,"clone","","",54],[6,"Item","unicode::char",""],[11,"next","core::iter","",54],[11,"size_hint","","",54],[11,"next_back","","",54],[11,"indexable","","",54],[11,"idx","","",54],[11,"reset_fuse","","Resets the fuse such that the next call to .next() or .next_back() will\ncall the underlying iterator again even if it previously returned None.",54],[11,"clone","","",55],[6,"Item","unicode::char",""],[11,"next","core::iter","",55],[11,"size_hint","","",55],[11,"next_back","","",55],[11,"indexable","","",55],[11,"idx","","",55],[11,"clone","","",56],[11,"new","","Creates a new iterator with the specified closure as the \"iterator\nfunction\" and an initial state to eventually pass to the closure",56],[6,"Item","unicode::char",""],[11,"next","core::iter","",56],[11,"size_hint","","",56],[11,"clone","","",57],[6,"Item","unicode::char",""],[11,"next","core::iter","",57],[11,"size_hint","","",57],[11,"clone","","",58],[6,"Item","unicode::char",""],[11,"next","core::iter","",58],[11,"size_hint","","",58],[11,"next_back","","",58],[11,"clone","","",59],[6,"Item","unicode::char",""],[11,"next","core::iter","",59],[11,"size_hint","","",59],[11,"next_back","","",59],[11,"clone","","",60],[6,"Item","unicode::char",""],[11,"next","core::iter","",60],[11,"clone","","",61],[6,"Item","unicode::char",""],[11,"next","core::iter","",61],[6,"Item","unicode::char",""],[11,"next","core::ops","",12],[11,"size_hint","","",12],[11,"next_back","","",12],[6,"Item","unicode::char",""],[11,"next","core::ops","",13],[11,"clone","core::iter","",62],[6,"Item","unicode::char",""],[11,"next","core::iter","",62],[11,"size_hint","","",62],[11,"next_back","","",62],[11,"indexable","","",62],[11,"idx","","",62],[11,"hash","core::option","",63],[11,"fmt","","",63],[11,"cmp","","",63],[11,"partial_cmp","","",63],[11,"lt","","",63],[11,"le","","",63],[11,"gt","","",63],[11,"ge","","",63],[11,"eq","","",63],[11,"ne","","",63],[11,"clone","","",63],[11,"is_some","","Returns `true` if the option is a `Some` value",63],[11,"is_none","","Returns `true` if the option is a `None` value",63],[11,"as_ref","","Convert from `Option<T>` to `Option<&T>`",63],[11,"as_mut","","Convert from `Option<T>` to `Option<&mut T>`",63],[11,"as_mut_slice","","Convert from `Option<T>` to `&mut [T]` (without copying)",63],[11,"expect","","Unwraps an option, yielding the content of a `Some`",63],[11,"unwrap","","Returns the inner `T` of a `Some(T)`.",63],[11,"unwrap_or","","Returns the contained value or a default.",63],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",63],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value",63],[11,"map_or","","Applies a function to the contained value or returns a default.",63],[11,"map_or_else","","Applies a function to the contained value or computes a default.",63],[11,"ok_or","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",63],[11,"ok_or_else","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",63],[11,"iter","","Returns an iterator over the possibly contained value.",63],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",63],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",63],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",63],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",63],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",63],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",63],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",63],[11,"cloned","","Maps an Option<D> to an Option<T> by dereffing and cloning the contents of the Option.\nUseful for converting an Option<&T> to an Option<T>.",63],[11,"unwrap_or_default","","Returns the contained value or a default",63],[11,"as_slice","","Convert from `Option<T>` to `&[T]` (without copying)",63],[11,"default","","",63],[11,"clone","","",64],[6,"Item","unicode::char",""],[11,"next","core::option","",64],[11,"size_hint","","",64],[11,"next_back","","",64],[6,"Item","unicode::char",""],[11,"next","core::option","",65],[11,"size_hint","","",65],[11,"next_back","","",65],[11,"clone","","",65],[6,"Item","unicode::char",""],[11,"next","core::option","",66],[11,"size_hint","","",66],[11,"next_back","","",66],[6,"Item","unicode::char",""],[11,"next","core::option","",67],[11,"size_hint","","",67],[11,"next_back","","",67],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",63],[11,"hash","core::result","",68],[11,"fmt","","",68],[11,"cmp","","",68],[11,"partial_cmp","","",68],[11,"lt","","",68],[11,"le","","",68],[11,"gt","","",68],[11,"ge","","",68],[11,"eq","","",68],[11,"ne","","",68],[11,"clone","","",68],[11,"is_ok","","Returns true if the result is `Ok`",68],[11,"is_err","","Returns true if the result is `Err`",68],[11,"ok","","Convert from `Result<T, E>` to `Option<T>`",68],[11,"err","","Convert from `Result<T, E>` to `Option<E>`",68],[11,"as_ref","","Convert from `Result<T, E>` to `Result<&T, &E>`",68],[11,"as_mut","","Convert from `Result<T, E>` to `Result<&mut T, &mut E>`",68],[11,"as_mut_slice","","Convert from `Result<T, E>` to `&mut [T]` (without copying)",68],[11,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to an\ncontained `Ok` value, leaving an `Err` value untouched.",68],[11,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to an\ncontained `Err` value, leaving an `Ok` value untouched.",68],[11,"iter","","Returns an iterator over the possibly contained value.",68],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",68],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",68],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",68],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",68],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",68],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",68],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",68],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",68],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",68],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",68],[11,"as_slice","","Convert from `Result<T, E>` to `&[T]` (without copying)",68],[6,"Item","unicode::char",""],[11,"next","core::result","",69],[11,"size_hint","","",69],[11,"next_back","","",69],[11,"clone","","",69],[6,"Item","unicode::char",""],[11,"next","core::result","",70],[11,"size_hint","","",70],[11,"next_back","","",70],[6,"Item","unicode::char",""],[11,"next","core::result","",71],[11,"size_hint","","",71],[11,"next_back","","",71],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",68],[11,"fmt","core::simd","",72],[11,"fmt","","",73],[11,"fmt","","",74],[11,"fmt","","",75],[11,"fmt","","",76],[11,"fmt","","",77],[11,"fmt","","",78],[11,"fmt","","",79],[11,"fmt","","",80],[11,"fmt","","",81],[6,"Item","unicode::char",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Output","",""],[11,"index","core::slice","",82],[6,"Output","unicode::char",""],[11,"index","core::slice","",82],[6,"Output","unicode::char",""],[11,"index","core::slice","",82],[6,"Output","unicode::char",""],[11,"index","core::slice","",82],[11,"as_slice","","View the underlying data as a subslice of the original data.",82],[6,"Item","unicode::char",""],[11,"next","core::slice","",82],[11,"size_hint","","",82],[11,"next_back","","",82],[11,"clone","","",82],[11,"indexable","","",82],[11,"idx","","",82],[6,"Output","unicode::char",""],[11,"index","core::slice","",83],[6,"Output","unicode::char",""],[11,"index","core::slice","",83],[6,"Output","unicode::char",""],[11,"index","core::slice","",83],[6,"Output","unicode::char",""],[11,"index","core::slice","",83],[11,"index_mut","","",83],[11,"index_mut","","",83],[11,"index_mut","","",83],[11,"index_mut","","",83],[11,"into_slice","","View the underlying data as a subslice of the original data.",83],[6,"Item","unicode::char",""],[11,"next","core::slice","",83],[11,"size_hint","","",83],[11,"next_back","","",83],[11,"clone","","",84],[6,"Item","unicode::char",""],[11,"next","core::slice","",84],[11,"size_hint","","",84],[11,"next_back","","",84],[11,"finish","","",84],[11,"finish","","",85],[6,"Item","unicode::char",""],[11,"next","core::slice","",85],[11,"size_hint","","",85],[11,"next_back","","",85],[6,"Item","unicode::char",""],[11,"next","core::slice","",86],[11,"size_hint","","",86],[6,"Item","unicode::char",""],[11,"next","core::slice","",87],[11,"size_hint","","",87],[6,"Item","unicode::char",""],[11,"next","core::slice","",88],[11,"size_hint","","",88],[6,"Item","unicode::char",""],[11,"next","core::slice","",89],[11,"size_hint","","",89],[6,"Item","unicode::char",""],[11,"next","core::slice","",90],[11,"size_hint","","",90],[11,"clone","","",91],[6,"Item","unicode::char",""],[11,"next","core::slice","",91],[11,"size_hint","","",91],[11,"next_back","","",91],[11,"indexable","","",91],[11,"idx","","",91],[11,"clone","","",92],[6,"Item","unicode::char",""],[11,"next","core::slice","",92],[11,"size_hint","","",92],[11,"next_back","","",92],[11,"indexable","","",92],[11,"idx","","",92],[6,"Item","unicode::char",""],[11,"next","core::slice","",93],[11,"size_hint","","",93],[11,"next_back","","",93],[11,"fmt","core::str::pattern","",94],[11,"eq","","",94],[11,"ne","","",94],[11,"clone","","",94],[6,"Searcher","unicode::char",""],[11,"into_searcher","core::str::pattern","",95],[11,"haystack","","",96],[11,"next","","",96],[11,"next_back","","",96],[11,"clone","","",97],[6,"Searcher","unicode::char",""],[11,"haystack","core::str::pattern","",97],[11,"next","","",97],[11,"next_back","","",97],[6,"Searcher","unicode::char",""],[6,"Searcher","",""],[6,"Searcher","",""],[6,"Searcher","",""],[6,"Err","",""],[11,"eq","core::str","",98],[11,"ne","","",98],[11,"clone","","",98],[11,"fmt","","",98],[11,"fmt","","",98],[11,"description","","",98],[11,"fmt","","",99],[11,"clone","","",99],[11,"eq","","",99],[11,"ne","","",99],[11,"description","","",99],[11,"fmt","","",99],[11,"clone","","",100],[6,"Item","unicode::char",""],[11,"next","core::str","",100],[11,"size_hint","","",100],[11,"next_back","","",100],[11,"clone","","",101],[6,"Item","unicode::char",""],[11,"next","core::str","",101],[11,"size_hint","","",101],[11,"next_back","","",101],[11,"clone","","",102],[6,"Item","unicode::char",""],[11,"next","core::str","",102],[11,"size_hint","","",102],[11,"next_back","","",102],[11,"len","","",102],[11,"clone","","",103],[6,"Output","unicode::char",""],[11,"call","core::str","",103],[6,"Item","unicode::char",""],[11,"next","core::str","",104],[11,"next_back","","",104],[6,"Item","unicode::char",""],[11,"next","core::str","",105],[11,"clone","","",106],[11,"clone","","",107],[11,"clone","","",108],[6,"Item","unicode::char",""],[11,"next","core::str","",109],[6,"Item","unicode::char",""],[11,"next","core::str","",110],[6,"Output","unicode::char",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Item","",""],[11,"next","core::str","",111],[11,"next_back","","",111],[6,"Item","unicode::char",""],[11,"next","core::str","",112],[11,"size_hint","","",112],[11,"next_back","","",112],[6,"Item","unicode::char",""],[11,"next","core::str","",113],[11,"size_hint","","",113],[6,"Item","unicode::char",""],[11,"next","core::str","",114],[11,"size_hint","","",114],[6,"Item","unicode::char",""],[11,"next","core::str","",115],[11,"size_hint","","",115],[11,"next_back","","",115],[6,"Item","unicode::char",""],[11,"next","core::str","",116],[11,"size_hint","","",116],[11,"next_back","","",116],[11,"new","core::hash::sip","Creates a new `SipHasher` with the two initial keys set to 0.",117],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",117],[11,"result","","Returns the computed hash.",117],[11,"write","","",117],[11,"finish","","",117],[11,"clone","","",117],[11,"default","","",117],[11,"eq","core::fmt::num","",118],[11,"ne","","",118],[11,"clone","","",118],[11,"eq","","",119],[11,"ne","","",119],[11,"clone","","",119],[11,"eq","","",120],[11,"ne","","",120],[11,"clone","","",120],[11,"eq","","",121],[11,"ne","","",121],[11,"clone","","",121],[11,"eq","","",122],[11,"ne","","",122],[11,"clone","","",122],[11,"eq","","",123],[11,"ne","","",123],[11,"clone","","",123],[11,"fmt","","",124],[11,"fmt","","",124],[11,"fmt","","",124],[11,"fmt","","",124],[11,"fmt","","",124],[11,"fmt","","",124],[11,"fmt","","",124],[11,"fmt","","",124],[11,"fmt","","",124],[11,"fmt","","",124],[11,"fmt","","",124],[11,"fmt","","",124],[11,"fmt","","",124],[11,"fmt","","",124],[11,"fmt","","",124],[11,"fmt","","",124],[11,"fmt","","",124],[11,"fmt","","",124],[11,"fmt","","",124],[11,"fmt","","",124],[11,"eq","core::fmt::rt::v1","",125],[11,"ne","","",125],[11,"fmt","core::fmt","",126],[11,"fmt","","",127],[11,"fmt","","",127],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",128],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",128],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",128],[11,"write_fmt","","Writes some formatted information into this instance",128],[11,"flags","","Flags for formatting (packed version of rt::Flag)",128],[11,"fill","","Character used as 'fill' whenever there is alignment",128],[11,"align","","Flag indicating what form of alignment was requested",128],[11,"width","","Optionally specified integer width that the output should be",128],[11,"precision","","Optionally specified precision for numeric types",128],[11,"fmt","","",126],[11,"fmt","core::marker","",10],[11,"fmt","core::cell","",24],[11,"fmt","","",26],[11,"fmt","","",28],[11,"fmt","","",30],[6,"Item","unicode::char",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[3,"EscapeUnicode","","An iterator over the characters that represent a `char`, as escaped by\nRust's unicode escaping rules."],[3,"EscapeDefault","","An iterator over the characters that represent a `char`, escaped\nfor maximum portability."],[3,"ToLowercase","","An iterator over the lowercase mapping of a given character, returned from\nthe `lowercase` method on characters."],[3,"ToUppercase","","An iterator over the uppercase mapping of a given character, returned from\nthe `uppercase` method on characters."],[5,"decompose_canonical","","Compute canonical Unicode decomposition for character"],[5,"decompose_compatible","","Compute canonical or compatible Unicode decomposition for character"],[5,"compose","",""],[5,"canonical_combining_class","",""],[17,"UNICODE_VERSION","","The version of [Unicode](http://www.unicode.org/)\nthat the unicode parts of `CharExt` and `UnicodeStrPrelude` traits are based on."],[8,"CharExt","","Functionality for manipulating `char`."],[10,"is_digit","","Checks if a `char` parses as a numeric digit in the given radix.",129],[10,"to_digit","","Converts a character to the corresponding digit.",129],[10,"escape_unicode","","Returns an iterator that yields the hexadecimal Unicode escape of a\ncharacter, as `char`s.",129],[10,"escape_default","","Returns an iterator that yields the 'default' ASCII and\nC++11-like literal escape of a character, as `char`s.",129],[10,"len_utf8","","Returns the number of bytes this character would need if encoded in\nUTF-8.",129],[10,"len_utf16","","Returns the number of 16-bit code units this character would need if\nencoded in UTF-16.",129],[10,"encode_utf8","","Encodes this character as UTF-8 into the provided byte buffer, and then\nreturns the number of bytes written.",129],[10,"encode_utf16","","Encodes this character as UTF-16 into the provided `u16` buffer, and\nthen returns the number of `u16`s written.",129],[10,"is_alphabetic","","Returns whether the specified character is considered a Unicode\nalphabetic code point.",129],[10,"is_xid_start","","Returns whether the specified character satisfies the 'XID_Start'\nUnicode property.",129],[10,"is_xid_continue","","Returns whether the specified `char` satisfies the 'XID_Continue'\nUnicode property.",129],[10,"is_lowercase","","Indicates whether a character is in lowercase.",129],[10,"is_uppercase","","Indicates whether a character is in uppercase.",129],[10,"is_whitespace","","Indicates whether a character is whitespace.",129],[10,"is_alphanumeric","","Indicates whether a character is alphanumeric.",129],[10,"is_control","","Indicates whether a character is a control code point.",129],[10,"is_numeric","","Indicates whether the character is numeric (Nd, Nl, or No).",129],[10,"to_lowercase","","Converts a character to its lowercase equivalent.",129],[10,"to_uppercase","","Converts a character to its uppercase equivalent.",129],[10,"width","","Returns this character's displayed width in columns, or `None` if it is a\ncontrol character other than `'\\x00'`.",129],[6,"Item","",""],[11,"next","","",130],[6,"Item","",""],[11,"next","","",131],[0,"str","unicode",""],[3,"Words","unicode::str","An iterator over the words of a string, separated by a sequence of whitespace"],[3,"Graphemes","","External iterator for a string's\n[grapheme clusters](http://www.unicode.org/reports/tr29/#Grapheme_Cluster_Boundaries)."],[3,"GraphemeIndices","","External iterator for grapheme clusters and byte offsets."],[3,"Utf16Items","","An iterator that decodes UTF-16 encoded codepoints from a vector\nof `u16`s."],[3,"Utf16Encoder","","Iterator adaptor for encoding `char`s to UTF-16."],[4,"Utf16Item","","The possibilities for values decoded from a `u16` stream."],[13,"ScalarValue","","A valid codepoint.",132],[13,"LoneSurrogate","","An invalid surrogate without its pair.",132],[5,"utf8_char_width","","Given a first byte, determine how many bytes are in this UTF-8 character"],[5,"is_utf16","","Determines if a vector of `u16` contains valid UTF-16"],[5,"utf16_items","","Create an iterator over the UTF-16 encoded codepoints in `v`,\nreturning invalid surrogates as `LoneSurrogate`s."],[8,"UnicodeStr","","Methods for Unicode string slices"],[10,"graphemes","","",133],[10,"grapheme_indices","","",133],[10,"words","","",133],[10,"is_whitespace","","",133],[10,"is_alphanumeric","","",133],[10,"width","","",133],[10,"trim","","",133],[10,"trim_left","","",133],[10,"trim_right","","",133],[15,"char","unicode","Character manipulation (`char` type, Unicode Scalar Value)"],[11,"clone","unicode::str","",134],[11,"next","","",134],[11,"size_hint","","",134],[11,"next_back","","",134],[11,"clone","","",135],[11,"size_hint","","",135],[11,"next","","",135],[11,"next_back","","",135],[11,"clone","","",136],[11,"fmt","","",132],[11,"clone","","",132],[11,"eq","","",132],[11,"ne","","",132],[11,"to_char_lossy","","Convert `self` to a `char`, taking `LoneSurrogate`s to the\nreplacement character (U+FFFD).",132],[11,"next","","",136],[11,"size_hint","","",136],[11,"clone","","",137],[11,"new","","Create an UTF-16 encoder from any `char` iterator.",137],[11,"next","","",137],[11,"size_hint","","",137],[11,"next","","",138],[11,"next_back","","",138]],"paths":[[3,"Wrapping"],[4,"FpCategory"],[3,"ParseIntError"],[4,"IntErrorKind"],[3,"ParseFloatError"],[4,"FloatErrorKind"],[3,"NonZero"],[3,"Unique"],[3,"NoCopy"],[3,"Managed"],[3,"PhantomData"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"Ordering"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"AtomicPtr"],[3,"AtomicInt"],[3,"AtomicUint"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"BorrowRef"],[3,"Ref"],[3,"BorrowRefMut"],[3,"RefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[4,"EscapeUnicodeState"],[3,"EscapeDefault"],[4,"EscapeDefaultState"],[3,"Finallyalizer"],[3,"Rev"],[4,"MinMaxResult"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"Unfold"],[3,"Counter"],[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"],[3,"Repeat"],[4,"Option"],[3,"Item"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"i8x16"],[3,"i16x8"],[3,"i32x4"],[3,"i64x2"],[3,"u8x16"],[3,"u16x8"],[3,"u32x4"],[3,"u64x2"],[3,"f32x4"],[3,"f64x2"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"GenericSplitN"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[4,"SearchStep"],[3,"CharEqPattern"],[3,"CharEqSearcher"],[3,"StrSearcher"],[3,"ParseBoolError"],[4,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"BytesDeref"],[3,"CharSplits"],[3,"CharSplitsN"],[3,"TwoWaySearcher"],[4,"OldSearcher"],[3,"OldMatchIndices"],[3,"MatchIndices"],[3,"SplitStr"],[3,"Split"],[3,"SplitTerminator"],[3,"SplitN"],[3,"RSplitN"],[3,"Lines"],[3,"LinesAny"],[3,"SipHasher"],[3,"Binary"],[3,"Octal"],[3,"Decimal"],[3,"LowerHex"],[3,"UpperHex"],[3,"Radix"],[3,"RadixFmt"],[4,"Alignment"],[3,"Error"],[3,"Arguments"],[3,"Formatter"],[8,"CharExt"],[3,"ToLowercase"],[3,"ToUppercase"],[4,"Utf16Item"],[8,"UnicodeStr"],[3,"GraphemeIndices"],[3,"Graphemes"],[3,"Utf16Items"],[3,"Utf16Encoder"],[3,"Words"]]};
searchIndex['alloc'] = {"items":[[0,"","alloc","# The Rust core allocation library"],[5,"oom","","Common out-of-memory routine"],[0,"heap","",""],[5,"allocate","alloc::heap","Return a pointer to `size` bytes of memory aligned to `align`."],[5,"reallocate","","Resize the allocation referenced by `ptr` to `size` bytes."],[5,"reallocate_inplace","","Resize the allocation referenced by `ptr` to `size` bytes."],[5,"deallocate","","Deallocates the memory referenced by `ptr`."],[5,"usable_size","","Returns the usable size of an allocation created with the specified the\n`size` and `align`."],[5,"stats_print","","Prints implementation-defined allocator statistics."],[17,"EMPTY","","An arbitrary non-null address to represent zero-size allocations."],[0,"boxed","alloc","A pointer type for heap allocation."],[3,"Box","alloc::boxed","A pointer type for heap allocation."],[5,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer."],[7,"HEAP","","A value that represents the heap. This is the default place that the `box`\nkeyword allocates into when no place is supplied."],[8,"BoxAny","","Extension methods for an owning `Any` trait object."],[10,"downcast","","Returns the boxed value if it is of type `T`, or\n`Err(Self)` if it isn't.",0],[11,"new","","Allocates memory on the heap and then moves `x` into it.",1],[11,"from_raw","","Constructs a box from the raw pointer.",1],[11,"default","","",1],[11,"default","","",1],[11,"clone","","Returns a new box with a `clone()` of this box's contents.",1],[11,"clone_from","","Copies `source`'s contents into `self` without creating a new allocation.",1],[11,"eq","","",1],[11,"ne","","",1],[11,"partial_cmp","","",1],[11,"lt","","",1],[11,"le","","",1],[11,"ge","","",1],[11,"gt","","",1],[11,"cmp","","",1],[11,"hash","","",1],[11,"downcast","","",1],[11,"fmt","","",1],[11,"fmt","","",1],[11,"fmt","","",1],[6,"Target","",""],[11,"deref","","",1],[11,"deref_mut","","",1],[6,"Item","",""],[11,"next","","",1],[11,"size_hint","","",1],[11,"next_back","","",1],[11,"from_error","","",1],[0,"arc","alloc","Threadsafe reference-counted boxes (the `Arc<T>` type)."],[3,"Arc","alloc::arc","An atomically reference counted wrapper for shared state."],[3,"Weak","","A weak pointer to an `Arc`."],[5,"weak_count","","Get the number of weak references to this value."],[5,"strong_count","","Get the number of strong references to this value."],[11,"fmt","","",2],[11,"new","","Constructs a new `Arc<T>`.",3],[11,"downgrade","","Downgrades the `Arc<T>` to a `Weak<T>` reference.",3],[11,"clone","","Makes a clone of the `Arc<T>`.",3],[6,"Target","",""],[11,"deref","","",3],[11,"make_unique","","Make a mutable reference from the given `Arc<T>`.",3],[11,"drop","","Drops the `Arc<T>`.",3],[11,"upgrade","","Upgrades a weak reference to a strong reference.",2],[11,"clone","","Makes a clone of the `Weak<T>`.",2],[11,"drop","","Drops the `Weak<T>`.",2],[11,"eq","","Equality for two `Arc<T>`s.",3],[11,"ne","","Inequality for two `Arc<T>`s.",3],[11,"partial_cmp","","Partial comparison for two `Arc<T>`s.",3],[11,"lt","","Less-than comparison for two `Arc<T>`s.",3],[11,"le","","'Less-than or equal to' comparison for two `Arc<T>`s.",3],[11,"gt","","Greater-than comparison for two `Arc<T>`s.",3],[11,"ge","","'Greater-than or equal to' comparison for two `Arc<T>`s.",3],[11,"cmp","","",3],[11,"fmt","","",3],[11,"fmt","","",3],[11,"default","","",3],[11,"hash","","",3],[0,"rc","alloc","Thread-local reference-counted boxes (the `Rc<T>` type)."],[3,"Rc","alloc::rc","A reference-counted pointer type over an immutable value."],[3,"Weak","","A weak version of `Rc<T>`."],[5,"weak_count","","Get the number of weak references to this value."],[5,"strong_count","","Get the number of strong references to this value."],[5,"is_unique","","Returns true if there are no other `Rc` or `Weak<T>` values that share the same inner value."],[5,"try_unwrap","","Unwraps the contained value if the `Rc<T>` is unique."],[5,"get_mut","","Returns a mutable reference to the contained value if the `Rc<T>` is unique."],[11,"new","","Constructs a new `Rc<T>`.",4],[11,"downgrade","","Downgrades the `Rc<T>` to a `Weak<T>` reference.",4],[11,"make_unique","","Make a mutable reference from the given `Rc<T>`.",4],[6,"Target","",""],[11,"deref","","",4],[11,"drop","","Drops the `Rc<T>`.",4],[11,"clone","","Makes a clone of the `Rc<T>`.",4],[11,"default","","Creates a new `Rc<T>`, with the `Default` value for `T`.",4],[11,"eq","","Equality for two `Rc<T>`s.",4],[11,"ne","","Inequality for two `Rc<T>`s.",4],[11,"partial_cmp","","Partial comparison for two `Rc<T>`s.",4],[11,"lt","","Less-than comparison for two `Rc<T>`s.",4],[11,"le","","'Less-than or equal to' comparison for two `Rc<T>`s.",4],[11,"gt","","Greater-than comparison for two `Rc<T>`s.",4],[11,"ge","","'Greater-than or equal to' comparison for two `Rc<T>`s.",4],[11,"cmp","","Comparison for two `Rc<T>`s.",4],[11,"hash","","",4],[11,"fmt","","",4],[11,"fmt","","",4],[11,"upgrade","","Upgrades a weak reference to a strong reference.",5],[11,"drop","","Drops the `Weak<T>`.",5],[11,"clone","","Makes a clone of the `Weak<T>`.",5],[11,"fmt","","",5]],"paths":[[8,"BoxAny"],[3,"Box"],[3,"Weak"],[3,"Arc"],[3,"Rc"],[3,"Weak"]]};
searchIndex['rbml'] = {"items":[[0,"","rbml","Really Bad Markup Language (rbml) is an internal serialization format of rustc.\nThis is not intended to be used by users."],[3,"Doc","","Common data structures"],[12,"data","","",0],[12,"start","","",0],[12,"end","","",0],[3,"TaggedDoc","",""],[12,"doc","","",1],[4,"EbmlEncoderTag","",""],[13,"EsU8","","",2],[13,"EsU16","","",2],[13,"EsU32","","",2],[13,"EsU64","","",2],[13,"EsI8","","",2],[13,"EsI16","","",2],[13,"EsI32","","",2],[13,"EsI64","","",2],[13,"EsBool","","",2],[13,"EsChar","","",2],[13,"EsF32","","",2],[13,"EsF64","","",2],[13,"EsSub8","","",2],[13,"EsSub32","","",2],[13,"EsStr","","",2],[13,"EsEnum","","",2],[13,"EsVec","","",2],[13,"EsVecElt","","",2],[13,"EsMap","","",2],[13,"EsMapKey","","",2],[13,"EsMapVal","","",2],[13,"EsOpaque","","",2],[4,"Error","",""],[13,"IntTooBig","","",3],[13,"InvalidTag","","",3],[13,"Expected","","",3],[13,"IoError","","",3],[13,"ApplicationError","","",3],[0,"io","",""],[3,"SeekableMemWriter","rbml::io","Writes to an owned, growable byte vector that supports seeking."],[11,"new","","Create a new `SeekableMemWriter`.",4],[11,"with_capacity","","Create a new `SeekableMemWriter`, allocating at least `n` bytes for\nthe internal buffer.",4],[11,"get_ref","","Acquires an immutable reference to the underlying buffer of this\n`SeekableMemWriter`.",4],[11,"unwrap","","Unwraps this `SeekableMemWriter`, returning the underlying buffer",4],[11,"write_all","","",4],[11,"tell","","",4],[11,"seek","","",4],[0,"reader","rbml",""],[3,"Res","rbml::reader",""],[12,"val","","",5],[12,"next","","",5],[3,"Decoder","",""],[5,"tag_at","",""],[5,"vuint_at","",""],[5,"tag_len_at","",""],[5,"doc_at","",""],[5,"maybe_get_doc","",""],[5,"get_doc","",""],[5,"docs","",""],[5,"tagged_docs","",""],[5,"with_doc_data","",""],[5,"doc_as_u8","",""],[5,"doc_as_u16","",""],[5,"doc_as_u32","",""],[5,"doc_as_u64","",""],[5,"doc_as_i8","",""],[5,"doc_as_i16","",""],[5,"doc_as_i32","",""],[5,"doc_as_i64","",""],[6,"DecodeResult","",""],[11,"new","","",6],[11,"read_opaque","","",6],[6,"Error","",""],[11,"read_nil","","",6],[11,"read_u64","","",6],[11,"read_u32","","",6],[11,"read_u16","","",6],[11,"read_u8","","",6],[11,"read_uint","","",6],[11,"read_i64","","",6],[11,"read_i32","","",6],[11,"read_i16","","",6],[11,"read_i8","","",6],[11,"read_int","","",6],[11,"read_bool","","",6],[11,"read_f64","","",6],[11,"read_f32","","",6],[11,"read_char","","",6],[11,"read_str","","",6],[11,"read_enum","","",6],[11,"read_enum_variant","","",6],[11,"read_enum_variant_arg","","",6],[11,"read_enum_struct_variant","","",6],[11,"read_enum_struct_variant_field","","",6],[11,"read_struct","","",6],[11,"read_struct_field","","",6],[11,"read_tuple","","",6],[11,"read_tuple_arg","","",6],[11,"read_tuple_struct","","",6],[11,"read_tuple_struct_arg","","",6],[11,"read_option","","",6],[11,"read_seq","","",6],[11,"read_seq_elt","","",6],[11,"read_map","","",6],[11,"read_map_elt_key","","",6],[11,"read_map_elt_val","","",6],[11,"error","","",6],[0,"writer","rbml",""],[3,"Encoder","rbml::writer",""],[12,"writer","","",7],[6,"EncodeResult","",""],[11,"new","","",7],[11,"unsafe_clone","","FIXME(pcwalton): Workaround for badness in trans. DO NOT USE ME.",7],[11,"start_tag","","",7],[11,"end_tag","","",7],[11,"wr_tag","","",7],[11,"wr_tagged_bytes","","",7],[11,"wr_tagged_u64","","",7],[11,"wr_tagged_u32","","",7],[11,"wr_tagged_u16","","",7],[11,"wr_tagged_u8","","",7],[11,"wr_tagged_i64","","",7],[11,"wr_tagged_i32","","",7],[11,"wr_tagged_i16","","",7],[11,"wr_tagged_i8","","",7],[11,"wr_tagged_str","","",7],[11,"wr_bytes","","",7],[11,"wr_str","","",7],[11,"mark_stable_position","","Returns the current position while marking it stable, i.e.\ngenerated bytes so far woundn't be affected by relaxation.",7],[11,"emit_opaque","","",7],[6,"Error","",""],[11,"emit_nil","","",7],[11,"emit_uint","","",7],[11,"emit_u64","","",7],[11,"emit_u32","","",7],[11,"emit_u16","","",7],[11,"emit_u8","","",7],[11,"emit_int","","",7],[11,"emit_i64","","",7],[11,"emit_i32","","",7],[11,"emit_i16","","",7],[11,"emit_i8","","",7],[11,"emit_bool","","",7],[11,"emit_f64","","",7],[11,"emit_f32","","",7],[11,"emit_char","","",7],[11,"emit_str","","",7],[11,"emit_enum","","",7],[11,"emit_enum_variant","","",7],[11,"emit_enum_variant_arg","","",7],[11,"emit_enum_struct_variant","","",7],[11,"emit_enum_struct_variant_field","","",7],[11,"emit_struct","","",7],[11,"emit_struct_field","","",7],[11,"emit_tuple","","",7],[11,"emit_tuple_arg","","",7],[11,"emit_tuple_struct","","",7],[11,"emit_tuple_struct_arg","","",7],[11,"emit_option","","",7],[11,"emit_option_none","","",7],[11,"emit_option_some","","",7],[11,"emit_seq","","",7],[11,"emit_seq_elt","","",7],[11,"emit_map","","",7],[11,"emit_map_elt_key","","",7],[11,"emit_map_elt_val","","",7],[11,"clone","rbml","",0],[11,"new","","",0],[11,"get","","",0],[11,"is_empty","","",0],[11,"as_str_slice","","",0],[11,"as_str","","",0],[11,"fmt","","",2],[11,"fmt","","",3],[11,"fmt","","",3]],"paths":[[3,"Doc"],[3,"TaggedDoc"],[4,"EbmlEncoderTag"],[4,"Error"],[3,"SeekableMemWriter"],[3,"Res"],[3,"Decoder"],[3,"Encoder"]]};
searchIndex['core'] = {"items":[[0,"","core","# The Rust Core Library"],[0,"isize","","Operations and constants for pointer-sized signed integers (`isize` type)"],[17,"BITS","core::isize",""],[17,"BYTES","",""],[17,"MIN","",""],[17,"MAX","",""],[0,"i8","core","Operations and constants for signed 8-bits integers (`i8` type)"],[17,"BITS","core::i8",""],[17,"BYTES","",""],[17,"MIN","",""],[17,"MAX","",""],[0,"i16","core","Operations and constants for signed 16-bits integers (`i16` type)"],[17,"BITS","core::i16",""],[17,"BYTES","",""],[17,"MIN","",""],[17,"MAX","",""],[0,"i32","core","Operations and constants for signed 32-bits integers (`i32` type)"],[17,"BITS","core::i32",""],[17,"BYTES","",""],[17,"MIN","",""],[17,"MAX","",""],[0,"i64","core","Operations and constants for signed 64-bits integers (`i64` type)"],[17,"BITS","core::i64",""],[17,"BYTES","",""],[17,"MIN","",""],[17,"MAX","",""],[0,"usize","core","Operations and constants for pointer-sized unsigned integers (`usize` type)"],[17,"BITS","core::usize",""],[17,"BYTES","",""],[17,"MIN","",""],[17,"MAX","",""],[0,"u8","core","Operations and constants for unsigned 8-bits integers (`u8` type)"],[17,"BITS","core::u8",""],[17,"BYTES","",""],[17,"MIN","",""],[17,"MAX","",""],[0,"u16","core","Operations and constants for unsigned 16-bits integers (`u16` type)"],[17,"BITS","core::u16",""],[17,"BYTES","",""],[17,"MIN","",""],[17,"MAX","",""],[0,"u32","core","Operations and constants for unsigned 32-bits integers (`u32` type)"],[17,"BITS","core::u32",""],[17,"BYTES","",""],[17,"MIN","",""],[17,"MAX","",""],[0,"u64","core","Operations and constants for unsigned 64-bits integer (`u64` type)"],[17,"BITS","core::u64",""],[17,"BYTES","",""],[17,"MIN","",""],[17,"MAX","",""],[0,"f32","core","Operations and constants for 32-bits floats (`f32` type)"],[0,"consts","core::f32","Various useful constants."],[17,"PI","core::f32::consts","Archimedes' constant"],[17,"PI_2","","pi * 2.0"],[17,"FRAC_PI_2","","pi/2.0"],[17,"FRAC_PI_3","","pi/3.0"],[17,"FRAC_PI_4","","pi/4.0"],[17,"FRAC_PI_6","","pi/6.0"],[17,"FRAC_PI_8","","pi/8.0"],[17,"FRAC_1_PI","","1.0/pi"],[17,"FRAC_2_PI","","2.0/pi"],[17,"FRAC_2_SQRTPI","","2.0/sqrt(pi)"],[17,"SQRT2","","sqrt(2.0)"],[17,"FRAC_1_SQRT2","","1.0/sqrt(2.0)"],[17,"E","","Euler's number"],[17,"LOG2_E","","log2(e)"],[17,"LOG10_E","","log10(e)"],[17,"LN_2","","ln(2.0)"],[17,"LN_10","","ln(10.0)"],[17,"RADIX","core::f32",""],[17,"MANTISSA_DIGITS","",""],[17,"DIGITS","",""],[17,"EPSILON","",""],[17,"MIN_VALUE","","Smallest finite f32 value"],[17,"MIN_POS_VALUE","","Smallest positive, normalized f32 value"],[17,"MAX_VALUE","","Largest finite f32 value"],[17,"MIN","","Smallest finite f32 value"],[17,"MIN_POSITIVE","","Smallest positive, normalized f32 value"],[17,"MAX","","Largest finite f32 value"],[17,"MIN_EXP","",""],[17,"MAX_EXP","",""],[17,"MIN_10_EXP","",""],[17,"MAX_10_EXP","",""],[17,"NAN","",""],[17,"INFINITY","",""],[17,"NEG_INFINITY","",""],[0,"f64","core","Operations and constants for 64-bits floats (`f64` type)"],[0,"consts","core::f64","Various useful constants."],[17,"PI","core::f64::consts","Archimedes' constant"],[17,"PI_2","","pi * 2.0"],[17,"FRAC_PI_2","","pi/2.0"],[17,"FRAC_PI_3","","pi/3.0"],[17,"FRAC_PI_4","","pi/4.0"],[17,"FRAC_PI_6","","pi/6.0"],[17,"FRAC_PI_8","","pi/8.0"],[17,"FRAC_1_PI","","1.0/pi"],[17,"FRAC_2_PI","","2.0/pi"],[17,"FRAC_2_SQRTPI","","2.0/sqrt(pi)"],[17,"SQRT2","","sqrt(2.0)"],[17,"FRAC_1_SQRT2","","1.0/sqrt(2.0)"],[17,"E","","Euler's number"],[17,"LOG2_E","","log2(e)"],[17,"LOG10_E","","log10(e)"],[17,"LN_2","","ln(2.0)"],[17,"LN_10","","ln(10.0)"],[17,"RADIX","core::f64",""],[17,"MANTISSA_DIGITS","",""],[17,"DIGITS","",""],[17,"EPSILON","",""],[17,"MIN_VALUE","","Smallest finite f64 value"],[17,"MIN_POS_VALUE","","Smallest positive, normalized f64 value"],[17,"MAX_VALUE","","Largest finite f64 value"],[17,"MIN","","Smallest finite f64 value"],[17,"MIN_POSITIVE","","Smallest positive, normalized f64 value"],[17,"MAX","","Largest finite f64 value"],[17,"MIN_EXP","",""],[17,"MAX_EXP","",""],[17,"MIN_10_EXP","",""],[17,"MAX_10_EXP","",""],[17,"NAN","",""],[17,"INFINITY","",""],[17,"NEG_INFINITY","",""],[0,"num","core","Numeric traits and functions for the built-in numeric types."],[3,"ParseIntError","core::num","An error which can be returned when parsing an integer."],[3,"ParseFloatError","","An error which can be returned when parsing a float."],[4,"FpCategory","","Used for representing the classification of floating point numbers"],[13,"Nan","","\"Not a Number\", often obtained by dividing by zero",0],[13,"Infinite","","Positive or negative infinity",0],[13,"Zero","","Positive or negative zero",0],[13,"Subnormal","","De-normalized floating point representation (less precise than `Normal`)",0],[13,"Normal","","A regular floating point number",0],[5,"from_int","","A utility function that just calls `FromPrimitive::from_int`."],[5,"from_isize","","A utility function that just calls `FromPrimitive::from_isize`."],[5,"from_i8","","A utility function that just calls `FromPrimitive::from_i8`."],[5,"from_i16","","A utility function that just calls `FromPrimitive::from_i16`."],[5,"from_i32","","A utility function that just calls `FromPrimitive::from_i32`."],[5,"from_i64","","A utility function that just calls `FromPrimitive::from_i64`."],[5,"from_uint","","A utility function that just calls `FromPrimitive::from_uint`."],[5,"from_usize","","A utility function that just calls `FromPrimitive::from_usize`."],[5,"from_u8","","A utility function that just calls `FromPrimitive::from_u8`."],[5,"from_u16","","A utility function that just calls `FromPrimitive::from_u16`."],[5,"from_u32","","A utility function that just calls `FromPrimitive::from_u32`."],[5,"from_u64","","A utility function that just calls `FromPrimitive::from_u64`."],[5,"from_f32","","A utility function that just calls `FromPrimitive::from_f32`."],[5,"from_f64","","A utility function that just calls `FromPrimitive::from_f64`."],[5,"cast","","Cast from one machine scalar to another."],[5,"from_str_radix","","A utility function that just calls `FromStrRadix::from_str_radix`."],[0,"wrapping","",""],[3,"Wrapping","core::num::wrapping",""],[8,"WrappingOps","",""],[10,"wrapping_add","","",1],[10,"wrapping_sub","","",1],[10,"wrapping_mul","","",1],[8,"OverflowingOps","",""],[10,"overflowing_add","","",2],[10,"overflowing_sub","","",2],[10,"overflowing_mul","","",2],[11,"clone","","",3],[11,"cmp","","",3],[11,"partial_cmp","","",3],[11,"lt","","",3],[11,"le","","",3],[11,"gt","","",3],[11,"ge","","",3],[11,"eq","","",3],[11,"ne","","",3],[6,"Output","",""],[11,"add","","",3],[6,"Output","",""],[11,"sub","","",3],[6,"Output","",""],[11,"mul","","",3],[6,"Output","",""],[11,"not","","",3],[6,"Output","",""],[11,"bitxor","","",3],[6,"Output","",""],[11,"bitor","","",3],[6,"Output","",""],[11,"bitand","","",3],[6,"Output","",""],[11,"shl","","",3],[6,"Output","",""],[11,"shr","","",3],[8,"Int","core::num","A built-in signed or unsigned integer."],[10,"zero","","Returns the `0` value of this integer type.",4],[10,"one","","Returns the `1` value of this integer type.",4],[10,"min_value","","Returns the smallest value that can be represented by this integer type.",4],[10,"max_value","","Returns the largest value that can be represented by this integer type.",4],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",4],[11,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",4],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",4],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",4],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",4],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",4],[10,"swap_bytes","","Reverses the byte order of the integer.",4],[11,"from_be","","Convert an integer from big endian to the target's endianness.",4],[11,"from_le","","Convert an integer from little endian to the target's endianness.",4],[11,"to_be","","Convert `self` to big endian from the target's endianness.",4],[11,"to_le","","Convert `self` to little endian from the target's endianness.",4],[10,"checked_add","","Checked integer addition. Computes `self + other`, returning `None` if\noverflow occurred.",4],[10,"checked_sub","","Checked integer subtraction. Computes `self - other`, returning `None`\nif underflow occurred.",4],[10,"checked_mul","","Checked integer multiplication. Computes `self * other`, returning\n`None` if underflow or overflow occurred.",4],[10,"checked_div","","Checked integer division. Computes `self / other`, returning `None` if\n`other == 0` or the operation results in underflow or overflow.",4],[11,"saturating_add","","Saturating integer addition. Computes `self + other`, saturating at\nthe numeric bounds instead of overflowing.",4],[11,"saturating_sub","","Saturating integer subtraction. Computes `self - other`, saturating at\nthe numeric bounds instead of overflowing.",4],[11,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",4],[8,"SignedInt","","A built-in two's complement integer."],[10,"abs","","Computes the absolute value of `self`. `Int::min_value()` will be\nreturned if the number is `Int::min_value()`.",5],[10,"signum","","Returns a number representing sign of `self`.",5],[10,"is_positive","","Returns `true` if `self` is positive and `false` if the number\nis zero or negative.",5],[10,"is_negative","","Returns `true` if `self` is negative and `false` if the number\nis zero or positive.",5],[8,"UnsignedInt","","A built-in unsigned integer."],[11,"is_power_of_two","","Returns `true` iff `self == 2^k` for some `k`.",6],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal to `self`.\nUnspecified behavior on overflow.",6],[11,"checked_next_power_of_two","","Returns the smallest power of two greater than or equal to `n`. If the\nnext power of two is greater than the type's maximum value, `None` is\nreturned, otherwise the power of two is wrapped in `Some`.",6],[8,"ToPrimitive","","A generic trait for converting a value to a number."],[11,"to_int","","Converts the value of `self` to an `int`.",7],[11,"to_isize","","Converts the value of `self` to an `isize`.",7],[11,"to_i8","","Converts the value of `self` to an `i8`.",7],[11,"to_i16","","Converts the value of `self` to an `i16`.",7],[11,"to_i32","","Converts the value of `self` to an `i32`.",7],[10,"to_i64","","Converts the value of `self` to an `i64`.",7],[11,"to_uint","","Converts the value of `self` to an `uint`.",7],[11,"to_usize","","Converts the value of `self` to a `usize`.",7],[11,"to_u8","","Converts the value of `self` to an `u8`.",7],[11,"to_u16","","Converts the value of `self` to an `u16`.",7],[11,"to_u32","","Converts the value of `self` to an `u32`.",7],[10,"to_u64","","Converts the value of `self` to an `u64`.",7],[11,"to_f32","","Converts the value of `self` to an `f32`.",7],[11,"to_f64","","Converts the value of `self` to an `f64`.",7],[8,"FromPrimitive","","A generic trait for converting a number to a value."],[11,"from_int","","Convert an `int` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",8],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",8],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",8],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",8],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",8],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",8],[11,"from_uint","","Convert an `uint` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",8],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",8],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",8],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",8],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",8],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",8],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",8],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",8],[8,"NumCast","","An interface for casting between machine scalars."],[10,"from","","Creates a number from another value that can be converted into a primitive via the\n`ToPrimitive` trait.",9],[8,"Float","","A built-in floating point number."],[10,"nan","","Returns the NaN value.",10],[10,"infinity","","Returns the infinite value.",10],[10,"neg_infinity","","Returns the negative infinite value.",10],[10,"zero","","Returns the `0` value.",10],[10,"neg_zero","","Returns -0.0.",10],[10,"one","","Returns the `1` value.",10],[10,"mantissa_digits","","Returns the number of binary digits of mantissa that this type supports.",10],[10,"digits","","Returns the number of base-10 digits of precision that this type supports.",10],[10,"epsilon","","Returns the difference between 1.0 and the smallest representable number larger than 1.0.",10],[10,"min_exp","","Returns the minimum binary exponent that this type can represent.",10],[10,"max_exp","","Returns the maximum binary exponent that this type can represent.",10],[10,"min_10_exp","","Returns the minimum base-10 exponent that this type can represent.",10],[10,"max_10_exp","","Returns the maximum base-10 exponent that this type can represent.",10],[10,"min_value","","Returns the smallest finite value that this type can represent.",10],[10,"min_pos_value","","Returns the smallest normalized positive number that this type can represent.",10],[10,"max_value","","Returns the largest finite value that this type can represent.",10],[10,"is_nan","","Returns true if this value is NaN and false otherwise.",10],[10,"is_infinite","","Returns true if this value is positive infinity or negative infinity and\nfalse otherwise.",10],[10,"is_finite","","Returns true if this number is neither infinite nor NaN.",10],[10,"is_normal","","Returns true if this number is neither zero, infinite, denormal, or NaN.",10],[10,"classify","","Returns the category that this number falls into.",10],[10,"integer_decode","","Returns the mantissa, exponent and sign as integers, respectively.",10],[10,"floor","","Return the largest integer less than or equal to a number.",10],[10,"ceil","","Return the smallest integer greater than or equal to a number.",10],[10,"round","","Return the nearest integer to a number. Round half-way cases away from\n`0.0`.",10],[10,"trunc","","Return the integer part of a number.",10],[10,"fract","","Return the fractional part of a number.",10],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",10],[10,"signum","","Returns a number that represents the sign of `self`.",10],[10,"is_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",10],[10,"is_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",10],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",10],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",10],[10,"powi","","Raise a number to an integer power.",10],[10,"powf","","Raise a number to a floating point power.",10],[10,"sqrt","","Take the square root of a number.",10],[10,"rsqrt","","Take the reciprocal (inverse) square root of a number, `1/sqrt(x)`.",10],[10,"exp","","Returns `e^(self)`, (the exponential function).",10],[10,"exp2","","Returns 2 raised to the power of the number, `2^(self)`.",10],[10,"ln","","Returns the natural logarithm of the number.",10],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",10],[10,"log2","","Returns the base 2 logarithm of the number.",10],[10,"log10","","Returns the base 10 logarithm of the number.",10],[10,"to_degrees","","Convert radians to degrees.",10],[10,"to_radians","","Convert degrees to radians.",10],[8,"FromStrRadix","","A generic trait for converting a string with a radix (base) to a value"],[16,"Err","core::num::FromStrRadix",""],[10,"from_str_radix","core::num","",11],[11,"fmt","","",0],[11,"eq","","",0],[11,"ne","","",0],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[11,"eq","","",12],[11,"ne","","",12],[11,"clone","","",12],[11,"fmt","","",12],[11,"fmt","","",12],[11,"description","","",12],[11,"eq","","",13],[11,"ne","","",13],[11,"clone","","",13],[11,"fmt","","",13],[11,"fmt","","",13],[11,"description","","",13],[0,"prelude","core","The core prelude"],[0,"intrinsics","","rustc compiler intrinsics."],[3,"TyDesc","core::intrinsics",""],[12,"size","","",14],[12,"align","","",14],[12,"drop_glue","","",14],[12,"name","","",14],[5,"atomic_cxchg","",""],[5,"atomic_cxchg_acq","",""],[5,"atomic_cxchg_rel","",""],[5,"atomic_cxchg_acqrel","",""],[5,"atomic_cxchg_relaxed","",""],[5,"atomic_load","",""],[5,"atomic_load_acq","",""],[5,"atomic_load_relaxed","",""],[5,"atomic_load_unordered","",""],[5,"atomic_store","",""],[5,"atomic_store_rel","",""],[5,"atomic_store_relaxed","",""],[5,"atomic_store_unordered","",""],[5,"atomic_xchg","",""],[5,"atomic_xchg_acq","",""],[5,"atomic_xchg_rel","",""],[5,"atomic_xchg_acqrel","",""],[5,"atomic_xchg_relaxed","",""],[5,"atomic_xadd","",""],[5,"atomic_xadd_acq","",""],[5,"atomic_xadd_rel","",""],[5,"atomic_xadd_acqrel","",""],[5,"atomic_xadd_relaxed","",""],[5,"atomic_xsub","",""],[5,"atomic_xsub_acq","",""],[5,"atomic_xsub_rel","",""],[5,"atomic_xsub_acqrel","",""],[5,"atomic_xsub_relaxed","",""],[5,"atomic_and","",""],[5,"atomic_and_acq","",""],[5,"atomic_and_rel","",""],[5,"atomic_and_acqrel","",""],[5,"atomic_and_relaxed","",""],[5,"atomic_nand","",""],[5,"atomic_nand_acq","",""],[5,"atomic_nand_rel","",""],[5,"atomic_nand_acqrel","",""],[5,"atomic_nand_relaxed","",""],[5,"atomic_or","",""],[5,"atomic_or_acq","",""],[5,"atomic_or_rel","",""],[5,"atomic_or_acqrel","",""],[5,"atomic_or_relaxed","",""],[5,"atomic_xor","",""],[5,"atomic_xor_acq","",""],[5,"atomic_xor_rel","",""],[5,"atomic_xor_acqrel","",""],[5,"atomic_xor_relaxed","",""],[5,"atomic_max","",""],[5,"atomic_max_acq","",""],[5,"atomic_max_rel","",""],[5,"atomic_max_acqrel","",""],[5,"atomic_max_relaxed","",""],[5,"atomic_min","",""],[5,"atomic_min_acq","",""],[5,"atomic_min_rel","",""],[5,"atomic_min_acqrel","",""],[5,"atomic_min_relaxed","",""],[5,"atomic_umin","",""],[5,"atomic_umin_acq","",""],[5,"atomic_umin_rel","",""],[5,"atomic_umin_acqrel","",""],[5,"atomic_umin_relaxed","",""],[5,"atomic_umax","",""],[5,"atomic_umax_acq","",""],[5,"atomic_umax_rel","",""],[5,"atomic_umax_acqrel","",""],[5,"atomic_umax_relaxed","",""],[5,"atomic_fence","",""],[5,"atomic_fence_acq","",""],[5,"atomic_fence_rel","",""],[5,"atomic_fence_acqrel","",""],[5,"abort","","Abort the execution of the process."],[5,"unreachable","","Tell LLVM that this point in the code is not reachable,\nenabling further optimizations."],[5,"assume","","Inform the optimizer that a condition is always true.\nIf the condition is false, the behavior is undefined."],[5,"breakpoint","","Execute a breakpoint trap, for inspection by a debugger."],[5,"size_of","","The size of a type in bytes."],[5,"move_val_init","","Move a value to an uninitialized memory location."],[5,"min_align_of","",""],[5,"pref_align_of","",""],[5,"get_tydesc","","Get a static pointer to a type descriptor."],[5,"type_id","","Gets an identifier which is globally unique to the specified type. This\nfunction will return the same value for a type regardless of whichever\ncrate it is invoked in."],[5,"init","","Create a value initialized to zero."],[5,"uninit","","Create an uninitialized value."],[5,"forget","","Move a value out of scope without running drop glue."],[5,"transmute","","Unsafely transforms a value of one type into a value of another type."],[5,"return_address","","Gives the address for the return value of the enclosing function."],[5,"needs_drop","","Returns `true` if the actual type given as `T` requires drop\nglue; returns `false` if the actual type provided for `T`\nimplements `Copy`."],[5,"owns_managed","","Returns `true` if a type is managed (will be allocated on the local heap)"],[5,"offset","","Calculates the offset from a pointer. The offset *must* be in-bounds of\nthe object, or one-byte-past-the-end. An arithmetic overflow is also\nundefined behaviour."],[5,"copy_nonoverlapping_memory","","Copies `count * size_of<T>` bytes from `src` to `dst`. The source\nand destination may *not* overlap."],[5,"copy_memory","","Copies `count * size_of<T>` bytes from `src` to `dst`. The source\nand destination may overlap."],[5,"set_memory","","Invokes memset on the specified pointer, setting `count * size_of::<T>()`\nbytes of memory starting at `dst` to `c`."],[5,"volatile_copy_nonoverlapping_memory","","Equivalent to the appropriate `llvm.memcpy.p0i8.0i8.*` intrinsic, with\na size of `count` * `size_of::<T>()` and an alignment of\n`min_align_of::<T>()`"],[5,"volatile_copy_memory","","Equivalent to the appropriate `llvm.memmove.p0i8.0i8.*` intrinsic, with\na size of `count` * `size_of::<T>()` and an alignment of\n`min_align_of::<T>()`"],[5,"volatile_set_memory","","Equivalent to the appropriate `llvm.memset.p0i8.*` intrinsic, with a\nsize of `count` * `size_of::<T>()` and an alignment of\n`min_align_of::<T>()`."],[5,"volatile_load","","Perform a volatile load from the `src` pointer."],[5,"volatile_store","","Perform a volatile store to the `dst` pointer."],[5,"sqrtf32","","Returns the square root of an `f32`"],[5,"sqrtf64","","Returns the square root of an `f64`"],[5,"powif32","","Raises an `f32` to an integer power."],[5,"powif64","","Raises an `f64` to an integer power."],[5,"sinf32","","Returns the sine of an `f32`."],[5,"sinf64","","Returns the sine of an `f64`."],[5,"cosf32","","Returns the cosine of an `f32`."],[5,"cosf64","","Returns the cosine of an `f64`."],[5,"powf32","","Raises an `f32` to an `f32` power."],[5,"powf64","","Raises an `f64` to an `f64` power."],[5,"expf32","","Returns the exponential of an `f32`."],[5,"expf64","","Returns the exponential of an `f64`."],[5,"exp2f32","","Returns 2 raised to the power of an `f32`."],[5,"exp2f64","","Returns 2 raised to the power of an `f64`."],[5,"logf32","","Returns the natural logarithm of an `f32`."],[5,"logf64","","Returns the natural logarithm of an `f64`."],[5,"log10f32","","Returns the base 10 logarithm of an `f32`."],[5,"log10f64","","Returns the base 10 logarithm of an `f64`."],[5,"log2f32","","Returns the base 2 logarithm of an `f32`."],[5,"log2f64","","Returns the base 2 logarithm of an `f64`."],[5,"fmaf32","","Returns `a * b + c` for `f32` values."],[5,"fmaf64","","Returns `a * b + c` for `f64` values."],[5,"fabsf32","","Returns the absolute value of an `f32`."],[5,"fabsf64","","Returns the absolute value of an `f64`."],[5,"copysignf32","","Copies the sign from `y` to `x` for `f32` values."],[5,"copysignf64","","Copies the sign from `y` to `x` for `f64` values."],[5,"floorf32","","Returns the largest integer less than or equal to an `f32`."],[5,"floorf64","","Returns the largest integer less than or equal to an `f64`."],[5,"ceilf32","","Returns the smallest integer greater than or equal to an `f32`."],[5,"ceilf64","","Returns the smallest integer greater than or equal to an `f64`."],[5,"truncf32","","Returns the integer part of an `f32`."],[5,"truncf64","","Returns the integer part of an `f64`."],[5,"rintf32","","Returns the nearest integer to an `f32`. May raise an inexact floating-point exception\nif the argument is not an integer."],[5,"rintf64","","Returns the nearest integer to an `f64`. May raise an inexact floating-point exception\nif the argument is not an integer."],[5,"nearbyintf32","","Returns the nearest integer to an `f32`."],[5,"nearbyintf64","","Returns the nearest integer to an `f64`."],[5,"roundf32","","Returns the nearest integer to an `f32`. Rounds half-way cases away from zero."],[5,"roundf64","","Returns the nearest integer to an `f64`. Rounds half-way cases away from zero."],[5,"ctpop8","","Returns the number of bits set in a `u8`."],[5,"ctpop16","","Returns the number of bits set in a `u16`."],[5,"ctpop32","","Returns the number of bits set in a `u32`."],[5,"ctpop64","","Returns the number of bits set in a `u64`."],[5,"ctlz8","","Returns the number of leading bits unset in a `u8`."],[5,"ctlz16","","Returns the number of leading bits unset in a `u16`."],[5,"ctlz32","","Returns the number of leading bits unset in a `u32`."],[5,"ctlz64","","Returns the number of leading bits unset in a `u64`."],[5,"cttz8","","Returns the number of trailing bits unset in a `u8`."],[5,"cttz16","","Returns the number of trailing bits unset in a `u16`."],[5,"cttz32","","Returns the number of trailing bits unset in a `u32`."],[5,"cttz64","","Returns the number of trailing bits unset in a `u64`."],[5,"bswap16","","Reverses the bytes in a `u16`."],[5,"bswap32","","Reverses the bytes in a `u32`."],[5,"bswap64","","Reverses the bytes in a `u64`."],[5,"i8_add_with_overflow","","Performs checked `i8` addition."],[5,"i16_add_with_overflow","","Performs checked `i16` addition."],[5,"i32_add_with_overflow","","Performs checked `i32` addition."],[5,"i64_add_with_overflow","","Performs checked `i64` addition."],[5,"u8_add_with_overflow","","Performs checked `u8` addition."],[5,"u16_add_with_overflow","","Performs checked `u16` addition."],[5,"u32_add_with_overflow","","Performs checked `u32` addition."],[5,"u64_add_with_overflow","","Performs checked `u64` addition."],[5,"i8_sub_with_overflow","","Performs checked `i8` subtraction."],[5,"i16_sub_with_overflow","","Performs checked `i16` subtraction."],[5,"i32_sub_with_overflow","","Performs checked `i32` subtraction."],[5,"i64_sub_with_overflow","","Performs checked `i64` subtraction."],[5,"u8_sub_with_overflow","","Performs checked `u8` subtraction."],[5,"u16_sub_with_overflow","","Performs checked `u16` subtraction."],[5,"u32_sub_with_overflow","","Performs checked `u32` subtraction."],[5,"u64_sub_with_overflow","","Performs checked `u64` subtraction."],[5,"i8_mul_with_overflow","","Performs checked `i8` multiplication."],[5,"i16_mul_with_overflow","","Performs checked `i16` multiplication."],[5,"i32_mul_with_overflow","","Performs checked `i32` multiplication."],[5,"i64_mul_with_overflow","","Performs checked `i64` multiplication."],[5,"u8_mul_with_overflow","","Performs checked `u8` multiplication."],[5,"u16_mul_with_overflow","","Performs checked `u16` multiplication."],[5,"u32_mul_with_overflow","","Performs checked `u32` multiplication."],[5,"u64_mul_with_overflow","","Performs checked `u64` multiplication."],[5,"overflowing_add","","Returns (a + b) mod 2^N, where N is the width of N in bits."],[5,"overflowing_sub","","Returns (a - b) mod 2^N, where N is the width of N in bits."],[5,"overflowing_mul","","Returns (a * b) mod 2^N, where N is the width of N in bits."],[6,"GlueFn","",""],[0,"mem","core","Basic functions for dealing with memory"],[5,"size_of","core::mem","Returns the size of a type in bytes."],[5,"size_of_val","","Returns the size of the type that `_val` points to in bytes."],[5,"min_align_of","","Returns the ABI-required minimum alignment of a type"],[5,"min_align_of_val","","Returns the ABI-required minimum alignment of the type of the value that `_val` points to"],[5,"align_of","","Returns the alignment in memory for a type."],[5,"align_of_val","","Returns the alignment of the type of the value that `_val` points to."],[5,"zeroed","","Create a value initialized to zero."],[5,"uninitialized","","Create an uninitialized value."],[5,"swap","","Swap the values at two mutable locations of the same type, without deinitialising or copying\neither one."],[5,"replace","","Replace the value at a mutable location with a new one, returning the old value, without\ndeinitialising or copying either one."],[5,"drop","","Disposes of a value."],[5,"transmute_copy","","Interprets `src` as `&U`, and then reads `src` without moving the contained value."],[5,"copy_lifetime","","Transforms lifetime of the second pointer to match the first."],[5,"copy_mut_lifetime","","Transforms lifetime of the second mutable pointer to match the first."],[0,"nonzero","core","Exposes the NonZero lang item which provides optimization hints."],[3,"NonZero","core::nonzero","A wrapper type for raw pointers and integers that will never be\nNULL or 0 that might allow certain optimizations."],[8,"Zeroable","","Unsafe trait to indicate what types are usable with the NonZero struct"],[11,"hash","","",15],[11,"fmt","","",15],[11,"partial_cmp","","",15],[11,"lt","","",15],[11,"le","","",15],[11,"gt","","",15],[11,"ge","","",15],[11,"cmp","","",15],[11,"eq","","",15],[11,"ne","","",15],[11,"clone","","",15],[11,"new","","Create an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually \"non-zero\".",15],[6,"Target","",""],[11,"deref","","",15],[0,"ptr","core","Operations on unsafe pointers, `*const T`, and `*mut T`."],[3,"Unique","core::ptr","A wrapper around a raw `*mut T` that indicates that the possessor\nof this wrapper owns the referent. This in turn implies that the\n`Unique<T>` is `Send`/`Sync` if `T` is `Send`/`Sync`, unlike a raw\n`*mut T` (which conveys no particular ownership semantics).  It\nalso implies that the referent of the pointer should not be\nmodified without a unique path to the `Unique` reference. Useful\nfor building abstractions like `Vec<T>` or `Box<T>`, which\ninternally use raw pointers to manage the memory that they own."],[5,"null","","Creates a null raw pointer."],[5,"null_mut","","Creates a null mutable raw pointer."],[5,"zero_memory","","Zeroes out `count * size_of::<T>` bytes of memory at `dst`. `count` may be\n`0`."],[5,"swap","","Swaps the values at two mutable locations of the same type, without\ndeinitialising either. They may overlap, unlike `mem::swap` which is\notherwise equivalent."],[5,"replace","","Replaces the value at `dest` with `src`, returning the old\nvalue, without dropping either."],[5,"read","","Reads the value from `src` without moving it. This leaves the\nmemory in `src` unchanged."],[5,"read_and_zero","","Reads the value from `src` and nulls it out without dropping it."],[5,"write","","Overwrites a memory location with the given value without reading or\ndropping the old value."],[5,"copy_nonoverlapping_memory","",""],[5,"copy_memory","",""],[5,"set_memory","",""],[8,"PtrExt","","Methods on raw pointers"],[16,"Target","core::ptr::PtrExt","The type which is being pointed at"],[10,"is_null","core::ptr","Returns true if the pointer is null.",16],[10,"as_ref","","Returns `None` if the pointer is null, or else returns a reference to\nthe value wrapped in `Some`.",16],[10,"offset","","Calculates the offset from a pointer. `count` is in units of T; e.g. a\n`count` of 3 represents a pointer offset of `3 * sizeof::<T>()` bytes.",16],[8,"MutPtrExt","","Methods on mutable raw pointers"],[16,"Target","core::ptr::MutPtrExt","The type which is being pointed at"],[10,"as_mut","core::ptr","Returns `None` if the pointer is null, or else returns a mutable\nreference to the value wrapped in `Some`.",17],[6,"Target","",""],[6,"Target","",""],[6,"Target","",""],[11,"new","","Create a new `Unique`.",18],[11,"get","","Dereference the content.",18],[11,"get_mut","","Mutably dereference the content.",18],[6,"Target","",""],[11,"deref","","",18],[0,"marker","core","Primitive traits and marker types representing basic 'kinds' of types."],[3,"NoCopy","core::marker","A type which is considered \"not POD\", meaning that it is not\nimplicitly copyable. This is typically embedded in other types to\nensure that they are never copied, even if they lack a destructor."],[3,"Managed","","A type which is considered managed by the GC. This is typically\nembedded in other types."],[3,"PhantomData","","`PhantomData` is a way to tell the compiler about fake fields.\nPhantom data is required whenever type parameters are not used.\nThe idea is that if the compiler encounters a `PhantomData<T>`\ninstance, it will behave *as if* an instance of the type `T` were\npresent for the purpose of various automatic analyses."],[3,"ContravariantLifetime","","Old-style marker trait. Deprecated."],[3,"CovariantLifetime","","Old-style marker trait. Deprecated."],[3,"InvariantLifetime","","Old-style marker trait. Deprecated."],[3,"ContravariantType","","Old-style marker trait. Deprecated."],[3,"CovariantType","","Old-style marker trait. Deprecated."],[3,"InvariantType","","Old-style marker trait. Deprecated."],[8,"Send","","Types able to be transferred across thread boundaries."],[8,"Sized","","Types with a constant size known at compile-time."],[8,"Copy","","Types that can be copied by simply copying bits (i.e. `memcpy`)."],[8,"Sync","","Types that can be safely shared between threads when aliased."],[8,"MarkerTrait","","`MarkerTrait` is intended to be used as the supertrait for traits\nthat don't have any methods but instead serve just to designate\ncategories of types. An example would be the `Send` trait, which\nindicates types that are sendable: `Send` does not itself offer\nany methods, but instead is used to gate access to data."],[8,"PhantomFn","","`PhantomFn` is a marker trait for use with traits that contain\ntype or lifetime parameters that do not appear in any of their\nmethods. In that case, you can either remove those parameters, or\nadd a `PhantomFn` supertrait that reflects the signature of\nmethods that compiler should \"pretend\" exists. This most commonly\noccurs for traits with no methods: in that particular case, you\ncan extend `MarkerTrait`, which is equivalent to\n`PhantomFn<Self>`."],[11,"cmp","","",19],[11,"partial_cmp","","",19],[11,"lt","","",19],[11,"le","","",19],[11,"gt","","",19],[11,"ge","","",19],[11,"eq","","",19],[11,"ne","","",19],[11,"clone","","",19],[11,"cmp","","",20],[11,"partial_cmp","","",20],[11,"lt","","",20],[11,"le","","",20],[11,"gt","","",20],[11,"ge","","",20],[11,"eq","","",20],[11,"ne","","",20],[11,"clone","","",20],[11,"hash","","",21],[11,"eq","","",21],[11,"partial_cmp","","",21],[11,"cmp","","",21],[11,"clone","","",21],[0,"ops","core","Overloadable operators"],[3,"RangeFull","core::ops","An unbounded range."],[3,"Range","","A (half-open) range which is bounded at both ends."],[12,"start","","The lower bound of the range (inclusive).",22],[12,"end","","The upper bound of the range (exclusive).",22],[3,"RangeFrom","","A range which is only bounded below."],[12,"start","","The lower bound of the range (inclusive).",23],[3,"RangeTo","","A range which is only bounded above."],[12,"end","","The upper bound of the range (exclusive).",24],[8,"Drop","","The `Drop` trait is used to run some code when a value goes out of scope. This\nis sometimes called a 'destructor'."],[10,"drop","","The `drop` method, called when the value goes out of scope.",25],[8,"Add","","The `Add` trait is used to specify the functionality of `+`."],[16,"Output","core::ops::Add","The resulting type after applying the `+` operator"],[10,"add","core::ops","The method for the `+` operator",26],[8,"Sub","","The `Sub` trait is used to specify the functionality of `-`."],[16,"Output","core::ops::Sub","The resulting type after applying the `-` operator"],[10,"sub","core::ops","The method for the `-` operator",27],[8,"Mul","","The `Mul` trait is used to specify the functionality of `*`."],[16,"Output","core::ops::Mul","The resulting type after applying the `*` operator"],[10,"mul","core::ops","The method for the `*` operator",28],[8,"Div","","The `Div` trait is used to specify the functionality of `/`."],[16,"Output","core::ops::Div","The resulting type after applying the `/` operator"],[10,"div","core::ops","The method for the `/` operator",29],[8,"Rem","","The `Rem` trait is used to specify the functionality of `%`."],[16,"Output","core::ops::Rem","The resulting type after applying the `%` operator"],[10,"rem","core::ops","The method for the `%` operator",30],[8,"Neg","","The `Neg` trait is used to specify the functionality of unary `-`."],[16,"Output","core::ops::Neg","The resulting type after applying the `-` operator"],[10,"neg","core::ops","The method for the unary `-` operator",31],[8,"Not","","The `Not` trait is used to specify the functionality of unary `!`."],[16,"Output","core::ops::Not","The resulting type after applying the `!` operator"],[10,"not","core::ops","The method for the unary `!` operator",32],[8,"BitAnd","","The `BitAnd` trait is used to specify the functionality of `&`."],[16,"Output","core::ops::BitAnd","The resulting type after applying the `&` operator"],[10,"bitand","core::ops","The method for the `&` operator",33],[8,"BitOr","","The `BitOr` trait is used to specify the functionality of `|`."],[16,"Output","core::ops::BitOr","The resulting type after applying the `|` operator"],[10,"bitor","core::ops","The method for the `|` operator",34],[8,"BitXor","","The `BitXor` trait is used to specify the functionality of `^`."],[16,"Output","core::ops::BitXor","The resulting type after applying the `^` operator"],[10,"bitxor","core::ops","The method for the `^` operator",35],[8,"Shl","","The `Shl` trait is used to specify the functionality of `<<`."],[16,"Output","core::ops::Shl","The resulting type after applying the `<<` operator"],[10,"shl","core::ops","The method for the `<<` operator",36],[8,"Shr","","The `Shr` trait is used to specify the functionality of `>>`."],[16,"Output","core::ops::Shr","The resulting type after applying the `>>` operator"],[10,"shr","core::ops","The method for the `>>` operator",37],[8,"Index","","The `Index` trait is used to specify the functionality of indexing operations\nlike `arr[idx]` when used in an immutable context."],[16,"Output","core::ops::Index","The returned type after indexing"],[10,"index","core::ops","The method for the indexing (`Foo[Bar]`) operation",38],[8,"IndexMut","","The `IndexMut` trait is used to specify the functionality of indexing\noperations like `arr[idx]`, when used in a mutable context."],[10,"index_mut","","The method for the indexing (`Foo[Bar]`) operation",39],[8,"Deref","","The `Deref` trait is used to specify the functionality of dereferencing\noperations like `*v`."],[16,"Target","core::ops::Deref","The resulting type after dereferencing"],[10,"deref","core::ops","The method called to dereference a value",40],[8,"DerefMut","","The `DerefMut` trait is used to specify the functionality of dereferencing\nmutably like `*v = 1;`"],[10,"deref_mut","","The method called to mutably dereference a value",41],[8,"Fn","","A version of the call operator that takes an immutable receiver."],[16,"Output","core::ops::Fn","The returned type after the call operator is used."],[10,"call","core::ops","This is called when the call operator is used.",42],[8,"FnMut","","A version of the call operator that takes a mutable receiver."],[16,"Output","core::ops::FnMut","The returned type after the call operator is used."],[10,"call_mut","core::ops","This is called when the call operator is used.",43],[8,"FnOnce","","A version of the call operator that takes a by-value receiver."],[16,"Output","core::ops::FnOnce","The returned type after the call operator is used."],[10,"call_once","core::ops","This is called when the call operator is used.",44],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[11,"eq","","",45],[11,"ne","","",45],[11,"clone","","",45],[11,"fmt","","",45],[11,"eq","","",22],[11,"ne","","",22],[11,"clone","","",22],[11,"fmt","","",22],[11,"eq","","",23],[11,"ne","","",23],[11,"clone","","",23],[11,"fmt","","",23],[11,"eq","","",24],[11,"ne","","",24],[11,"clone","","",24],[11,"fmt","","",24],[6,"Target","",""],[6,"Target","",""],[6,"Output","",""],[6,"Output","",""],[0,"cmp","core","Functionality for ordering and comparison."],[4,"Ordering","core::cmp","An `Ordering` is the result of a comparison between two values."],[13,"Less","","An ordering where a compared value is less [than another].",46],[13,"Equal","","An ordering where a compared value is equal [to another].",46],[13,"Greater","","An ordering where a compared value is greater [than another].",46],[5,"min","","Compare and return the minimum of two values."],[5,"max","","Compare and return the maximum of two values."],[5,"partial_min","","Compare and return the minimum of two values if there is one."],[5,"partial_max","","Compare and return the maximum of two values if there is one."],[8,"PartialEq","","Trait for equality comparisons which are [partial equivalence relations](\nhttp://en.wikipedia.org/wiki/Partial_equivalence_relation)."],[10,"eq","","This method tests for `self` and `other` values to be equal, and is used by `==`.",47],[11,"ne","","This method tests for `!=`.",47],[8,"Eq","","Trait for equality comparisons which are [equivalence relations](\nhttps://en.wikipedia.org/wiki/Equivalence_relation)."],[8,"Ord","","Trait for types that form a [total order](https://en.wikipedia.org/wiki/Total_order)."],[10,"cmp","","This method returns an `Ordering` between `self` and `other`.",48],[8,"PartialOrd","","Trait for values that can be compared for a sort-order."],[10,"partial_cmp","","This method returns an ordering between `self` and `other` values if one exists.",49],[11,"lt","","This method tests less than (for `self` and `other`) and is used by the `<` operator.",49],[11,"le","","This method tests less than or equal to (for `self` and `other`) and is used by the `<=`\noperator.",49],[11,"gt","","This method tests greater than (for `self` and `other`) and is used by the `>` operator.",49],[11,"ge","","This method tests greater than or equal to (for `self` and `other`) and is used by the `>=`\noperator.",49],[11,"fmt","","",46],[11,"eq","","",46],[11,"ne","","",46],[11,"clone","","",46],[11,"reverse","","Reverse the `Ordering`.",46],[11,"cmp","","",46],[11,"partial_cmp","","",46],[0,"clone","core","The `Clone` trait for types that cannot be 'implicitly copied'"],[8,"Clone","core::clone","A common trait for cloning an object."],[10,"clone","","Returns a copy of the value.",50],[11,"clone_from","","Perform copy-assignment from `source`.",50],[0,"default","core","The `Default` trait for types which may have meaningful default values."],[8,"Default","core::default","A trait that types which have a useful default value should implement."],[10,"default","","Returns the \"default value\" for a type.",51],[0,"any","core","Traits for dynamic typing of any `'static` type (through runtime reflection)"],[3,"TypeId","core::any","A `TypeId` represents a globally unique identifier for a type."],[8,"Any","","The `Any` trait is implemented by all `'static` types, and can be used for\ndynamic typing"],[10,"get_type_id","","Get the `TypeId` of `self`",52],[11,"is","core","Returns true if the boxed type is the same as `T`",52],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",52],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",52],[11,"hash","core::any","",53],[11,"fmt","","",53],[11,"eq","","",53],[11,"ne","","",53],[11,"clone","","",53],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",53],[0,"atomic","core","Atomic types"],[3,"AtomicBool","core::atomic","A boolean type which can be safely shared between threads."],[3,"AtomicIsize","","A signed integer type which can be safely shared between threads."],[3,"AtomicUsize","","An unsigned integer type which can be safely shared between threads."],[3,"AtomicPtr","","A raw pointer type which can be safely shared between threads."],[3,"AtomicInt","",""],[3,"AtomicUint","",""],[4,"Ordering","","Atomic memory orderings"],[13,"Relaxed","","No ordering constraints, only atomic operations.",54],[13,"Release","","When coupled with a store, all previous writes become visible\nto another thread that performs a load with `Acquire` ordering\non the same value.",54],[13,"Acquire","","When coupled with a load, all subsequent loads will see data\nwritten before a store with `Release` ordering on the same value\nin another thread.",54],[13,"AcqRel","","When coupled with a load, uses `Acquire` ordering, and with a store\n`Release` ordering.",54],[13,"SeqCst","","Like `AcqRel` with the additional guarantee that all threads see all\nsequentially consistent operations in the same order.",54],[5,"fence","","An atomic fence."],[17,"ATOMIC_BOOL_INIT","","An `AtomicBool` initialized to `false`."],[17,"ATOMIC_ISIZE_INIT","","An `AtomicIsize` initialized to `0`."],[17,"ATOMIC_USIZE_INIT","","An `AtomicUsize` initialized to `0`."],[17,"ATOMIC_INT_INIT","",""],[17,"ATOMIC_UINT_INIT","",""],[11,"new","","Creates a new `AtomicBool`.",55],[11,"load","","Loads a value from the bool.",55],[11,"store","","Stores a value into the bool.",55],[11,"swap","","Stores a value into the bool, returning the old value.",55],[11,"compare_and_swap","","Stores a value into the bool if the current value is the same as the expected value.",55],[11,"fetch_and","","Logical \"and\" with a boolean value.",55],[11,"fetch_nand","","Logical \"nand\" with a boolean value.",55],[11,"fetch_or","","Logical \"or\" with a boolean value.",55],[11,"fetch_xor","","Logical \"xor\" with a boolean value.",55],[11,"new","","Creates a new `AtomicIsize`.",56],[11,"load","","Loads a value from the isize.",56],[11,"store","","Stores a value into the isize.",56],[11,"swap","","Stores a value into the isize, returning the old value.",56],[11,"compare_and_swap","","Stores a value into the isize if the current value is the same as the expected value.",56],[11,"fetch_add","","Add an isize to the current value, returning the previous value.",56],[11,"fetch_sub","","Subtract an isize from the current value, returning the previous value.",56],[11,"fetch_and","","Bitwise and with the current isize, returning the previous value.",56],[11,"fetch_or","","Bitwise or with the current isize, returning the previous value.",56],[11,"fetch_xor","","Bitwise xor with the current isize, returning the previous value.",56],[11,"new","","Creates a new `AtomicUsize`.",57],[11,"load","","Loads a value from the usize.",57],[11,"store","","Stores a value into the usize.",57],[11,"swap","","Stores a value into the usize, returning the old value.",57],[11,"compare_and_swap","","Stores a value into the usize if the current value is the same as the expected value.",57],[11,"fetch_add","","Add to the current usize, returning the previous value.",57],[11,"fetch_sub","","Subtract from the current usize, returning the previous value.",57],[11,"fetch_and","","Bitwise and with the current usize, returning the previous value.",57],[11,"fetch_or","","Bitwise or with the current usize, returning the previous value.",57],[11,"fetch_xor","","Bitwise xor with the current usize, returning the previous value.",57],[11,"new","","Creates a new `AtomicPtr`.",58],[11,"load","","Loads a value from the pointer.",58],[11,"store","","Stores a value into the pointer.",58],[11,"swap","","Stores a value into the pointer, returning the old value.",58],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the expected value.",58],[11,"new","","",59],[11,"load","","",59],[11,"store","","",59],[11,"swap","","",59],[11,"compare_and_swap","","",59],[11,"fetch_add","","",59],[11,"fetch_sub","","",59],[11,"fetch_and","","",59],[11,"fetch_or","","",59],[11,"fetch_xor","","",59],[11,"new","","",60],[11,"load","","",60],[11,"store","","",60],[11,"swap","","",60],[11,"compare_and_swap","","",60],[11,"fetch_add","","",60],[11,"fetch_sub","","",60],[11,"fetch_and","","",60],[11,"fetch_or","","",60],[11,"fetch_xor","","",60],[0,"cell","core","Shareable mutable containers."],[3,"Cell","core::cell","A mutable memory location that admits only `Copy` data."],[3,"RefCell","","A mutable memory location with dynamically checked borrow rules"],[3,"Ref","","Wraps a borrowed reference to a value in a `RefCell` box.\nA wrapper type for an immutably borrowed value from a `RefCell<T>`."],[3,"RefMut","","A wrapper type for a mutably borrowed value from a `RefCell<T>`."],[3,"UnsafeCell","","The core primitive for interior mutability in Rust."],[12,"value","","Wrapped value",61],[4,"BorrowState","","An enumeration of values returned from the `state` method on a `RefCell<T>`."],[13,"Reading","","The cell is currently being read, there is at least one active `borrow`.",62],[13,"Writing","","The cell is currently being written to, there is an active `borrow_mut`.",62],[13,"Unused","","There are no outstanding borrows on this cell.",62],[5,"clone_ref","","Copy a `Ref`."],[11,"new","","Creates a new `Cell` containing the given value.",63],[11,"get","","Returns a copy of the contained value.",63],[11,"set","","Sets the contained value.",63],[11,"as_unsafe_cell","","Get a reference to the underlying `UnsafeCell`.",63],[11,"clone","","",63],[11,"default","","",63],[11,"eq","","",63],[11,"fmt","","",62],[11,"eq","","",62],[11,"ne","","",62],[11,"clone","","",62],[11,"new","","Creates a new `RefCell` containing `value`.",64],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",64],[11,"borrow_state","","Query the current state of this `RefCell`",64],[11,"try_borrow","","Attempts to immutably borrow the wrapped value.",64],[11,"borrow","","Immutably borrows the wrapped value.",64],[11,"try_borrow_mut","","Mutably borrows the wrapped value.",64],[11,"borrow_mut","","Mutably borrows the wrapped value.",64],[11,"as_unsafe_cell","","Get a reference to the underlying `UnsafeCell`.",64],[11,"clone","","",64],[11,"default","","",64],[11,"eq","","",64],[6,"Target","",""],[11,"deref","","",65],[6,"Target","",""],[11,"deref","","",66],[11,"deref_mut","","",66],[11,"new","","Construct a new instance of `UnsafeCell` which will wrap the specified\nvalue.",61],[11,"get","","Gets a mutable pointer to the wrapped value.",61],[11,"into_inner","","Unwraps the value",61],[0,"char","core","Character manipulation."],[3,"EscapeUnicode","core::char","An iterator over the characters that represent a `char`, as escaped by\nRust's unicode escaping rules."],[3,"EscapeDefault","","An iterator over the characters that represent a `char`, escaped\nfor maximum portability."],[5,"from_u32","","Converts a `u32` to an `Option<char>`."],[5,"from_digit","","Converts a number to the character representing it."],[5,"encode_utf8_raw","","Encodes a raw u32 value as UTF-8 into the provided byte buffer,\nand then returns the number of bytes written."],[5,"encode_utf16_raw","","Encodes a raw u32 value as UTF-16 into the provided `u16` buffer,\nand then returns the number of `u16`s written."],[17,"MAX","","The highest valid code point"],[8,"CharExt","",""],[10,"is_digit","","",67],[10,"to_digit","","",67],[10,"escape_unicode","","",67],[10,"escape_default","","",67],[10,"len_utf8","","",67],[10,"len_utf16","","",67],[10,"encode_utf8","","",67],[10,"encode_utf16","","",67],[11,"clone","","",68],[6,"Item","",""],[11,"next","","",68],[11,"clone","","",69],[6,"Item","",""],[11,"next","","",69],[0,"panicking","core","Panic support for libcore"],[5,"panic","core::panicking",""],[5,"panic_fmt","",""],[0,"finally","core","The Finally trait provides a method, `finally` on\nstack closures that emulates Java-style try/finally blocks."],[5,"try_finally","core::finally","The most general form of the `finally` functions. The function\n`try_fn` will be invoked first; whether or not it panics, the\nfunction `finally_fn` will be invoked next. The two parameters\n`mutate` and `drop` are used to thread state through the two\nclosures. `mutate` is used for any shared, mutable state that both\nclosures require access to; `drop` is used for any state that the\n`try_fn` requires ownership of."],[8,"Finally","","A trait for executing a destructor unconditionally after a block of code,\nregardless of whether the blocked fails."],[10,"finally","","Executes this object, unconditionally running `dtor` after this block of\ncode has run.",70],[0,"iter","core","Composable external iterators"],[3,"Rev","core::iter","An double-ended iterator with the direction inverted"],[3,"Cloned","","An iterator that clones the elements of an underlying iterator"],[3,"Cycle","","An iterator that repeats endlessly"],[3,"Chain","","An iterator that strings two iterators together"],[3,"Zip","","An iterator that iterates two other iterators simultaneously"],[3,"Map","","An iterator that maps the values of `iter` with `f`"],[3,"Filter","","An iterator that filters the elements of `iter` with `predicate`"],[3,"FilterMap","","An iterator that uses `f` to both filter and map elements from `iter`"],[3,"Enumerate","","An iterator that yields the current count and the element during iteration"],[3,"Peekable","","An iterator with a `peek()` that returns an optional reference to the next element."],[3,"SkipWhile","","An iterator that rejects elements while `predicate` is true"],[3,"TakeWhile","","An iterator that only accepts elements while `predicate` is true"],[3,"Skip","","An iterator that skips over `n` elements of `iter`."],[3,"Take","","An iterator that only iterates over the first `n` iterations of `iter`."],[3,"Scan","","An iterator to maintain state while iterating another iterator"],[12,"state","","The current internal state to be passed to the closure next.",71],[3,"FlatMap","","An iterator that maps each element to an iterator,\nand yields the elements of the produced iterators\n"],[3,"Fuse","","An iterator that yields `None` forever after the underlying iterator\nyields `None` once."],[3,"Inspect","","An iterator that calls a function with a reference to each\nelement before yielding it."],[3,"Unfold","","An iterator that passes mutable state to a closure and yields the result."],[12,"state","","Internal state that will be passed to the closure on the next iteration",72],[3,"Counter","","An infinite iterator starting at `start` and advancing by `step` with each\niteration"],[3,"Range","","An iterator over the range [start, stop)"],[3,"RangeInclusive","","An iterator over the range [start, stop]"],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping."],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping."],[3,"Repeat","","An iterator that repeats an element endlessly"],[4,"MinMaxResult","","`MinMaxResult` is an enum returned by `min_max`. See `IteratorOrdExt::min_max` for more detail."],[13,"NoElements","","Empty iterator",73],[13,"OneElement","","Iterator with one element, so the minimum and maximum are the same",73],[13,"MinMax","","More than one element in the iterator, the first element is not larger than the second",73],[5,"count","","Creates a new counter with the specified start/step"],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting\nat start (inclusive), and ending at stop (exclusive))."],[5,"range_inclusive","","Return an iterator over the range [start, stop]"],[5,"range_step","","Return an iterator over the range [start, stop) by `step`."],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`."],[5,"iterate","","Create a new iterator that produces an infinite sequence of\nrepeated applications of the given function `f`."],[5,"repeat","","Create a new iterator that endlessly repeats the element `elt`."],[0,"order","","Functions for lexicographical ordering of sequences."],[5,"equals","core::iter::order","Compare `a` and `b` for equality using `Eq`"],[5,"cmp","","Order `a` and `b` lexicographically using `Ord`"],[5,"partial_cmp","","Order `a` and `b` lexicographically using `PartialOrd`"],[5,"eq","","Compare `a` and `b` for equality (Using partial equality, `PartialEq`)"],[5,"ne","","Compare `a` and `b` for nonequality (Using partial equality, `PartialEq`)"],[5,"lt","","Return `a` < `b` lexicographically (Using partial order, `PartialOrd`)"],[5,"le","","Return `a` <= `b` lexicographically (Using partial order, `PartialOrd`)"],[5,"gt","","Return `a` > `b` lexicographically (Using partial order, `PartialOrd`)"],[5,"ge","","Return `a` >= `b` lexicographically (Using partial order, `PartialOrd`)"],[6,"Iterate","core::iter","An iterator that repeatedly applies a given function, starting\nfrom a given seed value."],[8,"Iterator","","An interface for dealing with \"external iterators\". These types of iterators\ncan be resumed at any time as all state is stored internally as opposed to\nbeing located on the call stack."],[16,"Item","core::iter::Iterator","The type of the elements being iterated"],[10,"next","core::iter","Advance the iterator and return the next value. Return `None` when the end is reached.",74],[11,"size_hint","","Returns a lower and upper bound on the remaining length of the iterator.",74],[8,"FromIterator","","Conversion from an `Iterator`"],[10,"from_iter","","Build a container with elements from something iterable.",75],[8,"IntoIterator","","Conversion into an `Iterator`"],[16,"Item","core::iter::IntoIterator","The type of the elements being iterated"],[16,"IntoIter","","A container for iterating over elements of type Item"],[10,"into_iter","core::iter","Consumes `Self` and returns an iterator over it",76],[8,"Extend","","A type growable from an `Iterator` implementation"],[10,"extend","","Extend a container with the elements yielded by an arbitrary iterator",77],[8,"IteratorExt","","An extension trait providing numerous methods applicable to all iterators."],[11,"count","","Counts the number of elements in this iterator.",78],[11,"last","","Loops through the entire iterator, returning the last element.",78],[11,"nth","","Loops through `n` iterations, returning the `n`th element of the\niterator.",78],[11,"chain","","Chain this iterator with another, returning a new iterator that will\nfinish iterating over the current iterator, and then iterate\nover the other specified iterator.",78],[11,"zip","","Creates an iterator that iterates over both this and the specified\niterators simultaneously, yielding the two elements as pairs. When\neither iterator returns None, all further invocations of next() will\nreturn None.",78],[11,"map","","Creates a new iterator that will apply the specified function to each\nelement returned by the first, yielding the mapped element instead.",78],[11,"filter","","Creates an iterator that applies the predicate to each element returned\nby this iterator. The only elements that will be yielded are those that\nmake the predicate evaluate to `true`.",78],[11,"filter_map","","Creates an iterator that both filters and maps elements.\nIf the specified function returns None, the element is skipped.\nOtherwise the option is unwrapped and the new value is yielded.",78],[11,"enumerate","","Creates an iterator that yields a pair of the value returned by this\niterator plus the current index of iteration.",78],[11,"peekable","","Creates an iterator that has a `.peek()` method\nthat returns an optional reference to the next element.",78],[11,"skip_while","","Creates an iterator that invokes the predicate on elements\nuntil it returns false. Once the predicate returns false, that\nelement and all further elements are yielded.",78],[11,"take_while","","Creates an iterator that yields elements so long as the predicate\nreturns true. After the predicate returns false for the first time, no\nfurther elements will be yielded.",78],[11,"skip","","Creates an iterator that skips the first `n` elements of this iterator,\nand then yields all further items.",78],[11,"take","","Creates an iterator that yields the first `n` elements of this\niterator.",78],[11,"scan","","Creates a new iterator that behaves in a similar fashion to fold.\nThere is a state which is passed between each iteration and can be\nmutated as necessary. The yielded values from the closure are yielded\nfrom the Scan instance when not None.",78],[11,"flat_map","","Creates an iterator that maps each element to an iterator,\nand yields the elements of the produced iterators.",78],[11,"fuse","","Creates an iterator that yields `None` forever after the underlying\niterator yields `None`. Random-access iterator behavior is not\naffected, only single and double-ended iterator behavior.",78],[11,"inspect","","Creates an iterator that calls a function with a reference to each\nelement before yielding it. This is often useful for debugging an\niterator pipeline.",78],[11,"by_ref","","Creates a wrapper around a mutable reference to the iterator.",78],[11,"collect","","Loops through the entire iterator, collecting all of the elements into\na container implementing `FromIterator`.",78],[11,"partition","","Loops through the entire iterator, collecting all of the elements into\none of two containers, depending on a predicate. The elements of the\nfirst container satisfy the predicate, while the elements of the second\ndo not.",78],[11,"fold","","Performs a fold operation over the entire iterator, returning the\neventual state at the end of the iteration.",78],[11,"all","","Tests whether the predicate holds true for all elements in the iterator.",78],[11,"any","","Tests whether any element of an iterator satisfies the specified predicate.",78],[11,"find","","Returns the first element satisfying the specified predicate.",78],[11,"position","","Return the index of the first element satisfying the specified predicate",78],[11,"rposition","","Return the index of the last element satisfying the specified predicate",78],[11,"max","","Consumes the entire iterator to return the maximum element.",78],[11,"min","","Consumes the entire iterator to return the minimum element.",78],[11,"min_max","","`min_max` finds the minimum and maximum elements in the iterator.",78],[11,"max_by","","Return the element that gives the maximum value from the\nspecified function.",78],[11,"min_by","","Return the element that gives the minimum value from the\nspecified function.",78],[11,"rev","","Change the direction of the iterator",78],[11,"unzip","","Converts an iterator of pairs into a pair of containers.",78],[11,"cloned","","Creates an iterator that clones the elements it yields. Useful for converting an\nIterator<&T> to an Iterator<T>.",78],[11,"cycle","","Repeats an iterator endlessly",78],[11,"reverse_in_place","","Use an iterator to reverse a container in place.",78],[8,"DoubleEndedIterator","","A range iterator able to yield elements from both ends"],[10,"next_back","","Yield an element from the end of the range, returning `None` if the\nrange is empty.",79],[8,"RandomAccessIterator","","An object implementing random access indexing by `usize`"],[10,"indexable","","Return the number of indexable elements. At most `std::usize::MAX`\nelements are indexable, even if the iterator represents a longer range.",80],[10,"idx","","Return an element at an index, or `None` if the index is out of bounds",80],[8,"ExactSizeIterator","","An iterator that knows its exact length"],[11,"len","","Return the exact length of the iterator.",81],[8,"AdditiveIterator","","A trait for iterators over elements which can be added together"],[10,"sum","","Iterates over the entire iterator, summing up all the elements",82],[8,"MultiplicativeIterator","","A trait for iterators over elements which can be multiplied together."],[10,"product","","Iterates over the entire iterator, multiplying all the elements",83],[6,"Item","",""],[6,"Item","",""],[6,"IntoIter","",""],[11,"clone","","",84],[6,"Item","",""],[11,"next","","",84],[11,"size_hint","","",84],[11,"next_back","","",84],[11,"indexable","","",84],[11,"idx","","",84],[11,"fmt","","",73],[11,"eq","","",73],[11,"ne","","",73],[11,"clone","","",73],[11,"into_option","","`into_option` creates an `Option` of type `(T,T)`. The returned `Option` has variant\n`None` if and only if the `MinMaxResult` has variant `NoElements`. Otherwise variant\n`Some(x,y)` is returned where `x <= y`. If `MinMaxResult` has variant `OneElement(x)`,\nperforming this operation will make one clone of `x`.",73],[11,"clone","","",85],[6,"Item","",""],[11,"next","","",85],[11,"size_hint","","",85],[11,"next_back","","",85],[11,"indexable","","",85],[11,"idx","","",85],[11,"clone","","",86],[6,"Item","",""],[11,"next","","",86],[11,"size_hint","","",86],[11,"indexable","","",86],[11,"idx","","",86],[11,"clone","","",87],[6,"Item","",""],[11,"next","","",87],[11,"size_hint","","",87],[11,"next_back","","",87],[11,"indexable","","",87],[11,"idx","","",87],[11,"clone","","",88],[6,"Item","",""],[11,"next","","",88],[11,"size_hint","","",88],[11,"next_back","","",88],[11,"indexable","","",88],[11,"idx","","",88],[11,"clone","","",89],[6,"Item","",""],[11,"next","","",89],[11,"size_hint","","",89],[11,"next_back","","",89],[11,"indexable","","",89],[11,"idx","","",89],[11,"clone","","",90],[6,"Item","",""],[11,"next","","",90],[11,"size_hint","","",90],[11,"next_back","","",90],[11,"clone","","",91],[6,"Item","",""],[11,"next","","",91],[11,"size_hint","","",91],[11,"next_back","","",91],[11,"clone","","",92],[6,"Item","",""],[11,"next","","",92],[11,"size_hint","","",92],[11,"next_back","","",92],[11,"indexable","","",92],[11,"idx","","",92],[11,"clone","","",93],[6,"Item","",""],[11,"next","","",93],[11,"size_hint","","",93],[11,"peek","","Return a reference to the next element of the iterator with out\nadvancing it, or None if the iterator is exhausted.",93],[11,"is_empty","","Check whether peekable iterator is empty or not.",93],[11,"clone","","",94],[6,"Item","",""],[11,"next","","",94],[11,"size_hint","","",94],[11,"clone","","",95],[6,"Item","",""],[11,"next","","",95],[11,"size_hint","","",95],[11,"clone","","",96],[6,"Item","",""],[11,"next","","",96],[11,"size_hint","","",96],[11,"indexable","","",96],[11,"idx","","",96],[11,"clone","","",97],[6,"Item","",""],[11,"next","","",97],[11,"size_hint","","",97],[11,"indexable","","",97],[11,"idx","","",97],[11,"clone","","",71],[6,"Item","",""],[11,"next","","",71],[11,"size_hint","","",71],[11,"clone","","",98],[6,"Item","",""],[11,"next","","",98],[11,"size_hint","","",98],[11,"next_back","","",98],[11,"clone","","",99],[6,"Item","",""],[11,"next","","",99],[11,"size_hint","","",99],[11,"next_back","","",99],[11,"indexable","","",99],[11,"idx","","",99],[11,"reset_fuse","","Resets the fuse such that the next call to .next() or .next_back() will\ncall the underlying iterator again even if it previously returned None.",99],[11,"clone","","",100],[6,"Item","",""],[11,"next","","",100],[11,"size_hint","","",100],[11,"next_back","","",100],[11,"indexable","","",100],[11,"idx","","",100],[11,"clone","","",72],[11,"new","","Creates a new iterator with the specified closure as the \"iterator\nfunction\" and an initial state to eventually pass to the closure",72],[6,"Item","",""],[11,"next","","",72],[11,"size_hint","","",72],[11,"clone","","",101],[6,"Item","",""],[11,"next","","",101],[11,"size_hint","","",101],[11,"clone","","",102],[6,"Item","",""],[11,"next","","",102],[11,"size_hint","","",102],[11,"next_back","","",102],[11,"clone","","",103],[6,"Item","",""],[11,"next","","",103],[11,"size_hint","","",103],[11,"next_back","","",103],[11,"clone","","",104],[6,"Item","",""],[11,"next","","",104],[11,"clone","","",105],[6,"Item","",""],[11,"next","","",105],[6,"Item","",""],[11,"next","core::ops","",22],[11,"size_hint","","",22],[11,"next_back","","",22],[6,"Item","core::iter",""],[11,"next","core::ops","",23],[11,"clone","core::iter","",106],[6,"Item","",""],[11,"next","","",106],[11,"size_hint","","",106],[11,"next_back","","",106],[11,"indexable","","",106],[11,"idx","","",106],[0,"option","core","Optional values"],[3,"Iter","core::option","An iterator over a reference of the contained item in an Option."],[3,"IterMut","","An iterator over a mutable reference of the contained item in an Option."],[3,"IntoIter","","An iterator over the item contained inside an Option."],[4,"Option","","The `Option` type. See [the module level documentation](../index.html) for more."],[13,"None","","No value",107],[13,"Some","","Some value `T`",107],[11,"hash","","",107],[11,"fmt","","",107],[11,"cmp","","",107],[11,"partial_cmp","","",107],[11,"lt","","",107],[11,"le","","",107],[11,"gt","","",107],[11,"ge","","",107],[11,"eq","","",107],[11,"ne","","",107],[11,"clone","","",107],[11,"is_some","","Returns `true` if the option is a `Some` value",107],[11,"is_none","","Returns `true` if the option is a `None` value",107],[11,"as_ref","","Convert from `Option<T>` to `Option<&T>`",107],[11,"as_mut","","Convert from `Option<T>` to `Option<&mut T>`",107],[11,"as_mut_slice","","Convert from `Option<T>` to `&mut [T]` (without copying)",107],[11,"expect","","Unwraps an option, yielding the content of a `Some`",107],[11,"unwrap","","Returns the inner `T` of a `Some(T)`.",107],[11,"unwrap_or","","Returns the contained value or a default.",107],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",107],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value",107],[11,"map_or","","Applies a function to the contained value or returns a default.",107],[11,"map_or_else","","Applies a function to the contained value or computes a default.",107],[11,"ok_or","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",107],[11,"ok_or_else","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",107],[11,"iter","","Returns an iterator over the possibly contained value.",107],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",107],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",107],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",107],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",107],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",107],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",107],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",107],[11,"cloned","","Maps an Option<D> to an Option<T> by dereffing and cloning the contents of the Option.\nUseful for converting an Option<&T> to an Option<T>.",107],[11,"unwrap_or_default","","Returns the contained value or a default",107],[11,"as_slice","","Convert from `Option<T>` to `&[T]` (without copying)",107],[11,"default","","",107],[6,"Item","",""],[11,"next","","",108],[11,"size_hint","","",108],[11,"next_back","","",108],[11,"clone","","",108],[6,"Item","",""],[11,"next","","",109],[11,"size_hint","","",109],[11,"next_back","","",109],[6,"Item","",""],[11,"next","","",110],[11,"size_hint","","",110],[11,"next_back","","",110],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",107],[0,"raw","core","Contains struct definitions for the layout of compiler built-in types."],[3,"Slice","core::raw","The representation of a slice like `&[T]`."],[12,"data","","",111],[12,"len","","",111],[3,"Closure","","The representation of an old closure."],[12,"code","","",112],[12,"env","","",112],[3,"TraitObject","","The representation of a trait object like `&SomeTrait`."],[12,"data","","",113],[12,"vtable","","",113],[8,"Repr","","This trait is meant to map equivalences between raw structs and their\ncorresponding rust values."],[11,"repr","","This function \"unwraps\" a rust value (without consuming it) into its raw\nstruct representation. This can be used to read/write different values\nfor the struct. This is a safe method because by default it does not\nenable write-access to the fields of the return value in safe code.",114],[0,"result","core","Error handling with the `Result` type"],[3,"Iter","core::result","An iterator over a reference to the `Ok` variant of a `Result`."],[3,"IterMut","","An iterator over a mutable reference to the `Ok` variant of a `Result`."],[3,"IntoIter","","An iterator over the value in a `Ok` variant of a `Result`."],[4,"Result","","`Result` is a type that represents either success (`Ok`) or failure (`Err`)."],[13,"Ok","","Contains the success value",115],[13,"Err","","Contains the error value",115],[5,"fold","","Perform a fold operation over the result values from an iterator."],[11,"hash","","",115],[11,"fmt","","",115],[11,"cmp","","",115],[11,"partial_cmp","","",115],[11,"lt","","",115],[11,"le","","",115],[11,"gt","","",115],[11,"ge","","",115],[11,"eq","","",115],[11,"ne","","",115],[11,"clone","","",115],[11,"is_ok","","Returns true if the result is `Ok`",115],[11,"is_err","","Returns true if the result is `Err`",115],[11,"ok","","Convert from `Result<T, E>` to `Option<T>`",115],[11,"err","","Convert from `Result<T, E>` to `Option<E>`",115],[11,"as_ref","","Convert from `Result<T, E>` to `Result<&T, &E>`",115],[11,"as_mut","","Convert from `Result<T, E>` to `Result<&mut T, &mut E>`",115],[11,"as_mut_slice","","Convert from `Result<T, E>` to `&mut [T]` (without copying)",115],[11,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to an\ncontained `Ok` value, leaving an `Err` value untouched.",115],[11,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to an\ncontained `Err` value, leaving an `Ok` value untouched.",115],[11,"iter","","Returns an iterator over the possibly contained value.",115],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",115],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",115],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",115],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",115],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",115],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",115],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",115],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",115],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",115],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",115],[11,"as_slice","","Convert from `Result<T, E>` to `&[T]` (without copying)",115],[6,"Item","",""],[11,"next","","",116],[11,"size_hint","","",116],[11,"next_back","","",116],[11,"clone","","",116],[6,"Item","",""],[11,"next","","",117],[11,"size_hint","","",117],[11,"next_back","","",117],[6,"Item","",""],[11,"next","","",118],[11,"size_hint","","",118],[11,"next_back","","",118],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",115],[0,"simd","core","SIMD vectors."],[3,"i8x16","core::simd",""],[3,"i16x8","",""],[3,"i32x4","",""],[3,"i64x2","",""],[3,"u8x16","",""],[3,"u16x8","",""],[3,"u32x4","",""],[3,"u64x2","",""],[3,"f32x4","",""],[3,"f64x2","",""],[11,"fmt","","",119],[11,"fmt","","",120],[11,"fmt","","",121],[11,"fmt","","",122],[11,"fmt","","",123],[11,"fmt","","",124],[11,"fmt","","",125],[11,"fmt","","",126],[11,"fmt","","",127],[11,"fmt","","",128],[0,"slice","core","Slice management and manipulation"],[3,"Iter","core::slice","Immutable slice iterator"],[3,"IterMut","","Mutable slice iterator."],[3,"Split","","An iterator over subslices separated by elements that match a predicate\nfunction."],[3,"SplitMut","","An iterator over the subslices of the vector which are separated\nby elements that match `pred`."],[3,"SplitN","","An iterator over subslices separated by elements that match a predicate\nfunction, limited to a given number of splits."],[3,"RSplitN","","An iterator over subslices separated by elements that match a\npredicate function, limited to a given number of splits, starting\nfrom the end of the slice."],[3,"SplitNMut","","An iterator over subslices separated by elements that match a predicate\nfunction, limited to a given number of splits."],[3,"RSplitNMut","","An iterator over subslices separated by elements that match a\npredicate function, limited to a given number of splits, starting\nfrom the end of the slice."],[3,"Windows","","An iterator over overlapping subslices of length `size`."],[3,"Chunks","","An iterator over a slice in (non-overlapping) chunks (`size` elements at a\ntime)."],[3,"ChunksMut","","An iterator over a slice in (non-overlapping) mutable chunks (`size`\nelements at a time). When the slice len is not evenly divided by the chunk\nsize, the last slice of the iteration will be the remainder."],[5,"ref_slice","","Converts a pointer to A into a slice of length 1 (without copying)."],[5,"mut_ref_slice","","Converts a pointer to A into a slice of length 1 (without copying)."],[5,"from_raw_parts","","Forms a slice from a pointer and a length."],[5,"from_raw_parts_mut","","Performs the same functionality as `from_raw_parts`, except that a mutable\nslice is returned."],[5,"from_raw_buf","","Forms a slice from a pointer and a length."],[5,"from_raw_mut_buf","","Performs the same functionality as `from_raw_buf`, except that a mutable\nslice is returned."],[0,"bytes","","Operations on `[u8]`."],[5,"copy_memory","core::slice::bytes","Copies data from `src` to `dst`"],[8,"MutableByteVector","","A trait for operations on mutable `[u8]`s."],[10,"set_memory","","Sets all bytes of the receiver to the given value.",129],[8,"SliceExt","core::slice","Extension methods for slices."],[16,"Item","core::slice::SliceExt",""],[10,"split_at","core::slice","",130],[10,"iter","","",130],[10,"split","","",130],[10,"splitn","","",130],[10,"rsplitn","","",130],[10,"windows","","",130],[10,"chunks","","",130],[10,"get","","",130],[10,"first","","",130],[10,"tail","","",130],[10,"init","","",130],[10,"last","","",130],[10,"get_unchecked","","",130],[10,"as_ptr","","",130],[10,"binary_search_by","","",130],[10,"len","","",130],[11,"is_empty","","",130],[10,"get_mut","","",130],[10,"as_mut_slice","","",130],[10,"iter_mut","","",130],[10,"first_mut","","",130],[10,"tail_mut","","",130],[10,"init_mut","","",130],[10,"last_mut","","",130],[10,"split_mut","","",130],[10,"splitn_mut","","",130],[10,"rsplitn_mut","","",130],[10,"chunks_mut","","",130],[10,"swap","","",130],[10,"split_at_mut","","",130],[10,"reverse","","",130],[10,"get_unchecked_mut","","",130],[10,"as_mut_ptr","","",130],[10,"position_elem","","",130],[10,"rposition_elem","","",130],[10,"contains","","",130],[10,"starts_with","","",130],[10,"ends_with","","",130],[10,"binary_search","","",130],[10,"next_permutation","","",130],[10,"prev_permutation","","",130],[10,"clone_from_slice","","",130],[8,"AsSlice","","Data that is viewable as a slice."],[10,"as_slice","","Work with `self` as a slice.",131],[8,"IntSliceExt","","Extension methods for slices containing integers."],[10,"as_unsigned","","Converts the slice to an immutable slice of unsigned integers with the same width.",132],[10,"as_signed","","Converts the slice to an immutable slice of signed integers with the same width.",132],[10,"as_unsigned_mut","","Converts the slice to a mutable slice of unsigned integers with the same width.",132],[10,"as_signed_mut","","Converts the slice to a mutable slice of signed integers with the same width.",132],[6,"Item","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Output","",""],[11,"index","","",133],[6,"Output","",""],[11,"index","","",133],[6,"Output","",""],[11,"index","","",133],[6,"Output","",""],[11,"index","","",133],[11,"as_slice","","View the underlying data as a subslice of the original data.",133],[6,"Item","",""],[11,"next","","",133],[11,"size_hint","","",133],[11,"next_back","","",133],[11,"clone","","",133],[11,"indexable","","",133],[11,"idx","","",133],[6,"Output","",""],[11,"index","","",134],[6,"Output","",""],[11,"index","","",134],[6,"Output","",""],[11,"index","","",134],[6,"Output","",""],[11,"index","","",134],[11,"index_mut","","",134],[11,"index_mut","","",134],[11,"index_mut","","",134],[11,"index_mut","","",134],[11,"into_slice","","View the underlying data as a subslice of the original data.",134],[6,"Item","",""],[11,"next","","",134],[11,"size_hint","","",134],[11,"next_back","","",134],[11,"clone","","",135],[6,"Item","",""],[11,"next","","",135],[11,"size_hint","","",135],[11,"next_back","","",135],[6,"Item","",""],[11,"next","","",136],[11,"size_hint","","",136],[11,"next_back","","",136],[6,"Item","",""],[11,"next","","",137],[11,"size_hint","","",137],[6,"Item","",""],[11,"next","","",138],[11,"size_hint","","",138],[6,"Item","",""],[11,"next","","",139],[11,"size_hint","","",139],[6,"Item","",""],[11,"next","","",140],[11,"size_hint","","",140],[11,"clone","","",141],[6,"Item","",""],[11,"next","","",141],[11,"size_hint","","",141],[11,"next_back","","",141],[11,"indexable","","",141],[11,"idx","","",141],[11,"clone","","",142],[6,"Item","",""],[11,"next","","",142],[11,"size_hint","","",142],[11,"next_back","","",142],[11,"indexable","","",142],[11,"idx","","",142],[6,"Item","",""],[11,"next","","",143],[11,"size_hint","","",143],[11,"next_back","","",143],[0,"str","core","String manipulation"],[3,"ParseBoolError","core::str","An error returned when parsing a `bool` from a string fails."],[3,"Chars","","Iterator for the char (representing *Unicode Scalar Values*) of a string"],[3,"CharIndices","","External iterator for a string's characters and their byte offsets.\nUse with the `std::iter` module."],[3,"Bytes","","External iterator for a string's bytes.\nUse with the `std::iter` module."],[3,"Lines","","An iterator over the lines of a string, separated by `\\n`."],[3,"LinesAny","","An iterator over the lines of a string, separated by either `\\n` or (`\\r\\n`)."],[3,"MatchIndices","","An iterator over the start and end indices of the matches of a\nsubstring within a larger string"],[3,"SplitStr","","An iterator over the substrings of a string separated by a given\nsearch string"],[3,"CharRange","","Struct that contains a `char` and the index of the first byte of\nthe next `char` in a string.  This can be used as a data structure\nfor iterating over the UTF-8 bytes of a string."],[12,"ch","","Current `char`",144],[12,"next","","Index of the first byte of the next `char`",144],[3,"Split","","Return type of `StrExt::split`"],[3,"SplitTerminator","","Return type of `StrExt::split_terminator`"],[3,"SplitN","","Return type of `StrExt::splitn`"],[3,"RSplitN","","Return type of `StrExt::rsplitn`"],[4,"SearchStep","","Result of calling `Searcher::next()` or `ReverseSearcher::next_back()`."],[13,"Match","","Expresses that a match of the pattern has been found at\n`haystack[a..b]`.",145],[13,"Reject","","Expresses that `haystack[a..b]` has been rejected as a possible match\nof the pattern.",145],[13,"Done","","Expresses that every byte of the haystack has been visted, ending\nthe iteration.",145],[4,"Utf8Error","","Errors which can occur when attempting to interpret a byte slice as a `str`."],[13,"InvalidByte","","An invalid byte was detected at the byte offset given.",146],[13,"TooShort","","The byte slice was invalid because more bytes were needed but no more\nbytes were available.",146],[5,"from_utf8","","Converts a slice of bytes to a string slice without performing any\nallocations."],[5,"from_utf8_unchecked","","Converts a slice of bytes to a string slice without checking\nthat the string contains valid UTF-8."],[5,"from_c_str","","Constructs a static string slice from a given raw pointer."],[5,"next_code_point","","Reads the next code point out of a byte iterator (assuming a\nUTF-8-like encoding)."],[5,"next_code_point_reverse","","Reads the last code point out of a byte iterator (assuming a\nUTF-8-like encoding)."],[5,"char_range_at_raw","","Pluck a code point out of a UTF-8-like byte slice and return the\nindex of the next code point."],[11,"fmt","","",145],[11,"eq","","",145],[11,"ne","","",145],[11,"clone","","",145],[8,"Pattern","","A string pattern."],[16,"Searcher","core::str::Pattern","Associated searcher for this pattern"],[10,"into_searcher","core::str","Construct the associated searcher from\n`self` and the `haystack` to search in.",147],[11,"is_contained_in","","Check whether the pattern matches anywhere in the haystack",147],[11,"is_prefix_of","","Check whether the pattern matches at the front of the haystack",147],[11,"is_suffix_of","","Check whether the pattern matches at the back of the haystack",147],[8,"Searcher","","A searcher for a string pattern."],[10,"haystack","","Getter for the underlaying string to be searched in",148],[10,"next","","Performs the next search step starting from the front.",148],[11,"next_match","","Find the next `Match` result. See `next()`",148],[11,"next_reject","","Find the next `Reject` result. See `next()`",148],[8,"ReverseSearcher","","A reverse searcher for a string pattern."],[10,"next_back","","Performs the next search step starting from the back.",149],[11,"next_match_back","","Find the next `Match` result. See `next_back()`",149],[11,"next_reject_back","","Find the next `Reject` result. See `next_back()`",149],[8,"DoubleEndedSearcher","","A marker trait to express that a `ReverseSearcher`\ncan be used for a `DoubleEndedIterator` implementation."],[8,"FromStr","","A trait to abstract the idea of creating a new instance of a type from a\nstring."],[16,"Err","core::str::FromStr","The associated error which can be returned from parsing."],[10,"from_str","core::str","Parses a string `s` to return an optional value of this type. If the\nstring is ill-formatted, the None is returned.",150],[8,"CharEq","","Something that can be used to compare against a character"],[10,"matches","","Determine if the splitter should split at the given character",151],[10,"only_ascii","","Indicate if this is only concerned about ASCII characters,\nwhich can allow for a faster implementation.",151],[8,"Str","","Any string that can be represented as a slice"],[10,"as_slice","","Work with `self` as a slice.",152],[8,"StrExt","","Methods for string slices"],[10,"contains","","",153],[10,"contains_char","","",153],[10,"chars","","",153],[10,"bytes","","",153],[10,"char_indices","","",153],[10,"split","","",153],[10,"splitn","","",153],[10,"split_terminator","","",153],[10,"rsplitn","","",153],[10,"match_indices","","",153],[10,"split_str","","",153],[10,"lines","","",153],[10,"lines_any","","",153],[10,"char_len","","",153],[10,"slice_chars","","",153],[10,"slice_unchecked","","",153],[10,"starts_with","","",153],[10,"ends_with","","",153],[10,"trim_matches","","",153],[10,"trim_left_matches","","",153],[10,"trim_right_matches","","",153],[10,"is_char_boundary","","",153],[10,"char_range_at","","",153],[10,"char_range_at_reverse","","",153],[10,"char_at","","",153],[10,"char_at_reverse","","",153],[10,"as_bytes","","",153],[10,"find","","",153],[10,"rfind","","",153],[10,"find_str","","",153],[10,"slice_shift_char","","",153],[10,"subslice_offset","","",153],[10,"as_ptr","","",153],[10,"len","","",153],[10,"is_empty","","",153],[10,"parse","","",153],[6,"Err","",""],[11,"eq","","",154],[11,"ne","","",154],[11,"clone","","",154],[11,"fmt","","",154],[11,"fmt","","",154],[11,"description","","",154],[11,"fmt","","",146],[11,"clone","","",146],[11,"eq","","",146],[11,"ne","","",146],[11,"description","","",146],[11,"fmt","","",146],[11,"clone","","",155],[6,"Item","",""],[11,"next","","",155],[11,"size_hint","","",155],[11,"next_back","","",155],[11,"clone","","",156],[6,"Item","",""],[11,"next","","",156],[11,"size_hint","","",156],[11,"next_back","","",156],[11,"clone","","",157],[6,"Item","",""],[11,"next","","",157],[11,"size_hint","","",157],[11,"next_back","","",157],[11,"len","","",157],[6,"Item","",""],[11,"next","","",158],[6,"Item","",""],[11,"next","","",159],[6,"Item","",""],[11,"next","","",160],[11,"next_back","","",160],[6,"Item","",""],[11,"next","","",161],[11,"size_hint","","",161],[11,"next_back","","",161],[6,"Item","",""],[11,"next","","",162],[11,"size_hint","","",162],[6,"Item","",""],[11,"next","","",163],[11,"size_hint","","",163],[6,"Item","",""],[11,"next","","",164],[11,"size_hint","","",164],[11,"next_back","","",164],[6,"Item","",""],[11,"next","","",165],[11,"size_hint","","",165],[11,"next_back","","",165],[0,"hash","core","Generic hashing support."],[3,"SipHasher","core::hash","An implementation of SipHash 2-4."],[5,"hash","","Hash a value with the default SipHasher algorithm (two initial keys of 0)."],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",166],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",166],[11,"result","","Returns the computed hash.",166],[11,"write","","",166],[11,"finish","","",166],[11,"clone","","",166],[11,"default","","",166],[8,"Hash","","A hashable type."],[10,"hash","","Feeds this value into the state given, updating the hasher as necessary.",167],[11,"hash_slice","","Feeds a slice of this type into the state provided.",167],[8,"Hasher","","A trait which represents the ability to hash an arbitrary stream of bytes."],[10,"finish","","Completes a round of hashing, producing the output hash generated.",168],[10,"write","","Writes some data into this `Hasher`",168],[11,"write_u8","","Write a single `u8` into this hasher",168],[11,"write_u16","","Write a single `u16` into this hasher.",168],[11,"write_u32","","Write a single `u32` into this hasher.",168],[11,"write_u64","","Write a single `u64` into this hasher.",168],[11,"write_usize","","Write a single `usize` into this hasher.",168],[11,"write_i8","","Write a single `i8` into this hasher.",168],[11,"write_i16","","Write a single `i16` into this hasher.",168],[11,"write_i32","","Write a single `i32` into this hasher.",168],[11,"write_i64","","Write a single `i64` into this hasher.",168],[11,"write_isize","","Write a single `isize` into this hasher.",168],[0,"fmt","core","Utilities for formatting and printing strings"],[3,"Radix","core::fmt","A radix with in the range of `2..36`."],[3,"RadixFmt","","A helper type for formatting radixes."],[3,"Error","","The error type which is returned from formatting a message into a stream."],[3,"Formatter","","A struct to represent both where to emit formatting strings to and how they\nshould be formatted. A mutable version of this is passed to all formatting\ntraits."],[3,"Arguments","","This structure represents a safely precompiled version of a format string\nand its arguments. This cannot be generated at runtime because it cannot\nsafely be done so, so no constructors are given and the fields are private\nto prevent modification."],[5,"radix","","Constructs a radix formatter in the range of `2..36`."],[5,"write","","The `write` function takes an output stream, a precompiled format string,\nand a list of arguments. The arguments will be formatted according to the\nspecified format string into the output stream provided."],[11,"eq","","",169],[11,"ne","","",169],[11,"clone","","",169],[11,"fmt","","",170],[11,"fmt","","",170],[11,"fmt","","",170],[11,"fmt","","",170],[11,"fmt","","",170],[11,"fmt","","",170],[11,"fmt","","",170],[11,"fmt","","",170],[11,"fmt","","",170],[11,"fmt","","",170],[11,"fmt","","",170],[11,"fmt","","",170],[11,"fmt","","",170],[11,"fmt","","",170],[11,"fmt","","",170],[11,"fmt","","",170],[11,"fmt","","",170],[11,"fmt","","",170],[11,"fmt","","",170],[11,"fmt","","",170],[6,"Result","","The type returned by formatter methods."],[8,"Write","","A collection of methods that are required to format a message into a stream."],[10,"write_str","","Writes a slice of bytes into this writer, returning whether the write\nsucceeded.",171],[11,"write_fmt","","Glue for usage of the `write!` macro with implementers of this trait.",171],[8,"Debug","","Format trait for the `:?` format. Useful for debugging, all types\nshould implement this."],[10,"fmt","","Formats the value using the given formatter.",172],[8,"Display","","When a value can be semantically expressed as a String, this trait may be\nused. It corresponds to the default format, `{}`."],[10,"fmt","","Formats the value using the given formatter.",173],[8,"Octal","","Format trait for the `o` character"],[10,"fmt","","Formats the value using the given formatter.",174],[8,"Binary","","Format trait for the `b` character"],[10,"fmt","","Formats the value using the given formatter.",175],[8,"LowerHex","","Format trait for the `x` character"],[10,"fmt","","Formats the value using the given formatter.",176],[8,"UpperHex","","Format trait for the `X` character"],[10,"fmt","","Formats the value using the given formatter.",177],[8,"Pointer","","Format trait for the `p` character"],[10,"fmt","","Formats the value using the given formatter.",178],[8,"LowerExp","","Format trait for the `e` character"],[10,"fmt","","Formats the value using the given formatter.",179],[8,"UpperExp","","Format trait for the `E` character"],[10,"fmt","","Formats the value using the given formatter.",180],[11,"fmt","","",181],[11,"fmt","","",182],[11,"fmt","","",182],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",183],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",183],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",183],[11,"write_fmt","","Writes some formatted information into this instance",183],[11,"flags","","Flags for formatting (packed version of rt::Flag)",183],[11,"fill","","Character used as 'fill' whenever there is alignment",183],[11,"align","","Flag indicating what form of alignment was requested",183],[11,"width","","Optionally specified integer width that the output should be",183],[11,"precision","","Optionally specified precision for numeric types",183],[11,"fmt","","",181],[11,"fmt","core::marker","",21],[11,"fmt","core::cell","",63],[11,"fmt","","",64],[11,"fmt","","",65],[11,"fmt","","",66],[0,"error","core","Traits for working with Errors."],[8,"Error","core::error","Base functionality for all errors in Rust."],[10,"description","","A short description of the error; usually a static string.",184],[11,"cause","","The lower-level cause of this error, if any.",184],[8,"FromError","","A trait for types that can be converted from a given error type `E`."],[10,"from_error","","Perform the conversion.",185],[14,"panic!","core","Entry point of task panic, for details, see std::macros"],[14,"assert!","","Ensure that a boolean expression is `true` at runtime."],[14,"assert_eq!","","Asserts that two expressions are equal to each other, testing equality in\nboth directions."],[14,"debug_assert!","","Ensure that a boolean expression is `true` at runtime."],[14,"debug_assert_eq!","","Asserts that two expressions are equal to each other, testing equality in\nboth directions."],[14,"try!","","Short circuiting evaluation on Err"],[14,"write!","","Use the `format!` syntax to write data into a buffer of type `&mut Writer`.\nSee `std::fmt` for more information."],[14,"writeln!","","Equivalent to the `write!` macro, except that a newline is appended after\nthe message is written."],[14,"unreachable!","","A utility macro for indicating unreachable code."],[14,"unimplemented!","","A standardised placeholder for marking unfinished code. It panics with the\nmessage `\"not yet implemented\"` when executed."],[14,"__impl_slice_eq1!","",""],[14,"__impl_slice_eq2!","",""],[15,"isize","","Operations and constants for pointer-sized signed integers (`isize` type)"],[15,"i8","","Operations and constants for signed 8-bits integers (`i8` type)"],[15,"i16","","Operations and constants for signed 16-bits integers (`i16` type)"],[15,"i32","","Operations and constants for signed 32-bits integers (`i32` type)"],[15,"i64","","Operations and constants for signed 64-bits integers (`i64` type)"],[15,"usize","","Operations and constants for pointer-sized unsigned integers (`usize` type)"],[15,"u8","","Operations and constants for unsigned 8-bits integers (`u8` type)"],[15,"u16","","Operations and constants for unsigned 16-bits integers (`u16` type)"],[15,"u32","","Operations and constants for unsigned 32-bits integers (`u32` type)"],[15,"u64","","Operations and constants for unsigned 64-bits integer (`u64` type)"],[15,"f32","","Operations and constants for 32-bits floats (`f32` type)"],[15,"f64","","Operations and constants for 64-bits floats (`f64` type)"],[15,"char","","Character manipulation."],[15,"slice","","Slice management and manipulation"],[15,"str","","String manipulation"],[15,"bool","",""],[15,"tuple","","Operations on tuples"],[11,"is_contained_in","core::str","Check whether the pattern matches anywhere in the haystack",147],[11,"is_prefix_of","","Check whether the pattern matches at the front of the haystack",147],[11,"is_suffix_of","","Check whether the pattern matches at the back of the haystack",147],[11,"next_match","","Find the next `Match` result. See `next()`",148],[11,"next_reject","","Find the next `Reject` result. See `next()`",148],[11,"next_match_back","","Find the next `Match` result. See `next_back()`",149],[11,"next_reject_back","","Find the next `Reject` result. See `next_back()`",149]],"paths":[[4,"FpCategory"],[8,"WrappingOps"],[8,"OverflowingOps"],[3,"Wrapping"],[8,"Int"],[8,"SignedInt"],[8,"UnsignedInt"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"Float"],[8,"FromStrRadix"],[3,"ParseIntError"],[3,"ParseFloatError"],[3,"TyDesc"],[3,"NonZero"],[8,"PtrExt"],[8,"MutPtrExt"],[3,"Unique"],[3,"NoCopy"],[3,"Managed"],[3,"PhantomData"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[8,"Drop"],[8,"Add"],[8,"Sub"],[8,"Mul"],[8,"Div"],[8,"Rem"],[8,"Neg"],[8,"Not"],[8,"BitAnd"],[8,"BitOr"],[8,"BitXor"],[8,"Shl"],[8,"Shr"],[8,"Index"],[8,"IndexMut"],[8,"Deref"],[8,"DerefMut"],[8,"Fn"],[8,"FnMut"],[8,"FnOnce"],[3,"RangeFull"],[4,"Ordering"],[8,"PartialEq"],[8,"Ord"],[8,"PartialOrd"],[8,"Clone"],[8,"Default"],[8,"Any"],[3,"TypeId"],[4,"Ordering"],[3,"AtomicBool"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"AtomicPtr"],[3,"AtomicInt"],[3,"AtomicUint"],[3,"UnsafeCell"],[4,"BorrowState"],[3,"Cell"],[3,"RefCell"],[3,"Ref"],[3,"RefMut"],[8,"CharExt"],[3,"EscapeUnicode"],[3,"EscapeDefault"],[8,"Finally"],[3,"Scan"],[3,"Unfold"],[4,"MinMaxResult"],[8,"Iterator"],[8,"FromIterator"],[8,"IntoIterator"],[8,"Extend"],[8,"IteratorExt"],[8,"DoubleEndedIterator"],[8,"RandomAccessIterator"],[8,"ExactSizeIterator"],[8,"AdditiveIterator"],[8,"MultiplicativeIterator"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"Counter"],[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"],[3,"Repeat"],[4,"Option"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Slice"],[3,"Closure"],[3,"TraitObject"],[8,"Repr"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"i8x16"],[3,"i16x8"],[3,"i32x4"],[3,"i64x2"],[3,"u8x16"],[3,"u16x8"],[3,"u32x4"],[3,"u64x2"],[3,"f32x4"],[3,"f64x2"],[8,"MutableByteVector"],[8,"SliceExt"],[8,"AsSlice"],[8,"IntSliceExt"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[3,"CharRange"],[4,"SearchStep"],[4,"Utf8Error"],[8,"Pattern"],[8,"Searcher"],[8,"ReverseSearcher"],[8,"FromStr"],[8,"CharEq"],[8,"Str"],[8,"StrExt"],[3,"ParseBoolError"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"MatchIndices"],[3,"SplitStr"],[3,"Split"],[3,"SplitTerminator"],[3,"SplitN"],[3,"RSplitN"],[3,"Lines"],[3,"LinesAny"],[3,"SipHasher"],[8,"Hash"],[8,"Hasher"],[3,"Radix"],[3,"RadixFmt"],[8,"Write"],[8,"Debug"],[8,"Display"],[8,"Octal"],[8,"Binary"],[8,"LowerHex"],[8,"UpperHex"],[8,"Pointer"],[8,"LowerExp"],[8,"UpperExp"],[3,"Error"],[3,"Arguments"],[3,"Formatter"],[8,"Error"],[8,"FromError"]]};
searchIndex['graphviz'] = {"items":[[0,"","graphviz","Generate files suitable for use with [Graphviz](http://www.graphviz.org/)"],[3,"Id","","`Id` is a Graphviz `ID`."],[4,"LabelText","","The text for a graphviz label on a node or edge."],[13,"LabelStr","","This kind of label preserves the text directly as is.",0],[13,"EscStr","","This kind of label uses the graphviz label escString type:\nhttp://www.graphviz.org/content/attrs#kescString",0],[4,"RenderOption","",""],[13,"NoEdgeLabels","","",1],[13,"NoNodeLabels","","",1],[5,"default_options","","Returns vec holding all the default render options."],[5,"render","","Renders directed graph `g` into the writer `w` in DOT syntax.\n(Simple wrapper around `render_opts` that passes a default set of options.)"],[5,"render_opts","","Renders directed graph `g` into the writer `w` in DOT syntax.\n(Main entry point for the library.)"],[6,"Nodes","",""],[6,"Edges","",""],[8,"Labeller","","Each instance of a type that implements `Label<C>` maps to a\nunique identifier with respect to `C`, which is used to identify\nit in the generated .dot file. They can also provide more\nelaborate (and non-unique) label text that is used in the graphviz\nrendered output.\nThe graph instance is responsible for providing the DOT compatible\nidentifiers for the nodes and (optionally) rendered labels for the nodes and\nedges, as well as an identifier for the graph itself."],[10,"graph_id","","Must return a DOT compatible identifier naming the graph.",2],[10,"node_id","","Maps `n` to a unique identifier with respect to `self`. The\nimplementer is responsible for ensuring that the returned name\nis a valid DOT identifier.",2],[11,"node_label","","Maps `n` to a label that will be used in the rendered output.\nThe label need not be unique, and may be the empty string; the\ndefault is just the output from `node_id`.",2],[11,"edge_label","","Maps `e` to a label that will be used in the rendered output.\nThe label need not be unique, and may be the empty string; the\ndefault is in fact the empty string.",2],[8,"GraphWalk","","GraphWalk is an abstraction over a directed graph = (nodes,edges)\nmade up of node handles `N` and edge handles `E`, where each `E`\ncan be mapped to its source and target nodes."],[10,"nodes","","Returns all the nodes in this graph.",3],[10,"edges","","Returns all of the edges in this graph.",3],[10,"source","","The source node for `edge`.",3],[10,"target","","The target node for `edge`.",3],[11,"new","","Creates an `Id` named `name`.",4],[11,"as_slice","","",4],[11,"name","","",4],[11,"label","","",0],[11,"escaped","","",0],[11,"escape","","Renders text as string suitable for a label in a .dot file.",0],[11,"prefix_line","","Puts `prefix` on a line above this label, with a blank line separator.",0],[11,"suffix_line","","Puts `suffix` on a line below this label, with a blank line separator.",0],[11,"fmt","","",1],[11,"eq","","",1],[11,"ne","","",1]],"paths":[[4,"LabelText"],[4,"RenderOption"],[8,"Labeller"],[8,"GraphWalk"],[3,"Id"]]};
searchIndex['rand'] = {"items":[[0,"","rand","Interface to random number generators in Rust."],[3,"Generator","","Iterator which will generate a stream of random items."],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters."],[3,"XorShiftRng","","An Xorshift[1] random number\ngenerator."],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the\nopen interval `(0,1)` (not including either endpoint)."],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the\nclosed interval `[0,1]` (including both endpoints)."],[0,"distributions","","Sampling from random distributions."],[3,"RandSample","rand::distributions","A wrapper for generating types that implement `Rand` via the\n`Sample` & `IndependentSample` traits."],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`."],[12,"weight","","The numerical weight of this item",0],[12,"item","","The actual item which is being weighted",0],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items."],[0,"range","","Generating numbers between two others."],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds."],[8,"SampleRange","","The helper trait for types that have a sensible way to sample\nuniformly between two values. This should not be used directly,\nand is only to facilitate `Range`."],[10,"construct_range","","Construct the `Range` object that `sample_range`\nrequires. This should not ever be called directly, only via\n`Range::new`, which will check that `low < high`, so this\nfunction doesn't have to repeat the check.",1],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as\na source of randomness.",1],[11,"new","","Create a new `Range` instance that samples uniformly from\n`[low, high)`. Panics if `low >= high`.",2],[11,"sample","","",2],[11,"ind_sample","","",2],[0,"gamma","rand::distributions","The Gamma and derived distributions."],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution."],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of\nfreedom."],[3,"FisherF","","The Fisher F distribution `F(m, n)`."],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of\nfreedom."],[11,"new","","Construct an object representing the `Gamma(shape, scale)`\ndistribution.",3],[11,"sample","","",3],[11,"ind_sample","","",3],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom\n`k`. Panics if `k < 0`.",4],[11,"sample","","",4],[11,"ind_sample","","",4],[11,"new","","Create a new `FisherF` distribution, with the given\nparameter. Panics if either `m` or `n` are not positive.",5],[11,"sample","","",5],[11,"ind_sample","","",5],[11,"new","","Create a new Student t distribution with `n` degrees of\nfreedom. Panics if `n <= 0`.",6],[11,"sample","","",6],[11,"ind_sample","","",6],[0,"normal","rand::distributions","The normal and derived distributions."],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers\n(a.k.a.  a standard normal, or Gaussian)."],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`."],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`."],[11,"rand","","",7],[11,"new","","Construct a new `Normal` distribution with the given mean and\nstandard deviation.",8],[11,"sample","","",8],[11,"ind_sample","","",8],[11,"new","","Construct a new `LogNormal` distribution with the given mean\nand standard deviation.",9],[11,"sample","","",9],[11,"ind_sample","","",9],[0,"exponential","rand::distributions","The exponential distribution."],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers."],[3,"Exp","","The exponential distribution `Exp(lambda)`."],[11,"rand","","",10],[11,"new","","Construct a new `Exp` with the given shape parameter\n`lambda`. Panics if `lambda <= 0`.",11],[11,"sample","","",11],[11,"ind_sample","","",11],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`."],[10,"sample","","Generate a random value of `Support`, using `rng` as the\nsource of randomness.",12],[8,"IndependentSample","","`Sample`s that do not require keeping track of state."],[10,"ind_sample","","Generate a random value.",13],[11,"new","","",14],[11,"sample","","",14],[11,"ind_sample","","",14],[11,"new","","Create a new `WeightedChoice`.",15],[11,"sample","","",15],[11,"ind_sample","","",15],[0,"isaac","rand","The ISAAC random number generator."],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1]."],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit\nvariant of the ISAAC algorithm."],[11,"new_unseeded","","Create an ISAAC random number generator using the default\nfixed seed.",16],[11,"clone","","",16],[11,"next_u32","","",16],[11,"reseed","","",16],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",16],[11,"rand","","",16],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the\ndefault fixed seed.",17],[11,"clone","","",17],[11,"next_u32","","",17],[11,"next_u64","","",17],[11,"reseed","","",17],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",17],[11,"rand","","",17],[0,"chacha","rand","The ChaCha random number generator."],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1]."],[11,"clone","","",18],[11,"new_unseeded","","Create an ChaCha random number generator using the default\nfixed key of 8 zero words.",18],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to\na user-provided value. This permits jumping\narbitrarily ahead (or backwards) in the pseudorandom stream.",18],[11,"next_u32","","",18],[11,"reseed","","",18],[11,"from_seed","","Create a ChaCha generator from a seed,\nobtained from a variable-length u32 array.\nOnly up to 8 words are used; if less than 8\nwords are used, the remaining are set to zero.",18],[11,"rand","","",18],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it\ngenerates a certain number of random bytes."],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it\nhas generated a certain number of random bytes."],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",19],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by\nreplacing the RNG with the result of a `Default::default` call."],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`."],[10,"reseed","","Reseed the given RNG.",20],[11,"new","","Create a new `ReseedingRng` with the given parameters.",19],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been\ngenerated exceed the threshold.",19],[11,"next_u32","","",19],[11,"next_u64","","",19],[11,"fill_bytes","","",19],[11,"reseed","","",19],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and\nseed. This uses a default value for `generation_threshold`.",19],[11,"reseed","","",21],[11,"default","","",21],[11,"rand","rand","",22],[11,"rand","","",23],[11,"rand","","",22],[11,"rand","","",23],[11,"rand","core::option","",24],[8,"Rand","rand","A type that can be randomly generated using an `Rng`."],[10,"rand","","Generates a random instance of this type using the specified source of\nrandomness.",25],[8,"Rng","","A random number generator."],[10,"next_u32","","Return the next random u32.",26],[11,"next_u64","","Return the next random u64.",26],[11,"next_f32","","Return the next random f32 selected from the half-open\ninterval `[0, 1)`.",26],[11,"next_f64","","Return the next random f64 selected from the half-open\ninterval `[0, 1)`.",26],[11,"fill_bytes","","Fill `dest` with random data.",26],[11,"gen","","Return a random value of a `Rand` type.",26],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly\ngenerated items.",26],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",26],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",26],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",26],[11,"choose","","Return a random element from `values`.",26],[11,"shuffle","","Shuffle a mutable slice in place.",26],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce\nthe same stream of randomness multiple times."],[10,"reseed","","Reseed an RNG with the given seed.",27],[10,"from_seed","","Create a new RNG with the given seed.",27],[6,"Item","",""],[11,"next","","",28],[6,"Item","",""],[11,"next","","",29],[11,"clone","","",30],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",30],[11,"next_u32","","",30],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",30],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",30],[11,"rand","","",30]],"paths":[[3,"Weighted"],[8,"SampleRange"],[3,"Range"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[8,"Sample"],[8,"IndependentSample"],[3,"RandSample"],[3,"WeightedChoice"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"ChaChaRng"],[3,"ReseedingRng"],[8,"Reseeder"],[3,"ReseedWithDefault"],[3,"Open01"],[3,"Closed01"],[4,"Option"],[8,"Rand"],[8,"Rng"],[8,"SeedableRng"],[3,"Generator"],[3,"AsciiGenerator"],[3,"XorShiftRng"]]};
searchIndex['test'] = {"items":[[0,"","test","Support code for rustc's built in unit-test and micro-benchmarking\nframework."],[3,"Bencher","","Manager of the benchmarking runs."],[12,"bytes","","",0],[3,"TestDesc","",""],[12,"name","","",1],[12,"ignore","","",1],[12,"should_panic","","",1],[3,"TestDescAndFn","",""],[12,"desc","","",2],[12,"testfn","","",2],[3,"Metric","",""],[3,"MetricMap","",""],[3,"TestOpts","",""],[12,"filter","","",3],[12,"run_ignored","","",3],[12,"run_tests","","",3],[12,"run_benchmarks","","",3],[12,"logfile","","",3],[12,"nocapture","","",3],[12,"color","","",3],[3,"BenchSamples","",""],[4,"TestName","",""],[13,"StaticTestName","","",4],[13,"DynTestName","","",4],[4,"TestFn","",""],[13,"StaticTestFn","","",5],[13,"StaticBenchFn","","",5],[13,"StaticMetricFn","","",5],[13,"DynTestFn","","",5],[13,"DynMetricFn","","",5],[13,"DynBenchFn","","",5],[4,"ShouldPanic","",""],[13,"No","","",6],[13,"Yes","","",6],[4,"ColorConfig","",""],[13,"AutoColor","","",7],[13,"AlwaysColor","","",7],[13,"NeverColor","","",7],[4,"TestResult","",""],[13,"TrOk","","",8],[13,"TrFailed","","",8],[13,"TrIgnored","","",8],[13,"TrMetrics","","",8],[13,"TrBench","","",8],[5,"test_main","",""],[5,"test_main_static","",""],[5,"parse_opts","",""],[5,"fmt_bench_samples","",""],[5,"run_tests_console","",""],[5,"filter_tests","",""],[5,"run_test","",""],[5,"black_box","","A function that is opaque to the optimizer, to allow benchmarks to\npretend to use outputs to assist in avoiding dead-code\nelimination."],[0,"test","",""],[0,"stats","",""],[3,"Summary","test::stats","Extracted collection of all the summary statistics of a sample set."],[12,"sum","","",9],[12,"min","","",9],[12,"max","","",9],[12,"mean","","",9],[12,"median","","",9],[12,"var","","",9],[12,"std_dev","","",9],[12,"std_dev_pct","","",9],[12,"median_abs_dev","","",9],[12,"median_abs_dev_pct","","",9],[12,"quartiles","","",9],[12,"iqr","","",9],[5,"winsorize","","Winsorize a set of samples, replacing values above the `100-pct` percentile and below the `pct`\npercentile with those percentiles themselves. This is a way of minimizing the effect of\noutliers, at the cost of biasing the sample. It differs from trimming in that it does not\nchange the number of samples, just changes the values of those that are outliers."],[5,"freq_count","","Returns a HashMap with the number of occurrences of every element in the\nsequence that the iterator exposes."],[8,"Stats","","Trait that provides simple descriptive statistics on a univariate set of numeric samples."],[10,"sum","","Sum of the samples.",10],[10,"min","","Minimum value of the samples.",10],[10,"max","","Maximum value of the samples.",10],[10,"mean","","Arithmetic mean (average) of the samples: sum divided by sample-count.",10],[10,"median","","Median of the samples: value separating the lower half of the samples from the higher half.\nEqual to `self.percentile(50.0)`.",10],[10,"var","","Variance of the samples: bias-corrected mean of the squares of the differences of each\nsample from the sample mean. Note that this calculates the _sample variance_ rather than the\npopulation variance, which is assumed to be unknown. It therefore corrects the `(n-1)/n`\nbias that would appear if we calculated a population variance, by dividing by `(n-1)` rather\nthan `n`.",10],[10,"std_dev","","Standard deviation: the square root of the sample variance.",10],[10,"std_dev_pct","","Standard deviation as a percent of the mean value. See `std_dev` and `mean`.",10],[10,"median_abs_dev","","Scaled median of the absolute deviations of each sample from the sample median. This is a\nrobust (distribution-agnostic) estimator of sample variability. Use this in preference to\n`std_dev` if you cannot assume your sample is normally distributed. Note that this is scaled\nby the constant `1.4826` to allow its use as a consistent estimator for the standard\ndeviation.",10],[10,"median_abs_dev_pct","","Median absolute deviation as a percent of the median. See `median_abs_dev` and `median`.",10],[10,"percentile","","Percentile: the value below which `pct` percent of the values in `self` fall. For example,\npercentile(95.0) will return the value `v` such that 95% of the samples `s` in `self`\nsatisfy `s <= v`.",10],[10,"quartiles","","Quartiles of the sample: three values that divide the sample into four equal groups, each\nwith 1/4 of the data. The middle value is the median. See `median` and `percentile`. This\nfunction may calculate the 3 quartiles more efficiently than 3 calls to `percentile`, but\nis otherwise equivalent.",10],[10,"iqr","","Inter-quartile range: the difference between the 25th percentile (1st quartile) and the 75th\npercentile (3rd quartile). See `quartiles`.",10],[11,"eq","","",9],[11,"ne","","",9],[11,"clone","","",9],[11,"new","","Construct a new summary of a sample set.",9],[0,"bench","test",""],[5,"benchmark","test::bench",""],[6,"OptRes","test","Result of parsing the options."],[6,"MonitorMsg","",""],[8,"TDynBenchFn","","Represents a benchmark function."],[10,"run","","",11],[11,"fmt","","",4],[11,"hash","","",4],[11,"eq","","",4],[11,"ne","","",4],[11,"clone","","",4],[11,"fmt","","",4],[11,"fmt","","",5],[11,"hash","","",6],[11,"eq","","",6],[11,"ne","","",6],[11,"fmt","","",6],[11,"clone","","",6],[11,"hash","","",1],[11,"eq","","",1],[11,"ne","","",1],[11,"fmt","","",1],[11,"clone","","",1],[11,"fmt","","",2],[11,"fmt","","",12],[11,"eq","","",12],[11,"ne","","",12],[11,"decode","","",12],[11,"encode","","",12],[11,"clone","","",12],[11,"new","","",12],[11,"eq","","",13],[11,"ne","","",13],[11,"clone","","",13],[11,"eq","","",14],[11,"ne","","",14],[11,"clone","","",14],[11,"eq","","",8],[11,"ne","","",8],[11,"clone","","",8],[11,"new","","",13],[11,"insert_metric","","Insert a named `value` (+/- `noise`) metric into the map. The value\nmust be non-negative. The `noise` indicates the uncertainty of the\nmetric, which doubles as the \"noise range\" of acceptable\npairwise-regressions on this named value, when comparing from one\nmetric to the next using `compare_to_old`.",13],[11,"fmt_metrics","","",13],[11,"iter","","Callback for benchmark functions to run in their body.",0],[11,"ns_elapsed","","",0],[11,"ns_per_iter","","",0],[11,"bench_n","","",0],[11,"auto_bench","","",0]],"paths":[[3,"Bencher"],[3,"TestDesc"],[3,"TestDescAndFn"],[3,"TestOpts"],[4,"TestName"],[4,"TestFn"],[4,"ShouldPanic"],[4,"ColorConfig"],[4,"TestResult"],[3,"Summary"],[8,"Stats"],[8,"TDynBenchFn"],[3,"Metric"],[3,"MetricMap"],[3,"BenchSamples"]]};
searchIndex['collections'] = {"items":[[0,"","collections","Collection types."],[0,"boxed","","A pointer type for heap allocation."],[7,"HEAP","collections::boxed","A value that represents the heap. This is the default place that the `box`\nkeyword allocates into when no place is supplied."],[11,"new","alloc::boxed","Allocates memory on the heap and then moves `x` into it.",0],[11,"from_raw","","Constructs a box from the raw pointer.",0],[11,"default","","",0],[11,"default","","",0],[11,"clone","","Returns a new box with a `clone()` of this box's contents.",0],[11,"clone_from","","Copies `source`'s contents into `self` without creating a new allocation.",0],[11,"eq","","",0],[11,"ne","","",0],[11,"partial_cmp","","",0],[11,"lt","","",0],[11,"le","","",0],[11,"ge","","",0],[11,"gt","","",0],[11,"cmp","","",0],[11,"hash","","",0],[11,"downcast","","",0],[11,"fmt","","",0],[11,"fmt","","",0],[11,"fmt","","",0],[6,"Target","collections::boxed",""],[11,"deref","alloc::boxed","",0],[11,"deref_mut","","",0],[6,"Item","collections::boxed",""],[11,"next","alloc::boxed","",0],[11,"size_hint","","",0],[11,"next_back","","",0],[11,"from_error","","",0],[11,"fmt","alloc::arc","",1],[11,"new","","Constructs a new `Arc<T>`.",2],[11,"downgrade","","Downgrades the `Arc<T>` to a `Weak<T>` reference.",2],[11,"clone","","Makes a clone of the `Arc<T>`.",2],[6,"Target","collections::boxed",""],[11,"deref","alloc::arc","",2],[11,"make_unique","","Make a mutable reference from the given `Arc<T>`.",2],[11,"drop","","Drops the `Arc<T>`.",2],[11,"upgrade","","Upgrades a weak reference to a strong reference.",1],[11,"clone","","Makes a clone of the `Weak<T>`.",1],[11,"drop","","Drops the `Weak<T>`.",1],[11,"eq","","Equality for two `Arc<T>`s.",2],[11,"ne","","Inequality for two `Arc<T>`s.",2],[11,"partial_cmp","","Partial comparison for two `Arc<T>`s.",2],[11,"lt","","Less-than comparison for two `Arc<T>`s.",2],[11,"le","","'Less-than or equal to' comparison for two `Arc<T>`s.",2],[11,"gt","","Greater-than comparison for two `Arc<T>`s.",2],[11,"ge","","'Greater-than or equal to' comparison for two `Arc<T>`s.",2],[11,"cmp","","",2],[11,"fmt","","",2],[11,"fmt","","",2],[11,"default","","",2],[11,"hash","","",2],[11,"new","alloc::rc","Constructs a new `Rc<T>`.",3],[11,"downgrade","","Downgrades the `Rc<T>` to a `Weak<T>` reference.",3],[11,"make_unique","","Make a mutable reference from the given `Rc<T>`.",3],[6,"Target","collections::boxed",""],[11,"deref","alloc::rc","",3],[11,"drop","","Drops the `Rc<T>`.",3],[11,"clone","","Makes a clone of the `Rc<T>`.",3],[11,"default","","Creates a new `Rc<T>`, with the `Default` value for `T`.",3],[11,"eq","","Equality for two `Rc<T>`s.",3],[11,"ne","","Inequality for two `Rc<T>`s.",3],[11,"partial_cmp","","Partial comparison for two `Rc<T>`s.",3],[11,"lt","","Less-than comparison for two `Rc<T>`s.",3],[11,"le","","'Less-than or equal to' comparison for two `Rc<T>`s.",3],[11,"gt","","Greater-than comparison for two `Rc<T>`s.",3],[11,"ge","","'Greater-than or equal to' comparison for two `Rc<T>`s.",3],[11,"cmp","","Comparison for two `Rc<T>`s.",3],[11,"hash","","",3],[11,"fmt","","",3],[11,"fmt","","",3],[11,"upgrade","","Upgrades a weak reference to a strong reference.",4],[11,"drop","","Drops the `Weak<T>`.",4],[11,"clone","","Makes a clone of the `Weak<T>`.",4],[11,"fmt","","",4],[3,"Box","collections::boxed","A pointer type for heap allocation."],[5,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer."],[8,"BoxAny","","Extension methods for an owning `Any` trait object."],[10,"downcast","","Returns the boxed value if it is of type `T`, or\n`Err(Self)` if it isn't.",5],[3,"BitVec","collections","The bitvector type."],[3,"BitSet","","An implementation of a set using a bit vector as an underlying\nrepresentation for holding unsigned numerical elements."],[3,"BTreeMap","","A map based on a B-Tree."],[3,"BTreeSet","","A set based on a B-Tree."],[4,"Bound","","An endpoint of a range of keys."],[13,"Included","","An inclusive bound.",6],[13,"Excluded","","An exclusive bound.",6],[13,"Unbounded","","An infinite endpoint. Indicates that there is no bound in this direction.",6],[0,"binary_heap","","A priority queue implemented with a binary heap."],[3,"BinaryHeap","collections::binary_heap","A priority queue implemented with a binary heap."],[3,"Iter","","`BinaryHeap` iterator."],[3,"IntoIter","","An iterator that moves out of a `BinaryHeap`."],[3,"Drain","","An iterator that drains a `BinaryHeap`."],[11,"clone","","",7],[11,"default","","",7],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",7],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",7],[11,"from_vec","","Creates a `BinaryHeap` from a vector. This is sometimes called\n`heapifying` the vector.",7],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",7],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",7],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",7],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",7],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",7],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",7],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",7],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",7],[11,"push","","Pushes an item onto the binary heap.",7],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",7],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",7],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",7],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",7],[11,"len","","Returns the length of the binary heap.",7],[11,"is_empty","","Checks if the binary heap is empty.",7],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",7],[11,"clear","","Drops all items from the binary heap.",7],[11,"clone","","",8],[6,"Item","",""],[11,"next","","",8],[11,"size_hint","","",8],[11,"next_back","","",8],[6,"Item","",""],[11,"next","","",9],[11,"size_hint","","",9],[11,"next_back","","",9],[6,"Item","",""],[11,"next","","",10],[11,"size_hint","","",10],[11,"next_back","","",10],[11,"from_iter","","",7],[6,"Item","",""],[6,"IntoIter","",""],[11,"into_iter","","",7],[6,"Item","",""],[6,"IntoIter","",""],[11,"extend","","",7],[11,"index","collections","",11],[11,"new","","Creates an empty `BitVec`.",11],[11,"from_elem","","Creates a `BitVec` that holds `nbits` elements, setting each element\nto `bit`.",11],[11,"with_capacity","","Constructs a new, empty `BitVec` with the specified capacity.",11],[11,"from_bytes","","Transforms a byte-vector into a `BitVec`. Each byte becomes eight bits,\nwith the most significant bits of each byte coming first. Each\nbit becomes `true` if equal to 1 or `false` if equal to 0.",11],[11,"from_fn","","Creates a `BitVec` of the specified length where the value at each index\nis `f(index)`.",11],[11,"get","","Retrieves the value at index `i`, or `None` if the index is out of bounds.",11],[11,"set","","Sets the value of a bit at an index `i`.",11],[11,"set_all","","Sets all bits to 1.",11],[11,"negate","","Flips all bits.",11],[11,"union","","Calculates the union of two bitvectors. This acts like the bitwise `or`\nfunction.",11],[11,"intersect","","Calculates the intersection of two bitvectors. This acts like the\nbitwise `and` function.",11],[11,"difference","","Calculates the difference between two bitvectors.",11],[11,"all","","Returns `true` if all bits are 1.",11],[11,"iter","","Returns an iterator over the elements of the vector in order.",11],[11,"none","","Returns `true` if all bits are 0.",11],[11,"any","","Returns `true` if any bit is 1.",11],[11,"to_bytes","","Organises the bits into bytes, such that the first bit in the\n`BitVec` becomes the high-order bit of the first byte. If the\nsize of the `BitVec` is not a multiple of eight then trailing bits\nwill be filled-in with `false`.",11],[11,"eq_vec","","Compares a `BitVec` to a slice of `bool`s.\nBoth the `BitVec` and slice must have the same length.",11],[11,"truncate","","Shortens a `BitVec`, dropping excess elements.",11],[11,"reserve","","Reserves capacity for at least `additional` more bits to be inserted in the given\n`BitVec`. The collection may reserve more space to avoid frequent reallocations.",11],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more bits to be inserted in the\ngiven `BitVec`. Does nothing if the capacity is already sufficient.",11],[11,"capacity","","Returns the capacity in bits for this bit vector. Inserting any\nelement less than this amount will not trigger a resizing.",11],[11,"grow","","Grows the `BitVec` in-place, adding `n` copies of `value` to the `BitVec`.",11],[11,"pop","","Removes the last bit from the BitVec, and returns it. Returns None if the BitVec is empty.",11],[11,"push","","Pushes a `bool` onto the end.",11],[11,"len","","Return the total number of bits in this vector",11],[11,"is_empty","","Returns true if there are no bits in this vector",11],[11,"clear","","Clears all bits in this vector.",11],[11,"default","","",11],[11,"from_iter","","",11],[11,"extend","","",11],[11,"clone","","",11],[11,"clone_from","","",11],[11,"partial_cmp","","",11],[11,"cmp","","",11],[11,"fmt","","",11],[11,"hash","","",11],[11,"eq","","",11],[11,"clone","","",12],[11,"default","","",12],[11,"from_iter","","",12],[11,"extend","","",12],[11,"partial_cmp","","",12],[11,"cmp","","",12],[11,"eq","","",12],[11,"new","","Creates a new empty `BitSet`.",12],[11,"with_capacity","","Creates a new `BitSet` with initially no contents, able to\nhold `nbits` elements without resizing.",12],[11,"from_bit_vec","","Creates a new `BitSet` from the given bit vector.",12],[11,"from_bitv","","Deprecated: use `from_bit_vec`.",12],[11,"capacity","","Returns the capacity in bits for this bit vector. Inserting any\nelement less than this amount will not trigger a resizing.",12],[11,"reserve_len","","Reserves capacity for the given `BitSet` to contain `len` distinct elements. In the case\nof `BitSet` this means reallocations will not occur as long as all inserted elements\nare less than `len`.",12],[11,"reserve_len_exact","","Reserves the minimum capacity for the given `BitSet` to contain `len` distinct elements.\nIn the case of `BitSet` this means reallocations will not occur as long as all inserted\nelements are less than `len`.",12],[11,"into_bit_vec","","Consumes this set to return the underlying bit vector.",12],[11,"get_ref","","Returns a reference to the underlying bit vector.",12],[11,"shrink_to_fit","","Truncates the underlying vector to the least length required.",12],[11,"iter","","Iterator over each u32 stored in the `BitSet`.",12],[11,"union","","Iterator over each u32 stored in `self` union `other`.\nSee [union_with](#method.union_with) for an efficient in-place version.",12],[11,"intersection","","Iterator over each usize stored in `self` intersect `other`.\nSee [intersect_with](#method.intersect_with) for an efficient in-place version.",12],[11,"difference","","Iterator over each usize stored in the `self` setminus `other`.\nSee [difference_with](#method.difference_with) for an efficient in-place version.",12],[11,"symmetric_difference","","Iterator over each u32 stored in the symmetric difference of `self` and `other`.\nSee [symmetric_difference_with](#method.symmetric_difference_with) for\nan efficient in-place version.",12],[11,"union_with","","Unions in-place with the specified other bit vector.",12],[11,"intersect_with","","Intersects in-place with the specified other bit vector.",12],[11,"difference_with","","Makes this bit vector the difference with the specified other bit vector\nin-place.",12],[11,"symmetric_difference_with","","Makes this bit vector the symmetric difference with the specified other\nbit vector in-place.",12],[11,"len","","Return the number of set bits in this set.",12],[11,"is_empty","","Returns whether there are no bits set in this set",12],[11,"clear","","Clears all bits in this set",12],[11,"contains","","Returns `true` if this set contains the specified integer.",12],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",12],[11,"is_subset","","Returns `true` if the set is a subset of another.",12],[11,"is_superset","","Returns `true` if the set is a superset of another.",12],[11,"insert","","Adds a value to the set. Returns `true` if the value was not already\npresent in the set.",12],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",12],[11,"fmt","","",12],[11,"hash","","",12],[11,"clone","","",13],[11,"new","","Makes a new empty BTreeMap with a reasonable choice for B.",13],[11,"with_b","","Makes a new empty BTreeMap with the given B.",13],[11,"clear","","Clears the map, removing all values.",13],[11,"get","","Returns a reference to the value corresponding to the key.",13],[11,"contains_key","","Returns true if the map contains a value for the specified key.",13],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",13],[11,"insert","","Inserts a key-value pair from the map. If the key already had a value\npresent in the map, that value is returned. Otherwise, `None` is returned.",13],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",13],[11,"into_iter","","",13],[11,"from_iter","","",13],[11,"extend","","",13],[11,"hash","","",13],[11,"default","","",13],[11,"eq","","",13],[11,"partial_cmp","","",13],[11,"cmp","","",13],[11,"fmt","","",13],[11,"index","","",13],[11,"index_mut","","",13],[11,"iter","","Gets an iterator over the entries of the map.",13],[11,"iter_mut","","Gets a mutable iterator over the entries of the map.",13],[11,"into_iter","","Gets an owning iterator over the entries of the map.",13],[11,"keys","","Gets an iterator over the keys of the map.",13],[11,"values","","Gets an iterator over the values of the map.",13],[11,"len","","Return the number of elements in the map.",13],[11,"is_empty","","Return true if the map contains no elements.",13],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",13],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",13],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",13],[11,"partial_cmp","","",14],[11,"lt","","",14],[11,"le","","",14],[11,"gt","","",14],[11,"ge","","",14],[11,"cmp","","",14],[11,"eq","","",14],[11,"ne","","",14],[11,"hash","","",14],[11,"clone","","",14],[11,"new","","Makes a new BTreeSet with a reasonable choice of B.",14],[11,"with_b","","Makes a new BTreeSet with the given B.",14],[11,"iter","","Gets an iterator over the BTreeSet's contents.",14],[11,"into_iter","","Gets an iterator for moving out the BtreeSet's contents.",14],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the set, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",14],[11,"difference","","Visits the values representing the difference, in ascending order.",14],[11,"symmetric_difference","","Visits the values representing the symmetric difference, in ascending order.",14],[11,"intersection","","Visits the values representing the intersection, in ascending order.",14],[11,"union","","Visits the values representing the union, in ascending order.",14],[11,"len","","Return the number of elements in the set",14],[11,"is_empty","","Returns true if the set contains no elements",14],[11,"clear","","Clears the set, removing all values.",14],[11,"contains","","Returns `true` if the set contains a value.",14],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",14],[11,"is_subset","","Returns `true` if the set is a subset of another.",14],[11,"is_superset","","Returns `true` if the set is a superset of another.",14],[11,"insert","","Adds a value to the set. Returns `true` if the value was not already\npresent in the set.",14],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",14],[11,"from_iter","","",14],[11,"into_iter","","",14],[11,"extend","","",14],[11,"default","","",14],[11,"fmt","","",14],[0,"borrow","","A module for working with borrowed data."],[4,"Cow","collections::borrow","A clone-on-write smart pointer."],[13,"Borrowed","","Borrowed data.",15],[13,"Owned","","Owned data.",15],[8,"Borrow","","A trait for borrowing data."],[10,"borrow","","Immutably borrow from an owned value.",16],[8,"BorrowMut","","A trait for mutably borrowing data."],[10,"borrow_mut","","Mutably borrow from an owned value.",17],[8,"ToOwned","","A generalization of Clone to borrowed data."],[16,"Owned","collections::borrow::ToOwned",""],[10,"to_owned","collections::borrow","Create owned data from borrowed data, usually by copying.",18],[8,"IntoCow","","Trait for moving into a `Cow`"],[10,"into_cow","","Moves `self` into `Cow`",19],[11,"borrow","alloc::rc","",3],[11,"borrow","alloc::arc","",2],[11,"borrow","collections::borrow","",15],[6,"Owned","",""],[11,"clone","","",15],[11,"to_mut","","Acquire a mutable reference to the owned form of the data.",15],[11,"into_owned","","Extract the owned data.",15],[11,"is_borrowed","","Returns true if this `Cow` wraps a borrowed value",15],[11,"is_owned","","Returns true if this `Cow` wraps an owned value",15],[6,"Target","",""],[11,"deref","","",15],[11,"cmp","","",15],[11,"eq","","",15],[11,"partial_cmp","","",15],[11,"fmt","","",15],[11,"fmt","","",15],[11,"hash","","",15],[11,"into_cow","","",15],[0,"enum_set","collections","A structure for holding a set of enum variants."],[3,"EnumSet","collections::enum_set","A specialized set implementation to use enum types."],[3,"Iter","","An iterator over an EnumSet"],[8,"CLike","","An interface for casting C-like enum to usize and back.\nA typically implementation is as below."],[10,"to_usize","","Converts a C-like enum to a `usize`.",20],[10,"from_usize","","Converts a `usize` to a C-like enum.",20],[11,"hash","","",21],[11,"cmp","","",21],[11,"partial_cmp","","",21],[11,"lt","","",21],[11,"le","","",21],[11,"gt","","",21],[11,"ge","","",21],[11,"eq","","",21],[11,"ne","","",21],[11,"clone","","",21],[11,"fmt","","",21],[11,"new","","Returns an empty `EnumSet`.",21],[11,"len","","Returns the number of elements in the given `EnumSet`.",21],[11,"is_empty","","Returns true if the `EnumSet` is empty.",21],[11,"clear","","",21],[11,"is_disjoint","","Returns `false` if the `EnumSet` contains any enum of the given `EnumSet`.",21],[11,"is_superset","","Returns `true` if a given `EnumSet` is included in this `EnumSet`.",21],[11,"is_subset","","Returns `true` if this `EnumSet` is included in the given `EnumSet`.",21],[11,"union","","Returns the union of both `EnumSets`.",21],[11,"intersection","","Returns the intersection of both `EnumSets`.",21],[11,"insert","","Adds an enum to the `EnumSet`, and returns `true` if it wasn't there before",21],[11,"remove","","Removes an enum from the EnumSet",21],[11,"contains","","Returns `true` if an `EnumSet` contains a given enum.",21],[11,"iter","","Returns an iterator over an `EnumSet`.",21],[6,"Output","",""],[11,"sub","","",21],[6,"Output","",""],[11,"bitor","","",21],[6,"Output","",""],[11,"bitand","","",21],[6,"Output","",""],[11,"bitxor","","",21],[11,"clone","","",22],[6,"Item","",""],[11,"next","","",22],[11,"size_hint","","",22],[11,"from_iter","","",21],[6,"Item","",""],[6,"IntoIter","",""],[11,"extend","","",21],[0,"fmt","collections","Utilities for formatting and printing strings"],[11,"pad_integral","core::fmt","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",23],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",23],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",23],[11,"write_fmt","","Writes some formatted information into this instance",23],[11,"flags","","Flags for formatting (packed version of rt::Flag)",23],[11,"fill","","Character used as 'fill' whenever there is alignment",23],[11,"align","","Flag indicating what form of alignment was requested",23],[11,"width","","Optionally specified integer width that the output should be",23],[11,"precision","","Optionally specified precision for numeric types",23],[11,"clone","core::num::wrapping","",24],[11,"cmp","","",24],[11,"partial_cmp","","",24],[11,"lt","","",24],[11,"le","","",24],[11,"gt","","",24],[11,"ge","","",24],[11,"eq","","",24],[11,"ne","","",24],[6,"Output","collections::fmt",""],[11,"add","core::num::wrapping","",24],[6,"Output","collections::fmt",""],[11,"sub","core::num::wrapping","",24],[6,"Output","collections::fmt",""],[11,"mul","core::num::wrapping","",24],[6,"Output","collections::fmt",""],[11,"not","core::num::wrapping","",24],[6,"Output","collections::fmt",""],[11,"bitxor","core::num::wrapping","",24],[6,"Output","collections::fmt",""],[11,"bitor","core::num::wrapping","",24],[6,"Output","collections::fmt",""],[11,"bitand","core::num::wrapping","",24],[6,"Output","collections::fmt",""],[11,"shl","core::num::wrapping","",24],[6,"Output","collections::fmt",""],[11,"shr","core::num::wrapping","",24],[11,"fmt","core::num","",25],[11,"eq","","",25],[11,"ne","","",25],[6,"Err","collections::fmt",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[11,"eq","core::num","",26],[11,"ne","","",26],[11,"clone","","",26],[11,"fmt","","",26],[11,"eq","","",27],[11,"ne","","",27],[11,"clone","","",27],[11,"fmt","","",27],[11,"fmt","","",26],[11,"description","","",26],[11,"eq","","",28],[11,"ne","","",28],[11,"clone","","",28],[11,"fmt","","",28],[11,"eq","","",29],[11,"ne","","",29],[11,"clone","","",29],[11,"fmt","","",29],[11,"fmt","","",28],[11,"description","","",28],[11,"hash","core::nonzero","",30],[11,"fmt","","",30],[11,"partial_cmp","","",30],[11,"lt","","",30],[11,"le","","",30],[11,"gt","","",30],[11,"ge","","",30],[11,"cmp","","",30],[11,"eq","","",30],[11,"ne","","",30],[11,"clone","","",30],[11,"new","","Create an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually \"non-zero\".",30],[6,"Target","collections::fmt",""],[11,"deref","core::nonzero","",30],[6,"Target","collections::fmt",""],[6,"Target","",""],[6,"Target","",""],[11,"new","core::ptr","Create a new `Unique`.",31],[11,"get","","Dereference the content.",31],[11,"get_mut","","Mutably dereference the content.",31],[6,"Target","collections::fmt",""],[11,"deref","core::ptr","",31],[11,"cmp","core::marker","",32],[11,"partial_cmp","","",32],[11,"lt","","",32],[11,"le","","",32],[11,"gt","","",32],[11,"ge","","",32],[11,"eq","","",32],[11,"ne","","",32],[11,"clone","","",32],[11,"cmp","","",33],[11,"partial_cmp","","",33],[11,"lt","","",33],[11,"le","","",33],[11,"gt","","",33],[11,"ge","","",33],[11,"eq","","",33],[11,"ne","","",33],[11,"clone","","",33],[11,"hash","","",34],[11,"eq","","",34],[11,"partial_cmp","","",34],[11,"cmp","","",34],[11,"clone","","",34],[6,"Output","collections::fmt",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[11,"eq","core::ops","",35],[11,"ne","","",35],[11,"clone","","",35],[11,"fmt","","",35],[11,"eq","","",36],[11,"ne","","",36],[11,"clone","","",36],[11,"fmt","","",36],[11,"eq","","",37],[11,"ne","","",37],[11,"clone","","",37],[11,"fmt","","",37],[11,"eq","","",38],[11,"ne","","",38],[11,"clone","","",38],[11,"fmt","","",38],[6,"Target","collections::fmt",""],[6,"Target","",""],[6,"Output","",""],[6,"Output","",""],[11,"fmt","core::cmp","",39],[11,"eq","","",39],[11,"ne","","",39],[11,"clone","","",39],[11,"reverse","","Reverse the `Ordering`.",39],[11,"cmp","","",39],[11,"partial_cmp","","",39],[11,"is","collections","Returns true if the boxed type is the same as `T`",40],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",40],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",40],[11,"hash","core::any","",41],[11,"fmt","","",41],[11,"eq","","",41],[11,"ne","","",41],[11,"clone","","",41],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",41],[11,"new","core::atomic","Creates a new `AtomicBool`.",42],[11,"load","","Loads a value from the bool.",42],[11,"store","","Stores a value into the bool.",42],[11,"swap","","Stores a value into the bool, returning the old value.",42],[11,"compare_and_swap","","Stores a value into the bool if the current value is the same as the expected value.",42],[11,"fetch_and","","Logical \"and\" with a boolean value.",42],[11,"fetch_nand","","Logical \"nand\" with a boolean value.",42],[11,"fetch_or","","Logical \"or\" with a boolean value.",42],[11,"fetch_xor","","Logical \"xor\" with a boolean value.",42],[11,"new","","Creates a new `AtomicIsize`.",43],[11,"load","","Loads a value from the isize.",43],[11,"store","","Stores a value into the isize.",43],[11,"swap","","Stores a value into the isize, returning the old value.",43],[11,"compare_and_swap","","Stores a value into the isize if the current value is the same as the expected value.",43],[11,"fetch_add","","Add an isize to the current value, returning the previous value.",43],[11,"fetch_sub","","Subtract an isize from the current value, returning the previous value.",43],[11,"fetch_and","","Bitwise and with the current isize, returning the previous value.",43],[11,"fetch_or","","Bitwise or with the current isize, returning the previous value.",43],[11,"fetch_xor","","Bitwise xor with the current isize, returning the previous value.",43],[11,"new","","Creates a new `AtomicUsize`.",44],[11,"load","","Loads a value from the usize.",44],[11,"store","","Stores a value into the usize.",44],[11,"swap","","Stores a value into the usize, returning the old value.",44],[11,"compare_and_swap","","Stores a value into the usize if the current value is the same as the expected value.",44],[11,"fetch_add","","Add to the current usize, returning the previous value.",44],[11,"fetch_sub","","Subtract from the current usize, returning the previous value.",44],[11,"fetch_and","","Bitwise and with the current usize, returning the previous value.",44],[11,"fetch_or","","Bitwise or with the current usize, returning the previous value.",44],[11,"fetch_xor","","Bitwise xor with the current usize, returning the previous value.",44],[11,"new","","Creates a new `AtomicPtr`.",45],[11,"load","","Loads a value from the pointer.",45],[11,"store","","Stores a value into the pointer.",45],[11,"swap","","Stores a value into the pointer, returning the old value.",45],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the expected value.",45],[11,"new","","",46],[11,"load","","",46],[11,"store","","",46],[11,"swap","","",46],[11,"compare_and_swap","","",46],[11,"fetch_add","","",46],[11,"fetch_sub","","",46],[11,"fetch_and","","",46],[11,"fetch_or","","",46],[11,"fetch_xor","","",46],[11,"new","","",47],[11,"load","","",47],[11,"store","","",47],[11,"swap","","",47],[11,"compare_and_swap","","",47],[11,"fetch_add","","",47],[11,"fetch_sub","","",47],[11,"fetch_and","","",47],[11,"fetch_or","","",47],[11,"fetch_xor","","",47],[11,"new","core::cell","Creates a new `Cell` containing the given value.",48],[11,"get","","Returns a copy of the contained value.",48],[11,"set","","Sets the contained value.",48],[11,"as_unsafe_cell","","Get a reference to the underlying `UnsafeCell`.",48],[11,"clone","","",48],[11,"default","","",48],[11,"eq","","",48],[11,"fmt","","",49],[11,"eq","","",49],[11,"ne","","",49],[11,"clone","","",49],[11,"new","","Creates a new `RefCell` containing `value`.",50],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",50],[11,"borrow_state","","Query the current state of this `RefCell`",50],[11,"try_borrow","","Attempts to immutably borrow the wrapped value.",50],[11,"borrow","","Immutably borrows the wrapped value.",50],[11,"try_borrow_mut","","Mutably borrows the wrapped value.",50],[11,"borrow_mut","","Mutably borrows the wrapped value.",50],[11,"as_unsafe_cell","","Get a reference to the underlying `UnsafeCell`.",50],[11,"clone","","",50],[11,"default","","",50],[11,"eq","","",50],[11,"drop","","",51],[11,"clone","","",51],[6,"Target","collections::fmt",""],[11,"deref","core::cell","",52],[11,"drop","","",53],[6,"Target","collections::fmt",""],[11,"deref","core::cell","",54],[11,"deref_mut","","",54],[11,"new","","Construct a new instance of `UnsafeCell` which will wrap the specified\nvalue.",55],[11,"get","","Gets a mutable pointer to the wrapped value.",55],[11,"into_inner","","Unwraps the value",55],[11,"clone","core::char","",56],[11,"clone","","",57],[6,"Item","collections::fmt",""],[11,"next","core::char","",56],[11,"clone","","",58],[11,"clone","","",59],[6,"Item","collections::fmt",""],[11,"next","core::char","",58],[11,"drop","core::finally","",60],[6,"Item","collections::fmt",""],[6,"Item","",""],[6,"IntoIter","",""],[11,"clone","core::iter","",61],[6,"Item","collections::fmt",""],[11,"next","core::iter","",61],[11,"size_hint","","",61],[11,"next_back","","",61],[11,"indexable","","",61],[11,"idx","","",61],[11,"fmt","","",62],[11,"eq","","",62],[11,"ne","","",62],[11,"clone","","",62],[11,"into_option","","`into_option` creates an `Option` of type `(T,T)`. The returned `Option` has variant\n`None` if and only if the `MinMaxResult` has variant `NoElements`. Otherwise variant\n`Some(x,y)` is returned where `x <= y`. If `MinMaxResult` has variant `OneElement(x)`,\nperforming this operation will make one clone of `x`.",62],[11,"clone","","",63],[6,"Item","collections::fmt",""],[11,"next","core::iter","",63],[11,"size_hint","","",63],[11,"next_back","","",63],[11,"indexable","","",63],[11,"idx","","",63],[11,"clone","","",64],[6,"Item","collections::fmt",""],[11,"next","core::iter","",64],[11,"size_hint","","",64],[11,"indexable","","",64],[11,"idx","","",64],[11,"clone","","",65],[6,"Item","collections::fmt",""],[11,"next","core::iter","",65],[11,"size_hint","","",65],[11,"next_back","","",65],[11,"indexable","","",65],[11,"idx","","",65],[11,"clone","","",66],[6,"Item","collections::fmt",""],[11,"next","core::iter","",66],[11,"size_hint","","",66],[11,"next_back","","",66],[11,"indexable","","",66],[11,"idx","","",66],[11,"clone","","",67],[6,"Item","collections::fmt",""],[11,"next","core::iter","",67],[11,"size_hint","","",67],[11,"next_back","","",67],[11,"indexable","","",67],[11,"idx","","",67],[11,"clone","","",68],[6,"Item","collections::fmt",""],[11,"next","core::iter","",68],[11,"size_hint","","",68],[11,"next_back","","",68],[11,"clone","","",69],[6,"Item","collections::fmt",""],[11,"next","core::iter","",69],[11,"size_hint","","",69],[11,"next_back","","",69],[11,"clone","","",70],[6,"Item","collections::fmt",""],[11,"next","core::iter","",70],[11,"size_hint","","",70],[11,"next_back","","",70],[11,"indexable","","",70],[11,"idx","","",70],[11,"clone","","",71],[6,"Item","collections::fmt",""],[11,"next","core::iter","",71],[11,"size_hint","","",71],[11,"peek","","Return a reference to the next element of the iterator with out\nadvancing it, or None if the iterator is exhausted.",71],[11,"is_empty","","Check whether peekable iterator is empty or not.",71],[11,"clone","","",72],[6,"Item","collections::fmt",""],[11,"next","core::iter","",72],[11,"size_hint","","",72],[11,"clone","","",73],[6,"Item","collections::fmt",""],[11,"next","core::iter","",73],[11,"size_hint","","",73],[11,"clone","","",74],[6,"Item","collections::fmt",""],[11,"next","core::iter","",74],[11,"size_hint","","",74],[11,"indexable","","",74],[11,"idx","","",74],[11,"clone","","",75],[6,"Item","collections::fmt",""],[11,"next","core::iter","",75],[11,"size_hint","","",75],[11,"indexable","","",75],[11,"idx","","",75],[11,"clone","","",76],[6,"Item","collections::fmt",""],[11,"next","core::iter","",76],[11,"size_hint","","",76],[11,"clone","","",77],[6,"Item","collections::fmt",""],[11,"next","core::iter","",77],[11,"size_hint","","",77],[11,"next_back","","",77],[11,"clone","","",78],[6,"Item","collections::fmt",""],[11,"next","core::iter","",78],[11,"size_hint","","",78],[11,"next_back","","",78],[11,"indexable","","",78],[11,"idx","","",78],[11,"reset_fuse","","Resets the fuse such that the next call to .next() or .next_back() will\ncall the underlying iterator again even if it previously returned None.",78],[11,"clone","","",79],[6,"Item","collections::fmt",""],[11,"next","core::iter","",79],[11,"size_hint","","",79],[11,"next_back","","",79],[11,"indexable","","",79],[11,"idx","","",79],[11,"clone","","",80],[11,"new","","Creates a new iterator with the specified closure as the \"iterator\nfunction\" and an initial state to eventually pass to the closure",80],[6,"Item","collections::fmt",""],[11,"next","core::iter","",80],[11,"size_hint","","",80],[11,"clone","","",81],[6,"Item","collections::fmt",""],[11,"next","core::iter","",81],[11,"size_hint","","",81],[11,"clone","","",82],[6,"Item","collections::fmt",""],[11,"next","core::iter","",82],[11,"size_hint","","",82],[11,"next_back","","",82],[11,"clone","","",83],[6,"Item","collections::fmt",""],[11,"next","core::iter","",83],[11,"size_hint","","",83],[11,"next_back","","",83],[11,"clone","","",84],[6,"Item","collections::fmt",""],[11,"next","core::iter","",84],[11,"clone","","",85],[6,"Item","collections::fmt",""],[11,"next","core::iter","",85],[6,"Item","collections::fmt",""],[11,"next","core::ops","",36],[11,"size_hint","","",36],[11,"next_back","","",36],[6,"Item","collections::fmt",""],[11,"next","core::ops","",37],[11,"clone","core::iter","",86],[6,"Item","collections::fmt",""],[11,"next","core::iter","",86],[11,"size_hint","","",86],[11,"next_back","","",86],[11,"indexable","","",86],[11,"idx","","",86],[11,"hash","core::option","",87],[11,"fmt","","",87],[11,"cmp","","",87],[11,"partial_cmp","","",87],[11,"lt","","",87],[11,"le","","",87],[11,"gt","","",87],[11,"ge","","",87],[11,"eq","","",87],[11,"ne","","",87],[11,"clone","","",87],[11,"is_some","","Returns `true` if the option is a `Some` value",87],[11,"is_none","","Returns `true` if the option is a `None` value",87],[11,"as_ref","","Convert from `Option<T>` to `Option<&T>`",87],[11,"as_mut","","Convert from `Option<T>` to `Option<&mut T>`",87],[11,"as_mut_slice","","Convert from `Option<T>` to `&mut [T]` (without copying)",87],[11,"expect","","Unwraps an option, yielding the content of a `Some`",87],[11,"unwrap","","Returns the inner `T` of a `Some(T)`.",87],[11,"unwrap_or","","Returns the contained value or a default.",87],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",87],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value",87],[11,"map_or","","Applies a function to the contained value or returns a default.",87],[11,"map_or_else","","Applies a function to the contained value or computes a default.",87],[11,"ok_or","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",87],[11,"ok_or_else","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",87],[11,"iter","","Returns an iterator over the possibly contained value.",87],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",87],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",87],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",87],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",87],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",87],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",87],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",87],[11,"cloned","","Maps an Option<D> to an Option<T> by dereffing and cloning the contents of the Option.\nUseful for converting an Option<&T> to an Option<T>.",87],[11,"unwrap_or_default","","Returns the contained value or a default",87],[11,"as_slice","","Convert from `Option<T>` to `&[T]` (without copying)",87],[11,"default","","",87],[11,"clone","","",88],[6,"Item","collections::fmt",""],[11,"next","core::option","",88],[11,"size_hint","","",88],[11,"next_back","","",88],[6,"Item","collections::fmt",""],[11,"next","core::option","",89],[11,"size_hint","","",89],[11,"next_back","","",89],[11,"clone","","",89],[6,"Item","collections::fmt",""],[11,"next","core::option","",90],[11,"size_hint","","",90],[11,"next_back","","",90],[6,"Item","collections::fmt",""],[11,"next","core::option","",91],[11,"size_hint","","",91],[11,"next_back","","",91],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",87],[11,"hash","core::result","",92],[11,"fmt","","",92],[11,"cmp","","",92],[11,"partial_cmp","","",92],[11,"lt","","",92],[11,"le","","",92],[11,"gt","","",92],[11,"ge","","",92],[11,"eq","","",92],[11,"ne","","",92],[11,"clone","","",92],[11,"is_ok","","Returns true if the result is `Ok`",92],[11,"is_err","","Returns true if the result is `Err`",92],[11,"ok","","Convert from `Result<T, E>` to `Option<T>`",92],[11,"err","","Convert from `Result<T, E>` to `Option<E>`",92],[11,"as_ref","","Convert from `Result<T, E>` to `Result<&T, &E>`",92],[11,"as_mut","","Convert from `Result<T, E>` to `Result<&mut T, &mut E>`",92],[11,"as_mut_slice","","Convert from `Result<T, E>` to `&mut [T]` (without copying)",92],[11,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to an\ncontained `Ok` value, leaving an `Err` value untouched.",92],[11,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to an\ncontained `Err` value, leaving an `Ok` value untouched.",92],[11,"iter","","Returns an iterator over the possibly contained value.",92],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",92],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",92],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",92],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",92],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",92],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",92],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",92],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",92],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",92],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",92],[11,"as_slice","","Convert from `Result<T, E>` to `&[T]` (without copying)",92],[6,"Item","collections::fmt",""],[11,"next","core::result","",93],[11,"size_hint","","",93],[11,"next_back","","",93],[11,"clone","","",93],[6,"Item","collections::fmt",""],[11,"next","core::result","",94],[11,"size_hint","","",94],[11,"next_back","","",94],[6,"Item","collections::fmt",""],[11,"next","core::result","",95],[11,"size_hint","","",95],[11,"next_back","","",95],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",92],[11,"fmt","core::simd","",96],[11,"fmt","","",97],[11,"fmt","","",98],[11,"fmt","","",99],[11,"fmt","","",100],[11,"fmt","","",101],[11,"fmt","","",102],[11,"fmt","","",103],[11,"fmt","","",104],[11,"fmt","","",105],[6,"Item","collections::fmt",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Output","",""],[11,"index","core::slice","",106],[6,"Output","collections::fmt",""],[11,"index","core::slice","",106],[6,"Output","collections::fmt",""],[11,"index","core::slice","",106],[6,"Output","collections::fmt",""],[11,"index","core::slice","",106],[11,"as_slice","","View the underlying data as a subslice of the original data.",106],[6,"Item","collections::fmt",""],[11,"next","core::slice","",106],[11,"size_hint","","",106],[11,"next_back","","",106],[11,"clone","","",106],[11,"indexable","","",106],[11,"idx","","",106],[6,"Output","collections::fmt",""],[11,"index","core::slice","",107],[6,"Output","collections::fmt",""],[11,"index","core::slice","",107],[6,"Output","collections::fmt",""],[11,"index","core::slice","",107],[6,"Output","collections::fmt",""],[11,"index","core::slice","",107],[11,"index_mut","","",107],[11,"index_mut","","",107],[11,"index_mut","","",107],[11,"index_mut","","",107],[11,"into_slice","","View the underlying data as a subslice of the original data.",107],[6,"Item","collections::fmt",""],[11,"next","core::slice","",107],[11,"size_hint","","",107],[11,"next_back","","",107],[11,"clone","","",108],[6,"Item","collections::fmt",""],[11,"next","core::slice","",108],[11,"size_hint","","",108],[11,"next_back","","",108],[11,"finish","","",108],[11,"finish","","",109],[6,"Item","collections::fmt",""],[11,"next","core::slice","",109],[11,"size_hint","","",109],[11,"next_back","","",109],[6,"Item","collections::fmt",""],[11,"next","core::slice","",110],[11,"size_hint","","",110],[6,"Item","collections::fmt",""],[11,"next","core::slice","",111],[11,"size_hint","","",111],[6,"Item","collections::fmt",""],[11,"next","core::slice","",112],[11,"size_hint","","",112],[6,"Item","collections::fmt",""],[11,"next","core::slice","",113],[11,"size_hint","","",113],[6,"Item","collections::fmt",""],[11,"next","core::slice","",114],[11,"size_hint","","",114],[11,"clone","","",115],[6,"Item","collections::fmt",""],[11,"next","core::slice","",115],[11,"size_hint","","",115],[11,"next_back","","",115],[11,"indexable","","",115],[11,"idx","","",115],[11,"clone","","",116],[6,"Item","collections::fmt",""],[11,"next","core::slice","",116],[11,"size_hint","","",116],[11,"next_back","","",116],[11,"indexable","","",116],[11,"idx","","",116],[6,"Item","collections::fmt",""],[11,"next","core::slice","",117],[11,"size_hint","","",117],[11,"next_back","","",117],[11,"fmt","core::str::pattern","",118],[11,"eq","","",118],[11,"ne","","",118],[11,"clone","","",118],[6,"Searcher","collections::fmt",""],[11,"into_searcher","core::str::pattern","",119],[11,"haystack","","",120],[11,"next","","",120],[11,"next_back","","",120],[11,"clone","","",121],[6,"Searcher","collections::fmt",""],[11,"haystack","core::str::pattern","",121],[11,"next","","",121],[11,"next_back","","",121],[6,"Searcher","collections::fmt",""],[6,"Searcher","",""],[6,"Searcher","",""],[6,"Searcher","",""],[6,"Err","",""],[11,"eq","core::str","",122],[11,"ne","","",122],[11,"clone","","",122],[11,"fmt","","",122],[11,"fmt","","",122],[11,"description","","",122],[11,"fmt","","",123],[11,"clone","","",123],[11,"eq","","",123],[11,"ne","","",123],[11,"description","","",123],[11,"fmt","","",123],[11,"clone","","",124],[6,"Item","collections::fmt",""],[11,"next","core::str","",124],[11,"size_hint","","",124],[11,"next_back","","",124],[11,"clone","","",125],[6,"Item","collections::fmt",""],[11,"next","core::str","",125],[11,"size_hint","","",125],[11,"next_back","","",125],[11,"clone","","",126],[6,"Item","collections::fmt",""],[11,"next","core::str","",126],[11,"size_hint","","",126],[11,"next_back","","",126],[11,"len","","",126],[11,"clone","","",127],[6,"Output","collections::fmt",""],[11,"call","core::str","",127],[6,"Item","collections::fmt",""],[11,"next","core::str","",128],[11,"next_back","","",128],[6,"Item","collections::fmt",""],[11,"next","core::str","",129],[11,"clone","","",130],[11,"clone","","",131],[11,"clone","","",132],[6,"Item","collections::fmt",""],[11,"next","core::str","",133],[6,"Item","collections::fmt",""],[11,"next","core::str","",134],[6,"Output","collections::fmt",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Item","",""],[11,"next","core::str","",135],[11,"next_back","","",135],[6,"Item","collections::fmt",""],[11,"next","core::str","",136],[11,"size_hint","","",136],[11,"next_back","","",136],[6,"Item","collections::fmt",""],[11,"next","core::str","",137],[11,"size_hint","","",137],[6,"Item","collections::fmt",""],[11,"next","core::str","",138],[11,"size_hint","","",138],[6,"Item","collections::fmt",""],[11,"next","core::str","",139],[11,"size_hint","","",139],[11,"next_back","","",139],[6,"Item","collections::fmt",""],[11,"next","core::str","",140],[11,"size_hint","","",140],[11,"next_back","","",140],[11,"new","core::hash::sip","Creates a new `SipHasher` with the two initial keys set to 0.",141],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",141],[11,"result","","Returns the computed hash.",141],[11,"write","","",141],[11,"finish","","",141],[11,"clone","","",141],[11,"default","","",141],[11,"eq","core::fmt::num","",142],[11,"ne","","",142],[11,"clone","","",142],[11,"eq","","",143],[11,"ne","","",143],[11,"clone","","",143],[11,"eq","","",144],[11,"ne","","",144],[11,"clone","","",144],[11,"eq","","",145],[11,"ne","","",145],[11,"clone","","",145],[11,"eq","","",146],[11,"ne","","",146],[11,"clone","","",146],[11,"eq","","",147],[11,"ne","","",147],[11,"clone","","",147],[11,"fmt","","",148],[11,"fmt","","",148],[11,"fmt","","",148],[11,"fmt","","",148],[11,"fmt","","",148],[11,"fmt","","",148],[11,"fmt","","",148],[11,"fmt","","",148],[11,"fmt","","",148],[11,"fmt","","",148],[11,"fmt","","",148],[11,"fmt","","",148],[11,"fmt","","",148],[11,"fmt","","",148],[11,"fmt","","",148],[11,"fmt","","",148],[11,"fmt","","",148],[11,"fmt","","",148],[11,"fmt","","",148],[11,"fmt","","",148],[11,"eq","core::fmt::rt::v1","",149],[11,"ne","","",149],[11,"fmt","core::fmt","",150],[11,"fmt","","",151],[11,"fmt","","",151],[11,"fmt","","",150],[11,"fmt","core::marker","",34],[11,"fmt","core::cell","",48],[11,"fmt","","",50],[11,"fmt","","",52],[11,"fmt","","",54],[6,"Item","collections::fmt",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[3,"Formatter","","A struct to represent both where to emit formatting strings to and how they\nshould be formatted. A mutable version of this is passed to all formatting\ntraits."],[6,"Result","",""],[8,"Write","","A collection of methods that are required to format a message into a stream."],[10,"write_str","","Writes a slice of bytes into this writer, returning whether the write\nsucceeded.",152],[10,"write_fmt","","Glue for usage of the `write!` macro with implementers of this trait.",152],[8,"Octal","","Format trait for the `o` character"],[10,"fmt","","Formats the value using the given formatter.",153],[8,"Binary","","Format trait for the `b` character"],[10,"fmt","","Formats the value using the given formatter.",154],[8,"Display","","When a value can be semantically expressed as a String, this trait may be\nused. It corresponds to the default format, `{}`."],[10,"fmt","","Formats the value using the given formatter.",155],[8,"Debug","","Format trait for the `:?` format. Useful for debugging, all types\nshould implement this."],[10,"fmt","","Formats the value using the given formatter.",156],[8,"LowerHex","","Format trait for the `x` character"],[10,"fmt","","Formats the value using the given formatter.",157],[8,"UpperHex","","Format trait for the `X` character"],[10,"fmt","","Formats the value using the given formatter.",158],[8,"Pointer","","Format trait for the `p` character"],[10,"fmt","","Formats the value using the given formatter.",159],[8,"LowerExp","","Format trait for the `e` character"],[10,"fmt","","Formats the value using the given formatter.",160],[8,"UpperExp","","Format trait for the `E` character"],[10,"fmt","","Formats the value using the given formatter.",161],[3,"Error","","The error type which is returned from formatting a message into a stream."],[3,"Arguments","","This structure represents a safely precompiled version of a format string\nand its arguments. This cannot be generated at runtime because it cannot\nsafely be done so, so no constructors are given and the fields are private\nto prevent modification."],[5,"write","","The `write` function takes an output stream, a precompiled format string,\nand a list of arguments. The arguments will be formatted according to the\nspecified format string into the output stream provided."],[5,"radix","","Constructs a radix formatter in the range of `2..36`."],[3,"Radix","","A radix with in the range of `2..36`."],[3,"RadixFmt","","A helper type for formatting radixes."],[5,"format","","The format function takes a precompiled format string and a list of\narguments, to return the resulting formatted string."],[0,"linked_list","collections","A doubly-linked list with owned nodes."],[3,"LinkedList","collections::linked_list","A doubly-linked list."],[3,"Iter","","An iterator over references to the items of a `LinkedList`."],[3,"IterMut","","An iterator over mutable references to the items of a `LinkedList`."],[3,"IntoIter","","An iterator over mutable references to the items of a `LinkedList`."],[11,"clone","","",162],[11,"clone","","",163],[11,"default","","",164],[11,"new","","Creates an empty `LinkedList`.",164],[11,"append","","Moves all elements from `other` to the end of the list.",164],[11,"iter","","Provides a forward iterator.",164],[11,"iter_mut","","Provides a forward iterator with mutable references.",164],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",164],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",164],[11,"len","","Returns the length of the `LinkedList`.",164],[11,"clear","","Removes all elements from the `LinkedList`.",164],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",164],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",164],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",164],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",164],[11,"push_front","","Adds an element first in the list.",164],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",164],[11,"push_back","","Appends an element to the back of a list",164],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",164],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",164],[11,"drop","","",164],[6,"Item","",""],[11,"next","","",162],[11,"size_hint","","",162],[11,"next_back","","",162],[6,"Item","",""],[11,"next","","",165],[11,"size_hint","","",165],[11,"next_back","","",165],[11,"insert_next","","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",165],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",165],[6,"Item","",""],[11,"next","","",163],[11,"size_hint","","",163],[11,"next_back","","",163],[11,"from_iter","","",164],[6,"Item","",""],[6,"IntoIter","",""],[11,"into_iter","","",164],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[11,"extend","","",164],[11,"eq","","",164],[11,"ne","","",164],[11,"partial_cmp","","",164],[11,"cmp","","",164],[11,"clone","","",164],[11,"fmt","","",164],[11,"hash","","",164],[0,"slice","collections","Utilities for slice manipulation"],[3,"Chunks","collections::slice","An iterator over a slice in (non-overlapping) chunks (`size` elements at a\ntime)."],[8,"AsSlice","","Data that is viewable as a slice."],[10,"as_slice","","Work with `self` as a slice.",166],[3,"Windows","","An iterator over overlapping subslices of length `size`."],[3,"Iter","","Immutable slice iterator"],[3,"IterMut","","Mutable slice iterator."],[8,"IntSliceExt","","Extension methods for slices containing integers."],[10,"as_unsigned","","Converts the slice to an immutable slice of unsigned integers with the same width.",167],[10,"as_signed","","Converts the slice to an immutable slice of signed integers with the same width.",167],[10,"as_unsigned_mut","","Converts the slice to a mutable slice of unsigned integers with the same width.",167],[10,"as_signed_mut","","Converts the slice to a mutable slice of signed integers with the same width.",167],[3,"SplitMut","","An iterator over the subslices of the vector which are separated\nby elements that match `pred`."],[3,"ChunksMut","","An iterator over a slice in (non-overlapping) mutable chunks (`size`\nelements at a time). When the slice len is not evenly divided by the chunk\nsize, the last slice of the iteration will be the remainder."],[3,"Split","","An iterator over subslices separated by elements that match a predicate\nfunction."],[3,"SplitN","","An iterator over subslices separated by elements that match a predicate\nfunction, limited to a given number of splits."],[3,"RSplitN","","An iterator over subslices separated by elements that match a\npredicate function, limited to a given number of splits, starting\nfrom the end of the slice."],[3,"SplitNMut","","An iterator over subslices separated by elements that match a predicate\nfunction, limited to a given number of splits."],[3,"RSplitNMut","","An iterator over subslices separated by elements that match a\npredicate function, limited to a given number of splits, starting\nfrom the end of the slice."],[0,"bytes","","Operations on `[u8]`."],[8,"MutableByteVector","collections::slice::bytes","A trait for operations on mutable `[u8]`s."],[10,"set_memory","","Sets all bytes of the receiver to the given value.",168],[5,"copy_memory","","Copies data from `src` to `dst`"],[5,"mut_ref_slice","collections::slice","Converts a pointer to A into a slice of length 1 (without copying)."],[5,"ref_slice","","Converts a pointer to A into a slice of length 1 (without copying)."],[5,"from_raw_parts","","Forms a slice from a pointer and a length."],[5,"from_raw_parts_mut","","Performs the same functionality as `from_raw_parts`, except that a mutable\nslice is returned."],[5,"from_raw_buf","","Forms a slice from a pointer and a length."],[5,"from_raw_mut_buf","","Performs the same functionality as `from_raw_buf`, except that a mutable\nslice is returned."],[3,"ElementSwaps","","An iterator that yields the element swaps needed to produce\na sequence of all possible permutations for an indexed sequence of\nelements. Each permutation is only a single swap apart."],[3,"Permutations","","An iterator that uses `ElementSwaps` to iterate through\nall possible permutations of a vector."],[8,"SliceExt","","Allocating extension methods for slices."],[16,"Item","collections::slice::SliceExt",""],[10,"sort_by","collections::slice","Sorts the slice, in place, using `compare` to compare\nelements.",169],[10,"move_from","","Consumes `src` and moves as many elements as it can into `self`\nfrom the range [start,end).",169],[10,"slice","","Deprecated: use `&s[start .. end]` notation instead.",169],[10,"slice_from","","Deprecated: use `&s[start..]` notation instead.",169],[10,"slice_to","","Deprecated: use `&s[..end]` notation instead.",169],[10,"split_at","","Divides one slice into two at an index.",169],[10,"iter","","Returns an iterator over the slice.",169],[10,"split","","Returns an iterator over subslices separated by elements that match\n`pred`.  The matched element is not contained in the subslices.",169],[10,"splitn","","Returns an iterator over subslices separated by elements that match\n`pred`, limited to splitting at most `n` times.  The matched element is\nnot contained in the subslices.",169],[10,"rsplitn","","Returns an iterator over subslices separated by elements that match\n`pred` limited to splitting at most `n` times. This starts at the end of\nthe slice and works backwards.  The matched element is not contained in\nthe subslices.",169],[10,"windows","","Returns an iterator over all contiguous windows of length\n`size`. The windows overlap. If the slice is shorter than\n`size`, the iterator returns no values.",169],[10,"chunks","","Returns an iterator over `size` elements of the slice at a\ntime. The chunks do not overlap. If `size` does not divide the\nlength of the slice, then the last chunk will not have length\n`size`.",169],[10,"get","","Returns the element of a slice at the given index, or `None` if the\nindex is out of bounds.",169],[10,"first","","Returns the first element of a slice, or `None` if it is empty.",169],[10,"tail","","Returns all but the first element of a slice.",169],[10,"init","","Returns all but the last element of a slice.",169],[10,"last","","Returns the last element of a slice, or `None` if it is empty.",169],[10,"get_unchecked","","Returns a pointer to the element at the given index, without doing\nbounds checking.",169],[10,"as_ptr","","Returns an unsafe pointer to the slice's buffer",169],[10,"binary_search_by","","Binary search a sorted slice with a comparator function.",169],[10,"len","","Return the number of elements in the slice",169],[11,"is_empty","","Returns true if the slice has a length of 0",169],[10,"get_mut","","Returns a mutable reference to the element at the given index,\nor `None` if the index is out of bounds",169],[10,"as_mut_slice","","Work with `self` as a mut slice.\nPrimarily intended for getting a &mut [T] from a [T; N].",169],[10,"slice_mut","","Deprecated: use `&mut s[start .. end]` instead.",169],[10,"slice_from_mut","","Deprecated: use `&mut s[start ..]` instead.",169],[10,"slice_to_mut","","Deprecated: use `&mut s[.. end]` instead.",169],[10,"iter_mut","","Returns an iterator that allows modifying each value",169],[10,"first_mut","","Returns a mutable pointer to the first element of a slice, or `None` if it is empty",169],[10,"tail_mut","","Returns all but the first element of a mutable slice",169],[10,"init_mut","","Returns all but the last element of a mutable slice",169],[10,"last_mut","","Returns a mutable pointer to the last item in the slice.",169],[10,"split_mut","","Returns an iterator over mutable subslices separated by elements that\nmatch `pred`.  The matched element is not contained in the subslices.",169],[10,"splitn_mut","","Returns an iterator over subslices separated by elements that match\n`pred`, limited to splitting at most `n` times.  The matched element is\nnot contained in the subslices.",169],[10,"rsplitn_mut","","Returns an iterator over subslices separated by elements that match\n`pred` limited to splitting at most `n` times. This starts at the end of\nthe slice and works backwards.  The matched element is not contained in\nthe subslices.",169],[10,"chunks_mut","","Returns an iterator over `chunk_size` elements of the slice at a time.\nThe chunks are mutable and do not overlap. If `chunk_size` does\nnot divide the length of the slice, then the last chunk will not\nhave length `chunk_size`.",169],[10,"swap","","Swaps two elements in a slice.",169],[10,"split_at_mut","","Divides one `&mut` into two at an index.",169],[10,"reverse","","Reverse the order of elements in a slice, in place.",169],[10,"get_unchecked_mut","","Returns an unsafe mutable pointer to the element in index",169],[10,"as_mut_ptr","","Return an unsafe mutable pointer to the slice's buffer.",169],[10,"to_vec","","Copies `self` into a new `Vec`.",169],[10,"permutations","","Creates an iterator that yields every possible permutation of the\nvector in succession.",169],[10,"clone_from_slice","","Copies as many elements from `src` as it can into `self` (the\nshorter of `self.len()` and `src.len()`). Returns the number\nof elements copied.",169],[10,"sort","","Sorts the slice, in place.",169],[10,"binary_search","","Binary search a sorted slice for a given element.",169],[11,"binary_search_elem","","Deprecated: use `binary_search` instead.",169],[10,"next_permutation","","Mutates the slice to the next lexicographic permutation.",169],[10,"prev_permutation","","Mutates the slice to the previous lexicographic permutation.",169],[10,"position_elem","","Find the first index containing a matching value.",169],[10,"rposition_elem","","Find the last index containing a matching value.",169],[10,"contains","","Returns true if the slice contains an element with the given value.",169],[10,"starts_with","","Returns true if `needle` is a prefix of the slice.",169],[10,"ends_with","","Returns true if `needle` is a suffix of the slice.",169],[10,"into_vec","","Convert `self` into a vector without clones or allocation.",169],[8,"SliceConcatExt","","An extension trait for concatenating slices"],[10,"concat","","Flattens a slice of `T` into a single value `U`.",170],[10,"connect","","Flattens a slice of `T` into a single value `U`, placing a given separator between each.",170],[6,"Item","",""],[11,"clone","","",171],[11,"new","","Creates an `ElementSwaps` iterator for a sequence of `length` elements.",171],[6,"Owned","",""],[6,"Item","",""],[11,"next","","",171],[11,"size_hint","","",171],[6,"Item","",""],[11,"next","","",172],[11,"size_hint","","",172],[0,"str","collections","Unicode string manipulation (the [`str`](../primitive.str.html) type)."],[8,"FromStr","collections::str","A trait to abstract the idea of creating a new instance of a type from a\nstring."],[16,"Err","collections::str::FromStr",""],[10,"from_str","collections::str","Parses a string `s` to return an optional value of this type. If the\nstring is ill-formatted, the None is returned.",173],[4,"Utf8Error","","Errors which can occur when attempting to interpret a byte slice as a `str`."],[13,"InvalidByte","","An invalid byte was detected at the byte offset given.",123],[13,"TooShort","","The byte slice was invalid because more bytes were needed but no more\nbytes were available.",123],[8,"Str","","Any string that can be represented as a slice"],[10,"as_slice","","Work with `self` as a slice.",174],[3,"Lines","","An iterator over the lines of a string, separated by `\\n`."],[3,"LinesAny","","An iterator over the lines of a string, separated by either `\\n` or (`\\r\\n`)."],[3,"MatchIndices","","An iterator over the start and end indices of the matches of a\nsubstring within a larger string"],[3,"SplitStr","","An iterator over the substrings of a string separated by a given\nsearch string"],[3,"CharRange","","Struct that contains a `char` and the index of the first byte of\nthe next `char` in a string.  This can be used as a data structure\nfor iterating over the UTF-8 bytes of a string."],[12,"ch","","Current `char`",175],[12,"next","","Index of the first byte of the next `char`",175],[3,"Split","","Return type of `StrExt::split`"],[3,"SplitTerminator","","Return type of `StrExt::split_terminator`"],[3,"SplitN","","Return type of `StrExt::splitn`"],[3,"RSplitN","","Return type of `StrExt::rsplitn`"],[5,"from_utf8","","Converts a slice of bytes to a string slice without performing any\nallocations."],[8,"CharEq","","Something that can be used to compare against a character"],[10,"matches","","Determine if the splitter should split at the given character",176],[10,"only_ascii","","Indicate if this is only concerned about ASCII characters,\nwhich can allow for a faster implementation.",176],[3,"Chars","","Iterator for the char (representing *Unicode Scalar Values*) of a string"],[3,"CharIndices","","External iterator for a string's characters and their byte offsets.\nUse with the `std::iter` module."],[3,"Bytes","","External iterator for a string's bytes.\nUse with the `std::iter` module."],[5,"from_utf8_unchecked","","Converts a slice of bytes to a string slice without checking\nthat the string contains valid UTF-8."],[5,"from_c_str","","Constructs a static string slice from a given raw pointer."],[3,"ParseBoolError","","An error returned when parsing a `bool` from a string fails."],[11,"clone","unicode::tables::grapheme","",177],[11,"clone","unicode::u_str","",178],[6,"Item","collections::str",""],[11,"next","unicode::u_str","",178],[11,"size_hint","","",178],[11,"next_back","","",178],[11,"clone","","",179],[11,"eq","","",180],[11,"ne","","",180],[6,"Item","collections::str",""],[11,"size_hint","unicode::u_str","",179],[11,"next","","",179],[11,"next_back","","",179],[11,"clone","","",181],[11,"fmt","","",182],[11,"clone","","",182],[11,"eq","","",182],[11,"ne","","",182],[11,"to_char_lossy","","Convert `self` to a `char`, taking `LoneSurrogate`s to the\nreplacement character (U+FFFD).",182],[6,"Item","collections::str",""],[11,"next","unicode::u_str","",181],[11,"size_hint","","",181],[11,"clone","","",183],[11,"new","","Create an UTF-16 encoder from any `char` iterator.",183],[6,"Item","collections::str",""],[11,"next","unicode::u_str","",183],[11,"size_hint","","",183],[6,"Item","collections::str",""],[11,"next","unicode::u_str","",184],[11,"next_back","","",184],[6,"Item","collections::str",""],[11,"next","unicode::char","",185],[6,"Item","collections::str",""],[11,"next","unicode::char","",186],[3,"Words","collections::str","An iterator over the words of a string, separated by a sequence of whitespace"],[3,"Graphemes","","External iterator for a string's\n[grapheme clusters](http://www.unicode.org/reports/tr29/#Grapheme_Cluster_Boundaries)."],[3,"GraphemeIndices","","External iterator for grapheme clusters and byte offsets."],[8,"Pattern","","A string pattern."],[16,"Searcher","collections::str::Pattern",""],[10,"into_searcher","collections::str","Construct the associated searcher from\n`self` and the `haystack` to search in.",187],[10,"is_contained_in","","Check whether the pattern matches anywhere in the haystack",187],[10,"is_prefix_of","","Check whether the pattern matches at the front of the haystack",187],[10,"is_suffix_of","","Check whether the pattern matches at the back of the haystack",187],[8,"Searcher","","A searcher for a string pattern."],[10,"haystack","","Getter for the underlaying string to be searched in",188],[10,"next","","Performs the next search step starting from the front.",188],[10,"next_match","","Find the next `Match` result. See `next()`",188],[10,"next_reject","","Find the next `Reject` result. See `next()`",188],[8,"ReverseSearcher","","A reverse searcher for a string pattern."],[10,"next_back","","Performs the next search step starting from the back.",189],[10,"next_match_back","","Find the next `Match` result. See `next_back()`",189],[10,"next_reject_back","","Find the next `Reject` result. See `next_back()`",189],[8,"DoubleEndedSearcher","","A marker trait to express that a `ReverseSearcher`\ncan be used for a `DoubleEndedIterator` implementation."],[4,"SearchStep","","Result of calling `Searcher::next()` or `ReverseSearcher::next_back()`."],[13,"Match","","Expresses that a match of the pattern has been found at\n`haystack[a..b]`.",118],[13,"Reject","","Expresses that `haystack[a..b]` has been rejected as a possible match\nof the pattern.",118],[13,"Done","","Expresses that every byte of the haystack has been visted, ending\nthe iteration.",118],[3,"Decompositions","","External iterator for a string decomposition's characters."],[3,"Recompositions","","External iterator for a string recomposition's characters."],[3,"Utf16Units","","External iterator for a string's UTF16 codeunits."],[8,"StrExt","","Any string that can be represented as a slice."],[11,"escape_default","","Escapes each char in `s` with `char::escape_default`.",190],[11,"escape_unicode","","Escapes each char in `s` with `char::escape_unicode`.",190],[11,"replace","","Replaces all occurrences of one string with another.",190],[11,"nfd_chars","","Returns an iterator over the string in Unicode Normalization Form D\n(canonical decomposition).",190],[11,"nfkd_chars","","Returns an iterator over the string in Unicode Normalization Form KD\n(compatibility decomposition).",190],[11,"nfc_chars","","An Iterator over the string in Unicode Normalization Form C\n(canonical decomposition followed by canonical composition).",190],[11,"nfkc_chars","","An Iterator over the string in Unicode Normalization Form KC\n(compatibility decomposition followed by canonical composition).",190],[11,"contains","","Returns `true` if `self` contains another `&str`.",190],[11,"contains_char","","Returns `true` if `self` contains a `char`.",190],[11,"chars","","An iterator over the codepoints of `self`.",190],[11,"bytes","","An iterator over the bytes of `self`.",190],[11,"char_indices","","An iterator over the characters of `self` and their byte offsets.",190],[11,"split","","An iterator over substrings of `self`, separated by characters\nmatched by a pattern.",190],[11,"splitn","","An iterator over substrings of `self`, separated by characters matched by a pattern,\nrestricted to splitting at most `count` times.",190],[11,"split_terminator","","An iterator over substrings of `self`, separated by characters\nmatched by a pattern.",190],[11,"rsplitn","","An iterator over substrings of `self`, separated by characters matched by a pattern,\nstarting from the end of the string.",190],[11,"match_indices","","An iterator over the start and end indices of the disjoint matches of a `&str` within\n`self`.",190],[11,"split_str","","An iterator over the substrings of `self` separated by a `&str`.",190],[11,"lines","","An iterator over the lines of a string, separated by `\\n`.",190],[11,"lines_any","","An iterator over the lines of a string, separated by either `\\n` or `\\r\\n`.",190],[10,"slice","","Deprecated: use `s[a .. b]` instead.",190],[10,"slice_from","","Deprecated: use `s[a..]` instead.",190],[10,"slice_to","","Deprecated: use `s[..a]` instead.",190],[11,"slice_chars","","Returns a slice of the string from the character range [`begin`..`end`).",190],[11,"slice_unchecked","","Takes a bytewise slice from a string.",190],[11,"starts_with","","Returns `true` if the given `&str` is a prefix of the string.",190],[11,"ends_with","","Returns true if the given `&str` is a suffix of the string.",190],[11,"trim_matches","","Returns a string with all pre- and suffixes that match a pattern repeatedly removed.",190],[11,"trim_left_matches","","Returns a string with all prefixes that match a pattern repeatedly removed.",190],[11,"trim_right_matches","","Returns a string with all suffixes that match a pattern repeatedly removed.",190],[11,"is_char_boundary","","Check that `index`-th byte lies at the start and/or end of a UTF-8 code point sequence.",190],[11,"char_range_at","","Given a byte position, return the next char and its index.",190],[11,"char_range_at_reverse","","Given a byte position, return the previous `char` and its position.",190],[11,"char_at","","Given a byte position, return the `char` at that position.",190],[11,"char_at_reverse","","Given a byte position, return the `char` at that position, counting from the end.",190],[11,"as_bytes","","Convert `self` to a byte slice.",190],[11,"find","","Returns the byte index of the first character of `self` that matches the pattern, if it\nexists.",190],[11,"rfind","","Returns the byte index of the last character of `self` that matches the pattern, if it\nexists.",190],[11,"find_str","","Returns the byte index of the first matching substring if it exists.",190],[11,"slice_shift_char","","Retrieves the first character from a `&str` and returns it.",190],[11,"subslice_offset","","Returns the byte offset of an inner slice relative to an enclosing outer slice.",190],[11,"as_ptr","","Return an unsafe pointer to the `&str`'s buffer.",190],[11,"utf16_units","","Return an iterator of `u16` over the string encoded as UTF-16.",190],[11,"len","","Returns the length of `self` in bytes.",190],[11,"is_empty","","Returns true if this slice has a length of zero bytes.",190],[11,"parse","","Parses `self` into the specified type.",190],[11,"graphemes","","Returns an iterator over the [grapheme clusters][graphemes] of `self`.",190],[11,"grapheme_indices","","Returns an iterator over the grapheme clusters of `self` and their byte offsets. See\n`graphemes()` for more information.",190],[11,"words","","An iterator over the non-empty words of `self`.",190],[11,"width","","Returns a string's displayed width in columns.",190],[11,"trim","","Returns a `&str` with leading and trailing whitespace removed.",190],[11,"trim_left","","Returns a `&str` with leading whitespace removed.",190],[11,"trim_right","","Returns a `&str` with trailing whitespace removed.",190],[11,"to_lowercase","","Returns the lowercase equivalent of this string.",190],[11,"to_uppercase","","Returns the uppercase equivalent of this string.",190],[11,"clone","","",191],[6,"Item","",""],[11,"next","","",191],[11,"size_hint","","",191],[11,"clone","","",192],[6,"Item","",""],[11,"next","","",192],[11,"clone","","",193],[6,"Item","",""],[11,"next","","",193],[11,"size_hint","","",193],[6,"Owned","",""],[0,"string","collections","An owned, growable string that enforces that its contents are valid UTF-8."],[3,"String","collections::string","A growable string stored as a UTF-8 encoded buffer."],[3,"FromUtf8Error","","A possible error value from the `String::from_utf8` function."],[3,"FromUtf16Error","","A possible error value from the `String::from_utf16` function."],[3,"DerefString","","Wrapper type providing a `&String` reference via `Deref`."],[5,"as_string","","Convert a string slice to a wrapper type providing a `&String` reference."],[6,"CowString","","A clone-on-write string"],[8,"ToString","","A generic trait for converting a value to a string"],[10,"to_string","","Converts the value of `self` to an owned string",194],[11,"cmp","","",195],[11,"partial_cmp","","",195],[11,"lt","","",195],[11,"le","","",195],[11,"gt","","",195],[11,"ge","","",195],[11,"clone","","",195],[11,"fmt","","",196],[11,"fmt","","",197],[11,"new","","Creates a new string buffer initialized with the empty string.",195],[11,"with_capacity","","Creates a new string buffer with the given capacity.\nThe string will be able to hold exactly `capacity` bytes without\nreallocating. If `capacity` is 0, the string will not allocate.",195],[11,"from_str","","Creates a new string buffer from the given string.",195],[11,"from_utf8","","Returns the vector as a string buffer, if possible, taking care not to\ncopy it.",195],[11,"from_utf8_lossy","","Converts a vector of bytes to a new UTF-8 string.\nAny invalid UTF-8 sequences are replaced with U+FFFD REPLACEMENT CHARACTER.",195],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `None`\nif `v` contains any invalid data.",195],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",195],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",195],[11,"from_utf8_unchecked","","Converts a vector of bytes to a new `String` without checking if\nit contains valid UTF-8. This is unsafe because it assumes that\nthe UTF-8-ness of the vector has already been validated.",195],[11,"into_bytes","","Return the underlying byte buffer, encoded as UTF-8.",195],[11,"push_str","","Pushes the given string onto this string buffer.",195],[11,"capacity","","Returns the number of bytes that this string buffer can hold without\nreallocating.",195],[11,"reserve","","Reserves capacity for at least `additional` more bytes to be inserted\nin the given `String`. The collection may reserve more space to avoid\nfrequent reallocations.",195],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more bytes to be\ninserted in the given `String`. Does nothing if the capacity is already\nsufficient.",195],[11,"shrink_to_fit","","Shrinks the capacity of this string buffer to match its length.",195],[11,"push","","Adds the given character to the end of the string.",195],[11,"as_bytes","","Works with the underlying buffer as a byte slice.",195],[11,"truncate","","Shortens a string to the specified length.",195],[11,"pop","","Removes the last character from the string buffer and returns it.\nReturns `None` if this string buffer is empty.",195],[11,"remove","","Removes the character from the string buffer at byte position `idx` and\nreturns it.",195],[11,"insert","","Insert a character into the string buffer at byte position `idx`.",195],[11,"as_mut_vec","","Views the string buffer as a mutable sequence of bytes.",195],[11,"len","","Return the number of bytes in this string.",195],[11,"is_empty","","Returns true if the string contains no bytes",195],[11,"clear","","Truncates the string, returning it to 0 length.",195],[11,"into_bytes","","Consume this error, returning the bytes that were attempted to make a\n`String` with.",196],[11,"utf8_error","","Access the underlying UTF8-error that was the cause of this error.",196],[11,"fmt","","",196],[11,"description","","",196],[11,"fmt","","",197],[11,"description","","",197],[11,"from_iter","","",195],[11,"from_iter","","",195],[11,"extend","","",195],[11,"extend","","",195],[11,"eq","","",195],[11,"ne","","",195],[11,"eq","","",195],[11,"ne","","",195],[11,"eq","collections::borrow","",15],[11,"ne","","",15],[11,"eq","collections::string","",195],[11,"ne","","",195],[11,"eq","collections::borrow","",15],[11,"ne","","",15],[11,"as_slice","collections::string","",195],[11,"default","","",195],[11,"fmt","","",195],[11,"fmt","","",195],[11,"hash","","",195],[6,"Output","",""],[11,"add","","",195],[6,"Output","",""],[11,"index","","",195],[6,"Output","",""],[11,"index","","",195],[6,"Output","",""],[11,"index","","",195],[6,"Output","",""],[11,"index","","",195],[6,"Target","",""],[11,"deref","","",195],[6,"Target","",""],[11,"deref","","",198],[6,"Err","",""],[11,"from_str","","",195],[11,"into_cow","","",195],[11,"as_slice","collections::borrow","",15],[11,"write_str","collections::string","",195],[0,"vec","collections","A growable list type with heap-allocated contents, written `Vec<T>` but pronounced 'vector.'"],[3,"Vec","collections::vec","A growable list type, written `Vec<T>` but pronounced 'vector.'"],[3,"IntoIter","","An iterator that moves out of a vector."],[3,"Drain","","An iterator that drains a vector."],[3,"DerefVec","","Wrapper type providing a `&Vec<T>` reference via `Deref`."],[5,"as_vec","","Convert a slice to a wrapper type providing a `&Vec<T>` reference."],[6,"CowVec","","A clone-on-write vector"],[11,"new","","Constructs a new, empty `Vec<T>`.",199],[11,"with_capacity","","Constructs a new, empty `Vec<T>` with the specified capacity.",199],[11,"from_raw_parts","","Creates a `Vec<T>` directly from the raw components of another vector.",199],[11,"from_raw_buf","","Creates a vector by copying the elements from a raw pointer.",199],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",199],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`Vec<T>`. The collection may reserve more space to avoid frequent reallocations.",199],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec<T>`. Does nothing if the capacity is already\nsufficient.",199],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",199],[11,"into_boxed_slice","","Convert the vector into Box<[T]>.",199],[11,"truncate","","Shorten a vector, dropping excess elements.",199],[11,"as_mut_slice","","Returns a mutable slice of the elements of `self`.",199],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",199],[11,"set_len","","Sets the length of a vector.",199],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",199],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after position `i` one position to the right.",199],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after position `index` one position to the left.",199],[11,"retain","","Retains only the elements specified by the predicate.",199],[11,"push","","Appends an element to the back of a collection.",199],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it is empty.",199],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",199],[11,"drain","","Creates a draining iterator that clears the `Vec` and iterates over\nthe removed items from start to end.",199],[11,"clear","","Clears the vector, removing all values.",199],[11,"len","","Returns the number of elements in the vector.",199],[11,"is_empty","","Returns `true` if the vector contains no elements.",199],[11,"map_in_place","","Converts a `Vec<T>` to a `Vec<U>` where `T` and `U` have the same\nsize and in case they are not zero-sized the same minimal alignment.",199],[11,"split_off","","Splits the collection into two at the given index.",199],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",199],[11,"push_all","","Appends all elements in a slice to the `Vec`.",199],[11,"dedup","","Removes consecutive repeated elements in the vector.",199],[11,"clone","","",199],[11,"clone_from","","",199],[11,"hash","","",199],[6,"Output","",""],[11,"index","","",199],[11,"index_mut","","",199],[6,"Output","",""],[11,"index","","",199],[6,"Output","",""],[11,"index","","",199],[6,"Output","",""],[11,"index","","",199],[6,"Output","",""],[11,"index","","",199],[11,"index_mut","","",199],[11,"index_mut","","",199],[11,"index_mut","","",199],[11,"index_mut","","",199],[6,"Target","",""],[11,"deref","","",199],[11,"deref_mut","","",199],[11,"from_iter","","",199],[6,"Item","",""],[6,"IntoIter","",""],[11,"into_iter","","",199],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[11,"extend","","",199],[11,"eq","","",199],[11,"ne","","",199],[11,"eq","","",199],[11,"ne","","",199],[11,"eq","","",199],[11,"ne","","",199],[11,"eq","collections::borrow","",15],[11,"ne","","",15],[11,"eq","","",15],[11,"ne","","",15],[11,"eq","","",15],[11,"ne","","",15],[11,"eq","collections::vec","",199],[11,"ne","","",199],[11,"eq","","",199],[11,"ne","","",199],[11,"eq","","",199],[11,"ne","","",199],[11,"eq","","",199],[11,"ne","","",199],[11,"eq","","",199],[11,"ne","","",199],[11,"eq","","",199],[11,"ne","","",199],[11,"eq","","",199],[11,"ne","","",199],[11,"eq","","",199],[11,"ne","","",199],[11,"eq","","",199],[11,"ne","","",199],[11,"eq","","",199],[11,"ne","","",199],[11,"eq","","",199],[11,"ne","","",199],[11,"eq","","",199],[11,"ne","","",199],[11,"eq","","",199],[11,"ne","","",199],[11,"eq","","",199],[11,"ne","","",199],[11,"eq","","",199],[11,"ne","","",199],[11,"eq","","",199],[11,"ne","","",199],[11,"eq","","",199],[11,"ne","","",199],[11,"eq","","",199],[11,"ne","","",199],[11,"eq","","",199],[11,"ne","","",199],[11,"eq","","",199],[11,"ne","","",199],[11,"eq","","",199],[11,"ne","","",199],[11,"eq","","",199],[11,"ne","","",199],[11,"eq","","",199],[11,"ne","","",199],[11,"eq","","",199],[11,"ne","","",199],[11,"eq","","",199],[11,"ne","","",199],[11,"eq","","",199],[11,"ne","","",199],[11,"eq","","",199],[11,"ne","","",199],[11,"eq","","",199],[11,"ne","","",199],[11,"eq","","",199],[11,"ne","","",199],[11,"eq","","",199],[11,"ne","","",199],[11,"eq","","",199],[11,"ne","","",199],[11,"eq","","",199],[11,"ne","","",199],[11,"eq","","",199],[11,"ne","","",199],[11,"eq","","",199],[11,"ne","","",199],[11,"eq","","",199],[11,"ne","","",199],[11,"eq","","",199],[11,"ne","","",199],[11,"eq","","",199],[11,"ne","","",199],[11,"eq","","",199],[11,"ne","","",199],[11,"eq","","",199],[11,"ne","","",199],[11,"eq","","",199],[11,"ne","","",199],[11,"eq","","",199],[11,"ne","","",199],[11,"eq","","",199],[11,"ne","","",199],[11,"eq","","",199],[11,"ne","","",199],[11,"eq","","",199],[11,"ne","","",199],[11,"eq","","",199],[11,"ne","","",199],[11,"eq","","",199],[11,"ne","","",199],[11,"eq","","",199],[11,"ne","","",199],[11,"eq","","",199],[11,"ne","","",199],[11,"eq","","",199],[11,"ne","","",199],[11,"eq","","",199],[11,"ne","","",199],[11,"eq","","",199],[11,"ne","","",199],[11,"eq","","",199],[11,"ne","","",199],[11,"eq","","",199],[11,"ne","","",199],[11,"eq","","",199],[11,"ne","","",199],[11,"eq","","",199],[11,"ne","","",199],[11,"eq","","",199],[11,"ne","","",199],[11,"eq","","",199],[11,"ne","","",199],[11,"eq","","",199],[11,"ne","","",199],[11,"eq","","",199],[11,"ne","","",199],[11,"eq","","",199],[11,"ne","","",199],[11,"eq","","",199],[11,"ne","","",199],[11,"eq","","",199],[11,"ne","","",199],[11,"eq","","",199],[11,"ne","","",199],[11,"eq","","",199],[11,"ne","","",199],[11,"eq","","",199],[11,"ne","","",199],[11,"eq","","",199],[11,"ne","","",199],[11,"eq","","",199],[11,"ne","","",199],[11,"partial_cmp","","",199],[11,"cmp","","",199],[11,"as_slice","","Returns a slice into `self`.",199],[6,"Output","",""],[11,"add","","",199],[11,"drop","","",199],[11,"default","","",199],[11,"fmt","","",199],[11,"from_iter","collections::borrow","",15],[11,"into_cow","collections::vec","",199],[11,"into_inner","","Drops all items that have not yet been moved and returns the empty vector.",200],[6,"Item","",""],[11,"next","","",200],[11,"size_hint","","",200],[11,"next_back","","",200],[11,"drop","","",200],[6,"Item","",""],[11,"next","","",201],[11,"size_hint","","",201],[11,"next_back","","",201],[11,"drop","","",201],[6,"Target","",""],[11,"deref","","",202],[11,"drop","","",202],[0,"vec_deque","collections","VecDeque is a double-ended queue, which is implemented with the help of a\ngrowing ring buffer."],[3,"VecDeque","collections::vec_deque","`VecDeque` is a growable ring buffer, which can be used as a\ndouble-ended queue efficiently."],[3,"Iter","","`VecDeque` iterator."],[3,"IterMut","","`VecDeque` mutable iterator."],[3,"IntoIter","","A by-value VecDeque iterator"],[3,"Drain","","A draining VecDeque iterator"],[11,"clone","","",203],[11,"drop","","",203],[11,"default","","",203],[11,"new","","Creates an empty `VecDeque`.",203],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",203],[11,"get","","Retrieves an element in the `VecDeque` by index.",203],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",203],[11,"swap","","Swaps elements at indices `i` and `j`.",203],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without\nreallocating.",203],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `VecDeque`. Does nothing if the capacity is already sufficient.",203],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`Ringbuf`. The collection may reserve more space to avoid frequent reallocations.",203],[11,"shrink_to_fit","","Shrinks the capacity of the ringbuf as much as possible.",203],[11,"truncate","","Shorten a ringbuf, dropping excess elements from the back.",203],[11,"iter","","Returns a front-to-back iterator.",203],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",203],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",203],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",203],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",203],[11,"len","","Returns the number of elements in the `VecDeque`.",203],[11,"is_empty","","Returns true if the buffer contains no elements",203],[11,"drain","","Creates a draining iterator that clears the `VecDeque` and iterates over\nthe removed items from start to end.",203],[11,"clear","","Clears the buffer, removing all values.",203],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",203],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",203],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",203],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",203],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",203],[11,"push_front","","Inserts an element first in the sequence.",203],[11,"push_back","","Appends an element to the back of a buffer",203],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",203],[11,"swap_back_remove","","Removes an element from anywhere in the ringbuf and returns it, replacing it with the last\nelement.",203],[11,"swap_front_remove","","Removes an element from anywhere in the ringbuf and returns it, replacing it with the first\nelement.",203],[11,"insert","","Inserts an element at position `i` within the ringbuf. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",203],[11,"remove","","Removes and returns the element at position `i` from the ringbuf.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `i` is out of bounds.",203],[11,"split_off","","Splits the collection into two at the given index.",203],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",203],[11,"resize","","Modifies the ringbuf in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",203],[11,"clone","","",204],[6,"Item","",""],[11,"next","","",204],[11,"size_hint","","",204],[11,"next_back","","",204],[11,"indexable","","",204],[11,"idx","","",204],[6,"Item","",""],[11,"next","","",205],[11,"size_hint","","",205],[11,"next_back","","",205],[6,"Item","",""],[11,"next","","",206],[11,"size_hint","","",206],[11,"next_back","","",206],[11,"drop","","",207],[6,"Item","",""],[11,"next","","",207],[11,"size_hint","","",207],[11,"next_back","","",207],[11,"eq","","",203],[11,"partial_cmp","","",203],[11,"cmp","","",203],[11,"hash","","",203],[6,"Output","",""],[11,"index","","",203],[11,"index_mut","","",203],[11,"from_iter","","",203],[6,"Item","",""],[6,"IntoIter","",""],[11,"into_iter","","",203],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[11,"extend","","",203],[11,"fmt","","",203],[0,"vec_map","collections","A simple map based on a vector for small integer keys. Space requirements\nare O(highest integer key)."],[3,"VecMap","collections::vec_map","A map optimized for small integer keys."],[3,"VacantEntry","","A vacant Entry."],[3,"OccupiedEntry","","An occupied Entry."],[3,"Iter","","An iterator over the key-value pairs of a map."],[3,"IterMut","","An iterator over the key-value pairs of a map, with the\nvalues being mutable."],[3,"Keys","","An iterator over the keys of a map."],[3,"Values","","An iterator over the values of a map."],[3,"IntoIter","","A consuming iterator over the key-value pairs of a map."],[3,"Drain","",""],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied."],[13,"Vacant","","A vacant Entry",208],[13,"Occupied","","An occupied Entry",208],[11,"default","","",209],[11,"clone","","",209],[11,"clone_from","","",209],[11,"hash","","",209],[11,"new","","Creates an empty `VecMap`.",209],[11,"with_capacity","","Creates an empty `VecMap` with space for at least `capacity`\nelements before resizing.",209],[11,"capacity","","Returns the number of elements the `VecMap` can hold without\nreallocating.",209],[11,"reserve_len","","Reserves capacity for the given `VecMap` to contain `len` distinct keys.\nIn the case of `VecMap` this means reallocations will not occur as long\nas all inserted keys are less than `len`.",209],[11,"reserve_len_exact","","Reserves the minimum capacity for the given `VecMap` to contain `len` distinct keys.\nIn the case of `VecMap` this means reallocations will not occur as long as all inserted\nkeys are less than `len`.",209],[11,"keys","","Returns an iterator visiting all keys in ascending order of the keys.\nThe iterator's element type is `usize`.",209],[11,"values","","Returns an iterator visiting all values in ascending order of the keys.\nThe iterator's element type is `&'r V`.",209],[11,"iter","","Returns an iterator visiting all key-value pairs in ascending order of the keys.\nThe iterator's element type is `(usize, &'r V)`.",209],[11,"iter_mut","","Returns an iterator visiting all key-value pairs in ascending order of the keys,\nwith mutable references to the values.\nThe iterator's element type is `(usize, &'r mut V)`.",209],[11,"into_iter","","Returns an iterator visiting all key-value pairs in ascending order of\nthe keys, consuming the original `VecMap`.\nThe iterator's element type is `(usize, &'r V)`.",209],[11,"append","","Moves all elements from `other` into the map while overwriting existing keys.",209],[11,"split_off","","Splits the collection into two at the given key.",209],[11,"drain","","Returns an iterator visiting all key-value pairs in ascending order of\nthe keys, emptying (but not consuming) the original `VecMap`.\nThe iterator's element type is `(usize, &'r V)`. Keeps the allocated memory for reuse.",209],[11,"len","","Return the number of elements in the map.",209],[11,"is_empty","","Return true if the map contains no elements.",209],[11,"clear","","Clears the map, removing all key-value pairs.",209],[11,"get","","Returns a reference to the value corresponding to the key.",209],[11,"contains_key","","Returns true if the map contains a value for the specified key.",209],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",209],[11,"insert","","Inserts a key-value pair from the map. If the key already had a value\npresent in the map, that value is returned. Otherwise, `None` is returned.",209],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",209],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",209],[11,"get","","Returns a mutable reference to the entry if occupied, or the VacantEntry if vacant",208],[11,"insert","","Sets the value of the entry with the VacantEntry's key,\nand returns a mutable reference to it.",210],[11,"get","","Gets a reference to the value in the entry.",211],[11,"get_mut","","Gets a mutable reference to the value in the entry.",211],[11,"into_mut","","Converts the entry into a mutable reference to its value.",211],[11,"insert","","Sets the value of the entry with the OccupiedEntry's key,\nand returns the entry's old value.",211],[11,"remove","","Takes the value of the entry out of the map, and returns it.",211],[11,"eq","","",209],[11,"partial_cmp","","",209],[11,"cmp","","",209],[11,"fmt","","",209],[11,"from_iter","","",209],[6,"Item","",""],[6,"IntoIter","",""],[11,"into_iter","","",209],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[11,"extend","","",209],[6,"Output","",""],[11,"index","","",209],[11,"index_mut","","",209],[11,"clone","","",212],[6,"Item","",""],[11,"next","","",212],[11,"size_hint","","",212],[11,"next_back","","",212],[6,"Item","",""],[11,"next","","",213],[11,"size_hint","","",213],[11,"next_back","","",213],[11,"clone","","",214],[11,"clone","","",215],[6,"Item","",""],[11,"next","","",216],[11,"size_hint","","",216],[11,"next_back","","",216],[6,"Item","",""],[11,"next","","",214],[11,"size_hint","","",214],[11,"next_back","","",214],[6,"Item","",""],[11,"next","","",215],[11,"size_hint","","",215],[11,"next_back","","",215],[6,"Item","",""],[11,"next","","",217],[11,"size_hint","","",217],[11,"next_back","","",217],[0,"bit_vec","collections",""],[3,"Iter","collections::bit_vec","An iterator for `BitVec`."],[0,"bit_set","collections",""],[3,"Union","collections::bit_set",""],[3,"Intersection","",""],[3,"Difference","",""],[3,"SymmetricDifference","",""],[3,"Iter","","An iterator for `BitSet`."],[0,"btree_map","collections",""],[3,"BTreeMap","collections::btree_map","A map based on a B-Tree."],[3,"Iter","","An iterator over a BTreeMap's entries."],[3,"IterMut","","A mutable iterator over a BTreeMap's entries."],[3,"IntoIter","","An owning iterator over a BTreeMap's entries."],[3,"Keys","","An iterator over a BTreeMap's keys."],[3,"Values","","An iterator over a BTreeMap's values."],[3,"Range","","An iterator over a sub-range of BTreeMap's entries."],[3,"RangeMut","","A mutable iterator over a sub-range of BTreeMap's entries."],[3,"VacantEntry","","A vacant Entry."],[3,"OccupiedEntry","","An occupied Entry."],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied."],[13,"Vacant","","A vacant Entry",218],[13,"Occupied","","An occupied Entry",218],[11,"clone","collections","",13],[11,"new","","Makes a new empty BTreeMap with a reasonable choice for B.",13],[11,"with_b","","Makes a new empty BTreeMap with the given B.",13],[11,"clear","","Clears the map, removing all values.",13],[11,"get","","Returns a reference to the value corresponding to the key.",13],[11,"contains_key","","Returns true if the map contains a value for the specified key.",13],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",13],[11,"insert","","Inserts a key-value pair from the map. If the key already had a value\npresent in the map, that value is returned. Otherwise, `None` is returned.",13],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",13],[6,"Item","collections::btree_map",""],[6,"IntoIter","",""],[11,"into_iter","collections","",13],[6,"Item","collections::btree_map",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[11,"from_iter","collections","",13],[11,"extend","","",13],[11,"hash","","",13],[11,"default","","",13],[11,"eq","","",13],[11,"partial_cmp","","",13],[11,"cmp","","",13],[11,"fmt","","",13],[6,"Output","collections::btree_map",""],[11,"index","collections","",13],[11,"index_mut","","",13],[6,"Item","collections::btree_map",""],[11,"next","","",219],[11,"size_hint","","",219],[11,"next_back","","",219],[6,"Item","",""],[11,"next","","",220],[11,"size_hint","","",220],[11,"next_back","","",220],[6,"Item","",""],[11,"next","","",221],[11,"size_hint","","",221],[11,"next_back","","",221],[6,"Item","",""],[11,"next","","",222],[11,"size_hint","","",222],[11,"next_back","","",222],[6,"Item","",""],[11,"next","","",223],[11,"size_hint","","",223],[11,"next_back","","",223],[6,"Item","",""],[11,"next","","",224],[11,"next_back","","",224],[6,"Item","",""],[11,"next","","",225],[11,"next_back","","",225],[11,"get","","Returns a mutable reference to the entry if occupied, or the VacantEntry if vacant",218],[11,"insert","","Sets the value of the entry with the VacantEntry's key,\nand returns a mutable reference to it.",226],[11,"get","","Gets a reference to the value in the entry.",227],[11,"get_mut","","Gets a mutable reference to the value in the entry.",227],[11,"into_mut","","Converts the entry into a mutable reference to its value.",227],[11,"insert","","Sets the value of the entry with the OccupiedEntry's key,\nand returns the entry's old value.",227],[11,"remove","","Takes the value of the entry out of the map, and returns it.",227],[11,"iter","collections","Gets an iterator over the entries of the map.",13],[11,"iter_mut","","Gets a mutable iterator over the entries of the map.",13],[11,"into_iter","","Gets an owning iterator over the entries of the map.",13],[11,"keys","","Gets an iterator over the keys of the map.",13],[11,"values","","Gets an iterator over the values of the map.",13],[11,"len","","Return the number of elements in the map.",13],[11,"is_empty","","Return true if the map contains no elements.",13],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",13],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",13],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",13],[0,"btree_set","",""],[3,"BTreeSet","collections::btree_set","A set based on a B-Tree."],[3,"Iter","","An iterator over a BTreeSet's items."],[3,"IntoIter","","An owning iterator over a BTreeSet's items."],[3,"Range","","An iterator over a sub-range of BTreeSet's items."],[3,"Difference","","A lazy iterator producing elements in the set difference (in-order)."],[3,"SymmetricDifference","","A lazy iterator producing elements in the set symmetric difference (in-order)."],[3,"Intersection","","A lazy iterator producing elements in the set intersection (in-order)."],[3,"Union","","A lazy iterator producing elements in the set union (in-order)."],[11,"partial_cmp","collections","",14],[11,"lt","","",14],[11,"le","","",14],[11,"gt","","",14],[11,"ge","","",14],[11,"cmp","","",14],[11,"eq","","",14],[11,"ne","","",14],[11,"hash","","",14],[11,"clone","","",14],[11,"new","","Makes a new BTreeSet with a reasonable choice of B.",14],[11,"with_b","","Makes a new BTreeSet with the given B.",14],[11,"iter","","Gets an iterator over the BTreeSet's contents.",14],[11,"into_iter","","Gets an iterator for moving out the BtreeSet's contents.",14],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the set, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",14],[11,"difference","","Visits the values representing the difference, in ascending order.",14],[11,"symmetric_difference","","Visits the values representing the symmetric difference, in ascending order.",14],[11,"intersection","","Visits the values representing the intersection, in ascending order.",14],[11,"union","","Visits the values representing the union, in ascending order.",14],[11,"len","","Return the number of elements in the set",14],[11,"is_empty","","Returns true if the set contains no elements",14],[11,"clear","","Clears the set, removing all values.",14],[11,"contains","","Returns `true` if the set contains a value.",14],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",14],[11,"is_subset","","Returns `true` if the set is a subset of another.",14],[11,"is_superset","","Returns `true` if the set is a superset of another.",14],[11,"insert","","Adds a value to the set. Returns `true` if the value was not already\npresent in the set.",14],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",14],[11,"from_iter","","",14],[6,"Item","collections::btree_set",""],[6,"IntoIter","",""],[11,"into_iter","collections","",14],[6,"Item","collections::btree_set",""],[6,"IntoIter","",""],[11,"extend","collections","",14],[11,"default","","",14],[6,"Output","collections::btree_set",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[11,"fmt","collections","",14],[6,"Item","collections::btree_set",""],[11,"next","","",228],[11,"size_hint","","",228],[11,"next_back","","",228],[6,"Item","",""],[11,"next","","",229],[11,"size_hint","","",229],[11,"next_back","","",229],[6,"Item","",""],[11,"next","","",230],[11,"next_back","","",230],[6,"Item","",""],[11,"next","","",231],[6,"Item","",""],[11,"next","","",232],[6,"Item","",""],[11,"next","","",233],[6,"Item","",""],[11,"next","","",234],[14,"vec!","collections","Creates a `Vec` containing the arguments."],[14,"format!","","Use the syntax described in `std::fmt` to create a value of type `String`.\nSee `std::fmt` for more information."],[15,"slice","","Utilities for slice manipulation"],[15,"str","","Unicode string manipulation (the [`str`](../primitive.str.html) type)."],[11,"clone","collections::bit_vec","",235],[11,"next","","",235],[11,"size_hint","","",235],[11,"next_back","","",235],[11,"indexable","","",235],[11,"idx","","",235],[11,"clone","collections::bit_set","",236],[11,"next","","",236],[11,"size_hint","","",236],[11,"next","","",237],[11,"size_hint","","",237],[11,"next","","",238],[11,"size_hint","","",238],[11,"next","","",239],[11,"size_hint","","",239],[11,"next","","",240],[11,"size_hint","","",240],[11,"next","collections::btree_map","",219],[11,"size_hint","","",219],[11,"next_back","","",219],[11,"next","","",220],[11,"size_hint","","",220],[11,"next_back","","",220],[11,"next","","",221],[11,"size_hint","","",221],[11,"next_back","","",221],[11,"next","","",222],[11,"size_hint","","",222],[11,"next_back","","",222],[11,"next","","",223],[11,"size_hint","","",223],[11,"next_back","","",223],[11,"next","","",224],[11,"next_back","","",224],[11,"next","","",225],[11,"next_back","","",225],[11,"get","","Returns a mutable reference to the entry if occupied, or the VacantEntry if vacant",218],[11,"insert","","Sets the value of the entry with the VacantEntry's key,\nand returns a mutable reference to it.",226],[11,"get","","Gets a reference to the value in the entry.",227],[11,"get_mut","","Gets a mutable reference to the value in the entry.",227],[11,"into_mut","","Converts the entry into a mutable reference to its value.",227],[11,"insert","","Sets the value of the entry with the OccupiedEntry's key,\nand returns the entry's old value.",227],[11,"remove","","Takes the value of the entry out of the map, and returns it.",227],[11,"next","collections::btree_set","",228],[11,"size_hint","","",228],[11,"next_back","","",228],[11,"next","","",229],[11,"size_hint","","",229],[11,"next_back","","",229],[11,"next","","",230],[11,"next_back","","",230],[11,"next","","",231],[11,"next","","",232],[11,"next","","",233],[11,"next","","",234],[11,"borrow","collections::vec","",199],[11,"borrow_mut","","",199],[11,"borrow","collections::string","",195]],"paths":[[3,"Box"],[3,"Weak"],[3,"Arc"],[3,"Rc"],[3,"Weak"],[8,"BoxAny"],[4,"Bound"],[3,"BinaryHeap"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"BitVec"],[3,"BitSet"],[3,"BTreeMap"],[3,"BTreeSet"],[4,"Cow"],[8,"Borrow"],[8,"BorrowMut"],[8,"ToOwned"],[8,"IntoCow"],[8,"CLike"],[3,"EnumSet"],[3,"Iter"],[3,"Formatter"],[3,"Wrapping"],[4,"FpCategory"],[3,"ParseIntError"],[4,"IntErrorKind"],[3,"ParseFloatError"],[4,"FloatErrorKind"],[3,"NonZero"],[3,"Unique"],[3,"NoCopy"],[3,"Managed"],[3,"PhantomData"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"Ordering"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"AtomicPtr"],[3,"AtomicInt"],[3,"AtomicUint"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"BorrowRef"],[3,"Ref"],[3,"BorrowRefMut"],[3,"RefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[4,"EscapeUnicodeState"],[3,"EscapeDefault"],[4,"EscapeDefaultState"],[3,"Finallyalizer"],[3,"Rev"],[4,"MinMaxResult"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"Unfold"],[3,"Counter"],[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"],[3,"Repeat"],[4,"Option"],[3,"Item"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"i8x16"],[3,"i16x8"],[3,"i32x4"],[3,"i64x2"],[3,"u8x16"],[3,"u16x8"],[3,"u32x4"],[3,"u64x2"],[3,"f32x4"],[3,"f64x2"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"GenericSplitN"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[4,"SearchStep"],[3,"CharEqPattern"],[3,"CharEqSearcher"],[3,"StrSearcher"],[3,"ParseBoolError"],[4,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"BytesDeref"],[3,"CharSplits"],[3,"CharSplitsN"],[3,"TwoWaySearcher"],[4,"OldSearcher"],[3,"OldMatchIndices"],[3,"MatchIndices"],[3,"SplitStr"],[3,"Split"],[3,"SplitTerminator"],[3,"SplitN"],[3,"RSplitN"],[3,"Lines"],[3,"LinesAny"],[3,"SipHasher"],[3,"Binary"],[3,"Octal"],[3,"Decimal"],[3,"LowerHex"],[3,"UpperHex"],[3,"Radix"],[3,"RadixFmt"],[4,"Alignment"],[3,"Error"],[3,"Arguments"],[8,"Write"],[8,"Octal"],[8,"Binary"],[8,"Display"],[8,"Debug"],[8,"LowerHex"],[8,"UpperHex"],[8,"Pointer"],[8,"LowerExp"],[8,"UpperExp"],[3,"Iter"],[3,"IntoIter"],[3,"LinkedList"],[3,"IterMut"],[8,"AsSlice"],[8,"IntSliceExt"],[8,"MutableByteVector"],[8,"SliceExt"],[8,"SliceConcatExt"],[3,"ElementSwaps"],[3,"Permutations"],[8,"FromStr"],[8,"Str"],[3,"CharRange"],[8,"CharEq"],[4,"GraphemeCat"],[3,"GraphemeIndices"],[3,"Graphemes"],[4,"GraphemeState"],[3,"Utf16Items"],[4,"Utf16Item"],[3,"Utf16Encoder"],[3,"Words"],[3,"ToLowercase"],[3,"ToUppercase"],[8,"Pattern"],[8,"Searcher"],[8,"ReverseSearcher"],[8,"StrExt"],[3,"Decompositions"],[3,"Recompositions"],[3,"Utf16Units"],[8,"ToString"],[3,"String"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[3,"DerefString"],[3,"Vec"],[3,"IntoIter"],[3,"Drain"],[3,"DerefVec"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[4,"Entry"],[3,"VecMap"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"Iter"],[3,"IterMut"],[3,"Keys"],[3,"Values"],[3,"Drain"],[3,"IntoIter"],[4,"Entry"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"Range"],[3,"RangeMut"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"Iter"],[3,"IntoIter"],[3,"Range"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Intersection"],[3,"Union"],[3,"Iter"],[3,"Iter"],[3,"Union"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"]]};
searchIndex['serialize'] = {"items":[[0,"","serialize","Support code for encoding and decoding types."],[11,"encode","collections::string","",0],[11,"decode","","",0],[11,"encode","alloc::boxed","",1],[11,"decode","","",1],[11,"decode","","",1],[11,"encode","alloc::rc","",2],[11,"decode","","",2],[11,"encode","collections::vec","",3],[11,"decode","","",3],[11,"encode","core::option","",4],[11,"decode","","",4],[11,"encode","std::old_path::posix","",5],[11,"decode","","",5],[11,"encode","std::old_path::windows","",6],[11,"decode","","",6],[11,"encode","std::path","",7],[11,"decode","","",7],[11,"encode","core::cell","",8],[11,"decode","","",8],[11,"encode","","",9],[11,"decode","","",9],[11,"encode","alloc::arc","",10],[11,"decode","","",10],[11,"encode","collections::linked_list","",11],[11,"decode","","",11],[11,"encode","collections::vec_deque","",12],[11,"decode","","",12],[11,"encode","collections::btree::map","",13],[11,"decode","","",13],[11,"encode","collections::btree::set","",14],[11,"decode","","",14],[11,"encode","collections::enum_set","",15],[11,"decode","","",15],[11,"encode","std::collections::hash::map","",16],[11,"decode","","",16],[11,"encode","std::collections::hash::set","",17],[11,"decode","","",17],[11,"encode","collections::vec_map","",18],[11,"decode","","",18],[0,"hex","serialize","Hex binary-to-text encoding"],[4,"FromHexError","serialize::hex","Errors that can occur when decoding a hex encoded string"],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",19],[13,"InvalidHexLength","","The input had an invalid length",19],[8,"ToHex","","A trait for converting a value to hexadecimal encoding"],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned\nstring.",20],[8,"FromHex","","A trait for converting hexadecimal encoded values"],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data,\ninto an owned vector of bytes, returning the vector.",21],[11,"fmt","","",19],[11,"fmt","","",19],[11,"description","","",19],[0,"json","serialize","JSON parsing and serialization"],[3,"PrettyJson","serialize::json",""],[3,"AsJson","",""],[3,"AsPrettyJson","",""],[3,"Encoder","","A structure for implementing serialization to JSON."],[3,"PrettyEncoder","","Another encoder for JSON, but prints out human-readable JSON instead of\ncompact data"],[3,"Stack","","A Stack represents the current position of the parser in the logical\nstructure of the JSON stream.\nFor example foo.bar[3].x"],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming\nan iterator of char."],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure."],[3,"Decoder","","A structure to decode JSON to values in rust."],[4,"Json","","Represents a json value"],[13,"I64","","",22],[13,"U64","","",22],[13,"F64","","",22],[13,"String","","",22],[13,"Boolean","","",22],[13,"Array","","",22],[13,"Object","","",22],[13,"Null","","",22],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream."],[13,"InvalidSyntax","","",23],[13,"InvalidNumber","","",23],[13,"EOFWhileParsingObject","","",23],[13,"EOFWhileParsingArray","","",23],[13,"EOFWhileParsingValue","","",23],[13,"EOFWhileParsingString","","",23],[13,"KeyMustBeAString","","",23],[13,"ExpectedColon","","",23],[13,"TrailingCharacters","","",23],[13,"TrailingComma","","",23],[13,"InvalidEscape","","",23],[13,"InvalidUnicodeCodePoint","","",23],[13,"LoneLeadingSurrogateInHexEscape","","",23],[13,"UnexpectedEndOfHexEscape","","",23],[13,"UnrecognizedHex","","",23],[13,"NotFourDigit","","",23],[13,"NotUtf8","","",23],[4,"ParserError","",""],[13,"SyntaxError","","msg, line, col",24],[13,"IoError","","",24],[4,"DecoderError","",""],[13,"ParseError","","",25],[13,"ExpectedError","","",25],[13,"MissingFieldError","","",25],[13,"UnknownVariantError","","",25],[13,"ApplicationError","","",25],[4,"EncoderError","",""],[13,"FmtError","","",26],[13,"BadHashmapKey","","",26],[4,"JsonEvent","","The output of the streaming parser."],[13,"ObjectStart","","",27],[13,"ObjectEnd","","",27],[13,"ArrayStart","","",27],[13,"ArrayEnd","","",27],[13,"BooleanValue","","",27],[13,"I64Value","","",27],[13,"U64Value","","",27],[13,"F64Value","","",27],[13,"StringValue","","",27],[13,"NullValue","","",27],[13,"Error","","",27],[4,"StackElement","","StackElements compose a Stack.\nFor example, StackElement::Key(\"foo\"), StackElement::Key(\"bar\"),\nStackElement::Index(3) and StackElement::Key(\"x\") are the\nStackElements compositing the stack that represents foo.bar[3].x"],[13,"Index","","",28],[13,"Key","","",28],[5,"error_str","","Returns a readable error string for a given error code."],[5,"decode","","Shortcut function to decode a JSON `&str` into an object"],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`"],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`"],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`"],[5,"from_reader","","Decodes a json value from an `&mut old_io::Reader`"],[5,"from_str","","Decodes a json value from a string"],[6,"Array","",""],[6,"Object","",""],[6,"BuilderError","",""],[6,"EncodeResult","",""],[6,"DecodeResult","",""],[8,"ToJson","","A trait for converting values to JSON"],[10,"to_json","","Converts the value of `self` to an instance of JSON",29],[11,"fmt","","",22],[11,"partial_cmp","","",22],[11,"lt","","",22],[11,"le","","",22],[11,"gt","","",22],[11,"ge","","",22],[11,"eq","","",22],[11,"ne","","",22],[11,"clone","","",22],[11,"fmt","","",23],[11,"eq","","",23],[11,"ne","","",23],[11,"clone","","",23],[11,"fmt","","",24],[11,"eq","","",24],[11,"ne","","",24],[11,"clone","","",24],[11,"fmt","","",25],[11,"eq","","",25],[11,"ne","","",25],[11,"clone","","",25],[11,"fmt","","",26],[11,"fmt","","",23],[11,"fmt","","",24],[11,"fmt","","",25],[11,"description","","",25],[11,"fmt","","",26],[11,"description","","",26],[11,"from_error","","",26],[11,"new","","Creates a new JSON encoder whose output will be written to the writer\nspecified.",30],[6,"Error","",""],[11,"emit_nil","","",30],[11,"emit_uint","","",30],[11,"emit_u64","","",30],[11,"emit_u32","","",30],[11,"emit_u16","","",30],[11,"emit_u8","","",30],[11,"emit_int","","",30],[11,"emit_i64","","",30],[11,"emit_i32","","",30],[11,"emit_i16","","",30],[11,"emit_i8","","",30],[11,"emit_bool","","",30],[11,"emit_f64","","",30],[11,"emit_f32","","",30],[11,"emit_char","","",30],[11,"emit_str","","",30],[11,"emit_enum","","",30],[11,"emit_enum_variant","","",30],[11,"emit_enum_variant_arg","","",30],[11,"emit_enum_struct_variant","","",30],[11,"emit_enum_struct_variant_field","","",30],[11,"emit_struct","","",30],[11,"emit_struct_field","","",30],[11,"emit_tuple","","",30],[11,"emit_tuple_arg","","",30],[11,"emit_tuple_struct","","",30],[11,"emit_tuple_struct_arg","","",30],[11,"emit_option","","",30],[11,"emit_option_none","","",30],[11,"emit_option_some","","",30],[11,"emit_seq","","",30],[11,"emit_seq_elt","","",30],[11,"emit_map","","",30],[11,"emit_map_elt_key","","",30],[11,"emit_map_elt_val","","",30],[11,"new","","Creates a new encoder whose output will be written to the specified writer",31],[11,"set_indent","","Set the number of spaces to indent for each level.\nThis is safe to set during encoding.",31],[6,"Error","",""],[11,"emit_nil","","",31],[11,"emit_uint","","",31],[11,"emit_u64","","",31],[11,"emit_u32","","",31],[11,"emit_u16","","",31],[11,"emit_u8","","",31],[11,"emit_int","","",31],[11,"emit_i64","","",31],[11,"emit_i32","","",31],[11,"emit_i16","","",31],[11,"emit_i8","","",31],[11,"emit_bool","","",31],[11,"emit_f64","","",31],[11,"emit_f32","","",31],[11,"emit_char","","",31],[11,"emit_str","","",31],[11,"emit_enum","","",31],[11,"emit_enum_variant","","",31],[11,"emit_enum_variant_arg","","",31],[11,"emit_enum_struct_variant","","",31],[11,"emit_enum_struct_variant_field","","",31],[11,"emit_struct","","",31],[11,"emit_struct_field","","",31],[11,"emit_tuple","","",31],[11,"emit_tuple_arg","","",31],[11,"emit_tuple_struct","","",31],[11,"emit_tuple_struct_arg","","",31],[11,"emit_option","","",31],[11,"emit_option_none","","",31],[11,"emit_option_some","","",31],[11,"emit_seq","","",31],[11,"emit_seq_elt","","",31],[11,"emit_map","","",31],[11,"emit_map_elt_key","","",31],[11,"emit_map_elt_val","","",31],[11,"encode","","",22],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty\nrepresentation for it via `Display`.",22],[11,"find","","If the Json value is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",22],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the Json value associated with the final key.",22],[11,"search","","If the Json value is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the Json value is not an Object, returns None.",22],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",22],[11,"as_object","","If the Json value is an Object, returns the associated BTreeMap.\nReturns None otherwise.",22],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",22],[11,"as_array","","If the Json value is an Array, returns the associated vector.\nReturns None otherwise.",22],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",22],[11,"as_string","","If the Json value is a String, returns the associated str.\nReturns None otherwise.",22],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",22],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",22],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",22],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",22],[11,"as_i64","","If the Json value is a number, return or cast it to a i64.\nReturns None otherwise.",22],[11,"as_u64","","If the Json value is a number, return or cast it to a u64.\nReturns None otherwise.",22],[11,"as_f64","","If the Json value is a number, return or cast it to a f64.\nReturns None otherwise.",22],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",22],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool.\nReturns None otherwise.",22],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",22],[11,"as_null","","If the Json value is a Null, returns ().\nReturns None otherwise.",22],[6,"Output","",""],[11,"index","","",22],[6,"Output","",""],[11,"index","","",22],[11,"fmt","","",27],[11,"clone","","",27],[11,"eq","","",27],[11,"ne","","",27],[11,"fmt","","",28],[11,"clone","","",28],[11,"eq","","",28],[11,"ne","","",28],[11,"new","","",32],[11,"len","","Returns The number of elements in the Stack.",32],[11,"is_empty","","Returns true if the stack is empty.",32],[11,"get","","Provides access to the StackElement at a given index.\nlower indices are at the bottom of the stack while higher indices are\nat the top.",32],[11,"is_equal_to","","Compares this stack with an array of StackElements.",32],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as\nthe ones passed as parameter.",32],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as\nthe ones passed as parameter.",32],[11,"top","","Returns the top-most element (if any).",32],[6,"Item","",""],[11,"next","","",33],[11,"new","","Creates the JSON parser.",33],[11,"stack","","Provides access to the current position in the logical structure of the\nJSON stream.",33],[11,"new","","Create a JSON Builder.",34],[11,"build","","",34],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",35],[6,"Error","",""],[11,"read_nil","","",35],[11,"read_uint","","",35],[11,"read_u8","","",35],[11,"read_u16","","",35],[11,"read_u32","","",35],[11,"read_u64","","",35],[11,"read_int","","",35],[11,"read_i8","","",35],[11,"read_i16","","",35],[11,"read_i32","","",35],[11,"read_i64","","",35],[11,"read_f32","","",35],[11,"read_f64","","",35],[11,"read_bool","","",35],[11,"read_char","","",35],[11,"read_str","","",35],[11,"read_enum","","",35],[11,"read_enum_variant","","",35],[11,"read_enum_variant_arg","","",35],[11,"read_enum_struct_variant","","",35],[11,"read_enum_struct_variant_field","","",35],[11,"read_struct","","",35],[11,"read_struct_field","","",35],[11,"read_tuple","","",35],[11,"read_tuple_arg","","",35],[11,"read_tuple_struct","","",35],[11,"read_tuple_struct_arg","","",35],[11,"read_option","","",35],[11,"read_seq","","",35],[11,"read_seq_elt","","",35],[11,"read_map","","",35],[11,"read_map_elt_key","","",35],[11,"read_map_elt_val","","",35],[11,"error","","",35],[11,"to_json","","",22],[11,"to_json","collections::string","",0],[11,"to_json","collections::vec","",3],[11,"to_json","collections::btree::map","",13],[11,"to_json","std::collections::hash::map","",16],[11,"to_json","core::option","",4],[11,"fmt","serialize::json","Encodes a json value into a string",22],[11,"fmt","","Encodes a json value into a string",36],[11,"fmt","","Encodes a json value into a string",37],[11,"indent","","Set the indentation level for the emitted JSON",38],[11,"fmt","","Encodes a json value into a string",38],[6,"Err","",""],[11,"from_str","","",22],[11,"encode","collections::string","",0],[11,"decode","","",0],[11,"encode","alloc::boxed","",1],[11,"decode","","",1],[11,"decode","","",1],[11,"encode","alloc::rc","",2],[11,"decode","","",2],[11,"encode","collections::vec","",3],[11,"decode","","",3],[11,"encode","core::option","",4],[11,"decode","","",4],[11,"encode","std::old_path::posix","",5],[11,"decode","","",5],[11,"encode","std::old_path::windows","",6],[11,"decode","","",6],[11,"encode","std::path","",7],[11,"decode","","",7],[11,"encode","core::cell","",8],[11,"decode","","",8],[11,"encode","","",9],[11,"decode","","",9],[11,"encode","alloc::arc","",10],[11,"decode","","",10],[8,"Decoder","serialize",""],[16,"Error","serialize::Decoder",""],[10,"read_nil","serialize","",39],[10,"read_uint","","",39],[10,"read_u64","","",39],[10,"read_u32","","",39],[10,"read_u16","","",39],[10,"read_u8","","",39],[10,"read_int","","",39],[10,"read_i64","","",39],[10,"read_i32","","",39],[10,"read_i16","","",39],[10,"read_i8","","",39],[10,"read_bool","","",39],[10,"read_f64","","",39],[10,"read_f32","","",39],[10,"read_char","","",39],[10,"read_str","","",39],[10,"read_enum","","",39],[10,"read_enum_variant","","",39],[10,"read_enum_variant_arg","","",39],[10,"read_enum_struct_variant","","",39],[10,"read_enum_struct_variant_field","","",39],[10,"read_struct","","",39],[10,"read_struct_field","","",39],[10,"read_tuple","","",39],[10,"read_tuple_arg","","",39],[10,"read_tuple_struct","","",39],[10,"read_tuple_struct_arg","","",39],[10,"read_option","","",39],[10,"read_seq","","",39],[10,"read_seq_elt","","",39],[10,"read_map","","",39],[10,"read_map_elt_key","","",39],[10,"read_map_elt_val","","",39],[10,"error","","",39],[8,"Encoder","",""],[16,"Error","serialize::Encoder",""],[10,"emit_nil","serialize","",40],[10,"emit_uint","","",40],[10,"emit_u64","","",40],[10,"emit_u32","","",40],[10,"emit_u16","","",40],[10,"emit_u8","","",40],[10,"emit_int","","",40],[10,"emit_i64","","",40],[10,"emit_i32","","",40],[10,"emit_i16","","",40],[10,"emit_i8","","",40],[10,"emit_bool","","",40],[10,"emit_f64","","",40],[10,"emit_f32","","",40],[10,"emit_char","","",40],[10,"emit_str","","",40],[10,"emit_enum","","",40],[10,"emit_enum_variant","","",40],[10,"emit_enum_variant_arg","","",40],[10,"emit_enum_struct_variant","","",40],[10,"emit_enum_struct_variant_field","","",40],[10,"emit_struct","","",40],[10,"emit_struct_field","","",40],[10,"emit_tuple","","",40],[10,"emit_tuple_arg","","",40],[10,"emit_tuple_struct","","",40],[10,"emit_tuple_struct_arg","","",40],[10,"emit_option","","",40],[10,"emit_option_none","","",40],[10,"emit_option_some","","",40],[10,"emit_seq","","",40],[10,"emit_seq_elt","","",40],[10,"emit_map","","",40],[10,"emit_map_elt_key","","",40],[10,"emit_map_elt_val","","",40],[8,"Decodable","",""],[10,"decode","","",41],[8,"Encodable","",""],[10,"encode","","",42],[8,"DecoderHelpers","",""],[10,"read_to_vec","","",43],[8,"EncoderHelpers","",""],[10,"emit_from_vec","","",44]],"paths":[[3,"String"],[3,"Box"],[3,"Rc"],[3,"Vec"],[4,"Option"],[3,"Path"],[3,"Path"],[3,"PathBuf"],[3,"Cell"],[3,"RefCell"],[3,"Arc"],[3,"LinkedList"],[3,"VecDeque"],[3,"BTreeMap"],[3,"BTreeSet"],[3,"EnumSet"],[3,"HashMap"],[3,"HashSet"],[3,"VecMap"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"PrettyEncoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
searchIndex['term'] = {"items":[[0,"","term","Terminal formatting library."],[3,"WinConsole","","A Terminal implementation which uses the Win32 Console API."],[3,"WriterWrapper","","A hack to work around the fact that `Box<Writer + Send>` does not\ncurrently implement `Writer`."],[5,"stdout","","Return a Terminal wrapping stdout, or None if a terminal couldn't be\nopened."],[5,"stderr","","Return a Terminal wrapping stderr, or None if a terminal couldn't be\nopened."],[0,"terminfo","","Terminfo database interface."],[3,"TermInfo","term::terminfo","A parsed terminfo database entry."],[12,"names","","Names for the terminal",0],[12,"bools","","Map of capability name to boolean value",0],[12,"numbers","","Map of capability name to numeric value",0],[12,"strings","","Map of capability name to raw (unexpanded) string",0],[3,"TerminfoTerminal","","A Terminal that knows how many colors it supports, with a reference to its\nparsed Terminfo database record."],[0,"searcher","","ncurses-compatible database discovery"],[5,"get_dbpath_for_term","term::terminfo::searcher","Return path to database entry for `term`"],[5,"open","","Return open file for `term`"],[0,"parser","term::terminfo","TermInfo format parsing.\nncurses-compatible compiled terminfo format parsing (term(5))"],[0,"compiled","term::terminfo::parser","ncurses-compatible compiled terminfo format parsing (term(5))"],[5,"parse","term::terminfo::parser::compiled","Parse a compiled terminfo entry, using long capability names if `longnames` is true"],[5,"msys_terminfo","","Create a dummy TermInfo struct for msys terminals"],[7,"boolfnames","",""],[7,"boolnames","",""],[7,"numfnames","",""],[7,"numnames","",""],[7,"stringfnames","",""],[7,"stringnames","",""],[0,"parm","term::terminfo","Parameterized string expansion"],[3,"Variables","term::terminfo::parm","Container for static and dynamic variable arrays"],[4,"Param","","Types of parameters a capability can use"],[13,"Words","","",1],[13,"Number","","",1],[5,"expand","","Expand a parameterized capability"],[11,"clone","","",1],[11,"new","","Return a new zero-initialized Variables",2],[11,"fmt","term::terminfo","",0],[11,"fg","","",3],[11,"bg","","",3],[11,"attr","","",3],[11,"supports_attr","","",3],[11,"reset","","",3],[11,"get_ref","","",3],[11,"get_mut","","",3],[11,"unwrap","","",3],[11,"new","","Returns `None` whenever the terminal cannot be created for some\nreason.",3],[11,"write_all","","",3],[11,"flush","","",3],[11,"new","term","Returns `None` whenever the terminal cannot be created for some\nreason.",4],[11,"write_all","","",4],[11,"flush","","",4],[11,"fg","","",4],[11,"bg","","",4],[11,"attr","","",4],[11,"supports_attr","","",4],[11,"reset","","",4],[11,"get_ref","","",4],[11,"get_mut","","",4],[11,"unwrap","","",4],[0,"color","","Terminal color definitions"],[6,"Color","term::color","Number for a terminal color"],[17,"BLACK","",""],[17,"RED","",""],[17,"GREEN","",""],[17,"YELLOW","",""],[17,"BLUE","",""],[17,"MAGENTA","",""],[17,"CYAN","",""],[17,"WHITE","",""],[17,"BRIGHT_BLACK","",""],[17,"BRIGHT_RED","",""],[17,"BRIGHT_GREEN","",""],[17,"BRIGHT_YELLOW","",""],[17,"BRIGHT_BLUE","",""],[17,"BRIGHT_MAGENTA","",""],[17,"BRIGHT_CYAN","",""],[17,"BRIGHT_WHITE","",""],[0,"attr","term","Terminal attributes"],[4,"Attr","term::attr","Terminal attributes for use with term.attr()."],[13,"Bold","","Bold (or possibly bright) mode",5],[13,"Dim","","Dim mode, also called faint or half-bright. Often not supported",5],[13,"Italic","","Italics mode. Often not supported",5],[13,"Underline","","Underline mode",5],[13,"Blink","","Blink mode",5],[13,"Standout","","Standout mode. Often implemented as Reverse, sometimes coupled with Bold",5],[13,"Reverse","","Reverse mode, inverts the foreground and background colors",5],[13,"Secure","","Secure mode, also called invis mode. Hides the printed text",5],[13,"ForegroundColor","","Convenience attribute to set the foreground color",5],[13,"BackgroundColor","","Convenience attribute to set the background color",5],[8,"Terminal","term","A terminal with similar capabilities to an ANSI Terminal\n(foreground/background colors etc)."],[10,"fg","","Sets the foreground color to the given color.",6],[10,"bg","","Sets the background color to the given color.",6],[10,"attr","","Sets the given terminal attribute, if supported.  Returns `Ok(true)`\nif the attribute was supported, `Ok(false)` otherwise, and `Err(e)` if\nthere was an I/O error.",6],[10,"supports_attr","","Returns whether the given terminal attribute is supported.",6],[10,"reset","","Resets all terminal attributes and color to the default.\nReturns `Ok()`.",6],[10,"get_ref","","Gets an immutable reference to the stream inside",6],[10,"get_mut","","Gets a mutable reference to the stream inside",6],[8,"UnwrappableTerminal","","A terminal which can be unwrapped."],[10,"unwrap","","Returns the contained stream, destroying the `Terminal`",7],[11,"write_all","","",8],[11,"flush","","",8]],"paths":[[3,"TermInfo"],[4,"Param"],[3,"Variables"],[3,"TerminfoTerminal"],[3,"WinConsole"],[4,"Attr"],[8,"Terminal"],[8,"UnwrappableTerminal"],[3,"WriterWrapper"]]};
searchIndex['arena'] = {"items":[[0,"","arena","The arena, a fast but limited type of allocator."],[3,"Arena","","A slower reflection-based arena that can allocate objects of any type."],[3,"TypedArena","","A faster arena that can hold objects of only one type."],[11,"new","","Allocates a new Arena with 32 bytes preallocated.",0],[11,"new_with_size","","Allocates a new Arena with `initial_size` bytes preallocated.",0],[11,"drop","","",0],[11,"alloc","","Allocates a new item in the arena, using `op` to initialize the value,\nand returns a reference to it.",0],[11,"new","","Creates a new `TypedArena` with preallocated space for eight objects.",1],[11,"with_capacity","","Creates a new `TypedArena` with preallocated space for the given number of\nobjects.",1],[11,"alloc","","Allocates an object in the `TypedArena`, returning a reference to it.",1],[11,"drop","","",1]],"paths":[[3,"Arena"],[3,"TypedArena"]]};
searchIndex['flate'] = {"items":[[0,"","flate","Simple [DEFLATE][def]-based compression. This is a wrapper around the\n[`miniz`][mz] library, which is a one-file pure-C implementation of zlib."],[3,"Bytes","",""],[5,"deflate_bytes","","Compress a buffer, without writing any sort of header on the output."],[5,"deflate_bytes_zlib","","Compress a buffer, using a header that zlib can understand."],[5,"inflate_bytes","","Decompress a buffer, without parsing any sort of header on the input."],[5,"inflate_bytes_zlib","","Decompress a buffer that starts with a zlib header."],[6,"Target","",""],[11,"deref","","",0],[11,"drop","","",0]],"paths":[[3,"Bytes"]]};
searchIndex['std'] = {"items":[[0,"","std","# The Rust Standard Library"],[0,"any","","Traits for dynamic typing of any `'static` type (through runtime reflection)"],[8,"Any","std::any","The `Any` trait is implemented by all `'static` types, and can be used for\ndynamic typing"],[10,"get_type_id","","Get the `TypeId` of `self`",0],[11,"of","core::any","Returns the `TypeId` of the type this generic function has been\ninstantiated with",1],[11,"clone","core::num::wrapping","",2],[11,"cmp","","",2],[11,"partial_cmp","","",2],[11,"lt","","",2],[11,"le","","",2],[11,"gt","","",2],[11,"ge","","",2],[11,"eq","","",2],[11,"ne","","",2],[6,"Output","std::any",""],[11,"add","core::num::wrapping","",2],[6,"Output","std::any",""],[11,"sub","core::num::wrapping","",2],[6,"Output","std::any",""],[11,"mul","core::num::wrapping","",2],[6,"Output","std::any",""],[11,"not","core::num::wrapping","",2],[6,"Output","std::any",""],[11,"bitxor","core::num::wrapping","",2],[6,"Output","std::any",""],[11,"bitor","core::num::wrapping","",2],[6,"Output","std::any",""],[11,"bitand","core::num::wrapping","",2],[6,"Output","std::any",""],[11,"shl","core::num::wrapping","",2],[6,"Output","std::any",""],[11,"shr","core::num::wrapping","",2],[11,"fmt","core::num","",3],[11,"eq","","",3],[11,"ne","","",3],[6,"Err","std::any",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[11,"eq","core::num","",4],[11,"ne","","",4],[11,"clone","","",4],[11,"fmt","","",4],[11,"eq","","",5],[11,"ne","","",5],[11,"clone","","",5],[11,"fmt","","",5],[11,"fmt","","",4],[11,"description","","",4],[11,"eq","","",6],[11,"ne","","",6],[11,"clone","","",6],[11,"fmt","","",6],[11,"eq","","",7],[11,"ne","","",7],[11,"clone","","",7],[11,"fmt","","",7],[11,"fmt","","",6],[11,"description","","",6],[11,"hash","core::nonzero","",8],[11,"fmt","","",8],[11,"partial_cmp","","",8],[11,"lt","","",8],[11,"le","","",8],[11,"gt","","",8],[11,"ge","","",8],[11,"cmp","","",8],[11,"eq","","",8],[11,"ne","","",8],[11,"clone","","",8],[11,"new","","Create an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually \"non-zero\".",8],[6,"Target","std::any",""],[11,"deref","core::nonzero","",8],[6,"Target","std::any",""],[6,"Target","",""],[6,"Target","",""],[11,"new","core::ptr","Create a new `Unique`.",9],[11,"get","","Dereference the content.",9],[11,"get_mut","","Mutably dereference the content.",9],[6,"Target","std::any",""],[11,"deref","core::ptr","",9],[11,"cmp","core::marker","",10],[11,"partial_cmp","","",10],[11,"lt","","",10],[11,"le","","",10],[11,"gt","","",10],[11,"ge","","",10],[11,"eq","","",10],[11,"ne","","",10],[11,"clone","","",10],[11,"cmp","","",11],[11,"partial_cmp","","",11],[11,"lt","","",11],[11,"le","","",11],[11,"gt","","",11],[11,"ge","","",11],[11,"eq","","",11],[11,"ne","","",11],[11,"clone","","",11],[11,"hash","","",12],[11,"eq","","",12],[11,"partial_cmp","","",12],[11,"cmp","","",12],[11,"clone","","",12],[6,"Output","std::any",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[11,"eq","core::ops","",13],[11,"ne","","",13],[11,"clone","","",13],[11,"fmt","","",13],[11,"eq","","",14],[11,"ne","","",14],[11,"clone","","",14],[11,"fmt","","",14],[11,"eq","","",15],[11,"ne","","",15],[11,"clone","","",15],[11,"fmt","","",15],[11,"eq","","",16],[11,"ne","","",16],[11,"clone","","",16],[11,"fmt","","",16],[6,"Target","std::any",""],[6,"Target","",""],[6,"Output","",""],[6,"Output","",""],[11,"fmt","core::cmp","",17],[11,"eq","","",17],[11,"ne","","",17],[11,"clone","","",17],[11,"reverse","","Reverse the `Ordering`.",17],[11,"cmp","","",17],[11,"partial_cmp","","",17],[11,"is","std","Returns true if the boxed type is the same as `T`",0],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",0],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",0],[11,"hash","core::any","",1],[11,"fmt","","",1],[11,"eq","","",1],[11,"ne","","",1],[11,"clone","","",1],[11,"new","core::atomic","Creates a new `AtomicBool`.",18],[11,"load","","Loads a value from the bool.",18],[11,"store","","Stores a value into the bool.",18],[11,"swap","","Stores a value into the bool, returning the old value.",18],[11,"compare_and_swap","","Stores a value into the bool if the current value is the same as the expected value.",18],[11,"fetch_and","","Logical \"and\" with a boolean value.",18],[11,"fetch_nand","","Logical \"nand\" with a boolean value.",18],[11,"fetch_or","","Logical \"or\" with a boolean value.",18],[11,"fetch_xor","","Logical \"xor\" with a boolean value.",18],[11,"new","","Creates a new `AtomicIsize`.",19],[11,"load","","Loads a value from the isize.",19],[11,"store","","Stores a value into the isize.",19],[11,"swap","","Stores a value into the isize, returning the old value.",19],[11,"compare_and_swap","","Stores a value into the isize if the current value is the same as the expected value.",19],[11,"fetch_add","","Add an isize to the current value, returning the previous value.",19],[11,"fetch_sub","","Subtract an isize from the current value, returning the previous value.",19],[11,"fetch_and","","Bitwise and with the current isize, returning the previous value.",19],[11,"fetch_or","","Bitwise or with the current isize, returning the previous value.",19],[11,"fetch_xor","","Bitwise xor with the current isize, returning the previous value.",19],[11,"new","","Creates a new `AtomicUsize`.",20],[11,"load","","Loads a value from the usize.",20],[11,"store","","Stores a value into the usize.",20],[11,"swap","","Stores a value into the usize, returning the old value.",20],[11,"compare_and_swap","","Stores a value into the usize if the current value is the same as the expected value.",20],[11,"fetch_add","","Add to the current usize, returning the previous value.",20],[11,"fetch_sub","","Subtract from the current usize, returning the previous value.",20],[11,"fetch_and","","Bitwise and with the current usize, returning the previous value.",20],[11,"fetch_or","","Bitwise or with the current usize, returning the previous value.",20],[11,"fetch_xor","","Bitwise xor with the current usize, returning the previous value.",20],[11,"new","","Creates a new `AtomicPtr`.",21],[11,"load","","Loads a value from the pointer.",21],[11,"store","","Stores a value into the pointer.",21],[11,"swap","","Stores a value into the pointer, returning the old value.",21],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the expected value.",21],[11,"new","","",22],[11,"load","","",22],[11,"store","","",22],[11,"swap","","",22],[11,"compare_and_swap","","",22],[11,"fetch_add","","",22],[11,"fetch_sub","","",22],[11,"fetch_and","","",22],[11,"fetch_or","","",22],[11,"fetch_xor","","",22],[11,"new","","",23],[11,"load","","",23],[11,"store","","",23],[11,"swap","","",23],[11,"compare_and_swap","","",23],[11,"fetch_add","","",23],[11,"fetch_sub","","",23],[11,"fetch_and","","",23],[11,"fetch_or","","",23],[11,"fetch_xor","","",23],[11,"new","core::cell","Creates a new `Cell` containing the given value.",24],[11,"get","","Returns a copy of the contained value.",24],[11,"set","","Sets the contained value.",24],[11,"as_unsafe_cell","","Get a reference to the underlying `UnsafeCell`.",24],[11,"clone","","",24],[11,"default","","",24],[11,"eq","","",24],[11,"fmt","","",25],[11,"eq","","",25],[11,"ne","","",25],[11,"clone","","",25],[11,"new","","Creates a new `RefCell` containing `value`.",26],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",26],[11,"borrow_state","","Query the current state of this `RefCell`",26],[11,"try_borrow","","Attempts to immutably borrow the wrapped value.",26],[11,"borrow","","Immutably borrows the wrapped value.",26],[11,"try_borrow_mut","","Mutably borrows the wrapped value.",26],[11,"borrow_mut","","Mutably borrows the wrapped value.",26],[11,"as_unsafe_cell","","Get a reference to the underlying `UnsafeCell`.",26],[11,"clone","","",26],[11,"default","","",26],[11,"eq","","",26],[11,"drop","","",27],[11,"clone","","",27],[6,"Target","std::any",""],[11,"deref","core::cell","",28],[11,"drop","","",29],[6,"Target","std::any",""],[11,"deref","core::cell","",30],[11,"deref_mut","","",30],[11,"new","","Construct a new instance of `UnsafeCell` which will wrap the specified\nvalue.",31],[11,"get","","Gets a mutable pointer to the wrapped value.",31],[11,"into_inner","","Unwraps the value",31],[11,"clone","core::char","",32],[11,"clone","","",33],[6,"Item","std::any",""],[11,"next","core::char","",32],[11,"clone","","",34],[11,"clone","","",35],[6,"Item","std::any",""],[11,"next","core::char","",34],[11,"drop","core::finally","",36],[6,"Item","std::any",""],[6,"Item","",""],[6,"IntoIter","",""],[11,"clone","core::iter","",37],[6,"Item","std::any",""],[11,"next","core::iter","",37],[11,"size_hint","","",37],[11,"next_back","","",37],[11,"indexable","","",37],[11,"idx","","",37],[11,"fmt","","",38],[11,"eq","","",38],[11,"ne","","",38],[11,"clone","","",38],[11,"into_option","","`into_option` creates an `Option` of type `(T,T)`. The returned `Option` has variant\n`None` if and only if the `MinMaxResult` has variant `NoElements`. Otherwise variant\n`Some(x,y)` is returned where `x <= y`. If `MinMaxResult` has variant `OneElement(x)`,\nperforming this operation will make one clone of `x`.",38],[11,"clone","","",39],[6,"Item","std::any",""],[11,"next","core::iter","",39],[11,"size_hint","","",39],[11,"next_back","","",39],[11,"indexable","","",39],[11,"idx","","",39],[11,"clone","","",40],[6,"Item","std::any",""],[11,"next","core::iter","",40],[11,"size_hint","","",40],[11,"indexable","","",40],[11,"idx","","",40],[11,"clone","","",41],[6,"Item","std::any",""],[11,"next","core::iter","",41],[11,"size_hint","","",41],[11,"next_back","","",41],[11,"indexable","","",41],[11,"idx","","",41],[11,"clone","","",42],[6,"Item","std::any",""],[11,"next","core::iter","",42],[11,"size_hint","","",42],[11,"next_back","","",42],[11,"indexable","","",42],[11,"idx","","",42],[11,"clone","","",43],[6,"Item","std::any",""],[11,"next","core::iter","",43],[11,"size_hint","","",43],[11,"next_back","","",43],[11,"indexable","","",43],[11,"idx","","",43],[11,"clone","","",44],[6,"Item","std::any",""],[11,"next","core::iter","",44],[11,"size_hint","","",44],[11,"next_back","","",44],[11,"clone","","",45],[6,"Item","std::any",""],[11,"next","core::iter","",45],[11,"size_hint","","",45],[11,"next_back","","",45],[11,"clone","","",46],[6,"Item","std::any",""],[11,"next","core::iter","",46],[11,"size_hint","","",46],[11,"next_back","","",46],[11,"indexable","","",46],[11,"idx","","",46],[11,"clone","","",47],[6,"Item","std::any",""],[11,"next","core::iter","",47],[11,"size_hint","","",47],[11,"peek","","Return a reference to the next element of the iterator with out\nadvancing it, or None if the iterator is exhausted.",47],[11,"is_empty","","Check whether peekable iterator is empty or not.",47],[11,"clone","","",48],[6,"Item","std::any",""],[11,"next","core::iter","",48],[11,"size_hint","","",48],[11,"clone","","",49],[6,"Item","std::any",""],[11,"next","core::iter","",49],[11,"size_hint","","",49],[11,"clone","","",50],[6,"Item","std::any",""],[11,"next","core::iter","",50],[11,"size_hint","","",50],[11,"indexable","","",50],[11,"idx","","",50],[11,"clone","","",51],[6,"Item","std::any",""],[11,"next","core::iter","",51],[11,"size_hint","","",51],[11,"indexable","","",51],[11,"idx","","",51],[11,"clone","","",52],[6,"Item","std::any",""],[11,"next","core::iter","",52],[11,"size_hint","","",52],[11,"clone","","",53],[6,"Item","std::any",""],[11,"next","core::iter","",53],[11,"size_hint","","",53],[11,"next_back","","",53],[11,"clone","","",54],[6,"Item","std::any",""],[11,"next","core::iter","",54],[11,"size_hint","","",54],[11,"next_back","","",54],[11,"indexable","","",54],[11,"idx","","",54],[11,"reset_fuse","","Resets the fuse such that the next call to .next() or .next_back() will\ncall the underlying iterator again even if it previously returned None.",54],[11,"clone","","",55],[6,"Item","std::any",""],[11,"next","core::iter","",55],[11,"size_hint","","",55],[11,"next_back","","",55],[11,"indexable","","",55],[11,"idx","","",55],[11,"clone","","",56],[11,"new","","Creates a new iterator with the specified closure as the \"iterator\nfunction\" and an initial state to eventually pass to the closure",56],[6,"Item","std::any",""],[11,"next","core::iter","",56],[11,"size_hint","","",56],[11,"clone","","",57],[6,"Item","std::any",""],[11,"next","core::iter","",57],[11,"size_hint","","",57],[11,"clone","","",58],[6,"Item","std::any",""],[11,"next","core::iter","",58],[11,"size_hint","","",58],[11,"next_back","","",58],[11,"clone","","",59],[6,"Item","std::any",""],[11,"next","core::iter","",59],[11,"size_hint","","",59],[11,"next_back","","",59],[11,"clone","","",60],[6,"Item","std::any",""],[11,"next","core::iter","",60],[11,"clone","","",61],[6,"Item","std::any",""],[11,"next","core::iter","",61],[6,"Item","std::any",""],[11,"next","core::ops","",14],[11,"size_hint","","",14],[11,"next_back","","",14],[6,"Item","std::any",""],[11,"next","core::ops","",15],[11,"clone","core::iter","",62],[6,"Item","std::any",""],[11,"next","core::iter","",62],[11,"size_hint","","",62],[11,"next_back","","",62],[11,"indexable","","",62],[11,"idx","","",62],[11,"hash","core::option","",63],[11,"fmt","","",63],[11,"cmp","","",63],[11,"partial_cmp","","",63],[11,"lt","","",63],[11,"le","","",63],[11,"gt","","",63],[11,"ge","","",63],[11,"eq","","",63],[11,"ne","","",63],[11,"clone","","",63],[11,"is_some","","Returns `true` if the option is a `Some` value",63],[11,"is_none","","Returns `true` if the option is a `None` value",63],[11,"as_ref","","Convert from `Option<T>` to `Option<&T>`",63],[11,"as_mut","","Convert from `Option<T>` to `Option<&mut T>`",63],[11,"as_mut_slice","","Convert from `Option<T>` to `&mut [T]` (without copying)",63],[11,"expect","","Unwraps an option, yielding the content of a `Some`",63],[11,"unwrap","","Returns the inner `T` of a `Some(T)`.",63],[11,"unwrap_or","","Returns the contained value or a default.",63],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",63],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value",63],[11,"map_or","","Applies a function to the contained value or returns a default.",63],[11,"map_or_else","","Applies a function to the contained value or computes a default.",63],[11,"ok_or","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",63],[11,"ok_or_else","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",63],[11,"iter","","Returns an iterator over the possibly contained value.",63],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",63],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",63],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",63],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",63],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",63],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",63],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",63],[11,"cloned","","Maps an Option<D> to an Option<T> by dereffing and cloning the contents of the Option.\nUseful for converting an Option<&T> to an Option<T>.",63],[11,"unwrap_or_default","","Returns the contained value or a default",63],[11,"as_slice","","Convert from `Option<T>` to `&[T]` (without copying)",63],[11,"default","","",63],[11,"clone","","",64],[6,"Item","std::any",""],[11,"next","core::option","",64],[11,"size_hint","","",64],[11,"next_back","","",64],[6,"Item","std::any",""],[11,"next","core::option","",65],[11,"size_hint","","",65],[11,"next_back","","",65],[11,"clone","","",65],[6,"Item","std::any",""],[11,"next","core::option","",66],[11,"size_hint","","",66],[11,"next_back","","",66],[6,"Item","std::any",""],[11,"next","core::option","",67],[11,"size_hint","","",67],[11,"next_back","","",67],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",63],[11,"hash","core::result","",68],[11,"fmt","","",68],[11,"cmp","","",68],[11,"partial_cmp","","",68],[11,"lt","","",68],[11,"le","","",68],[11,"gt","","",68],[11,"ge","","",68],[11,"eq","","",68],[11,"ne","","",68],[11,"clone","","",68],[11,"is_ok","","Returns true if the result is `Ok`",68],[11,"is_err","","Returns true if the result is `Err`",68],[11,"ok","","Convert from `Result<T, E>` to `Option<T>`",68],[11,"err","","Convert from `Result<T, E>` to `Option<E>`",68],[11,"as_ref","","Convert from `Result<T, E>` to `Result<&T, &E>`",68],[11,"as_mut","","Convert from `Result<T, E>` to `Result<&mut T, &mut E>`",68],[11,"as_mut_slice","","Convert from `Result<T, E>` to `&mut [T]` (without copying)",68],[11,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to an\ncontained `Ok` value, leaving an `Err` value untouched.",68],[11,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to an\ncontained `Err` value, leaving an `Ok` value untouched.",68],[11,"iter","","Returns an iterator over the possibly contained value.",68],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",68],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",68],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",68],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",68],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",68],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",68],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",68],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",68],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",68],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",68],[11,"as_slice","","Convert from `Result<T, E>` to `&[T]` (without copying)",68],[6,"Item","std::any",""],[11,"next","core::result","",69],[11,"size_hint","","",69],[11,"next_back","","",69],[11,"clone","","",69],[6,"Item","std::any",""],[11,"next","core::result","",70],[11,"size_hint","","",70],[11,"next_back","","",70],[6,"Item","std::any",""],[11,"next","core::result","",71],[11,"size_hint","","",71],[11,"next_back","","",71],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",68],[11,"fmt","core::simd","",72],[11,"fmt","","",73],[11,"fmt","","",74],[11,"fmt","","",75],[11,"fmt","","",76],[11,"fmt","","",77],[11,"fmt","","",78],[11,"fmt","","",79],[11,"fmt","","",80],[11,"fmt","","",81],[6,"Item","std::any",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Output","",""],[11,"index","core::slice","",82],[6,"Output","std::any",""],[11,"index","core::slice","",82],[6,"Output","std::any",""],[11,"index","core::slice","",82],[6,"Output","std::any",""],[11,"index","core::slice","",82],[11,"as_slice","","View the underlying data as a subslice of the original data.",82],[6,"Item","std::any",""],[11,"next","core::slice","",82],[11,"size_hint","","",82],[11,"next_back","","",82],[11,"clone","","",82],[11,"indexable","","",82],[11,"idx","","",82],[6,"Output","std::any",""],[11,"index","core::slice","",83],[6,"Output","std::any",""],[11,"index","core::slice","",83],[6,"Output","std::any",""],[11,"index","core::slice","",83],[6,"Output","std::any",""],[11,"index","core::slice","",83],[11,"index_mut","","",83],[11,"index_mut","","",83],[11,"index_mut","","",83],[11,"index_mut","","",83],[11,"into_slice","","View the underlying data as a subslice of the original data.",83],[6,"Item","std::any",""],[11,"next","core::slice","",83],[11,"size_hint","","",83],[11,"next_back","","",83],[11,"clone","","",84],[6,"Item","std::any",""],[11,"next","core::slice","",84],[11,"size_hint","","",84],[11,"next_back","","",84],[11,"finish","","",84],[11,"finish","","",85],[6,"Item","std::any",""],[11,"next","core::slice","",85],[11,"size_hint","","",85],[11,"next_back","","",85],[6,"Item","std::any",""],[11,"next","core::slice","",86],[11,"size_hint","","",86],[6,"Item","std::any",""],[11,"next","core::slice","",87],[11,"size_hint","","",87],[6,"Item","std::any",""],[11,"next","core::slice","",88],[11,"size_hint","","",88],[6,"Item","std::any",""],[11,"next","core::slice","",89],[11,"size_hint","","",89],[6,"Item","std::any",""],[11,"next","core::slice","",90],[11,"size_hint","","",90],[11,"clone","","",91],[6,"Item","std::any",""],[11,"next","core::slice","",91],[11,"size_hint","","",91],[11,"next_back","","",91],[11,"indexable","","",91],[11,"idx","","",91],[11,"clone","","",92],[6,"Item","std::any",""],[11,"next","core::slice","",92],[11,"size_hint","","",92],[11,"next_back","","",92],[11,"indexable","","",92],[11,"idx","","",92],[6,"Item","std::any",""],[11,"next","core::slice","",93],[11,"size_hint","","",93],[11,"next_back","","",93],[11,"fmt","core::str::pattern","",94],[11,"eq","","",94],[11,"ne","","",94],[11,"clone","","",94],[6,"Searcher","std::any",""],[11,"into_searcher","core::str::pattern","",95],[11,"haystack","","",96],[11,"next","","",96],[11,"next_back","","",96],[11,"clone","","",97],[6,"Searcher","std::any",""],[11,"haystack","core::str::pattern","",97],[11,"next","","",97],[11,"next_back","","",97],[6,"Searcher","std::any",""],[6,"Searcher","",""],[6,"Searcher","",""],[6,"Searcher","",""],[6,"Err","",""],[11,"eq","core::str","",98],[11,"ne","","",98],[11,"clone","","",98],[11,"fmt","","",98],[11,"fmt","","",98],[11,"description","","",98],[11,"fmt","","",99],[11,"clone","","",99],[11,"eq","","",99],[11,"ne","","",99],[11,"description","","",99],[11,"fmt","","",99],[11,"clone","","",100],[6,"Item","std::any",""],[11,"next","core::str","",100],[11,"size_hint","","",100],[11,"next_back","","",100],[11,"clone","","",101],[6,"Item","std::any",""],[11,"next","core::str","",101],[11,"size_hint","","",101],[11,"next_back","","",101],[11,"clone","","",102],[6,"Item","std::any",""],[11,"next","core::str","",102],[11,"size_hint","","",102],[11,"next_back","","",102],[11,"len","","",102],[11,"clone","","",103],[6,"Output","std::any",""],[11,"call","core::str","",103],[6,"Item","std::any",""],[11,"next","core::str","",104],[11,"next_back","","",104],[6,"Item","std::any",""],[11,"next","core::str","",105],[11,"clone","","",106],[11,"clone","","",107],[11,"clone","","",108],[6,"Item","std::any",""],[11,"next","core::str","",109],[6,"Item","std::any",""],[11,"next","core::str","",110],[6,"Output","std::any",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Item","",""],[11,"next","core::str","",111],[11,"next_back","","",111],[6,"Item","std::any",""],[11,"next","core::str","",112],[11,"size_hint","","",112],[11,"next_back","","",112],[6,"Item","std::any",""],[11,"next","core::str","",113],[11,"size_hint","","",113],[6,"Item","std::any",""],[11,"next","core::str","",114],[11,"size_hint","","",114],[6,"Item","std::any",""],[11,"next","core::str","",115],[11,"size_hint","","",115],[11,"next_back","","",115],[6,"Item","std::any",""],[11,"next","core::str","",116],[11,"size_hint","","",116],[11,"next_back","","",116],[11,"new","core::hash::sip","Creates a new `SipHasher` with the two initial keys set to 0.",117],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",117],[11,"result","","Returns the computed hash.",117],[11,"write","","",117],[11,"finish","","",117],[11,"clone","","",117],[11,"default","","",117],[11,"eq","core::fmt::num","",118],[11,"ne","","",118],[11,"clone","","",118],[11,"eq","","",119],[11,"ne","","",119],[11,"clone","","",119],[11,"eq","","",120],[11,"ne","","",120],[11,"clone","","",120],[11,"eq","","",121],[11,"ne","","",121],[11,"clone","","",121],[11,"eq","","",122],[11,"ne","","",122],[11,"clone","","",122],[11,"eq","","",123],[11,"ne","","",123],[11,"clone","","",123],[11,"fmt","","",124],[11,"fmt","","",124],[11,"fmt","","",124],[11,"fmt","","",124],[11,"fmt","","",124],[11,"fmt","","",124],[11,"fmt","","",124],[11,"fmt","","",124],[11,"fmt","","",124],[11,"fmt","","",124],[11,"fmt","","",124],[11,"fmt","","",124],[11,"fmt","","",124],[11,"fmt","","",124],[11,"fmt","","",124],[11,"fmt","","",124],[11,"fmt","","",124],[11,"fmt","","",124],[11,"fmt","","",124],[11,"fmt","","",124],[11,"eq","core::fmt::rt::v1","",125],[11,"ne","","",125],[11,"fmt","core::fmt","",126],[11,"fmt","","",127],[11,"fmt","","",127],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",128],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",128],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",128],[11,"write_fmt","","Writes some formatted information into this instance",128],[11,"flags","","Flags for formatting (packed version of rt::Flag)",128],[11,"fill","","Character used as 'fill' whenever there is alignment",128],[11,"align","","Flag indicating what form of alignment was requested",128],[11,"width","","Optionally specified integer width that the output should be",128],[11,"precision","","Optionally specified precision for numeric types",128],[11,"fmt","","",126],[11,"fmt","core::marker","",12],[11,"fmt","core::cell","",24],[11,"fmt","","",26],[11,"fmt","","",28],[11,"fmt","","",30],[6,"Item","std::any",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[3,"TypeId","","A `TypeId` represents a globally unique identifier for a type."],[0,"cell","std","Shareable mutable containers."],[3,"Cell","std::cell","A mutable memory location that admits only `Copy` data."],[3,"RefCell","","A mutable memory location with dynamically checked borrow rules"],[4,"BorrowState","","An enumeration of values returned from the `state` method on a `RefCell<T>`."],[13,"Reading","","The cell is currently being read, there is at least one active `borrow`.",25],[13,"Writing","","The cell is currently being written to, there is an active `borrow_mut`.",25],[13,"Unused","","There are no outstanding borrows on this cell.",25],[3,"Ref","","Wraps a borrowed reference to a value in a `RefCell` box.\nA wrapper type for an immutably borrowed value from a `RefCell<T>`."],[5,"clone_ref","","Copy a `Ref`."],[3,"RefMut","","A wrapper type for a mutably borrowed value from a `RefCell<T>`."],[3,"UnsafeCell","","The core primitive for interior mutability in Rust."],[12,"value","","Wrapped value",31],[0,"clone","std","The `Clone` trait for types that cannot be 'implicitly copied'"],[8,"Clone","std::clone","A common trait for cloning an object."],[10,"clone","","Returns a copy of the value.",129],[10,"clone_from","","Perform copy-assignment from `source`.",129],[0,"cmp","std","Functionality for ordering and comparison."],[8,"PartialEq","std::cmp","Trait for equality comparisons which are [partial equivalence relations](\nhttp://en.wikipedia.org/wiki/Partial_equivalence_relation)."],[10,"eq","","This method tests for `self` and `other` values to be equal, and is used by `==`.",130],[10,"ne","","This method tests for `!=`.",130],[8,"Eq","","Trait for equality comparisons which are [equivalence relations](\nhttps://en.wikipedia.org/wiki/Equivalence_relation)."],[4,"Ordering","","An `Ordering` is the result of a comparison between two values."],[13,"Less","","An ordering where a compared value is less [than another].",17],[13,"Equal","","An ordering where a compared value is equal [to another].",17],[13,"Greater","","An ordering where a compared value is greater [than another].",17],[8,"Ord","","Trait for types that form a [total order](https://en.wikipedia.org/wiki/Total_order)."],[10,"cmp","","This method returns an `Ordering` between `self` and `other`.",131],[8,"PartialOrd","","Trait for values that can be compared for a sort-order."],[10,"partial_cmp","","This method returns an ordering between `self` and `other` values if one exists.",132],[10,"lt","","This method tests less than (for `self` and `other`) and is used by the `<` operator.",132],[10,"le","","This method tests less than or equal to (for `self` and `other`) and is used by the `<=`\noperator.",132],[10,"gt","","This method tests greater than (for `self` and `other`) and is used by the `>` operator.",132],[10,"ge","","This method tests greater than or equal to (for `self` and `other`) and is used by the `>=`\noperator.",132],[5,"min","","Compare and return the minimum of two values."],[5,"max","","Compare and return the maximum of two values."],[5,"partial_min","","Compare and return the minimum of two values if there is one."],[5,"partial_max","","Compare and return the maximum of two values if there is one."],[0,"default","std","The `Default` trait for types which may have meaningful default values."],[8,"Default","std::default","A trait that types which have a useful default value should implement."],[10,"default","","Returns the \"default value\" for a type.",133],[0,"finally","std","The Finally trait provides a method, `finally` on\nstack closures that emulates Java-style try/finally blocks."],[8,"Finally","std::finally","A trait for executing a destructor unconditionally after a block of code,\nregardless of whether the blocked fails."],[10,"finally","","Executes this object, unconditionally running `dtor` after this block of\ncode has run.",134],[5,"try_finally","","The most general form of the `finally` functions. The function\n`try_fn` will be invoked first; whether or not it panics, the\nfunction `finally_fn` will be invoked next. The two parameters\n`mutate` and `drop` are used to thread state through the two\nclosures. `mutate` is used for any shared, mutable state that both\nclosures require access to; `drop` is used for any state that the\n`try_fn` requires ownership of."],[0,"hash","std","Generic hashing support."],[8,"Hash","std::hash","A hashable type."],[10,"hash","","Feeds this value into the state given, updating the hasher as necessary.",135],[10,"hash_slice","","Feeds a slice of this type into the state provided.",135],[8,"Hasher","","A trait which represents the ability to hash an arbitrary stream of bytes."],[10,"finish","","Completes a round of hashing, producing the output hash generated.",136],[10,"write","","Writes some data into this `Hasher`",136],[10,"write_u8","","Write a single `u8` into this hasher",136],[10,"write_u16","","Write a single `u16` into this hasher.",136],[10,"write_u32","","Write a single `u32` into this hasher.",136],[10,"write_u64","","Write a single `u64` into this hasher.",136],[10,"write_usize","","Write a single `usize` into this hasher.",136],[10,"write_i8","","Write a single `i8` into this hasher.",136],[10,"write_i16","","Write a single `i16` into this hasher.",136],[10,"write_i32","","Write a single `i32` into this hasher.",136],[10,"write_i64","","Write a single `i64` into this hasher.",136],[10,"write_isize","","Write a single `isize` into this hasher.",136],[5,"hash","","Hash a value with the default SipHasher algorithm (two initial keys of 0)."],[3,"SipHasher","","An implementation of SipHash 2-4."],[0,"intrinsics","std","rustc compiler intrinsics."],[6,"GlueFn","std::intrinsics",""],[3,"TyDesc","",""],[12,"size","","",137],[12,"align","","",137],[12,"drop_glue","","",137],[12,"name","","",137],[5,"atomic_cxchg","",""],[5,"atomic_cxchg_acq","",""],[5,"atomic_cxchg_rel","",""],[5,"atomic_cxchg_acqrel","",""],[5,"atomic_cxchg_relaxed","",""],[5,"atomic_load","",""],[5,"atomic_load_acq","",""],[5,"atomic_load_relaxed","",""],[5,"atomic_load_unordered","",""],[5,"atomic_store","",""],[5,"atomic_store_rel","",""],[5,"atomic_store_relaxed","",""],[5,"atomic_store_unordered","",""],[5,"atomic_xchg","",""],[5,"atomic_xchg_acq","",""],[5,"atomic_xchg_rel","",""],[5,"atomic_xchg_acqrel","",""],[5,"atomic_xchg_relaxed","",""],[5,"atomic_xadd","",""],[5,"atomic_xadd_acq","",""],[5,"atomic_xadd_rel","",""],[5,"atomic_xadd_acqrel","",""],[5,"atomic_xadd_relaxed","",""],[5,"atomic_xsub","",""],[5,"atomic_xsub_acq","",""],[5,"atomic_xsub_rel","",""],[5,"atomic_xsub_acqrel","",""],[5,"atomic_xsub_relaxed","",""],[5,"atomic_and","",""],[5,"atomic_and_acq","",""],[5,"atomic_and_rel","",""],[5,"atomic_and_acqrel","",""],[5,"atomic_and_relaxed","",""],[5,"atomic_nand","",""],[5,"atomic_nand_acq","",""],[5,"atomic_nand_rel","",""],[5,"atomic_nand_acqrel","",""],[5,"atomic_nand_relaxed","",""],[5,"atomic_or","",""],[5,"atomic_or_acq","",""],[5,"atomic_or_rel","",""],[5,"atomic_or_acqrel","",""],[5,"atomic_or_relaxed","",""],[5,"atomic_xor","",""],[5,"atomic_xor_acq","",""],[5,"atomic_xor_rel","",""],[5,"atomic_xor_acqrel","",""],[5,"atomic_xor_relaxed","",""],[5,"atomic_max","",""],[5,"atomic_max_acq","",""],[5,"atomic_max_rel","",""],[5,"atomic_max_acqrel","",""],[5,"atomic_max_relaxed","",""],[5,"atomic_min","",""],[5,"atomic_min_acq","",""],[5,"atomic_min_rel","",""],[5,"atomic_min_acqrel","",""],[5,"atomic_min_relaxed","",""],[5,"atomic_umin","",""],[5,"atomic_umin_acq","",""],[5,"atomic_umin_rel","",""],[5,"atomic_umin_acqrel","",""],[5,"atomic_umin_relaxed","",""],[5,"atomic_umax","",""],[5,"atomic_umax_acq","",""],[5,"atomic_umax_rel","",""],[5,"atomic_umax_acqrel","",""],[5,"atomic_umax_relaxed","",""],[5,"atomic_fence","",""],[5,"atomic_fence_acq","",""],[5,"atomic_fence_rel","",""],[5,"atomic_fence_acqrel","",""],[5,"abort","","Abort the execution of the process."],[5,"unreachable","","Tell LLVM that this point in the code is not reachable,\nenabling further optimizations."],[5,"assume","","Inform the optimizer that a condition is always true.\nIf the condition is false, the behavior is undefined."],[5,"breakpoint","","Execute a breakpoint trap, for inspection by a debugger."],[5,"size_of","","The size of a type in bytes."],[5,"move_val_init","","Move a value to an uninitialized memory location."],[5,"min_align_of","",""],[5,"pref_align_of","",""],[5,"get_tydesc","","Get a static pointer to a type descriptor."],[5,"type_id","","Gets an identifier which is globally unique to the specified type. This\nfunction will return the same value for a type regardless of whichever\ncrate it is invoked in."],[5,"init","","Create a value initialized to zero."],[5,"uninit","","Create an uninitialized value."],[5,"forget","","Move a value out of scope without running drop glue."],[5,"transmute","","Unsafely transforms a value of one type into a value of another type."],[5,"return_address","","Gives the address for the return value of the enclosing function."],[5,"needs_drop","","Returns `true` if the actual type given as `T` requires drop\nglue; returns `false` if the actual type provided for `T`\nimplements `Copy`."],[5,"owns_managed","","Returns `true` if a type is managed (will be allocated on the local heap)"],[5,"offset","","Calculates the offset from a pointer. The offset *must* be in-bounds of\nthe object, or one-byte-past-the-end. An arithmetic overflow is also\nundefined behaviour."],[5,"copy_nonoverlapping_memory","","Copies `count * size_of<T>` bytes from `src` to `dst`. The source\nand destination may *not* overlap."],[5,"copy_memory","","Copies `count * size_of<T>` bytes from `src` to `dst`. The source\nand destination may overlap."],[5,"set_memory","","Invokes memset on the specified pointer, setting `count * size_of::<T>()`\nbytes of memory starting at `dst` to `c`."],[5,"volatile_copy_nonoverlapping_memory","","Equivalent to the appropriate `llvm.memcpy.p0i8.0i8.*` intrinsic, with\na size of `count` * `size_of::<T>()` and an alignment of\n`min_align_of::<T>()`"],[5,"volatile_copy_memory","","Equivalent to the appropriate `llvm.memmove.p0i8.0i8.*` intrinsic, with\na size of `count` * `size_of::<T>()` and an alignment of\n`min_align_of::<T>()`"],[5,"volatile_set_memory","","Equivalent to the appropriate `llvm.memset.p0i8.*` intrinsic, with a\nsize of `count` * `size_of::<T>()` and an alignment of\n`min_align_of::<T>()`."],[5,"volatile_load","","Perform a volatile load from the `src` pointer."],[5,"volatile_store","","Perform a volatile store to the `dst` pointer."],[5,"sqrtf32","","Returns the square root of an `f32`"],[5,"sqrtf64","","Returns the square root of an `f64`"],[5,"powif32","","Raises an `f32` to an integer power."],[5,"powif64","","Raises an `f64` to an integer power."],[5,"sinf32","","Returns the sine of an `f32`."],[5,"sinf64","","Returns the sine of an `f64`."],[5,"cosf32","","Returns the cosine of an `f32`."],[5,"cosf64","","Returns the cosine of an `f64`."],[5,"powf32","","Raises an `f32` to an `f32` power."],[5,"powf64","","Raises an `f64` to an `f64` power."],[5,"expf32","","Returns the exponential of an `f32`."],[5,"expf64","","Returns the exponential of an `f64`."],[5,"exp2f32","","Returns 2 raised to the power of an `f32`."],[5,"exp2f64","","Returns 2 raised to the power of an `f64`."],[5,"logf32","","Returns the natural logarithm of an `f32`."],[5,"logf64","","Returns the natural logarithm of an `f64`."],[5,"log10f32","","Returns the base 10 logarithm of an `f32`."],[5,"log10f64","","Returns the base 10 logarithm of an `f64`."],[5,"log2f32","","Returns the base 2 logarithm of an `f32`."],[5,"log2f64","","Returns the base 2 logarithm of an `f64`."],[5,"fmaf32","","Returns `a * b + c` for `f32` values."],[5,"fmaf64","","Returns `a * b + c` for `f64` values."],[5,"fabsf32","","Returns the absolute value of an `f32`."],[5,"fabsf64","","Returns the absolute value of an `f64`."],[5,"copysignf32","","Copies the sign from `y` to `x` for `f32` values."],[5,"copysignf64","","Copies the sign from `y` to `x` for `f64` values."],[5,"floorf32","","Returns the largest integer less than or equal to an `f32`."],[5,"floorf64","","Returns the largest integer less than or equal to an `f64`."],[5,"ceilf32","","Returns the smallest integer greater than or equal to an `f32`."],[5,"ceilf64","","Returns the smallest integer greater than or equal to an `f64`."],[5,"truncf32","","Returns the integer part of an `f32`."],[5,"truncf64","","Returns the integer part of an `f64`."],[5,"rintf32","","Returns the nearest integer to an `f32`. May raise an inexact floating-point exception\nif the argument is not an integer."],[5,"rintf64","","Returns the nearest integer to an `f64`. May raise an inexact floating-point exception\nif the argument is not an integer."],[5,"nearbyintf32","","Returns the nearest integer to an `f32`."],[5,"nearbyintf64","","Returns the nearest integer to an `f64`."],[5,"roundf32","","Returns the nearest integer to an `f32`. Rounds half-way cases away from zero."],[5,"roundf64","","Returns the nearest integer to an `f64`. Rounds half-way cases away from zero."],[5,"ctpop8","","Returns the number of bits set in a `u8`."],[5,"ctpop16","","Returns the number of bits set in a `u16`."],[5,"ctpop32","","Returns the number of bits set in a `u32`."],[5,"ctpop64","","Returns the number of bits set in a `u64`."],[5,"ctlz8","","Returns the number of leading bits unset in a `u8`."],[5,"ctlz16","","Returns the number of leading bits unset in a `u16`."],[5,"ctlz32","","Returns the number of leading bits unset in a `u32`."],[5,"ctlz64","","Returns the number of leading bits unset in a `u64`."],[5,"cttz8","","Returns the number of trailing bits unset in a `u8`."],[5,"cttz16","","Returns the number of trailing bits unset in a `u16`."],[5,"cttz32","","Returns the number of trailing bits unset in a `u32`."],[5,"cttz64","","Returns the number of trailing bits unset in a `u64`."],[5,"bswap16","","Reverses the bytes in a `u16`."],[5,"bswap32","","Reverses the bytes in a `u32`."],[5,"bswap64","","Reverses the bytes in a `u64`."],[5,"i8_add_with_overflow","","Performs checked `i8` addition."],[5,"i16_add_with_overflow","","Performs checked `i16` addition."],[5,"i32_add_with_overflow","","Performs checked `i32` addition."],[5,"i64_add_with_overflow","","Performs checked `i64` addition."],[5,"u8_add_with_overflow","","Performs checked `u8` addition."],[5,"u16_add_with_overflow","","Performs checked `u16` addition."],[5,"u32_add_with_overflow","","Performs checked `u32` addition."],[5,"u64_add_with_overflow","","Performs checked `u64` addition."],[5,"i8_sub_with_overflow","","Performs checked `i8` subtraction."],[5,"i16_sub_with_overflow","","Performs checked `i16` subtraction."],[5,"i32_sub_with_overflow","","Performs checked `i32` subtraction."],[5,"i64_sub_with_overflow","","Performs checked `i64` subtraction."],[5,"u8_sub_with_overflow","","Performs checked `u8` subtraction."],[5,"u16_sub_with_overflow","","Performs checked `u16` subtraction."],[5,"u32_sub_with_overflow","","Performs checked `u32` subtraction."],[5,"u64_sub_with_overflow","","Performs checked `u64` subtraction."],[5,"i8_mul_with_overflow","","Performs checked `i8` multiplication."],[5,"i16_mul_with_overflow","","Performs checked `i16` multiplication."],[5,"i32_mul_with_overflow","","Performs checked `i32` multiplication."],[5,"i64_mul_with_overflow","","Performs checked `i64` multiplication."],[5,"u8_mul_with_overflow","","Performs checked `u8` multiplication."],[5,"u16_mul_with_overflow","","Performs checked `u16` multiplication."],[5,"u32_mul_with_overflow","","Performs checked `u32` multiplication."],[5,"u64_mul_with_overflow","","Performs checked `u64` multiplication."],[5,"overflowing_add","","Returns (a + b) mod 2^N, where N is the width of N in bits."],[5,"overflowing_sub","","Returns (a - b) mod 2^N, where N is the width of N in bits."],[5,"overflowing_mul","","Returns (a * b) mod 2^N, where N is the width of N in bits."],[0,"iter","std","Composable external iterators"],[8,"Iterator","std::iter","An interface for dealing with \"external iterators\". These types of iterators\ncan be resumed at any time as all state is stored internally as opposed to\nbeing located on the call stack."],[16,"Item","std::iter::Iterator",""],[10,"next","std::iter","Advance the iterator and return the next value. Return `None` when the end is reached.",138],[10,"size_hint","","Returns a lower and upper bound on the remaining length of the iterator.",138],[8,"FromIterator","","Conversion from an `Iterator`"],[10,"from_iter","","Build a container with elements from something iterable.",139],[8,"IntoIterator","","Conversion into an `Iterator`"],[16,"Item","std::iter::IntoIterator",""],[16,"IntoIter","",""],[10,"into_iter","std::iter","Consumes `Self` and returns an iterator over it",140],[8,"Extend","","A type growable from an `Iterator` implementation"],[10,"extend","","Extend a container with the elements yielded by an arbitrary iterator",141],[8,"IteratorExt","","An extension trait providing numerous methods applicable to all iterators."],[10,"count","","Counts the number of elements in this iterator.",142],[10,"last","","Loops through the entire iterator, returning the last element.",142],[10,"nth","","Loops through `n` iterations, returning the `n`th element of the\niterator.",142],[10,"chain","","Chain this iterator with another, returning a new iterator that will\nfinish iterating over the current iterator, and then iterate\nover the other specified iterator.",142],[10,"zip","","Creates an iterator that iterates over both this and the specified\niterators simultaneously, yielding the two elements as pairs. When\neither iterator returns None, all further invocations of next() will\nreturn None.",142],[10,"map","","Creates a new iterator that will apply the specified function to each\nelement returned by the first, yielding the mapped element instead.",142],[10,"filter","","Creates an iterator that applies the predicate to each element returned\nby this iterator. The only elements that will be yielded are those that\nmake the predicate evaluate to `true`.",142],[10,"filter_map","","Creates an iterator that both filters and maps elements.\nIf the specified function returns None, the element is skipped.\nOtherwise the option is unwrapped and the new value is yielded.",142],[10,"enumerate","","Creates an iterator that yields a pair of the value returned by this\niterator plus the current index of iteration.",142],[10,"peekable","","Creates an iterator that has a `.peek()` method\nthat returns an optional reference to the next element.",142],[10,"skip_while","","Creates an iterator that invokes the predicate on elements\nuntil it returns false. Once the predicate returns false, that\nelement and all further elements are yielded.",142],[10,"take_while","","Creates an iterator that yields elements so long as the predicate\nreturns true. After the predicate returns false for the first time, no\nfurther elements will be yielded.",142],[10,"skip","","Creates an iterator that skips the first `n` elements of this iterator,\nand then yields all further items.",142],[10,"take","","Creates an iterator that yields the first `n` elements of this\niterator.",142],[10,"scan","","Creates a new iterator that behaves in a similar fashion to fold.\nThere is a state which is passed between each iteration and can be\nmutated as necessary. The yielded values from the closure are yielded\nfrom the Scan instance when not None.",142],[10,"flat_map","","Creates an iterator that maps each element to an iterator,\nand yields the elements of the produced iterators.",142],[10,"fuse","","Creates an iterator that yields `None` forever after the underlying\niterator yields `None`. Random-access iterator behavior is not\naffected, only single and double-ended iterator behavior.",142],[10,"inspect","","Creates an iterator that calls a function with a reference to each\nelement before yielding it. This is often useful for debugging an\niterator pipeline.",142],[10,"by_ref","","Creates a wrapper around a mutable reference to the iterator.",142],[10,"collect","","Loops through the entire iterator, collecting all of the elements into\na container implementing `FromIterator`.",142],[10,"partition","","Loops through the entire iterator, collecting all of the elements into\none of two containers, depending on a predicate. The elements of the\nfirst container satisfy the predicate, while the elements of the second\ndo not.",142],[10,"fold","","Performs a fold operation over the entire iterator, returning the\neventual state at the end of the iteration.",142],[10,"all","","Tests whether the predicate holds true for all elements in the iterator.",142],[10,"any","","Tests whether any element of an iterator satisfies the specified predicate.",142],[10,"find","","Returns the first element satisfying the specified predicate.",142],[10,"position","","Return the index of the first element satisfying the specified predicate",142],[10,"rposition","","Return the index of the last element satisfying the specified predicate",142],[10,"max","","Consumes the entire iterator to return the maximum element.",142],[10,"min","","Consumes the entire iterator to return the minimum element.",142],[10,"min_max","","`min_max` finds the minimum and maximum elements in the iterator.",142],[10,"max_by","","Return the element that gives the maximum value from the\nspecified function.",142],[10,"min_by","","Return the element that gives the minimum value from the\nspecified function.",142],[10,"rev","","Change the direction of the iterator",142],[10,"unzip","","Converts an iterator of pairs into a pair of containers.",142],[10,"cloned","","Creates an iterator that clones the elements it yields. Useful for converting an\nIterator<&T> to an Iterator<T>.",142],[10,"cycle","","Repeats an iterator endlessly",142],[10,"reverse_in_place","","Use an iterator to reverse a container in place.",142],[8,"DoubleEndedIterator","","A range iterator able to yield elements from both ends"],[10,"next_back","","Yield an element from the end of the range, returning `None` if the\nrange is empty.",143],[8,"RandomAccessIterator","","An object implementing random access indexing by `usize`"],[10,"indexable","","Return the number of indexable elements. At most `std::usize::MAX`\nelements are indexable, even if the iterator represents a longer range.",144],[10,"idx","","Return an element at an index, or `None` if the index is out of bounds",144],[8,"ExactSizeIterator","","An iterator that knows its exact length"],[10,"len","","Return the exact length of the iterator.",145],[3,"Rev","","An double-ended iterator with the direction inverted"],[8,"AdditiveIterator","","A trait for iterators over elements which can be added together"],[10,"sum","","Iterates over the entire iterator, summing up all the elements",146],[8,"MultiplicativeIterator","","A trait for iterators over elements which can be multiplied together."],[10,"product","","Iterates over the entire iterator, multiplying all the elements",147],[4,"MinMaxResult","","`MinMaxResult` is an enum returned by `min_max`. See `IteratorOrdExt::min_max` for more detail."],[13,"NoElements","","Empty iterator",38],[13,"OneElement","","Iterator with one element, so the minimum and maximum are the same",38],[13,"MinMax","","More than one element in the iterator, the first element is not larger than the second",38],[3,"Cloned","","An iterator that clones the elements of an underlying iterator"],[3,"Cycle","","An iterator that repeats endlessly"],[3,"Chain","","An iterator that strings two iterators together"],[3,"Zip","","An iterator that iterates two other iterators simultaneously"],[3,"Map","","An iterator that maps the values of `iter` with `f`"],[3,"Filter","","An iterator that filters the elements of `iter` with `predicate`"],[3,"FilterMap","","An iterator that uses `f` to both filter and map elements from `iter`"],[3,"Enumerate","","An iterator that yields the current count and the element during iteration"],[3,"Peekable","","An iterator with a `peek()` that returns an optional reference to the next element."],[3,"SkipWhile","","An iterator that rejects elements while `predicate` is true"],[3,"TakeWhile","","An iterator that only accepts elements while `predicate` is true"],[3,"Skip","","An iterator that skips over `n` elements of `iter`."],[3,"Take","","An iterator that only iterates over the first `n` iterations of `iter`."],[3,"Scan","","An iterator to maintain state while iterating another iterator"],[12,"state","","The current internal state to be passed to the closure next.",52],[3,"FlatMap","","An iterator that maps each element to an iterator,\nand yields the elements of the produced iterators\n"],[3,"Fuse","","An iterator that yields `None` forever after the underlying iterator\nyields `None` once."],[3,"Inspect","","An iterator that calls a function with a reference to each\nelement before yielding it."],[3,"Unfold","","An iterator that passes mutable state to a closure and yields the result."],[12,"state","","Internal state that will be passed to the closure on the next iteration",56],[3,"Counter","","An infinite iterator starting at `start` and advancing by `step` with each\niteration"],[5,"count","","Creates a new counter with the specified start/step"],[3,"Range","","An iterator over the range [start, stop)"],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting\nat start (inclusive), and ending at stop (exclusive))."],[3,"RangeInclusive","","An iterator over the range [start, stop]"],[5,"range_inclusive","","Return an iterator over the range [start, stop]"],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping."],[5,"range_step","","Return an iterator over the range [start, stop) by `step`."],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping."],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`."],[3,"Repeat","","An iterator that repeats an element endlessly"],[6,"Iterate","",""],[5,"iterate","","Create a new iterator that produces an infinite sequence of\nrepeated applications of the given function `f`."],[5,"repeat","","Create a new iterator that endlessly repeats the element `elt`."],[0,"order","","Functions for lexicographical ordering of sequences."],[5,"equals","std::iter::order","Compare `a` and `b` for equality using `Eq`"],[5,"cmp","","Order `a` and `b` lexicographically using `Ord`"],[5,"partial_cmp","","Order `a` and `b` lexicographically using `PartialOrd`"],[5,"eq","","Compare `a` and `b` for equality (Using partial equality, `PartialEq`)"],[5,"ne","","Compare `a` and `b` for nonequality (Using partial equality, `PartialEq`)"],[5,"lt","","Return `a` < `b` lexicographically (Using partial order, `PartialOrd`)"],[5,"le","","Return `a` <= `b` lexicographically (Using partial order, `PartialOrd`)"],[5,"gt","","Return `a` > `b` lexicographically (Using partial order, `PartialOrd`)"],[5,"ge","","Return `a` >= `b` lexicographically (Using partial order, `PartialOrd`)"],[0,"marker","std","Primitive traits and marker types representing basic 'kinds' of types."],[8,"Send","std::marker","Types able to be transferred across thread boundaries."],[8,"Sized","","Types with a constant size known at compile-time."],[8,"Copy","","Types that can be copied by simply copying bits (i.e. `memcpy`)."],[8,"Sync","","Types that can be safely shared between threads when aliased."],[3,"NoCopy","","A type which is considered \"not POD\", meaning that it is not\nimplicitly copyable. This is typically embedded in other types to\nensure that they are never copied, even if they lack a destructor."],[3,"Managed","","A type which is considered managed by the GC. This is typically\nembedded in other types."],[8,"MarkerTrait","","`MarkerTrait` is intended to be used as the supertrait for traits\nthat don't have any methods but instead serve just to designate\ncategories of types. An example would be the `Send` trait, which\nindicates types that are sendable: `Send` does not itself offer\nany methods, but instead is used to gate access to data."],[8,"PhantomFn","","`PhantomFn` is a marker trait for use with traits that contain\ntype or lifetime parameters that do not appear in any of their\nmethods. In that case, you can either remove those parameters, or\nadd a `PhantomFn` supertrait that reflects the signature of\nmethods that compiler should \"pretend\" exists. This most commonly\noccurs for traits with no methods: in that particular case, you\ncan extend `MarkerTrait`, which is equivalent to\n`PhantomFn<Self>`."],[3,"PhantomData","","`PhantomData` is a way to tell the compiler about fake fields.\nPhantom data is required whenever type parameters are not used.\nThe idea is that if the compiler encounters a `PhantomData<T>`\ninstance, it will behave *as if* an instance of the type `T` were\npresent for the purpose of various automatic analyses."],[3,"ContravariantLifetime","","Old-style marker trait. Deprecated."],[3,"CovariantLifetime","","Old-style marker trait. Deprecated."],[3,"InvariantLifetime","","Old-style marker trait. Deprecated."],[3,"ContravariantType","","Old-style marker trait. Deprecated."],[3,"CovariantType","","Old-style marker trait. Deprecated."],[3,"InvariantType","","Old-style marker trait. Deprecated."],[0,"mem","std","Basic functions for dealing with memory"],[5,"size_of","std::mem","Returns the size of a type in bytes."],[5,"size_of_val","","Returns the size of the type that `_val` points to in bytes."],[5,"min_align_of","","Returns the ABI-required minimum alignment of a type"],[5,"min_align_of_val","","Returns the ABI-required minimum alignment of the type of the value that `_val` points to"],[5,"align_of","","Returns the alignment in memory for a type."],[5,"align_of_val","","Returns the alignment of the type of the value that `_val` points to."],[5,"zeroed","","Create a value initialized to zero."],[5,"uninitialized","","Create an uninitialized value."],[5,"swap","","Swap the values at two mutable locations of the same type, without deinitialising or copying\neither one."],[5,"replace","","Replace the value at a mutable location with a new one, returning the old value, without\ndeinitialising or copying either one."],[5,"drop","","Disposes of a value."],[5,"transmute_copy","","Interprets `src` as `&U`, and then reads `src` without moving the contained value."],[5,"copy_lifetime","","Transforms lifetime of the second pointer to match the first."],[5,"copy_mut_lifetime","","Transforms lifetime of the second mutable pointer to match the first."],[5,"transmute","","Unsafely transforms a value of one type into a value of another type."],[5,"forget","","Move a value out of scope without running drop glue."],[0,"ops","std","Overloadable operators"],[8,"Drop","std::ops","The `Drop` trait is used to run some code when a value goes out of scope. This\nis sometimes called a 'destructor'."],[10,"drop","","The `drop` method, called when the value goes out of scope.",148],[8,"Add","","The `Add` trait is used to specify the functionality of `+`."],[16,"Output","std::ops::Add",""],[10,"add","std::ops","The method for the `+` operator",149],[8,"Sub","","The `Sub` trait is used to specify the functionality of `-`."],[16,"Output","std::ops::Sub",""],[10,"sub","std::ops","The method for the `-` operator",150],[8,"Mul","","The `Mul` trait is used to specify the functionality of `*`."],[16,"Output","std::ops::Mul",""],[10,"mul","std::ops","The method for the `*` operator",151],[8,"Div","","The `Div` trait is used to specify the functionality of `/`."],[16,"Output","std::ops::Div",""],[10,"div","std::ops","The method for the `/` operator",152],[8,"Rem","","The `Rem` trait is used to specify the functionality of `%`."],[16,"Output","std::ops::Rem",""],[10,"rem","std::ops","The method for the `%` operator",153],[8,"Neg","","The `Neg` trait is used to specify the functionality of unary `-`."],[16,"Output","std::ops::Neg",""],[10,"neg","std::ops","The method for the unary `-` operator",154],[8,"Not","","The `Not` trait is used to specify the functionality of unary `!`."],[16,"Output","std::ops::Not",""],[10,"not","std::ops","The method for the unary `!` operator",155],[8,"BitAnd","","The `BitAnd` trait is used to specify the functionality of `&`."],[16,"Output","std::ops::BitAnd",""],[10,"bitand","std::ops","The method for the `&` operator",156],[8,"BitOr","","The `BitOr` trait is used to specify the functionality of `|`."],[16,"Output","std::ops::BitOr",""],[10,"bitor","std::ops","The method for the `|` operator",157],[8,"BitXor","","The `BitXor` trait is used to specify the functionality of `^`."],[16,"Output","std::ops::BitXor",""],[10,"bitxor","std::ops","The method for the `^` operator",158],[8,"Shl","","The `Shl` trait is used to specify the functionality of `<<`."],[16,"Output","std::ops::Shl",""],[10,"shl","std::ops","The method for the `<<` operator",159],[8,"Shr","","The `Shr` trait is used to specify the functionality of `>>`."],[16,"Output","std::ops::Shr",""],[10,"shr","std::ops","The method for the `>>` operator",160],[8,"Index","","The `Index` trait is used to specify the functionality of indexing operations\nlike `arr[idx]` when used in an immutable context."],[16,"Output","std::ops::Index",""],[10,"index","std::ops","The method for the indexing (`Foo[Bar]`) operation",161],[8,"IndexMut","","The `IndexMut` trait is used to specify the functionality of indexing\noperations like `arr[idx]`, when used in a mutable context."],[10,"index_mut","","The method for the indexing (`Foo[Bar]`) operation",162],[3,"RangeFull","","An unbounded range."],[3,"Range","","A (half-open) range which is bounded at both ends."],[12,"start","","The lower bound of the range (inclusive).",14],[12,"end","","The upper bound of the range (exclusive).",14],[3,"RangeFrom","","A range which is only bounded below."],[12,"start","","The lower bound of the range (inclusive).",15],[3,"RangeTo","","A range which is only bounded above."],[12,"end","","The upper bound of the range (exclusive).",16],[8,"Deref","","The `Deref` trait is used to specify the functionality of dereferencing\noperations like `*v`."],[16,"Target","std::ops::Deref",""],[10,"deref","std::ops","The method called to dereference a value",163],[8,"DerefMut","","The `DerefMut` trait is used to specify the functionality of dereferencing\nmutably like `*v = 1;`"],[10,"deref_mut","","The method called to mutably dereference a value",164],[8,"Fn","","A version of the call operator that takes an immutable receiver."],[16,"Output","std::ops::Fn",""],[10,"call","std::ops","This is called when the call operator is used.",165],[8,"FnMut","","A version of the call operator that takes a mutable receiver."],[16,"Output","std::ops::FnMut",""],[10,"call_mut","std::ops","This is called when the call operator is used.",166],[8,"FnOnce","","A version of the call operator that takes a by-value receiver."],[16,"Output","std::ops::FnOnce",""],[10,"call_once","std::ops","This is called when the call operator is used.",167],[0,"ptr","std","Operations on unsafe pointers, `*const T`, and `*mut T`."],[5,"copy_nonoverlapping_memory","std::ptr",""],[5,"copy_memory","",""],[5,"set_memory","",""],[5,"null","","Creates a null raw pointer."],[5,"null_mut","","Creates a null mutable raw pointer."],[5,"zero_memory","","Zeroes out `count * size_of::<T>` bytes of memory at `dst`. `count` may be\n`0`."],[5,"swap","","Swaps the values at two mutable locations of the same type, without\ndeinitialising either. They may overlap, unlike `mem::swap` which is\notherwise equivalent."],[5,"replace","","Replaces the value at `dest` with `src`, returning the old\nvalue, without dropping either."],[5,"read","","Reads the value from `src` without moving it. This leaves the\nmemory in `src` unchanged."],[5,"read_and_zero","","Reads the value from `src` and nulls it out without dropping it."],[5,"write","","Overwrites a memory location with the given value without reading or\ndropping the old value."],[8,"PtrExt","","Methods on raw pointers"],[16,"Target","std::ptr::PtrExt",""],[10,"is_null","std::ptr","Returns true if the pointer is null.",168],[10,"as_ref","","Returns `None` if the pointer is null, or else returns a reference to\nthe value wrapped in `Some`.",168],[10,"offset","","Calculates the offset from a pointer. `count` is in units of T; e.g. a\n`count` of 3 represents a pointer offset of `3 * sizeof::<T>()` bytes.",168],[8,"MutPtrExt","","Methods on mutable raw pointers"],[16,"Target","std::ptr::MutPtrExt",""],[10,"as_mut","std::ptr","Returns `None` if the pointer is null, or else returns a mutable\nreference to the value wrapped in `Some`.",169],[3,"Unique","","A wrapper around a raw `*mut T` that indicates that the possessor\nof this wrapper owns the referent. This in turn implies that the\n`Unique<T>` is `Send`/`Sync` if `T` is `Send`/`Sync`, unlike a raw\n`*mut T` (which conveys no particular ownership semantics).  It\nalso implies that the referent of the pointer should not be\nmodified without a unique path to the `Unique` reference. Useful\nfor building abstractions like `Vec<T>` or `Box<T>`, which\ninternally use raw pointers to manage the memory that they own."],[5,"copy_nonoverlapping_memory","","Copies `count * size_of<T>` bytes from `src` to `dst`. The source\nand destination may *not* overlap."],[5,"set_memory","","Invokes memset on the specified pointer, setting `count * size_of::<T>()`\nbytes of memory starting at `dst` to `c`."],[5,"copy_memory","","Copies `count * size_of<T>` bytes from `src` to `dst`. The source\nand destination may overlap."],[0,"raw","std","Contains struct definitions for the layout of compiler built-in types."],[3,"Slice","std::raw","The representation of a slice like `&[T]`."],[12,"data","","",170],[12,"len","","",170],[3,"Closure","","The representation of an old closure."],[12,"code","","",171],[12,"env","","",171],[3,"TraitObject","","The representation of a trait object like `&SomeTrait`."],[12,"data","","",172],[12,"vtable","","",172],[8,"Repr","","This trait is meant to map equivalences between raw structs and their\ncorresponding rust values."],[10,"repr","","This function \"unwraps\" a rust value (without consuming it) into its raw\nstruct representation. This can be used to read/write different values\nfor the struct. This is a safe method because by default it does not\nenable write-access to the fields of the return value in safe code.",173],[0,"simd","std","SIMD vectors."],[3,"i8x16","std::simd",""],[3,"i16x8","",""],[3,"i32x4","",""],[3,"i64x2","",""],[3,"u8x16","",""],[3,"u16x8","",""],[3,"u32x4","",""],[3,"u64x2","",""],[3,"f32x4","",""],[3,"f64x2","",""],[0,"result","std","Error handling with the `Result` type"],[4,"Result","std::result","`Result` is a type that represents either success (`Ok`) or failure (`Err`)."],[13,"Ok","","Contains the success value",68],[13,"Err","","Contains the error value",68],[3,"Iter","","An iterator over a reference to the `Ok` variant of a `Result`."],[3,"IterMut","","An iterator over a mutable reference to the `Ok` variant of a `Result`."],[3,"IntoIter","","An iterator over the value in a `Ok` variant of a `Result`."],[5,"fold","","Perform a fold operation over the result values from an iterator."],[0,"option","std","Optional values"],[4,"Option","std::option","The `Option` type. See [the module level documentation](../index.html) for more."],[13,"None","","No value",63],[13,"Some","","Some value `T`",63],[3,"Iter","","An iterator over a reference of the contained item in an Option."],[3,"IterMut","","An iterator over a mutable reference of the contained item in an Option."],[3,"IntoIter","","An iterator over the item contained inside an Option."],[0,"error","std","Traits for working with Errors."],[8,"Error","std::error","Base functionality for all errors in Rust."],[10,"description","","A short description of the error; usually a static string.",174],[10,"cause","","The lower-level cause of this error, if any.",174],[8,"FromError","","A trait for types that can be converted from a given error type `E`."],[10,"from_error","","Perform the conversion.",175],[0,"boxed","std","A pointer type for heap allocation."],[7,"HEAP","std::boxed","A value that represents the heap. This is the default place that the `box`\nkeyword allocates into when no place is supplied."],[11,"new","alloc::boxed","Allocates memory on the heap and then moves `x` into it.",176],[11,"from_raw","","Constructs a box from the raw pointer.",176],[11,"default","","",176],[11,"default","","",176],[11,"clone","","Returns a new box with a `clone()` of this box's contents.",176],[11,"clone_from","","Copies `source`'s contents into `self` without creating a new allocation.",176],[11,"eq","","",176],[11,"ne","","",176],[11,"partial_cmp","","",176],[11,"lt","","",176],[11,"le","","",176],[11,"ge","","",176],[11,"gt","","",176],[11,"cmp","","",176],[11,"hash","","",176],[11,"downcast","","",176],[11,"fmt","","",176],[11,"fmt","","",176],[11,"fmt","","",176],[6,"Target","std::boxed",""],[11,"deref","alloc::boxed","",176],[11,"deref_mut","","",176],[6,"Item","std::boxed",""],[11,"next","alloc::boxed","",176],[11,"size_hint","","",176],[11,"next_back","","",176],[11,"from_error","","",176],[11,"fmt","alloc::arc","",177],[11,"new","","Constructs a new `Arc<T>`.",178],[11,"downgrade","","Downgrades the `Arc<T>` to a `Weak<T>` reference.",178],[11,"clone","","Makes a clone of the `Arc<T>`.",178],[6,"Target","std::boxed",""],[11,"deref","alloc::arc","",178],[11,"make_unique","","Make a mutable reference from the given `Arc<T>`.",178],[11,"drop","","Drops the `Arc<T>`.",178],[11,"upgrade","","Upgrades a weak reference to a strong reference.",177],[11,"clone","","Makes a clone of the `Weak<T>`.",177],[11,"drop","","Drops the `Weak<T>`.",177],[11,"eq","","Equality for two `Arc<T>`s.",178],[11,"ne","","Inequality for two `Arc<T>`s.",178],[11,"partial_cmp","","Partial comparison for two `Arc<T>`s.",178],[11,"lt","","Less-than comparison for two `Arc<T>`s.",178],[11,"le","","'Less-than or equal to' comparison for two `Arc<T>`s.",178],[11,"gt","","Greater-than comparison for two `Arc<T>`s.",178],[11,"ge","","'Greater-than or equal to' comparison for two `Arc<T>`s.",178],[11,"cmp","","",178],[11,"fmt","","",178],[11,"fmt","","",178],[11,"default","","",178],[11,"hash","","",178],[11,"new","alloc::rc","Constructs a new `Rc<T>`.",179],[11,"downgrade","","Downgrades the `Rc<T>` to a `Weak<T>` reference.",179],[11,"make_unique","","Make a mutable reference from the given `Rc<T>`.",179],[6,"Target","std::boxed",""],[11,"deref","alloc::rc","",179],[11,"drop","","Drops the `Rc<T>`.",179],[11,"clone","","Makes a clone of the `Rc<T>`.",179],[11,"default","","Creates a new `Rc<T>`, with the `Default` value for `T`.",179],[11,"eq","","Equality for two `Rc<T>`s.",179],[11,"ne","","Inequality for two `Rc<T>`s.",179],[11,"partial_cmp","","Partial comparison for two `Rc<T>`s.",179],[11,"lt","","Less-than comparison for two `Rc<T>`s.",179],[11,"le","","'Less-than or equal to' comparison for two `Rc<T>`s.",179],[11,"gt","","Greater-than comparison for two `Rc<T>`s.",179],[11,"ge","","'Greater-than or equal to' comparison for two `Rc<T>`s.",179],[11,"cmp","","Comparison for two `Rc<T>`s.",179],[11,"hash","","",179],[11,"fmt","","",179],[11,"fmt","","",179],[11,"upgrade","","Upgrades a weak reference to a strong reference.",180],[11,"drop","","Drops the `Weak<T>`.",180],[11,"clone","","Makes a clone of the `Weak<T>`.",180],[11,"fmt","","",180],[3,"Box","std::boxed","A pointer type for heap allocation."],[5,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer."],[8,"BoxAny","","Extension methods for an owning `Any` trait object."],[10,"downcast","","Returns the boxed value if it is of type `T`, or\n`Err(Self)` if it isn't.",181],[0,"rc","std","Thread-local reference-counted boxes (the `Rc<T>` type)."],[3,"Rc","std::rc","A reference-counted pointer type over an immutable value."],[5,"weak_count","","Get the number of weak references to this value."],[5,"strong_count","","Get the number of strong references to this value."],[5,"is_unique","","Returns true if there are no other `Rc` or `Weak<T>` values that share the same inner value."],[5,"try_unwrap","","Unwraps the contained value if the `Rc<T>` is unique."],[5,"get_mut","","Returns a mutable reference to the contained value if the `Rc<T>` is unique."],[3,"Weak","","A weak version of `Rc<T>`."],[0,"borrow","std","A module for working with borrowed data."],[8,"Borrow","std::borrow","A trait for borrowing data."],[10,"borrow","","Immutably borrow from an owned value.",182],[8,"BorrowMut","","A trait for mutably borrowing data."],[10,"borrow_mut","","Mutably borrow from an owned value.",183],[8,"ToOwned","","A generalization of Clone to borrowed data."],[16,"Owned","std::borrow::ToOwned",""],[10,"to_owned","std::borrow","Create owned data from borrowed data, usually by copying.",184],[11,"to_mut","collections::borrow","Acquire a mutable reference to the owned form of the data.",185],[11,"into_owned","","Extract the owned data.",185],[11,"is_borrowed","","Returns true if this `Cow` wraps a borrowed value",185],[11,"is_owned","","Returns true if this `Cow` wraps an owned value",185],[11,"clone","collections::binary_heap","",186],[11,"default","","",186],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",186],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",186],[11,"from_vec","","Creates a `BinaryHeap` from a vector. This is sometimes called\n`heapifying` the vector.",186],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",186],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",186],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",186],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",186],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",186],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",186],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",186],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",186],[11,"push","","Pushes an item onto the binary heap.",186],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",186],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",186],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",186],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",186],[11,"len","","Returns the length of the binary heap.",186],[11,"is_empty","","Checks if the binary heap is empty.",186],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",186],[11,"clear","","Drops all items from the binary heap.",186],[11,"clone","","",187],[6,"Item","std::borrow",""],[11,"next","collections::binary_heap","",187],[11,"size_hint","","",187],[11,"next_back","","",187],[6,"Item","std::borrow",""],[11,"next","collections::binary_heap","",188],[11,"size_hint","","",188],[11,"next_back","","",188],[6,"Item","std::borrow",""],[11,"next","collections::binary_heap","",189],[11,"size_hint","","",189],[11,"next_back","","",189],[11,"from_iter","","",186],[6,"Item","std::borrow",""],[6,"IntoIter","",""],[11,"into_iter","collections::binary_heap","",186],[6,"Item","std::borrow",""],[6,"IntoIter","",""],[11,"extend","collections::binary_heap","",186],[6,"Output","std::borrow",""],[11,"index","collections::bit","",190],[11,"new","","Creates an empty `BitVec`.",190],[11,"from_elem","","Creates a `BitVec` that holds `nbits` elements, setting each element\nto `bit`.",190],[11,"with_capacity","","Constructs a new, empty `BitVec` with the specified capacity.",190],[11,"from_bytes","","Transforms a byte-vector into a `BitVec`. Each byte becomes eight bits,\nwith the most significant bits of each byte coming first. Each\nbit becomes `true` if equal to 1 or `false` if equal to 0.",190],[11,"from_fn","","Creates a `BitVec` of the specified length where the value at each index\nis `f(index)`.",190],[11,"get","","Retrieves the value at index `i`, or `None` if the index is out of bounds.",190],[11,"set","","Sets the value of a bit at an index `i`.",190],[11,"set_all","","Sets all bits to 1.",190],[11,"negate","","Flips all bits.",190],[11,"union","","Calculates the union of two bitvectors. This acts like the bitwise `or`\nfunction.",190],[11,"intersect","","Calculates the intersection of two bitvectors. This acts like the\nbitwise `and` function.",190],[11,"difference","","Calculates the difference between two bitvectors.",190],[11,"all","","Returns `true` if all bits are 1.",190],[11,"iter","","Returns an iterator over the elements of the vector in order.",190],[11,"none","","Returns `true` if all bits are 0.",190],[11,"any","","Returns `true` if any bit is 1.",190],[11,"to_bytes","","Organises the bits into bytes, such that the first bit in the\n`BitVec` becomes the high-order bit of the first byte. If the\nsize of the `BitVec` is not a multiple of eight then trailing bits\nwill be filled-in with `false`.",190],[11,"eq_vec","","Compares a `BitVec` to a slice of `bool`s.\nBoth the `BitVec` and slice must have the same length.",190],[11,"truncate","","Shortens a `BitVec`, dropping excess elements.",190],[11,"reserve","","Reserves capacity for at least `additional` more bits to be inserted in the given\n`BitVec`. The collection may reserve more space to avoid frequent reallocations.",190],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more bits to be inserted in the\ngiven `BitVec`. Does nothing if the capacity is already sufficient.",190],[11,"capacity","","Returns the capacity in bits for this bit vector. Inserting any\nelement less than this amount will not trigger a resizing.",190],[11,"grow","","Grows the `BitVec` in-place, adding `n` copies of `value` to the `BitVec`.",190],[11,"pop","","Removes the last bit from the BitVec, and returns it. Returns None if the BitVec is empty.",190],[11,"push","","Pushes a `bool` onto the end.",190],[11,"len","","Return the total number of bits in this vector",190],[11,"is_empty","","Returns true if there are no bits in this vector",190],[11,"clear","","Clears all bits in this vector.",190],[11,"default","","",190],[11,"from_iter","","",190],[11,"extend","","",190],[11,"clone","","",190],[11,"clone_from","","",190],[11,"partial_cmp","","",190],[11,"cmp","","",190],[11,"fmt","","",190],[11,"hash","","",190],[11,"eq","","",190],[11,"clone","","",191],[6,"Item","std::borrow",""],[11,"next","collections::bit","",191],[11,"size_hint","","",191],[11,"next_back","","",191],[11,"indexable","","",191],[11,"idx","","",191],[6,"Item","std::borrow",""],[6,"IntoIter","",""],[11,"clone","collections::bit","",192],[11,"default","","",192],[11,"from_iter","","",192],[11,"extend","","",192],[11,"partial_cmp","","",192],[11,"cmp","","",192],[11,"eq","","",192],[11,"new","","Creates a new empty `BitSet`.",192],[11,"with_capacity","","Creates a new `BitSet` with initially no contents, able to\nhold `nbits` elements without resizing.",192],[11,"from_bit_vec","","Creates a new `BitSet` from the given bit vector.",192],[11,"from_bitv","","Deprecated: use `from_bit_vec`.",192],[11,"capacity","","Returns the capacity in bits for this bit vector. Inserting any\nelement less than this amount will not trigger a resizing.",192],[11,"reserve_len","","Reserves capacity for the given `BitSet` to contain `len` distinct elements. In the case\nof `BitSet` this means reallocations will not occur as long as all inserted elements\nare less than `len`.",192],[11,"reserve_len_exact","","Reserves the minimum capacity for the given `BitSet` to contain `len` distinct elements.\nIn the case of `BitSet` this means reallocations will not occur as long as all inserted\nelements are less than `len`.",192],[11,"into_bit_vec","","Consumes this set to return the underlying bit vector.",192],[11,"get_ref","","Returns a reference to the underlying bit vector.",192],[11,"shrink_to_fit","","Truncates the underlying vector to the least length required.",192],[11,"iter","","Iterator over each u32 stored in the `BitSet`.",192],[11,"union","","Iterator over each u32 stored in `self` union `other`.\nSee [union_with](#method.union_with) for an efficient in-place version.",192],[11,"intersection","","Iterator over each usize stored in `self` intersect `other`.\nSee [intersect_with](#method.intersect_with) for an efficient in-place version.",192],[11,"difference","","Iterator over each usize stored in the `self` setminus `other`.\nSee [difference_with](#method.difference_with) for an efficient in-place version.",192],[11,"symmetric_difference","","Iterator over each u32 stored in the symmetric difference of `self` and `other`.\nSee [symmetric_difference_with](#method.symmetric_difference_with) for\nan efficient in-place version.",192],[11,"union_with","","Unions in-place with the specified other bit vector.",192],[11,"intersect_with","","Intersects in-place with the specified other bit vector.",192],[11,"difference_with","","Makes this bit vector the difference with the specified other bit vector\nin-place.",192],[11,"symmetric_difference_with","","Makes this bit vector the symmetric difference with the specified other\nbit vector in-place.",192],[11,"len","","Return the number of set bits in this set.",192],[11,"is_empty","","Returns whether there are no bits set in this set",192],[11,"clear","","Clears all bits in this set",192],[11,"contains","","Returns `true` if this set contains the specified integer.",192],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",192],[11,"is_subset","","Returns `true` if the set is a subset of another.",192],[11,"is_superset","","Returns `true` if the set is a superset of another.",192],[11,"insert","","Adds a value to the set. Returns `true` if the value was not already\npresent in the set.",192],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",192],[11,"fmt","","",192],[11,"hash","","",192],[11,"clone","","",193],[11,"clone","","",194],[6,"Item","std::borrow",""],[11,"next","collections::bit","",193],[11,"size_hint","","",193],[6,"Item","std::borrow",""],[11,"next","collections::bit","",194],[11,"size_hint","","",194],[6,"Item","std::borrow",""],[11,"next","collections::bit","",195],[11,"size_hint","","",195],[6,"Item","std::borrow",""],[11,"next","collections::bit","",196],[11,"size_hint","","",196],[6,"Item","std::borrow",""],[11,"next","collections::bit","",197],[11,"size_hint","","",197],[6,"Item","std::borrow",""],[11,"next","collections::bit","",198],[11,"size_hint","","",198],[6,"Item","std::borrow",""],[6,"IntoIter","",""],[6,"Item","",""],[11,"next","collections::btree::node","",199],[11,"next_back","","",199],[11,"drop","","",199],[11,"drop","","",200],[11,"as_slices","","",200],[11,"as_slices_mut","","",200],[11,"as_slices_internal","","",200],[11,"as_slices_internal_mut","","",200],[11,"keys","","",200],[11,"keys_mut","","",200],[11,"vals","","",200],[11,"vals_mut","","",200],[11,"edges","","",200],[11,"edges_mut","","",200],[11,"clone","","",200],[11,"search","","Searches for the given key in the node. If it finds an exact match,\n`Found` will be yielded with the matching index. If it doesn't find an exact match,\n`GoDown` will be yielded with the index of the subtree the key must lie in.",200],[11,"make_leaf_root","","Make a leaf root from scratch",200],[11,"make_internal_root","","Make an internal root and swap it with an old root",200],[11,"len","","How many key-value pairs the node contains",200],[11,"capacity","","How many key-value pairs the node can fit",200],[11,"is_leaf","","If the node has any children",200],[11,"is_underfull","","if the node has too few elements",200],[11,"is_full","","if the node cannot fit any more elements",200],[11,"node","","Returns a reference to the node that contains the pointed-to edge or key/value pair. This\nis very different from `edge` and `edge_mut` because those return children of the node\nreturned by `node`.",201],[11,"as_raw","","Converts a handle into one that stores the same information using a raw pointer. This can\nbe useful in conjunction with `from_raw` when the type system is insufficient for\ndetermining the lifetimes of the nodes.",201],[11,"from_raw","","Converts from a handle stored with a raw pointer, which isn't directly usable, to a handle\nstored with a reference. This is an unsafe inverse of `as_raw`, and together they allow\nunsafely extending the lifetime of the reference to the `Node`.",201],[11,"from_raw_mut","","Converts from a handle stored with a raw pointer, which isn't directly usable, to a handle\nstored with a mutable reference. This is an unsafe inverse of `as_raw`, and together they\nallow unsafely extending the lifetime of the reference to the `Node`.",201],[11,"into_edge","","Turns the handle into a reference to the edge it points at. This is necessary because the\nreturned pointer has a larger lifetime than what would be returned by `edge` or `edge_mut`,\nmaking it more suitable for moving down a chain of nodes.",201],[11,"into_edge_mut","","Turns the handle into a mutable reference to the edge it points at. This is necessary\nbecause the returned pointer has a larger lifetime than what would be returned by\n`edge_mut`, making it more suitable for moving down a chain of nodes.",201],[11,"force","","Figure out whether this handle is pointing to something in a leaf node or to something in\nan internal node, clarifying the type according to the result.",201],[11,"insert_as_leaf","","Tries to insert this key-value pair at the given index in this leaf node\nIf the node is full, we have to split it.",201],[11,"edge_mut","","Returns a mutable reference to the edge pointed-to by this handle. This should not be\nconfused with `node`, which references the parent node of what is returned here.",201],[11,"insert_as_internal","","Tries to insert this key-value pair at the given index in this internal node\nIf the node is full, we have to split it.",201],[11,"handle_underflow","","Handle an underflow in this node's child. We favour handling \"to the left\" because we know\nwe're empty, but our neighbour can be full. Handling to the left means when we choose to\nsteal, we pop off the end of our neighbour (always fast) and \"unshift\" ourselves\n(always slow, but at least faster since we know we're half-empty).\nHandling \"to the right\" reverses these roles. Of course, we merge whenever possible\nbecause we want dense nodes, and merging is about equal work regardless of direction.",201],[11,"into_kv","","Turns the handle into references to the key and value it points at. This is necessary\nbecause the returned pointers have larger lifetimes than what would be returned by `key`\nor `val`.",201],[11,"into_kv_mut","","Turns the handle into mutable references to the key and value it points at. This is\nnecessary because the returned pointers have larger lifetimes than what would be returned\nby `key_mut` or `val_mut`.",201],[11,"into_left_edge","","Convert this handle into one pointing at the edge immediately to the left of the key/value\npair pointed-to by this handle. This is useful because it returns a reference with larger\nlifetime than `left_edge`.",201],[11,"key_mut","","Returns a mutable reference to the key pointed-to by this handle. This doesn't return a\nreference with a lifetime as large as `into_kv_mut`, but it also does not consume the\nhandle.",201],[11,"val_mut","","Returns a mutable reference to the value pointed-to by this handle. This doesn't return a\nreference with a lifetime as large as `into_kv_mut`, but it also does not consume the\nhandle.",201],[11,"left_edge","","Gets the handle pointing to the edge immediately to the left of the key/value pair pointed\nto by this handle.",201],[11,"right_edge","","Gets the handle pointing to the edge immediately to the right of the key/value pair pointed\nto by this handle.",201],[11,"remove_as_leaf","","Removes the key/value pair at the handle's location.",201],[11,"kv_handle","","Returns the mutable handle pointing to the key/value pair at a given index.",200],[11,"iter","","",200],[11,"iter_mut","","",200],[11,"into_iter","","",200],[11,"hoist_lone_child","","When a node has no keys or values and only a single edge, extract that edge.",200],[6,"Item","std::borrow",""],[6,"Edge","",""],[11,"next_kv","collections::btree::node","",202],[11,"next_kv_back","","",202],[11,"next_edge","","",202],[11,"next_edge_back","","",202],[6,"Item","std::borrow",""],[6,"Edge","",""],[11,"next_kv","collections::btree::node","",203],[11,"next_kv_back","","",203],[11,"next_edge","","",203],[11,"next_edge_back","","",203],[11,"drop","","",203],[6,"Item","std::borrow",""],[11,"next","collections::btree::node","",204],[11,"next_back","","",204],[11,"next_edge_item","","Advances the iterator and returns the item if it's an edge. Returns None\nand does nothing if the first item is not an edge.",204],[11,"next_edge_item_back","","Advances the iterator and returns the item if it's an edge. Returns None\nand does nothing if the last item is not an edge.",204],[11,"next_kv_item","","Advances the iterator and returns the item if it's a key-value pair. Returns None\nand does nothing if the first item is not a key-value pair.",204],[11,"next_kv_item_back","","Advances the iterator and returns the item if it's a key-value pair. Returns None\nand does nothing if the last item is not a key-value pair.",204],[11,"slice_from","","Returns a sub-slice with elements starting with `min_key`.",205],[11,"slice_to","","Returns a sub-slice with elements up to and including `max_key`.",205],[11,"iter","","Returns an iterator over key/value pairs and edges in a slice.",205],[11,"slice_from","","Returns a sub-slice with elements starting with `min_key`.",206],[11,"slice_to","","Returns a sub-slice with elements up to and including `max_key`.",206],[11,"iter_mut","","Returns an iterator over key/value pairs and edges in a slice.",206],[11,"clone","collections::btree::map","",207],[11,"new","","Makes a new empty BTreeMap with a reasonable choice for B.",207],[11,"with_b","","Makes a new empty BTreeMap with the given B.",207],[11,"clear","","Clears the map, removing all values.",207],[11,"get","","Returns a reference to the value corresponding to the key.",207],[11,"contains_key","","Returns true if the map contains a value for the specified key.",207],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",207],[11,"insert","","Inserts a key-value pair from the map. If the key already had a value\npresent in the map, that value is returned. Otherwise, `None` is returned.",207],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",207],[6,"Item","std::borrow",""],[6,"IntoIter","",""],[11,"into_iter","collections::btree::map","",207],[6,"Item","std::borrow",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Target","",""],[11,"deref","collections::btree::map::stack","",208],[11,"deref_mut","","",208],[11,"new","","Creates a new PartialSearchStack from a BTreeMap by initializing the stack with the\nroot of the tree.",209],[11,"with","","Breaks up the stack into a `Pusher` and the next `Node`, allowing the given closure\nto interact with, search, and finally push the `Node` onto the stack. The passed in\nclosure must be polymorphic on the `'id` lifetime parameter, as this statically\nensures that only `Handle`s from the correct `Node` can be pushed.",209],[11,"push","","Pushes the requested child of the stack's current top on top of the stack. If the child\nexists, then a new PartialSearchStack is yielded. Otherwise, a VacantSearchStack is\nyielded.",210],[11,"seal","","Converts the PartialSearchStack into a SearchStack.",210],[11,"peek","","Gets a reference to the value the stack points to.",211],[11,"peek_mut","","Gets a mutable reference to the value the stack points to.",211],[11,"into_top","","Converts the stack into a mutable reference to the value it points to, with a lifetime\ntied to the original tree.",211],[11,"remove","","Removes the key and value in the top element of the stack, then handles underflows as\ndescribed in BTree's pop function.",211],[11,"insert","","Inserts the key and value into the top element in the stack, and if that node has to\nsplit recursively inserts the split contents into the next element stack until\nsplits stop.",211],[11,"from_iter","collections::btree::map","",207],[11,"extend","","",207],[11,"hash","","",207],[11,"default","","",207],[11,"eq","","",207],[11,"partial_cmp","","",207],[11,"cmp","","",207],[11,"fmt","","",207],[6,"Output","std::borrow",""],[11,"index","collections::btree::map","",207],[11,"index_mut","","",207],[11,"traverse","collections::btree::node","",204],[11,"traverse","","",204],[11,"traverse","","",204],[6,"Item","std::borrow",""],[11,"next","collections::btree::map","",212],[11,"size_hint","","",212],[11,"next_back","","",212],[6,"Item","std::borrow",""],[11,"next","collections::btree::map","",213],[11,"size_hint","","",213],[11,"next_back","","",213],[6,"Item","std::borrow",""],[11,"next","collections::btree::map","",214],[11,"size_hint","","",214],[11,"next_back","","",214],[6,"Item","std::borrow",""],[11,"next","collections::btree::map","",215],[11,"size_hint","","",215],[11,"next_back","","",215],[6,"Item","std::borrow",""],[11,"next","collections::btree::map","",216],[11,"size_hint","","",216],[11,"next_back","","",216],[6,"Item","std::borrow",""],[11,"next","collections::btree::map","",217],[11,"size_hint","","",217],[11,"next_back","","",217],[6,"Item","std::borrow",""],[11,"next","collections::btree::map","",218],[11,"next_back","","",218],[6,"Item","std::borrow",""],[11,"next","collections::btree::map","",219],[11,"next_back","","",219],[11,"get","","Returns a mutable reference to the entry if occupied, or the VacantEntry if vacant",220],[11,"insert","","Sets the value of the entry with the VacantEntry's key,\nand returns a mutable reference to it.",221],[11,"get","","Gets a reference to the value in the entry.",222],[11,"get_mut","","Gets a mutable reference to the value in the entry.",222],[11,"into_mut","","Converts the entry into a mutable reference to its value.",222],[11,"insert","","Sets the value of the entry with the OccupiedEntry's key,\nand returns the entry's old value.",222],[11,"remove","","Takes the value of the entry out of the map, and returns it.",222],[11,"iter","","Gets an iterator over the entries of the map.",207],[11,"iter_mut","","Gets a mutable iterator over the entries of the map.",207],[11,"into_iter","","Gets an owning iterator over the entries of the map.",207],[11,"keys","","Gets an iterator over the keys of the map.",207],[11,"values","","Gets an iterator over the values of the map.",207],[11,"len","","Return the number of elements in the map.",207],[11,"is_empty","","Return true if the map contains no elements.",207],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",207],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",207],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",207],[11,"partial_cmp","collections::btree::set","",223],[11,"lt","","",223],[11,"le","","",223],[11,"gt","","",223],[11,"ge","","",223],[11,"cmp","","",223],[11,"eq","","",223],[11,"ne","","",223],[11,"hash","","",223],[11,"clone","","",223],[11,"new","","Makes a new BTreeSet with a reasonable choice of B.",223],[11,"with_b","","Makes a new BTreeSet with the given B.",223],[11,"iter","","Gets an iterator over the BTreeSet's contents.",223],[11,"into_iter","","Gets an iterator for moving out the BtreeSet's contents.",223],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the set, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",223],[11,"difference","","Visits the values representing the difference, in ascending order.",223],[11,"symmetric_difference","","Visits the values representing the symmetric difference, in ascending order.",223],[11,"intersection","","Visits the values representing the intersection, in ascending order.",223],[11,"union","","Visits the values representing the union, in ascending order.",223],[11,"len","","Return the number of elements in the set",223],[11,"is_empty","","Returns true if the set contains no elements",223],[11,"clear","","Clears the set, removing all values.",223],[11,"contains","","Returns `true` if the set contains a value.",223],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",223],[11,"is_subset","","Returns `true` if the set is a subset of another.",223],[11,"is_superset","","Returns `true` if the set is a superset of another.",223],[11,"insert","","Adds a value to the set. Returns `true` if the value was not already\npresent in the set.",223],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",223],[11,"from_iter","","",223],[6,"Item","std::borrow",""],[6,"IntoIter","",""],[11,"into_iter","collections::btree::set","",223],[6,"Item","std::borrow",""],[6,"IntoIter","",""],[11,"extend","collections::btree::set","",223],[11,"default","","",223],[6,"Output","std::borrow",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[11,"fmt","collections::btree::set","",223],[6,"Item","std::borrow",""],[11,"next","collections::btree::set","",224],[11,"size_hint","","",224],[11,"next_back","","",224],[6,"Item","std::borrow",""],[11,"next","collections::btree::set","",225],[11,"size_hint","","",225],[11,"next_back","","",225],[6,"Item","std::borrow",""],[11,"next","collections::btree::set","",226],[11,"next_back","","",226],[6,"Item","std::borrow",""],[11,"next","collections::btree::set","",227],[6,"Item","std::borrow",""],[11,"next","collections::btree::set","",228],[6,"Item","std::borrow",""],[11,"next","collections::btree::set","",229],[6,"Item","std::borrow",""],[11,"next","collections::btree::set","",230],[11,"borrow","std::rc","",179],[11,"borrow","alloc::arc","",178],[11,"borrow","collections::borrow","",185],[6,"Owned","std::borrow",""],[11,"clone","collections::borrow","",185],[6,"Target","std::borrow",""],[11,"deref","collections::borrow","",185],[11,"cmp","","",185],[11,"eq","","",185],[11,"partial_cmp","","",185],[11,"fmt","","",185],[11,"fmt","","",185],[11,"hash","","",185],[11,"into_cow","","",185],[11,"hash","collections::enum_set","",231],[11,"cmp","","",231],[11,"partial_cmp","","",231],[11,"lt","","",231],[11,"le","","",231],[11,"gt","","",231],[11,"ge","","",231],[11,"eq","","",231],[11,"ne","","",231],[11,"clone","","",231],[11,"fmt","","",231],[11,"new","","Returns an empty `EnumSet`.",231],[11,"len","","Returns the number of elements in the given `EnumSet`.",231],[11,"is_empty","","Returns true if the `EnumSet` is empty.",231],[11,"clear","","",231],[11,"is_disjoint","","Returns `false` if the `EnumSet` contains any enum of the given `EnumSet`.",231],[11,"is_superset","","Returns `true` if a given `EnumSet` is included in this `EnumSet`.",231],[11,"is_subset","","Returns `true` if this `EnumSet` is included in the given `EnumSet`.",231],[11,"union","","Returns the union of both `EnumSets`.",231],[11,"intersection","","Returns the intersection of both `EnumSets`.",231],[11,"insert","","Adds an enum to the `EnumSet`, and returns `true` if it wasn't there before",231],[11,"remove","","Removes an enum from the EnumSet",231],[11,"contains","","Returns `true` if an `EnumSet` contains a given enum.",231],[11,"iter","","Returns an iterator over an `EnumSet`.",231],[6,"Output","std::borrow",""],[11,"sub","collections::enum_set","",231],[6,"Output","std::borrow",""],[11,"bitor","collections::enum_set","",231],[6,"Output","std::borrow",""],[11,"bitand","collections::enum_set","",231],[6,"Output","std::borrow",""],[11,"bitxor","collections::enum_set","",231],[11,"clone","","",232],[6,"Item","std::borrow",""],[11,"next","collections::enum_set","",232],[11,"size_hint","","",232],[11,"from_iter","","",231],[6,"Item","std::borrow",""],[6,"IntoIter","",""],[11,"extend","collections::enum_set","",231],[11,"clone","collections::linked_list","",233],[11,"clone","","",234],[11,"clone","","",235],[11,"default","","",236],[11,"new","","Creates an empty `LinkedList`.",236],[11,"append","","Moves all elements from `other` to the end of the list.",236],[11,"iter","","Provides a forward iterator.",236],[11,"iter_mut","","Provides a forward iterator with mutable references.",236],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",236],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",236],[11,"len","","Returns the length of the `LinkedList`.",236],[11,"clear","","Removes all elements from the `LinkedList`.",236],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",236],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",236],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",236],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",236],[11,"push_front","","Adds an element first in the list.",236],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",236],[11,"push_back","","Appends an element to the back of a list",236],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",236],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",236],[11,"drop","","",236],[6,"Item","std::borrow",""],[11,"next","collections::linked_list","",233],[11,"size_hint","","",233],[11,"next_back","","",233],[6,"Item","std::borrow",""],[11,"next","collections::linked_list","",237],[11,"size_hint","","",237],[11,"next_back","","",237],[11,"insert_next","","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",237],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",237],[6,"Item","std::borrow",""],[11,"next","collections::linked_list","",234],[11,"size_hint","","",234],[11,"next_back","","",234],[11,"from_iter","","",236],[6,"Item","std::borrow",""],[6,"IntoIter","",""],[11,"into_iter","collections::linked_list","",236],[6,"Item","std::borrow",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[11,"extend","collections::linked_list","",236],[11,"eq","","",236],[11,"ne","","",236],[11,"partial_cmp","","",236],[11,"cmp","","",236],[11,"clone","","",236],[11,"fmt","","",236],[11,"hash","","",236],[6,"Item","std::borrow",""],[11,"clone","collections::slice","",238],[11,"new","","Creates an `ElementSwaps` iterator for a sequence of `length` elements.",238],[11,"borrow","collections::vec","",239],[11,"borrow_mut","","",239],[6,"Owned","std::borrow",""],[11,"clone","collections::slice","",240],[11,"clone","","",241],[6,"Item","std::borrow",""],[11,"next","collections::slice","",238],[11,"size_hint","","",238],[6,"Item","std::borrow",""],[11,"next","collections::slice","",242],[11,"size_hint","","",242],[11,"clone","collections::str","",243],[11,"clone","","",244],[6,"Item","std::borrow",""],[11,"next","collections::str","",244],[11,"size_hint","","",244],[11,"clone","","",245],[11,"clone","","",246],[6,"Item","std::borrow",""],[11,"next","collections::str","",246],[11,"clone","","",247],[6,"Item","std::borrow",""],[11,"next","collections::str","",247],[11,"size_hint","","",247],[11,"borrow","collections::string","",248],[6,"Owned","std::borrow",""],[11,"cmp","collections::string","",248],[11,"partial_cmp","","",248],[11,"lt","","",248],[11,"le","","",248],[11,"gt","","",248],[11,"ge","","",248],[11,"clone","","",248],[11,"fmt","","",249],[11,"fmt","","",250],[11,"new","","Creates a new string buffer initialized with the empty string.",248],[11,"with_capacity","","Creates a new string buffer with the given capacity.\nThe string will be able to hold exactly `capacity` bytes without\nreallocating. If `capacity` is 0, the string will not allocate.",248],[11,"from_str","","Creates a new string buffer from the given string.",248],[11,"from_utf8","","Returns the vector as a string buffer, if possible, taking care not to\ncopy it.",248],[11,"from_utf8_lossy","","Converts a vector of bytes to a new UTF-8 string.\nAny invalid UTF-8 sequences are replaced with U+FFFD REPLACEMENT CHARACTER.",248],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `None`\nif `v` contains any invalid data.",248],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",248],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",248],[11,"from_utf8_unchecked","","Converts a vector of bytes to a new `String` without checking if\nit contains valid UTF-8. This is unsafe because it assumes that\nthe UTF-8-ness of the vector has already been validated.",248],[11,"into_bytes","","Return the underlying byte buffer, encoded as UTF-8.",248],[11,"push_str","","Pushes the given string onto this string buffer.",248],[11,"capacity","","Returns the number of bytes that this string buffer can hold without\nreallocating.",248],[11,"reserve","","Reserves capacity for at least `additional` more bytes to be inserted\nin the given `String`. The collection may reserve more space to avoid\nfrequent reallocations.",248],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more bytes to be\ninserted in the given `String`. Does nothing if the capacity is already\nsufficient.",248],[11,"shrink_to_fit","","Shrinks the capacity of this string buffer to match its length.",248],[11,"push","","Adds the given character to the end of the string.",248],[11,"as_bytes","","Works with the underlying buffer as a byte slice.",248],[11,"truncate","","Shortens a string to the specified length.",248],[11,"pop","","Removes the last character from the string buffer and returns it.\nReturns `None` if this string buffer is empty.",248],[11,"remove","","Removes the character from the string buffer at byte position `idx` and\nreturns it.",248],[11,"insert","","Insert a character into the string buffer at byte position `idx`.",248],[11,"as_mut_vec","","Views the string buffer as a mutable sequence of bytes.",248],[11,"len","","Return the number of bytes in this string.",248],[11,"is_empty","","Returns true if the string contains no bytes",248],[11,"clear","","Truncates the string, returning it to 0 length.",248],[11,"into_bytes","","Consume this error, returning the bytes that were attempted to make a\n`String` with.",249],[11,"utf8_error","","Access the underlying UTF8-error that was the cause of this error.",249],[11,"fmt","","",249],[11,"description","","",249],[11,"fmt","","",250],[11,"description","","",250],[11,"from_iter","","",248],[11,"from_iter","","",248],[11,"extend","","",248],[11,"extend","","",248],[11,"eq","","",248],[11,"ne","","",248],[11,"eq","","",248],[11,"ne","","",248],[11,"eq","collections::borrow","",185],[11,"ne","","",185],[11,"eq","collections::string","",248],[11,"ne","","",248],[11,"eq","collections::borrow","",185],[11,"ne","","",185],[11,"as_slice","collections::string","",248],[11,"default","","",248],[11,"fmt","","",248],[11,"fmt","","",248],[11,"hash","","",248],[6,"Output","std::borrow",""],[11,"add","collections::string","",248],[6,"Output","std::borrow",""],[11,"index","collections::string","",248],[6,"Output","std::borrow",""],[11,"index","collections::string","",248],[6,"Output","std::borrow",""],[11,"index","collections::string","",248],[6,"Output","std::borrow",""],[11,"index","collections::string","",248],[6,"Target","std::borrow",""],[11,"deref","collections::string","",248],[6,"Target","std::borrow",""],[11,"deref","collections::string","",251],[6,"Err","std::borrow",""],[11,"from_str","collections::string","",248],[11,"into_cow","","",248],[11,"as_slice","collections::borrow","",185],[11,"write_str","collections::string","",248],[11,"new","collections::vec","Constructs a new, empty `Vec<T>`.",239],[11,"with_capacity","","Constructs a new, empty `Vec<T>` with the specified capacity.",239],[11,"from_raw_parts","","Creates a `Vec<T>` directly from the raw components of another vector.",239],[11,"from_raw_buf","","Creates a vector by copying the elements from a raw pointer.",239],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",239],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`Vec<T>`. The collection may reserve more space to avoid frequent reallocations.",239],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec<T>`. Does nothing if the capacity is already\nsufficient.",239],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",239],[11,"into_boxed_slice","","Convert the vector into Box<[T]>.",239],[11,"truncate","","Shorten a vector, dropping excess elements.",239],[11,"as_mut_slice","","Returns a mutable slice of the elements of `self`.",239],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",239],[11,"set_len","","Sets the length of a vector.",239],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",239],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after position `i` one position to the right.",239],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after position `index` one position to the left.",239],[11,"retain","","Retains only the elements specified by the predicate.",239],[11,"push","","Appends an element to the back of a collection.",239],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it is empty.",239],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",239],[11,"drain","","Creates a draining iterator that clears the `Vec` and iterates over\nthe removed items from start to end.",239],[11,"clear","","Clears the vector, removing all values.",239],[11,"len","","Returns the number of elements in the vector.",239],[11,"is_empty","","Returns `true` if the vector contains no elements.",239],[11,"map_in_place","","Converts a `Vec<T>` to a `Vec<U>` where `T` and `U` have the same\nsize and in case they are not zero-sized the same minimal alignment.",239],[11,"split_off","","Splits the collection into two at the given index.",239],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",239],[11,"push_all","","Appends all elements in a slice to the `Vec`.",239],[11,"dedup","","Removes consecutive repeated elements in the vector.",239],[11,"clone","","",239],[11,"clone_from","","",239],[11,"hash","","",239],[6,"Output","std::borrow",""],[11,"index","collections::vec","",239],[11,"index_mut","","",239],[6,"Output","std::borrow",""],[11,"index","collections::vec","",239],[6,"Output","std::borrow",""],[11,"index","collections::vec","",239],[6,"Output","std::borrow",""],[11,"index","collections::vec","",239],[6,"Output","std::borrow",""],[11,"index","collections::vec","",239],[11,"index_mut","","",239],[11,"index_mut","","",239],[11,"index_mut","","",239],[11,"index_mut","","",239],[6,"Target","std::borrow",""],[11,"deref","collections::vec","",239],[11,"deref_mut","","",239],[11,"from_iter","","",239],[6,"Item","std::borrow",""],[6,"IntoIter","",""],[11,"into_iter","collections::vec","",239],[6,"Item","std::borrow",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[11,"extend","collections::vec","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","collections::borrow","",185],[11,"ne","","",185],[11,"eq","","",185],[11,"ne","","",185],[11,"eq","","",185],[11,"ne","","",185],[11,"eq","collections::vec","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"partial_cmp","","",239],[11,"cmp","","",239],[11,"as_slice","","Returns a slice into `self`.",239],[6,"Output","std::borrow",""],[11,"add","collections::vec","",239],[11,"drop","","",239],[11,"default","","",239],[11,"fmt","","",239],[11,"from_iter","collections::borrow","",185],[11,"into_cow","collections::vec","",239],[11,"into_inner","","Drops all items that have not yet been moved and returns the empty vector.",252],[6,"Item","std::borrow",""],[11,"next","collections::vec","",252],[11,"size_hint","","",252],[11,"next_back","","",252],[11,"drop","","",252],[6,"Item","std::borrow",""],[11,"next","collections::vec","",253],[11,"size_hint","","",253],[11,"next_back","","",253],[11,"drop","","",253],[6,"Target","std::borrow",""],[11,"deref","collections::vec","",254],[11,"drop","","",254],[11,"drop","","",255],[11,"drop","","",256],[11,"clone","collections::vec_deque","",257],[11,"drop","","",257],[11,"default","","",257],[11,"new","","Creates an empty `VecDeque`.",257],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",257],[11,"get","","Retrieves an element in the `VecDeque` by index.",257],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",257],[11,"swap","","Swaps elements at indices `i` and `j`.",257],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without\nreallocating.",257],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `VecDeque`. Does nothing if the capacity is already sufficient.",257],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`Ringbuf`. The collection may reserve more space to avoid frequent reallocations.",257],[11,"shrink_to_fit","","Shrinks the capacity of the ringbuf as much as possible.",257],[11,"truncate","","Shorten a ringbuf, dropping excess elements from the back.",257],[11,"iter","","Returns a front-to-back iterator.",257],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",257],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",257],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",257],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",257],[11,"len","","Returns the number of elements in the `VecDeque`.",257],[11,"is_empty","","Returns true if the buffer contains no elements",257],[11,"drain","","Creates a draining iterator that clears the `VecDeque` and iterates over\nthe removed items from start to end.",257],[11,"clear","","Clears the buffer, removing all values.",257],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",257],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",257],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",257],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",257],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",257],[11,"push_front","","Inserts an element first in the sequence.",257],[11,"push_back","","Appends an element to the back of a buffer",257],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",257],[11,"swap_back_remove","","Removes an element from anywhere in the ringbuf and returns it, replacing it with the last\nelement.",257],[11,"swap_front_remove","","Removes an element from anywhere in the ringbuf and returns it, replacing it with the first\nelement.",257],[11,"insert","","Inserts an element at position `i` within the ringbuf. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",257],[11,"remove","","Removes and returns the element at position `i` from the ringbuf.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `i` is out of bounds.",257],[11,"split_off","","Splits the collection into two at the given index.",257],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",257],[11,"resize","","Modifies the ringbuf in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",257],[11,"clone","","",258],[6,"Item","std::borrow",""],[11,"next","collections::vec_deque","",258],[11,"size_hint","","",258],[11,"next_back","","",258],[11,"indexable","","",258],[11,"idx","","",258],[6,"Item","std::borrow",""],[11,"next","collections::vec_deque","",259],[11,"size_hint","","",259],[11,"next_back","","",259],[6,"Item","std::borrow",""],[11,"next","collections::vec_deque","",260],[11,"size_hint","","",260],[11,"next_back","","",260],[11,"drop","","",261],[6,"Item","std::borrow",""],[11,"next","collections::vec_deque","",261],[11,"size_hint","","",261],[11,"next_back","","",261],[11,"eq","","",257],[11,"partial_cmp","","",257],[11,"cmp","","",257],[11,"hash","","",257],[6,"Output","std::borrow",""],[11,"index","collections::vec_deque","",257],[11,"index_mut","","",257],[11,"from_iter","","",257],[6,"Item","std::borrow",""],[6,"IntoIter","",""],[11,"into_iter","collections::vec_deque","",257],[6,"Item","std::borrow",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[11,"extend","collections::vec_deque","",257],[11,"fmt","","",257],[11,"default","collections::vec_map","",262],[11,"clone","","",262],[11,"clone_from","","",262],[11,"hash","","",262],[11,"new","","Creates an empty `VecMap`.",262],[11,"with_capacity","","Creates an empty `VecMap` with space for at least `capacity`\nelements before resizing.",262],[11,"capacity","","Returns the number of elements the `VecMap` can hold without\nreallocating.",262],[11,"reserve_len","","Reserves capacity for the given `VecMap` to contain `len` distinct keys.\nIn the case of `VecMap` this means reallocations will not occur as long\nas all inserted keys are less than `len`.",262],[11,"reserve_len_exact","","Reserves the minimum capacity for the given `VecMap` to contain `len` distinct keys.\nIn the case of `VecMap` this means reallocations will not occur as long as all inserted\nkeys are less than `len`.",262],[11,"keys","","Returns an iterator visiting all keys in ascending order of the keys.\nThe iterator's element type is `usize`.",262],[11,"values","","Returns an iterator visiting all values in ascending order of the keys.\nThe iterator's element type is `&'r V`.",262],[11,"iter","","Returns an iterator visiting all key-value pairs in ascending order of the keys.\nThe iterator's element type is `(usize, &'r V)`.",262],[11,"iter_mut","","Returns an iterator visiting all key-value pairs in ascending order of the keys,\nwith mutable references to the values.\nThe iterator's element type is `(usize, &'r mut V)`.",262],[11,"into_iter","","Returns an iterator visiting all key-value pairs in ascending order of\nthe keys, consuming the original `VecMap`.\nThe iterator's element type is `(usize, &'r V)`.",262],[11,"append","","Moves all elements from `other` into the map while overwriting existing keys.",262],[11,"split_off","","Splits the collection into two at the given key.",262],[11,"drain","","Returns an iterator visiting all key-value pairs in ascending order of\nthe keys, emptying (but not consuming) the original `VecMap`.\nThe iterator's element type is `(usize, &'r V)`. Keeps the allocated memory for reuse.",262],[11,"len","","Return the number of elements in the map.",262],[11,"is_empty","","Return true if the map contains no elements.",262],[11,"clear","","Clears the map, removing all key-value pairs.",262],[11,"get","","Returns a reference to the value corresponding to the key.",262],[11,"contains_key","","Returns true if the map contains a value for the specified key.",262],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",262],[11,"insert","","Inserts a key-value pair from the map. If the key already had a value\npresent in the map, that value is returned. Otherwise, `None` is returned.",262],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",262],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",262],[11,"get","","Returns a mutable reference to the entry if occupied, or the VacantEntry if vacant",263],[11,"insert","","Sets the value of the entry with the VacantEntry's key,\nand returns a mutable reference to it.",264],[11,"get","","Gets a reference to the value in the entry.",265],[11,"get_mut","","Gets a mutable reference to the value in the entry.",265],[11,"into_mut","","Converts the entry into a mutable reference to its value.",265],[11,"insert","","Sets the value of the entry with the OccupiedEntry's key,\nand returns the entry's old value.",265],[11,"remove","","Takes the value of the entry out of the map, and returns it.",265],[11,"eq","","",262],[11,"partial_cmp","","",262],[11,"cmp","","",262],[11,"fmt","","",262],[11,"from_iter","","",262],[6,"Item","std::borrow",""],[6,"IntoIter","",""],[11,"into_iter","collections::vec_map","",262],[6,"Item","std::borrow",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[11,"extend","collections::vec_map","",262],[6,"Output","std::borrow",""],[11,"index","collections::vec_map","",262],[11,"index_mut","","",262],[11,"clone","","",266],[6,"Item","std::borrow",""],[11,"next","collections::vec_map","",266],[11,"size_hint","","",266],[11,"next_back","","",266],[6,"Item","std::borrow",""],[11,"next","collections::vec_map","",267],[11,"size_hint","","",267],[11,"next_back","","",267],[11,"clone","","",268],[11,"clone","","",269],[6,"Item","std::borrow",""],[11,"next","collections::vec_map","",270],[11,"size_hint","","",270],[11,"next_back","","",270],[6,"Item","std::borrow",""],[11,"next","collections::vec_map","",268],[11,"size_hint","","",268],[11,"next_back","","",268],[6,"Item","std::borrow",""],[11,"next","collections::vec_map","",269],[11,"size_hint","","",269],[11,"next_back","","",269],[6,"Item","std::borrow",""],[11,"next","collections::vec_map","",271],[11,"size_hint","","",271],[11,"next_back","","",271],[4,"Cow","std::borrow","A clone-on-write smart pointer."],[13,"Borrowed","","Borrowed data.",185],[13,"Owned","","Owned data.",185],[8,"IntoCow","","Trait for moving into a `Cow`"],[10,"into_cow","","Moves `self` into `Cow`",272],[0,"fmt","std","Utilities for formatting and printing strings"],[5,"format","std::fmt","The format function takes a precompiled format string and a list of\narguments, to return the resulting formatted string."],[5,"write","","The `write` function takes an output stream, a precompiled format string,\nand a list of arguments. The arguments will be formatted according to the\nspecified format string into the output stream provided."],[6,"Result","",""],[8,"Octal","","Format trait for the `o` character"],[10,"fmt","","Formats the value using the given formatter.",273],[8,"Write","","A collection of methods that are required to format a message into a stream."],[10,"write_str","","Writes a slice of bytes into this writer, returning whether the write\nsucceeded.",274],[10,"write_fmt","","Glue for usage of the `write!` macro with implementers of this trait.",274],[3,"Radix","","A radix with in the range of `2..36`."],[8,"LowerExp","","Format trait for the `e` character"],[10,"fmt","","Formats the value using the given formatter.",275],[3,"Arguments","","This structure represents a safely precompiled version of a format string\nand its arguments. This cannot be generated at runtime because it cannot\nsafely be done so, so no constructors are given and the fields are private\nto prevent modification."],[8,"Pointer","","Format trait for the `p` character"],[10,"fmt","","Formats the value using the given formatter.",276],[8,"Display","","When a value can be semantically expressed as a String, this trait may be\nused. It corresponds to the default format, `{}`."],[10,"fmt","","Formats the value using the given formatter.",277],[3,"Formatter","","A struct to represent both where to emit formatting strings to and how they\nshould be formatted. A mutable version of this is passed to all formatting\ntraits."],[3,"Error","","The error type which is returned from formatting a message into a stream."],[3,"Error","","The error type which is returned from formatting a message into a stream."],[8,"UpperExp","","Format trait for the `E` character"],[10,"fmt","","Formats the value using the given formatter.",278],[8,"UpperHex","","Format trait for the `X` character"],[10,"fmt","","Formats the value using the given formatter.",279],[5,"radix","","Constructs a radix formatter in the range of `2..36`."],[8,"Binary","","Format trait for the `b` character"],[10,"fmt","","Formats the value using the given formatter.",280],[8,"Debug","","Format trait for the `:?` format. Useful for debugging, all types\nshould implement this."],[10,"fmt","","Formats the value using the given formatter.",281],[8,"LowerHex","","Format trait for the `x` character"],[10,"fmt","","Formats the value using the given formatter.",282],[3,"RadixFmt","","A helper type for formatting radixes."],[0,"slice","std","Utilities for slice manipulation"],[8,"SliceExt","std::slice","Allocating extension methods for slices."],[16,"Item","std::slice::SliceExt",""],[10,"sort_by","std::slice","Sorts the slice, in place, using `compare` to compare\nelements.",283],[10,"move_from","","Consumes `src` and moves as many elements as it can into `self`\nfrom the range [start,end).",283],[10,"slice","","Deprecated: use `&s[start .. end]` notation instead.",283],[10,"slice_from","","Deprecated: use `&s[start..]` notation instead.",283],[10,"slice_to","","Deprecated: use `&s[..end]` notation instead.",283],[10,"split_at","","Divides one slice into two at an index.",283],[10,"iter","","Returns an iterator over the slice.",283],[10,"split","","Returns an iterator over subslices separated by elements that match\n`pred`.  The matched element is not contained in the subslices.",283],[10,"splitn","","Returns an iterator over subslices separated by elements that match\n`pred`, limited to splitting at most `n` times.  The matched element is\nnot contained in the subslices.",283],[10,"rsplitn","","Returns an iterator over subslices separated by elements that match\n`pred` limited to splitting at most `n` times. This starts at the end of\nthe slice and works backwards.  The matched element is not contained in\nthe subslices.",283],[10,"windows","","Returns an iterator over all contiguous windows of length\n`size`. The windows overlap. If the slice is shorter than\n`size`, the iterator returns no values.",283],[10,"chunks","","Returns an iterator over `size` elements of the slice at a\ntime. The chunks do not overlap. If `size` does not divide the\nlength of the slice, then the last chunk will not have length\n`size`.",283],[10,"get","","Returns the element of a slice at the given index, or `None` if the\nindex is out of bounds.",283],[10,"first","","Returns the first element of a slice, or `None` if it is empty.",283],[10,"tail","","Returns all but the first element of a slice.",283],[10,"init","","Returns all but the last element of a slice.",283],[10,"last","","Returns the last element of a slice, or `None` if it is empty.",283],[10,"get_unchecked","","Returns a pointer to the element at the given index, without doing\nbounds checking.",283],[10,"as_ptr","","Returns an unsafe pointer to the slice's buffer",283],[10,"binary_search_by","","Binary search a sorted slice with a comparator function.",283],[10,"len","","Return the number of elements in the slice",283],[10,"is_empty","","Returns true if the slice has a length of 0",283],[10,"get_mut","","Returns a mutable reference to the element at the given index,\nor `None` if the index is out of bounds",283],[10,"as_mut_slice","","Work with `self` as a mut slice.\nPrimarily intended for getting a &mut [T] from a [T; N].",283],[10,"slice_mut","","Deprecated: use `&mut s[start .. end]` instead.",283],[10,"slice_from_mut","","Deprecated: use `&mut s[start ..]` instead.",283],[10,"slice_to_mut","","Deprecated: use `&mut s[.. end]` instead.",283],[10,"iter_mut","","Returns an iterator that allows modifying each value",283],[10,"first_mut","","Returns a mutable pointer to the first element of a slice, or `None` if it is empty",283],[10,"tail_mut","","Returns all but the first element of a mutable slice",283],[10,"init_mut","","Returns all but the last element of a mutable slice",283],[10,"last_mut","","Returns a mutable pointer to the last item in the slice.",283],[10,"split_mut","","Returns an iterator over mutable subslices separated by elements that\nmatch `pred`.  The matched element is not contained in the subslices.",283],[10,"splitn_mut","","Returns an iterator over subslices separated by elements that match\n`pred`, limited to splitting at most `n` times.  The matched element is\nnot contained in the subslices.",283],[10,"rsplitn_mut","","Returns an iterator over subslices separated by elements that match\n`pred` limited to splitting at most `n` times. This starts at the end of\nthe slice and works backwards.  The matched element is not contained in\nthe subslices.",283],[10,"chunks_mut","","Returns an iterator over `chunk_size` elements of the slice at a time.\nThe chunks are mutable and do not overlap. If `chunk_size` does\nnot divide the length of the slice, then the last chunk will not\nhave length `chunk_size`.",283],[10,"swap","","Swaps two elements in a slice.",283],[10,"split_at_mut","","Divides one `&mut` into two at an index.",283],[10,"reverse","","Reverse the order of elements in a slice, in place.",283],[10,"get_unchecked_mut","","Returns an unsafe mutable pointer to the element in index",283],[10,"as_mut_ptr","","Return an unsafe mutable pointer to the slice's buffer.",283],[10,"to_vec","","Copies `self` into a new `Vec`.",283],[10,"permutations","","Creates an iterator that yields every possible permutation of the\nvector in succession.",283],[10,"clone_from_slice","","Copies as many elements from `src` as it can into `self` (the\nshorter of `self.len()` and `src.len()`). Returns the number\nof elements copied.",283],[10,"sort","","Sorts the slice, in place.",283],[10,"binary_search","","Binary search a sorted slice for a given element.",283],[10,"binary_search_elem","","Deprecated: use `binary_search` instead.",283],[10,"next_permutation","","Mutates the slice to the next lexicographic permutation.",283],[10,"prev_permutation","","Mutates the slice to the previous lexicographic permutation.",283],[10,"position_elem","","Find the first index containing a matching value.",283],[10,"rposition_elem","","Find the last index containing a matching value.",283],[10,"contains","","Returns true if the slice contains an element with the given value.",283],[10,"starts_with","","Returns true if `needle` is a prefix of the slice.",283],[10,"ends_with","","Returns true if `needle` is a suffix of the slice.",283],[10,"into_vec","","Convert `self` into a vector without clones or allocation.",283],[8,"SliceConcatExt","","An extension trait for concatenating slices"],[10,"concat","","Flattens a slice of `T` into a single value `U`.",284],[10,"connect","","Flattens a slice of `T` into a single value `U`, placing a given separator between each.",284],[3,"ElementSwaps","","An iterator that yields the element swaps needed to produce\na sequence of all possible permutations for an indexed sequence of\nelements. Each permutation is only a single swap apart."],[3,"Permutations","","An iterator that uses `ElementSwaps` to iterate through\nall possible permutations of a vector."],[8,"AsSlice","","Data that is viewable as a slice."],[10,"as_slice","","Work with `self` as a slice.",285],[3,"IterMut","","Mutable slice iterator."],[0,"bytes","","Operations on `[u8]`."],[8,"MutableByteVector","std::slice::bytes","A trait for operations on mutable `[u8]`s."],[10,"set_memory","","Sets all bytes of the receiver to the given value.",286],[5,"copy_memory","","Copies data from `src` to `dst`"],[3,"Iter","std::slice","Immutable slice iterator"],[3,"SplitNMut","","An iterator over subslices separated by elements that match a predicate\nfunction, limited to a given number of splits."],[3,"ChunksMut","","An iterator over a slice in (non-overlapping) mutable chunks (`size`\nelements at a time). When the slice len is not evenly divided by the chunk\nsize, the last slice of the iteration will be the remainder."],[3,"SplitN","","An iterator over subslices separated by elements that match a predicate\nfunction, limited to a given number of splits."],[5,"mut_ref_slice","","Converts a pointer to A into a slice of length 1 (without copying)."],[8,"IntSliceExt","","Extension methods for slices containing integers."],[10,"as_unsigned","","Converts the slice to an immutable slice of unsigned integers with the same width.",287],[10,"as_signed","","Converts the slice to an immutable slice of signed integers with the same width.",287],[10,"as_unsigned_mut","","Converts the slice to a mutable slice of unsigned integers with the same width.",287],[10,"as_signed_mut","","Converts the slice to a mutable slice of signed integers with the same width.",287],[3,"Split","","An iterator over subslices separated by elements that match a predicate\nfunction."],[5,"from_raw_parts_mut","","Performs the same functionality as `from_raw_parts`, except that a mutable\nslice is returned."],[3,"Windows","","An iterator over overlapping subslices of length `size`."],[5,"from_raw_parts","","Forms a slice from a pointer and a length."],[3,"SplitMut","","An iterator over the subslices of the vector which are separated\nby elements that match `pred`."],[3,"RSplitN","","An iterator over subslices separated by elements that match a\npredicate function, limited to a given number of splits, starting\nfrom the end of the slice."],[5,"ref_slice","","Converts a pointer to A into a slice of length 1 (without copying)."],[5,"from_raw_buf","","Forms a slice from a pointer and a length."],[3,"RSplitNMut","","An iterator over subslices separated by elements that match a\npredicate function, limited to a given number of splits, starting\nfrom the end of the slice."],[3,"Chunks","","An iterator over a slice in (non-overlapping) chunks (`size` elements at a\ntime)."],[5,"from_raw_mut_buf","","Performs the same functionality as `from_raw_buf`, except that a mutable\nslice is returned."],[0,"str","std","Unicode string manipulation (the [`str`](../primitive.str.html) type)."],[3,"Decompositions","std::str","External iterator for a string decomposition's characters."],[3,"Recompositions","","External iterator for a string recomposition's characters."],[3,"Utf16Units","","External iterator for a string's UTF16 codeunits."],[8,"StrExt","","Any string that can be represented as a slice."],[10,"escape_default","","Escapes each char in `s` with `char::escape_default`.",288],[10,"escape_unicode","","Escapes each char in `s` with `char::escape_unicode`.",288],[10,"replace","","Replaces all occurrences of one string with another.",288],[10,"nfd_chars","","Returns an iterator over the string in Unicode Normalization Form D\n(canonical decomposition).",288],[10,"nfkd_chars","","Returns an iterator over the string in Unicode Normalization Form KD\n(compatibility decomposition).",288],[10,"nfc_chars","","An Iterator over the string in Unicode Normalization Form C\n(canonical decomposition followed by canonical composition).",288],[10,"nfkc_chars","","An Iterator over the string in Unicode Normalization Form KC\n(compatibility decomposition followed by canonical composition).",288],[10,"contains","","Returns `true` if `self` contains another `&str`.",288],[10,"contains_char","","Returns `true` if `self` contains a `char`.",288],[10,"chars","","An iterator over the codepoints of `self`.",288],[10,"bytes","","An iterator over the bytes of `self`.",288],[10,"char_indices","","An iterator over the characters of `self` and their byte offsets.",288],[10,"split","","An iterator over substrings of `self`, separated by characters\nmatched by a pattern.",288],[10,"splitn","","An iterator over substrings of `self`, separated by characters matched by a pattern,\nrestricted to splitting at most `count` times.",288],[10,"split_terminator","","An iterator over substrings of `self`, separated by characters\nmatched by a pattern.",288],[10,"rsplitn","","An iterator over substrings of `self`, separated by characters matched by a pattern,\nstarting from the end of the string.",288],[10,"match_indices","","An iterator over the start and end indices of the disjoint matches of a `&str` within\n`self`.",288],[10,"split_str","","An iterator over the substrings of `self` separated by a `&str`.",288],[10,"lines","","An iterator over the lines of a string, separated by `\\n`.",288],[10,"lines_any","","An iterator over the lines of a string, separated by either `\\n` or `\\r\\n`.",288],[10,"slice","","Deprecated: use `s[a .. b]` instead.",288],[10,"slice_from","","Deprecated: use `s[a..]` instead.",288],[10,"slice_to","","Deprecated: use `s[..a]` instead.",288],[10,"slice_chars","","Returns a slice of the string from the character range [`begin`..`end`).",288],[10,"slice_unchecked","","Takes a bytewise slice from a string.",288],[10,"starts_with","","Returns `true` if the given `&str` is a prefix of the string.",288],[10,"ends_with","","Returns true if the given `&str` is a suffix of the string.",288],[10,"trim_matches","","Returns a string with all pre- and suffixes that match a pattern repeatedly removed.",288],[10,"trim_left_matches","","Returns a string with all prefixes that match a pattern repeatedly removed.",288],[10,"trim_right_matches","","Returns a string with all suffixes that match a pattern repeatedly removed.",288],[10,"is_char_boundary","","Check that `index`-th byte lies at the start and/or end of a UTF-8 code point sequence.",288],[10,"char_range_at","","Given a byte position, return the next char and its index.",288],[10,"char_range_at_reverse","","Given a byte position, return the previous `char` and its position.",288],[10,"char_at","","Given a byte position, return the `char` at that position.",288],[10,"char_at_reverse","","Given a byte position, return the `char` at that position, counting from the end.",288],[10,"as_bytes","","Convert `self` to a byte slice.",288],[10,"find","","Returns the byte index of the first character of `self` that matches the pattern, if it\nexists.",288],[10,"rfind","","Returns the byte index of the last character of `self` that matches the pattern, if it\nexists.",288],[10,"find_str","","Returns the byte index of the first matching substring if it exists.",288],[10,"slice_shift_char","","Retrieves the first character from a `&str` and returns it.",288],[10,"subslice_offset","","Returns the byte offset of an inner slice relative to an enclosing outer slice.",288],[10,"as_ptr","","Return an unsafe pointer to the `&str`'s buffer.",288],[10,"utf16_units","","Return an iterator of `u16` over the string encoded as UTF-16.",288],[10,"len","","Returns the length of `self` in bytes.",288],[10,"is_empty","","Returns true if this slice has a length of zero bytes.",288],[10,"parse","","Parses `self` into the specified type.",288],[10,"graphemes","","Returns an iterator over the [grapheme clusters][graphemes] of `self`.",288],[10,"grapheme_indices","","Returns an iterator over the grapheme clusters of `self` and their byte offsets. See\n`graphemes()` for more information.",288],[10,"words","","An iterator over the non-empty words of `self`.",288],[10,"width","","Returns a string's displayed width in columns.",288],[10,"trim","","Returns a `&str` with leading and trailing whitespace removed.",288],[10,"trim_left","","Returns a `&str` with leading whitespace removed.",288],[10,"trim_right","","Returns a `&str` with trailing whitespace removed.",288],[10,"to_lowercase","","Returns the lowercase equivalent of this string.",288],[10,"to_uppercase","","Returns the uppercase equivalent of this string.",288],[3,"MatchIndices","","An iterator over the start and end indices of the matches of a\nsubstring within a larger string"],[5,"from_c_str","","Constructs a static string slice from a given raw pointer."],[3,"SplitTerminator","","Return type of `StrExt::split_terminator`"],[3,"CharRange","","Struct that contains a `char` and the index of the first byte of\nthe next `char` in a string.  This can be used as a data structure\nfor iterating over the UTF-8 bytes of a string."],[12,"ch","","Current `char`",289],[12,"next","","Index of the first byte of the next `char`",289],[3,"CharIndices","","External iterator for a string's characters and their byte offsets.\nUse with the `std::iter` module."],[8,"ReverseSearcher","","A reverse searcher for a string pattern."],[10,"next_back","","Performs the next search step starting from the back.",290],[10,"next_match_back","","Find the next `Match` result. See `next_back()`",290],[10,"next_reject_back","","Find the next `Reject` result. See `next_back()`",290],[3,"SplitN","","Return type of `StrExt::splitn`"],[3,"Lines","","An iterator over the lines of a string, separated by `\\n`."],[8,"DoubleEndedSearcher","","A marker trait to express that a `ReverseSearcher`\ncan be used for a `DoubleEndedIterator` implementation."],[8,"Searcher","","A searcher for a string pattern."],[10,"haystack","","Getter for the underlaying string to be searched in",291],[10,"next","","Performs the next search step starting from the front.",291],[10,"next_match","","Find the next `Match` result. See `next()`",291],[10,"next_reject","","Find the next `Reject` result. See `next()`",291],[3,"Chars","","Iterator for the char (representing *Unicode Scalar Values*) of a string"],[3,"Split","","Return type of `StrExt::split`"],[4,"SearchStep","","Result of calling `Searcher::next()` or `ReverseSearcher::next_back()`."],[13,"Match","","Expresses that a match of the pattern has been found at\n`haystack[a..b]`.",94],[13,"Reject","","Expresses that `haystack[a..b]` has been rejected as a possible match\nof the pattern.",94],[13,"Done","","Expresses that every byte of the haystack has been visted, ending\nthe iteration.",94],[8,"CharEq","","Something that can be used to compare against a character"],[10,"matches","","Determine if the splitter should split at the given character",292],[10,"only_ascii","","Indicate if this is only concerned about ASCII characters,\nwhich can allow for a faster implementation.",292],[3,"RSplitN","","Return type of `StrExt::rsplitn`"],[3,"ParseBoolError","","An error returned when parsing a `bool` from a string fails."],[8,"Pattern","","A string pattern."],[16,"Searcher","std::str::Pattern",""],[10,"into_searcher","std::str","Construct the associated searcher from\n`self` and the `haystack` to search in.",293],[10,"is_contained_in","","Check whether the pattern matches anywhere in the haystack",293],[10,"is_prefix_of","","Check whether the pattern matches at the front of the haystack",293],[10,"is_suffix_of","","Check whether the pattern matches at the back of the haystack",293],[11,"clone","unicode::tables::grapheme","",294],[11,"clone","unicode::u_str","",295],[6,"Item","std::str",""],[11,"next","unicode::u_str","",295],[11,"size_hint","","",295],[11,"next_back","","",295],[11,"clone","","",296],[11,"eq","","",297],[11,"ne","","",297],[6,"Item","std::str",""],[11,"size_hint","unicode::u_str","",296],[11,"next","","",296],[11,"next_back","","",296],[11,"clone","","",298],[11,"fmt","","",299],[11,"clone","","",299],[11,"eq","","",299],[11,"ne","","",299],[11,"to_char_lossy","","Convert `self` to a `char`, taking `LoneSurrogate`s to the\nreplacement character (U+FFFD).",299],[6,"Item","std::str",""],[11,"next","unicode::u_str","",298],[11,"size_hint","","",298],[11,"clone","","",300],[11,"new","","Create an UTF-16 encoder from any `char` iterator.",300],[6,"Item","std::str",""],[11,"next","unicode::u_str","",300],[11,"size_hint","","",300],[6,"Item","std::str",""],[11,"next","unicode::u_str","",301],[11,"next_back","","",301],[6,"Item","std::str",""],[11,"next","unicode::char","",302],[6,"Item","std::str",""],[11,"next","unicode::char","",303],[3,"GraphemeIndices","std::str","External iterator for grapheme clusters and byte offsets."],[3,"SplitStr","","An iterator over the substrings of a string separated by a given\nsearch string"],[3,"Bytes","","External iterator for a string's bytes.\nUse with the `std::iter` module."],[5,"from_utf8","","Converts a slice of bytes to a string slice without performing any\nallocations."],[5,"from_utf8_unchecked","","Converts a slice of bytes to a string slice without checking\nthat the string contains valid UTF-8."],[3,"Words","","An iterator over the words of a string, separated by a sequence of whitespace"],[4,"Utf8Error","","Errors which can occur when attempting to interpret a byte slice as a `str`."],[13,"InvalidByte","","An invalid byte was detected at the byte offset given.",99],[13,"TooShort","","The byte slice was invalid because more bytes were needed but no more\nbytes were available.",99],[8,"FromStr","","A trait to abstract the idea of creating a new instance of a type from a\nstring."],[16,"Err","std::str::FromStr",""],[10,"from_str","std::str","Parses a string `s` to return an optional value of this type. If the\nstring is ill-formatted, the None is returned.",304],[3,"LinesAny","","An iterator over the lines of a string, separated by either `\\n` or (`\\r\\n`)."],[8,"Str","","Any string that can be represented as a slice"],[10,"as_slice","","Work with `self` as a slice.",305],[3,"Graphemes","","External iterator for a string's\n[grapheme clusters](http://www.unicode.org/reports/tr29/#Grapheme_Cluster_Boundaries)."],[0,"string","std","An owned, growable string that enforces that its contents are valid UTF-8."],[3,"String","std::string","A growable string stored as a UTF-8 encoded buffer."],[3,"FromUtf8Error","","A possible error value from the `String::from_utf8` function."],[3,"FromUtf16Error","","A possible error value from the `String::from_utf16` function."],[3,"DerefString","","Wrapper type providing a `&String` reference via `Deref`."],[5,"as_string","","Convert a string slice to a wrapper type providing a `&String` reference."],[8,"ToString","","A generic trait for converting a value to a string"],[10,"to_string","","Converts the value of `self` to an owned string",306],[6,"CowString","",""],[0,"vec","std","A growable list type with heap-allocated contents, written `Vec<T>` but pronounced 'vector.'"],[3,"Vec","std::vec","A growable list type, written `Vec<T>` but pronounced 'vector.'"],[6,"CowVec","",""],[3,"IntoIter","","An iterator that moves out of a vector."],[3,"Drain","","An iterator that drains a vector."],[3,"DerefVec","","Wrapper type providing a `&Vec<T>` reference via `Deref`."],[5,"as_vec","","Convert a slice to a wrapper type providing a `&Vec<T>` reference."],[0,"char","std","Character manipulation (`char` type, Unicode Scalar Value)"],[8,"CharExt","std::char","Functionality for manipulating `char`."],[10,"is_digit","","Checks if a `char` parses as a numeric digit in the given radix.",307],[10,"to_digit","","Converts a character to the corresponding digit.",307],[10,"escape_unicode","","Returns an iterator that yields the hexadecimal Unicode escape of a\ncharacter, as `char`s.",307],[10,"escape_default","","Returns an iterator that yields the 'default' ASCII and\nC++11-like literal escape of a character, as `char`s.",307],[10,"len_utf8","","Returns the number of bytes this character would need if encoded in\nUTF-8.",307],[10,"len_utf16","","Returns the number of 16-bit code units this character would need if\nencoded in UTF-16.",307],[10,"encode_utf8","","Encodes this character as UTF-8 into the provided byte buffer, and then\nreturns the number of bytes written.",307],[10,"encode_utf16","","Encodes this character as UTF-16 into the provided `u16` buffer, and\nthen returns the number of `u16`s written.",307],[10,"is_alphabetic","","Returns whether the specified character is considered a Unicode\nalphabetic code point.",307],[10,"is_xid_start","","Returns whether the specified character satisfies the 'XID_Start'\nUnicode property.",307],[10,"is_xid_continue","","Returns whether the specified `char` satisfies the 'XID_Continue'\nUnicode property.",307],[10,"is_lowercase","","Indicates whether a character is in lowercase.",307],[10,"is_uppercase","","Indicates whether a character is in uppercase.",307],[10,"is_whitespace","","Indicates whether a character is whitespace.",307],[10,"is_alphanumeric","","Indicates whether a character is alphanumeric.",307],[10,"is_control","","Indicates whether a character is a control code point.",307],[10,"is_numeric","","Indicates whether the character is numeric (Nd, Nl, or No).",307],[10,"to_lowercase","","Converts a character to its lowercase equivalent.",307],[10,"to_uppercase","","Converts a character to its uppercase equivalent.",307],[10,"width","","Returns this character's displayed width in columns, or `None` if it is a\ncontrol character other than `'\\x00'`.",307],[3,"ToLowercase","","An iterator over the lowercase mapping of a given character, returned from\nthe `lowercase` method on characters."],[3,"ToUppercase","","An iterator over the uppercase mapping of a given character, returned from\nthe `uppercase` method on characters."],[17,"MAX","","The highest valid code point"],[5,"decompose_compatible","","Compute canonical or compatible Unicode decomposition for character"],[5,"from_digit","","Converts a number to the character representing it."],[17,"UNICODE_VERSION","","The version of [Unicode](http://www.unicode.org/)\nthat the unicode parts of `CharExt` and `UnicodeStrPrelude` traits are based on."],[3,"EscapeDefault","","An iterator over the characters that represent a `char`, escaped\nfor maximum portability."],[5,"compose","",""],[3,"EscapeUnicode","","An iterator over the characters that represent a `char`, as escaped by\nRust's unicode escaping rules."],[5,"canonical_combining_class","",""],[5,"from_u32","","Converts a `u32` to an `Option<char>`."],[5,"decompose_canonical","","Compute canonical Unicode decomposition for character"],[0,"prelude","std","The Rust prelude"],[0,"v1","std::prelude","The first version of the prelude of the standard library."],[0,"isize","std","Operations and constants for pointer-sized signed integers (`isize` type)"],[17,"BITS","std::isize",""],[17,"BYTES","",""],[17,"MIN","",""],[17,"MAX","",""],[0,"i8","std","Operations and constants for signed 8-bits integers (`i8` type)"],[17,"BITS","std::i8",""],[17,"BYTES","",""],[17,"MIN","",""],[17,"MAX","",""],[0,"i16","std","Operations and constants for signed 16-bits integers (`i16` type)"],[17,"BITS","std::i16",""],[17,"BYTES","",""],[17,"MIN","",""],[17,"MAX","",""],[0,"i32","std","Operations and constants for signed 32-bits integers (`i32` type)"],[17,"BITS","std::i32",""],[17,"BYTES","",""],[17,"MIN","",""],[17,"MAX","",""],[0,"i64","std","Operations and constants for signed 64-bits integers (`i64` type)"],[17,"BITS","std::i64",""],[17,"BYTES","",""],[17,"MIN","",""],[17,"MAX","",""],[0,"usize","std","Operations and constants for pointer-sized unsigned integers (`usize` type)"],[17,"BITS","std::usize",""],[17,"BYTES","",""],[17,"MIN","",""],[17,"MAX","",""],[0,"u8","std","Operations and constants for unsigned 8-bits integers (`u8` type)"],[17,"BITS","std::u8",""],[17,"BYTES","",""],[17,"MIN","",""],[17,"MAX","",""],[0,"u16","std","Operations and constants for unsigned 16-bits integers (`u16` type)"],[17,"BITS","std::u16",""],[17,"BYTES","",""],[17,"MIN","",""],[17,"MAX","",""],[0,"u32","std","Operations and constants for unsigned 32-bits integers (`u32` type)"],[17,"BITS","std::u32",""],[17,"BYTES","",""],[17,"MIN","",""],[17,"MAX","",""],[0,"u64","std","Operations and constants for unsigned 64-bits integer (`u64` type)"],[17,"BITS","std::u64",""],[17,"BYTES","",""],[17,"MIN","",""],[17,"MAX","",""],[0,"f32","std","Operations and constants for 32-bits floats (`f32` type)"],[17,"RADIX","std::f32",""],[17,"MANTISSA_DIGITS","",""],[17,"DIGITS","",""],[17,"EPSILON","",""],[17,"MIN_VALUE","","Smallest finite f32 value"],[17,"MIN_POS_VALUE","","Smallest positive, normalized f32 value"],[17,"MAX_VALUE","","Largest finite f32 value"],[17,"MIN_EXP","",""],[17,"MAX_EXP","",""],[17,"MIN_10_EXP","",""],[17,"MAX_10_EXP","",""],[17,"NAN","",""],[17,"INFINITY","",""],[17,"NEG_INFINITY","",""],[17,"MIN","","Smallest finite f32 value"],[17,"MIN_POSITIVE","","Smallest positive, normalized f32 value"],[17,"MAX","","Largest finite f32 value"],[0,"consts","","Various useful constants."],[17,"PI","std::f32::consts","Archimedes' constant"],[17,"PI_2","","pi * 2.0"],[17,"FRAC_PI_2","","pi/2.0"],[17,"FRAC_PI_3","","pi/3.0"],[17,"FRAC_PI_4","","pi/4.0"],[17,"FRAC_PI_6","","pi/6.0"],[17,"FRAC_PI_8","","pi/8.0"],[17,"FRAC_1_PI","","1.0/pi"],[17,"FRAC_2_PI","","2.0/pi"],[17,"FRAC_2_SQRTPI","","2.0/sqrt(pi)"],[17,"SQRT2","","sqrt(2.0)"],[17,"FRAC_1_SQRT2","","1.0/sqrt(2.0)"],[17,"E","","Euler's number"],[17,"LOG2_E","","log2(e)"],[17,"LOG10_E","","log10(e)"],[17,"LN_2","","ln(2.0)"],[17,"LN_10","","ln(10.0)"],[5,"to_string","std::f32","Converts a float to a string"],[5,"to_str_hex","","Converts a float to a string in hexadecimal format"],[5,"to_str_radix_special","","Converts a float to a string in a given radix, and a flag indicating\nwhether it's a special value"],[5,"to_str_exact","","Converts a float to a string with exactly the number of\nprovided significant digits"],[5,"to_str_digits","","Converts a float to a string with a maximum number of\nsignificant digits"],[5,"to_str_exp_exact","","Converts a float to a string using the exponential notation with exactly the number of\nprovided digits after the decimal point in the significand"],[5,"to_str_exp_digits","","Converts a float to a string using the exponential notation with the maximum number of\ndigits after the decimal point in the significand"],[0,"f64","std","Operations and constants for 64-bits floats (`f64` type)"],[17,"RADIX","std::f64",""],[17,"MANTISSA_DIGITS","",""],[17,"DIGITS","",""],[17,"EPSILON","",""],[17,"MIN_VALUE","","Smallest finite f64 value"],[17,"MIN_POS_VALUE","","Smallest positive, normalized f64 value"],[17,"MAX_VALUE","","Largest finite f64 value"],[17,"MIN_EXP","",""],[17,"MAX_EXP","",""],[17,"MIN_10_EXP","",""],[17,"MAX_10_EXP","",""],[17,"NAN","",""],[17,"INFINITY","",""],[17,"NEG_INFINITY","",""],[17,"MIN","","Smallest finite f64 value"],[17,"MIN_POSITIVE","","Smallest positive, normalized f64 value"],[17,"MAX","","Largest finite f64 value"],[0,"consts","","Various useful constants."],[17,"PI","std::f64::consts","Archimedes' constant"],[17,"PI_2","","pi * 2.0"],[17,"FRAC_PI_2","","pi/2.0"],[17,"FRAC_PI_3","","pi/3.0"],[17,"FRAC_PI_4","","pi/4.0"],[17,"FRAC_PI_6","","pi/6.0"],[17,"FRAC_PI_8","","pi/8.0"],[17,"FRAC_1_PI","","1.0/pi"],[17,"FRAC_2_PI","","2.0/pi"],[17,"FRAC_2_SQRTPI","","2.0/sqrt(pi)"],[17,"SQRT2","","sqrt(2.0)"],[17,"FRAC_1_SQRT2","","1.0/sqrt(2.0)"],[17,"E","","Euler's number"],[17,"LOG2_E","","log2(e)"],[17,"LOG10_E","","log10(e)"],[17,"LN_2","","ln(2.0)"],[17,"LN_10","","ln(10.0)"],[5,"to_string","std::f64","Converts a float to a string"],[5,"to_str_hex","","Converts a float to a string in hexadecimal format"],[5,"to_str_radix_special","","Converts a float to a string in a given radix, and a flag indicating\nwhether it's a special value"],[5,"to_str_exact","","Converts a float to a string with exactly the number of\nprovided significant digits"],[5,"to_str_digits","","Converts a float to a string with a maximum number of\nsignificant digits"],[5,"to_str_exp_exact","","Converts a float to a string using the exponential notation with exactly the number of\nprovided digits after the decimal point in the significand"],[5,"to_str_exp_digits","","Converts a float to a string using the exponential notation with the maximum number of\ndigits after the decimal point in the significand"],[0,"ascii","std","Operations on ASCII strings and characters"],[3,"EscapeDefault","std::ascii","An iterator over the escaped version of a byte, constructed via\n`std::ascii::escape_default`."],[5,"escape_default","","Returns a 'default' ASCII and C++11-like literal escape of a `u8`"],[8,"OwnedAsciiExt","","Extension methods for ASCII-subset only operations on owned strings"],[10,"into_ascii_uppercase","","Convert the string to ASCII upper case:\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.",308],[10,"into_ascii_lowercase","","Convert the string to ASCII lower case:\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.",308],[8,"AsciiExt","","Extension methods for ASCII-subset only operations on string slices"],[16,"Owned","std::ascii::AsciiExt","Container type for copied ASCII characters."],[10,"is_ascii","std::ascii","Check if within the ASCII range.",309],[10,"to_ascii_uppercase","","Makes a copy of the string in ASCII upper case:\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.",309],[10,"to_ascii_lowercase","","Makes a copy of the string in ASCII lower case:\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.",309],[10,"eq_ignore_ascii_case","","Check that two strings are an ASCII case-insensitive match.\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporary strings.",309],[10,"make_ascii_uppercase","","Convert this type to its ASCII upper case equivalent in-place.",309],[10,"make_ascii_lowercase","","Convert this type to its ASCII lower case equivalent in-place.",309],[6,"Owned","",""],[11,"into_ascii_uppercase","std::string","",248],[11,"into_ascii_lowercase","","",248],[6,"Owned","std::ascii",""],[11,"into_ascii_uppercase","std::vec","",239],[11,"into_ascii_lowercase","","",239],[6,"Owned","std::ascii",""],[6,"Owned","",""],[6,"Item","",""],[11,"next","","",310],[11,"size_hint","","",310],[11,"next_back","","",310],[0,"thunk","std",""],[3,"Thunk","std::thunk",""],[8,"Invoke","",""],[10,"invoke","","",311],[11,"new","","",312],[11,"with_arg","","",312],[11,"invoke","","",312],[0,"num","std","Numeric traits and functions for generic mathematics"],[8,"Int","std::num","A built-in signed or unsigned integer."],[10,"zero","","Returns the `0` value of this integer type.",313],[10,"one","","Returns the `1` value of this integer type.",313],[10,"min_value","","Returns the smallest value that can be represented by this integer type.",313],[10,"max_value","","Returns the largest value that can be represented by this integer type.",313],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",313],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",313],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",313],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",313],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",313],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",313],[10,"swap_bytes","","Reverses the byte order of the integer.",313],[10,"from_be","","Convert an integer from big endian to the target's endianness.",313],[10,"from_le","","Convert an integer from little endian to the target's endianness.",313],[10,"to_be","","Convert `self` to big endian from the target's endianness.",313],[10,"to_le","","Convert `self` to little endian from the target's endianness.",313],[10,"checked_add","","Checked integer addition. Computes `self + other`, returning `None` if\noverflow occurred.",313],[10,"checked_sub","","Checked integer subtraction. Computes `self - other`, returning `None`\nif underflow occurred.",313],[10,"checked_mul","","Checked integer multiplication. Computes `self * other`, returning\n`None` if underflow or overflow occurred.",313],[10,"checked_div","","Checked integer division. Computes `self / other`, returning `None` if\n`other == 0` or the operation results in underflow or overflow.",313],[10,"saturating_add","","Saturating integer addition. Computes `self + other`, saturating at\nthe numeric bounds instead of overflowing.",313],[10,"saturating_sub","","Saturating integer subtraction. Computes `self - other`, saturating at\nthe numeric bounds instead of overflowing.",313],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",313],[8,"SignedInt","","A built-in two's complement integer."],[10,"abs","","Computes the absolute value of `self`. `Int::min_value()` will be\nreturned if the number is `Int::min_value()`.",314],[10,"signum","","Returns a number representing sign of `self`.",314],[10,"is_positive","","Returns `true` if `self` is positive and `false` if the number\nis zero or negative.",314],[10,"is_negative","","Returns `true` if `self` is negative and `false` if the number\nis zero or positive.",314],[8,"UnsignedInt","","A built-in unsigned integer."],[10,"is_power_of_two","","Returns `true` iff `self == 2^k` for some `k`.",315],[10,"next_power_of_two","","Returns the smallest power of two greater than or equal to `self`.\nUnspecified behavior on overflow.",315],[10,"checked_next_power_of_two","","Returns the smallest power of two greater than or equal to `n`. If the\nnext power of two is greater than the type's maximum value, `None` is\nreturned, otherwise the power of two is wrapped in `Some`.",315],[5,"cast","","Cast from one machine scalar to another."],[8,"FromPrimitive","","A generic trait for converting a number to a value."],[10,"from_int","","Convert an `int` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",316],[10,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",316],[10,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",316],[10,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",316],[10,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",316],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",316],[10,"from_uint","","Convert an `uint` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",316],[10,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",316],[10,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",316],[10,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",316],[10,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",316],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",316],[10,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",316],[10,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",316],[8,"NumCast","","An interface for casting between machine scalars."],[10,"from","","Creates a number from another value that can be converted into a primitive via the\n`ToPrimitive` trait.",317],[8,"ToPrimitive","","A generic trait for converting a value to a number."],[10,"to_int","","Converts the value of `self` to an `int`.",318],[10,"to_isize","","Converts the value of `self` to an `isize`.",318],[10,"to_i8","","Converts the value of `self` to an `i8`.",318],[10,"to_i16","","Converts the value of `self` to an `i16`.",318],[10,"to_i32","","Converts the value of `self` to an `i32`.",318],[10,"to_i64","","Converts the value of `self` to an `i64`.",318],[10,"to_uint","","Converts the value of `self` to an `uint`.",318],[10,"to_usize","","Converts the value of `self` to a `usize`.",318],[10,"to_u8","","Converts the value of `self` to an `u8`.",318],[10,"to_u16","","Converts the value of `self` to an `u16`.",318],[10,"to_u32","","Converts the value of `self` to an `u32`.",318],[10,"to_u64","","Converts the value of `self` to an `u64`.",318],[10,"to_f32","","Converts the value of `self` to an `f32`.",318],[10,"to_f64","","Converts the value of `self` to an `f64`.",318],[5,"from_int","","A utility function that just calls `FromPrimitive::from_int`."],[5,"from_i8","","A utility function that just calls `FromPrimitive::from_i8`."],[5,"from_i16","","A utility function that just calls `FromPrimitive::from_i16`."],[5,"from_i32","","A utility function that just calls `FromPrimitive::from_i32`."],[5,"from_i64","","A utility function that just calls `FromPrimitive::from_i64`."],[5,"from_uint","","A utility function that just calls `FromPrimitive::from_uint`."],[5,"from_u8","","A utility function that just calls `FromPrimitive::from_u8`."],[5,"from_u16","","A utility function that just calls `FromPrimitive::from_u16`."],[5,"from_u32","","A utility function that just calls `FromPrimitive::from_u32`."],[5,"from_u64","","A utility function that just calls `FromPrimitive::from_u64`."],[5,"from_f32","","A utility function that just calls `FromPrimitive::from_f32`."],[5,"from_f64","","A utility function that just calls `FromPrimitive::from_f64`."],[8,"FromStrRadix","","A generic trait for converting a string with a radix (base) to a value"],[16,"Err","std::num::FromStrRadix",""],[10,"from_str_radix","std::num","",319],[5,"from_str_radix","","A utility function that just calls `FromStrRadix::from_str_radix`."],[4,"FpCategory","","Used for representing the classification of floating point numbers"],[13,"Nan","","\"Not a Number\", often obtained by dividing by zero",3],[13,"Infinite","","Positive or negative infinity",3],[13,"Zero","","Positive or negative zero",3],[13,"Subnormal","","De-normalized floating point representation (less precise than `Normal`)",3],[13,"Normal","","A regular floating point number",3],[3,"ParseIntError","","An error which can be returned when parsing an integer."],[3,"ParseFloatError","","An error which can be returned when parsing a float."],[0,"wrapping","",""],[8,"WrappingOps","std::num::wrapping",""],[10,"wrapping_add","","",320],[10,"wrapping_sub","","",320],[10,"wrapping_mul","","",320],[8,"OverflowingOps","",""],[10,"overflowing_add","","",321],[10,"overflowing_sub","","",321],[10,"overflowing_mul","","",321],[3,"Wrapping","",""],[0,"strconv","std::num",""],[4,"ExponentFormat","std::num::strconv","A flag that specifies whether to use exponential (scientific) notation."],[13,"ExpNone","","Do not use exponential notation.",322],[13,"ExpDec","","Use exponential notation with the exponent having a base of 10 and the\nexponent sign being `e` or `E`. For example, 1000 would be printed\n1e3.",322],[13,"ExpBin","","Use exponential notation with the exponent having a base of 2 and the\nexponent sign being `p` or `P`. For example, 8 would be printed 1p3.",322],[4,"SignificantDigits","","The number of digits used for emitting the fractional part of a number, if\nany."],[13,"DigAll","","All calculable digits will be printed.",323],[13,"DigMax","","At most the given number of digits will be printed, truncating any\ntrailing zeroes.",323],[13,"DigExact","","Precisely the given number of digits will be printed.",323],[4,"SignFormat","","How to emit the sign of a number."],[13,"SignNone","","No sign will be printed. The exponent sign will also be emitted.",324],[13,"SignNeg","","`-` will be printed for negative values, but no sign will be emitted\nfor positive numbers.",324],[13,"SignAll","","`+` will be printed for positive values, and `-` will be printed for\nnegative values.",324],[5,"float_to_str_bytes_common","","Converts a number to its string representation as a byte vector.\nThis is meant to be a common base implementation for all numeric string\nconversion functions like `to_string()` or `to_str_radix()`."],[5,"float_to_str_common","","Converts a number to its string representation. This is a wrapper for\n`to_str_bytes_common()`, for details see there."],[8,"Float","std::num","Mathematical operations on primitive floating point numbers."],[10,"nan","","Returns the `NaN` value.",325],[10,"infinity","","Returns the infinite value.",325],[10,"neg_infinity","","Returns the negative infinite value.",325],[10,"zero","","Returns `0.0`.",325],[10,"neg_zero","","Returns `-0.0`.",325],[10,"one","","Returns `1.0`.",325],[10,"mantissa_digits","","Deprecated: use `std::f32::MANTISSA_DIGITS` or `std::f64::MANTISSA_DIGITS`\ninstead.",325],[10,"digits","","Deprecated: use `std::f32::DIGITS` or `std::f64::DIGITS` instead.",325],[10,"epsilon","","Deprecated: use `std::f32::EPSILON` or `std::f64::EPSILON` instead.",325],[10,"min_exp","","Deprecated: use `std::f32::MIN_EXP` or `std::f64::MIN_EXP` instead.",325],[10,"max_exp","","Deprecated: use `std::f32::MAX_EXP` or `std::f64::MAX_EXP` instead.",325],[10,"min_10_exp","","Deprecated: use `std::f32::MIN_10_EXP` or `std::f64::MIN_10_EXP` instead.",325],[10,"max_10_exp","","Deprecated: use `std::f32::MAX_10_EXP` or `std::f64::MAX_10_EXP` instead.",325],[10,"min_value","","Returns the smallest finite value that this type can represent.",325],[10,"min_pos_value","","Returns the smallest normalized positive number that this type can represent.",325],[10,"max_value","","Returns the largest finite value that this type can represent.",325],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",325],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",325],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",325],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",325],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",325],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",325],[10,"floor","","Returns the largest integer less than or equal to a number.",325],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",325],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",325],[10,"trunc","","Return the integer part of a number.",325],[10,"fract","","Returns the fractional part of a number.",325],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",325],[10,"signum","","Returns a number that represents the sign of `self`.",325],[10,"is_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",325],[10,"is_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",325],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",325],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",325],[10,"powi","","Raise a number to an integer power.",325],[10,"powf","","Raise a number to a floating point power.",325],[10,"sqrt","","Take the square root of a number.",325],[10,"rsqrt","","Take the reciprocal (inverse) square root of a number, `1/sqrt(x)`.",325],[10,"exp","","Returns `e^(self)`, (the exponential function).",325],[10,"exp2","","Returns `2^(self)`.",325],[10,"ln","","Returns the natural logarithm of the number.",325],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",325],[10,"log2","","Returns the base 2 logarithm of the number.",325],[10,"log10","","Returns the base 10 logarithm of the number.",325],[10,"to_degrees","","Convert radians to degrees.",325],[10,"to_radians","","Convert degrees to radians.",325],[10,"ldexp","","Constructs a floating point number of `x*2^exp`.",325],[10,"frexp","","Breaks the number into a normalized fraction and a base-2 exponent,\nsatisfying:",325],[10,"next_after","","Returns the next representable floating-point value in the direction of\n`other`.",325],[10,"max","","Returns the maximum of the two numbers.",325],[10,"min","","Returns the minimum of the two numbers.",325],[10,"abs_sub","","The positive difference of two numbers.",325],[10,"cbrt","","Take the cubic root of a number.",325],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",325],[10,"sin","","Computes the sine of a number (in radians).",325],[10,"cos","","Computes the cosine of a number (in radians).",325],[10,"tan","","Computes the tangent of a number (in radians).",325],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",325],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",325],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",325],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",325],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",325],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",325],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",325],[10,"sinh","","Hyperbolic sine function.",325],[10,"cosh","","Hyperbolic cosine function.",325],[10,"tanh","","Hyperbolic tangent function.",325],[10,"asinh","","Inverse hyperbolic sine function.",325],[10,"acosh","","Inverse hyperbolic cosine function.",325],[10,"atanh","","Inverse hyperbolic tangent function.",325],[0,"thread_local","std","Thread local storage"],[3,"Key","std::thread_local","A thread local storage key which owns its contents."],[4,"State","","Indicator of the state of a thread local storage key."],[13,"Uninitialized","","All keys are in this state whenever a thread starts. Keys will\ntransition to the `Valid` state once the first call to `with` happens\nand the initialization expression succeeds.",326],[13,"Valid","","Once a key has been accessed successfully, it will enter the `Valid`\nstate. Keys in the `Valid` state will remain so until the thread exits,\nat which point the destructor will be run and the key will enter the\n`Destroyed` state.",326],[13,"Destroyed","","When a thread exits, the destructors for keys will be run (if\nnecessary). While a destructor is running, and possibly after a\ndestructor has run, a key is in the `Destroyed` state.",326],[0,"scoped","","Scoped thread-local storage"],[3,"Key","std::thread_local::scoped","Type representing a thread local storage key corresponding to a reference\nto the type parameter `T`."],[11,"set","","Insert a value into this scoped thread local storage slot for a\nduration of a closure.",327],[11,"with","","Get a value out of this scoped variable.",327],[11,"is_set","","Test whether this TLS key has been `set` for the current thread.",327],[11,"eq","std::thread_local","",326],[11,"ne","","",326],[11,"with","","Acquire a reference to the value in this TLS key.",328],[11,"state","","Query the current state of this key.",328],[11,"destroyed","","Deprecated",328],[0,"dynamic_lib","std","Dynamic library facilities."],[3,"DynamicLibrary","std::dynamic_lib",""],[11,"drop","","",329],[11,"open","","Lazily open a dynamic library. When passed None it gives a\nhandle to the calling process",329],[11,"prepend_search_path","","Prepends a path to this process's search path for dynamic libraries",329],[11,"create_path","","From a slice of paths, create a new vector which is suitable to be an\nenvironment variable for this platforms dylib search path.",329],[11,"envvar","","Returns the environment variable for this process's dynamic library\nsearch path",329],[11,"search_path","","Returns the current search path for dynamic libraries being used by this\nprocess",329],[11,"symbol","","Access the value at the symbol of the dynamic library",329],[0,"ffi","std","Utilities related to FFI bindings."],[3,"CString","std::ffi","A type representing an owned C-compatible string"],[3,"CStr","","Representation of a borrowed C string."],[3,"NulError","","An error returned from `CString::new` to indicate that a nul byte was found\nin the vector provided."],[3,"OsString","","Owned, mutable OS strings."],[3,"OsStr","","Slices into OS strings."],[5,"c_str_to_bytes","","Deprecated in favor of `CStr`"],[5,"c_str_to_bytes_with_nul","","Deprecated in favor of `CStr`"],[11,"hash","","",330],[11,"cmp","","",330],[11,"partial_cmp","","",330],[11,"lt","","",330],[11,"le","","",330],[11,"gt","","",330],[11,"ge","","",330],[11,"eq","","",330],[11,"ne","","",330],[11,"clone","","",330],[11,"hash","","",331],[11,"fmt","","",332],[11,"eq","","",332],[11,"ne","","",332],[11,"clone","","",332],[11,"new","","Create a new C-compatible string from a container of bytes.",330],[11,"from_slice","","Create a new C-compatible string from a byte slice.",330],[11,"from_vec","","Create a C-compatible string from a byte vector.",330],[11,"from_vec_unchecked","","Create a C-compatible string from a byte vector without checking for\ninterior 0 bytes.",330],[11,"as_bytes","","Returns the contents of this `CString` as a slice of bytes.",330],[11,"as_bytes_with_nul","","Equivalent to the `as_bytes` function except that the returned slice\nincludes the trailing nul byte.",330],[11,"deref","","",330],[11,"fmt","","",330],[11,"nul_position","","Returns the position of the nul byte in the slice that was provided to\n`CString::from_vec`.",332],[11,"into_vec","","Consumes this error, returning the underlying vector of bytes which\ngenerated the error in the first place.",332],[11,"description","","",332],[11,"fmt","","",332],[11,"from_ptr","","Cast a raw C string to a safe C string wrapper.",331],[11,"as_ptr","","Return the inner pointer to this C string.",331],[11,"to_bytes","","Convert this C string to a byte slice.",331],[11,"to_bytes_with_nul","","Convert this C string to a byte slice containing the trailing 0 byte.",331],[11,"eq","","",331],[11,"partial_cmp","","",331],[11,"cmp","","",331],[11,"into_bytes","std::string","",248],[11,"into_bytes","std::vec","",239],[11,"clone","std::ffi","",333],[11,"from_string","","Constructs an `OsString` at no cost by consuming a `String`.",333],[11,"from_str","","Constructs an `OsString` by copying from a `&str` slice.",333],[11,"new","","Constructs a new empty `OsString`.",333],[11,"into_string","","Convert the `OsString` into a `String` if it contains valid Unicode data.",333],[11,"push_os_str","","Extend the string with the given `&OsStr` slice.",333],[11,"push","","Extend the string with the given `&OsStr` slice.",333],[11,"index","","",333],[11,"deref","","",333],[11,"fmt","","",333],[11,"eq","","",333],[11,"eq","","",333],[11,"partial_cmp","","",333],[11,"lt","","",333],[11,"le","","",333],[11,"gt","","",333],[11,"ge","","",333],[11,"partial_cmp","","",333],[11,"cmp","","",333],[11,"hash","","",333],[11,"from_str","","Coerce directly from a `&str` slice to a `&OsStr` slice.",334],[11,"to_str","","Yield a `&str` slice if the `OsStr` is valid unicode.",334],[11,"to_string_lossy","","Convert an `OsStr` to a `Cow<str>`.",334],[11,"to_os_string","","Copy the slice into an owned `OsString`.",334],[11,"eq","","",334],[11,"eq","","",334],[11,"partial_cmp","","",334],[11,"lt","","",334],[11,"le","","",334],[11,"gt","","",334],[11,"ge","","",334],[11,"partial_cmp","","",334],[11,"cmp","","",334],[11,"hash","","",334],[11,"fmt","","",334],[11,"borrow","","",333],[11,"to_owned","","",334],[11,"as_os_str","","",334],[11,"as_os_str","","",333],[11,"as_os_str","std::string","",248],[8,"IntoBytes","std::ffi","A conversion trait used by the constructor of `CString` for types that can\nbe converted to a vector of bytes."],[10,"into_bytes","","Consumes this container, returning a vector of bytes.",335],[8,"AsOsStr","","Freely convertible to an `&OsStr` slice."],[10,"as_os_str","","Convert to an `&OsStr` slice.",336],[0,"old_io","std","I/O, including files, networking, timers, and processes"],[3,"TempDir","std::old_io","A wrapper for a path to temporary directory implementing automatic\nscope-based deletion."],[3,"MemReader","","Reads from an owned byte vector"],[3,"BufReader","","Reads from a fixed-size byte slice"],[3,"MemWriter","","Writes to an owned, growable byte vector"],[3,"BufWriter","","Writes to a fixed-size byte slice"],[3,"BufferedReader","","Wraps a Reader and buffers input from it"],[3,"BufferedWriter","","Wraps a Writer and buffers output to it"],[3,"BufferedStream","","Wraps a Stream and buffers input and output to and from it."],[3,"LineBufferedWriter","","Wraps a Writer and buffers output to it, flushing whenever a newline (`0x0a`,\n`'\\n'`) is detected."],[3,"ChanReader","","Allows reading from a rx."],[3,"ChanWriter","","Allows writing to a tx."],[3,"IoError","","The type passed to I/O condition handlers to indicate error"],[12,"kind","","An enumeration which can be matched against for determining the flavor\nof error.",337],[12,"desc","","A human-readable description about the error",337],[12,"detail","","Detailed information about this error, not always available",337],[3,"RefReader","","A `RefReader` is a struct implementing `Reader` which contains a reference\nto another reader. This is often useful when composing streams."],[3,"RefWriter","","A `RefWriter` is a struct implementing `Writer` which contains a reference\nto another writer. This is often useful when composing streams."],[3,"Lines","","An iterator that reads a line on each iteration,\nuntil `.read_line()` encounters `EndOfFile`."],[3,"Chars","","An iterator that reads a utf8-encoded character on each iteration,\nuntil `.read_char()` encounters `EndOfFile`."],[3,"IncomingConnections","","An infinite iterator over incoming connection attempts.\nCalling `next` will block the task until a connection is attempted."],[3,"FileStat","","A structure used to describe metadata information about a file. This\nstructure is created through the `stat` method on a `Path`."],[12,"size","","The size of the file, in bytes",338],[12,"kind","","The kind of file this path points to (directory, file, pipe, etc.)",338],[12,"perm","","The file permissions currently on the file",338],[12,"created","","The time that the file was created at, in platform-dependent\nmilliseconds",338],[12,"modified","","The time that this file was last modified, in platform-dependent\nmilliseconds",338],[12,"accessed","","The time that this file was last accessed, in platform-dependent\nmilliseconds",338],[12,"unstable","","Information returned by stat() which is not guaranteed to be\nplatform-independent. This information may be useful on some platforms,\nbut it may have different meanings or no meaning at all on other\nplatforms.",338],[3,"UnstableFileStat","","This structure represents all of the possible information which can be\nreturned from a `stat` syscall which is not contained in the `FileStat`\nstructure. This information is not necessarily platform independent, and may\nhave different meanings or no meaning at all on some platforms."],[12,"device","","The ID of the device containing the file.",339],[12,"inode","","The file serial number.",339],[12,"rdev","","The device ID.",339],[12,"nlink","","The number of hard links to this file.",339],[12,"uid","","The user ID of the file.",339],[12,"gid","","The group ID of the file.",339],[12,"blksize","","The optimal block size for I/O.",339],[12,"blocks","","The blocks allocated for this file.",339],[12,"flags","","User-defined flags for the file.",339],[12,"gen","","The file generation number.",339],[3,"FilePermission","","/// A set of permissions for a file or directory is represented by a set of\n/// flags which are or'd together."],[4,"IoErrorKind","","A list specifying general categories of I/O error."],[13,"OtherIoError","","Any I/O error not part of this list.",340],[13,"EndOfFile","","The operation could not complete because end of file was reached.",340],[13,"FileNotFound","","The file was not found.",340],[13,"PermissionDenied","","The file permissions disallowed access to this file.",340],[13,"ConnectionFailed","","A network connection failed for some reason not specified in this list.",340],[13,"Closed","","The network operation failed because the network connection was closed.",340],[13,"ConnectionRefused","","The connection was refused by the remote server.",340],[13,"ConnectionReset","","The connection was reset by the remote server.",340],[13,"ConnectionAborted","","The connection was aborted (terminated) by the remote server.",340],[13,"NotConnected","","The network operation failed because it was not connected yet.",340],[13,"BrokenPipe","","The operation failed because a pipe was closed.",340],[13,"PathAlreadyExists","","A file already existed with that name.",340],[13,"PathDoesntExist","","No file exists at that location.",340],[13,"MismatchedFileTypeForOperation","","The path did not specify the type of file that this operation required. For example,\nattempting to copy a directory with the `fs::copy()` operation will fail with this error.",340],[13,"ResourceUnavailable","","The operation temporarily failed (for example, because a signal was received), and retrying\nmay succeed.",340],[13,"IoUnavailable","","No I/O functionality is available for this task.",340],[13,"InvalidInput","","A parameter was incorrect in a way that caused an I/O error not part of this list.",340],[13,"TimedOut","","The I/O operation's timeout expired, causing it to be canceled.",340],[13,"ShortWrite","","This write operation failed to write all of its data.",340],[13,"NoProgress","","The Reader returned 0 bytes from `read()` too many times.",340],[4,"SeekStyle","","When seeking, the resulting cursor is offset from a base by the offset given\nto the `seek` function. The base used is specified by this enumeration."],[13,"SeekSet","","Seek from the beginning of the stream",341],[13,"SeekEnd","","Seek from the end of the stream",341],[13,"SeekCur","","Seek from the current position",341],[4,"FileMode","","A mode specifies how a file should be opened or created. These modes are\npassed to `File::open_mode` and are used to control where the file is\npositioned when it is initially opened."],[13,"Open","","Opens a file positioned at the beginning.",342],[13,"Append","","Opens a file positioned at EOF.",342],[13,"Truncate","","Opens a file, truncating it if it already exists.",342],[4,"FileAccess","","Access permissions with which the file should be opened. `File`s\nopened with `Read` will return an error if written to."],[13,"Read","","Read-only access, requests to write will result in an error",343],[13,"Write","","Write-only access, requests to read will result in an error",343],[13,"ReadWrite","","Read-write access, no requests are denied by default",343],[4,"FileType","","Different kinds of files which can be identified by a call to stat"],[13,"RegularFile","","This is a normal file, corresponding to `S_IFREG`",344],[13,"Directory","","This file is a directory, corresponding to `S_IFDIR`",344],[13,"NamedPipe","","This file is a named pipe, corresponding to `S_IFIFO`",344],[13,"BlockSpecial","","This file is a block device, corresponding to `S_IFBLK`",344],[13,"Symlink","","This file is a symbolic link to another file, corresponding to `S_IFLNK`",344],[13,"Unknown","","The type of this file is not recognized as one of the other categories",344],[5,"standard_error","","Creates a standard error for a commonly used flavor of error. The `detail`\nfield of the returned error will always be `None`."],[11,"fmt","","",345],[11,"with_capacity","","Creates a new `BufferedReader` with the specified buffer capacity",345],[11,"new","","Creates a new `BufferedReader` with a default buffer capacity",345],[11,"get_ref","","Gets a reference to the underlying reader.",345],[11,"get_mut","","Gets a mutable reference to the underlying reader.",345],[11,"into_inner","","Unwraps this `BufferedReader`, returning the underlying reader.",345],[11,"fill_buf","","",345],[11,"consume","","",345],[11,"read","","",345],[11,"fmt","","",346],[11,"with_capacity","","Creates a new `BufferedWriter` with the specified buffer capacity",346],[11,"new","","Creates a new `BufferedWriter` with a default buffer capacity",346],[11,"get_ref","","Gets a reference to the underlying writer.",346],[11,"get_mut","","Gets a mutable reference to the underlying write.",346],[11,"into_inner","","Unwraps this `BufferedWriter`, returning the underlying writer.",346],[11,"write_all","","",346],[11,"flush","","",346],[11,"drop","","",346],[11,"fmt","","",347],[11,"new","","Creates a new `LineBufferedWriter`",347],[11,"get_ref","","Gets a reference to the underlying writer.",347],[11,"into_inner","","Unwraps this `LineBufferedWriter`, returning the underlying writer.",347],[11,"write_all","","",347],[11,"flush","","",347],[11,"fmt","","",348],[11,"with_capacities","","Creates a new buffered stream with explicitly listed capacities for the\nreader/writer buffer.",348],[11,"new","","Creates a new buffered stream with the default reader/writer buffer\ncapacities.",348],[11,"get_ref","","Gets a reference to the underlying stream.",348],[11,"get_mut","","Gets a mutable reference to the underlying stream.",348],[11,"into_inner","","Unwraps this `BufferedStream`, returning the underlying stream.",348],[11,"fill_buf","","",348],[11,"consume","","",348],[11,"read","","",348],[11,"write_all","","",348],[11,"flush","","",348],[11,"new","","Wraps a `Port` in a `ChanReader` structure",349],[11,"fill_buf","","",349],[11,"consume","","",349],[11,"read","","",349],[11,"new","","Wraps a channel in a `ChanWriter` structure",350],[11,"clone","","",350],[11,"write_all","","",350],[11,"write_all","std::vec","",239],[11,"clone","std::old_io","",351],[11,"new","","Create a new `MemWriter`.",351],[11,"with_capacity","","Create a new `MemWriter`, allocating at least `n` bytes for\nthe internal buffer.",351],[11,"from_vec","","Create a new `MemWriter` that will append to an existing `Vec`.",351],[11,"get_ref","","Acquires an immutable reference to the underlying buffer of this\n`MemWriter`.",351],[11,"into_inner","","Unwraps this `MemWriter`, returning the underlying buffer",351],[11,"write_all","","",351],[11,"new","","Creates a new `MemReader` which will read the buffer given. The buffer\ncan be re-acquired through `unwrap`",352],[11,"eof","","Tests whether this reader has read all bytes in its buffer.",352],[11,"get_ref","","Acquires an immutable reference to the underlying buffer of this\n`MemReader`.",352],[11,"into_inner","","Unwraps this `MemReader`, returning the underlying buffer",352],[11,"read","","",352],[11,"tell","","",352],[11,"seek","","",352],[11,"fill_buf","","",352],[11,"consume","","",352],[11,"new","","Creates a new `BufWriter` which will wrap the specified buffer. The\nwriter initially starts at position 0.",353],[11,"write_all","","",353],[11,"tell","","",353],[11,"seek","","",353],[11,"new","","Creates a new buffered reader which will read the specified buffer",354],[11,"eof","","Tests whether this reader has read all bytes in its buffer.",354],[11,"read","","",354],[11,"tell","","",354],[11,"seek","","",354],[11,"fill_buf","","",354],[11,"consume","","",354],[11,"new_in","","Attempts to make a temporary directory inside of `tmpdir` whose name\nwill have the prefix `prefix`. The directory will be automatically\ndeleted once the returned wrapper is destroyed.",355],[11,"new","","Attempts to make a temporary directory inside of `os::tmpdir()` whose\nname will have the prefix `prefix`. The directory will be automatically\ndeleted once the returned wrapper is destroyed.",355],[11,"into_inner","","Unwrap the wrapped `std::path::Path` from the `TempDir` wrapper.\nThis discards the wrapper so that the automatic deletion of the\ntemporary directory is prevented.",355],[11,"path","","Access the wrapped `std::path::Path` to the temporary directory.",355],[11,"close","","Close and remove the temporary directory",355],[11,"drop","","",355],[0,"extensions","","Utility mixins that apply to all Readers and Writers"],[3,"Bytes","std::old_io::extensions","An iterator that reads a single byte on each iteration,\nuntil `.read_byte()` returns `EndOfFile`."],[5,"u64_to_le_bytes","","Converts an 8-bit to 64-bit unsigned value to a little-endian byte\nrepresentation of the given size. If the size is not big enough to\nrepresent the value, then the high-order bytes are truncated."],[5,"u64_to_be_bytes","","Converts an 8-bit to 64-bit unsigned value to a big-endian byte\nrepresentation of the given size. If the size is not big enough to\nrepresent the value, then the high-order bytes are truncated."],[5,"u64_from_be_bytes","","Extracts an 8-bit to 64-bit unsigned big-endian value from the given byte\nbuffer and returns it as a 64-bit value."],[11,"new","","Constructs a new byte iterator from the given Reader instance.",356],[6,"Item","",""],[11,"next","","",356],[0,"fs","std::old_io","Synchronous File I/O"],[3,"File","std::old_io::fs","Unconstrained file access type that exposes read and write operations"],[3,"Directories","","An iterator that walks over a directory"],[5,"unlink","","Unlink a file from the underlying filesystem."],[5,"stat","","Given a path, query the file system to get information about a file,\ndirectory, etc. This function will traverse symlinks to query\ninformation about the destination file."],[5,"lstat","","Perform the same operation as the `stat` function, except that this\nfunction does not traverse through symlinks. This will return\ninformation about the symlink file instead of the file that it points\nto."],[5,"rename","","Rename a file or directory to a new name."],[5,"copy","","Copies the contents of one file to another. This function will also\ncopy the permission bits of the original file to the destination file."],[5,"chmod","","Changes the permission mode bits found on a file or a directory. This\nfunction takes a mask from the `io` module"],[5,"chown","","Change the user and group owners of a file at the specified path."],[5,"link","","Creates a new hard link on the filesystem. The `dst` path will be a\nlink pointing to the `src` path. Note that systems often require these\ntwo paths to both be located on the same filesystem."],[5,"symlink","","Creates a new symbolic link on the filesystem. The `dst` path will be a\nsymlink pointing to the `src` path."],[5,"readlink","","Reads a symlink, returning the file that the symlink points to."],[5,"mkdir","","Create a new, empty directory at the provided path"],[5,"rmdir","","Remove an existing, empty directory"],[5,"readdir","","Retrieve a vector containing all entries within a provided directory"],[5,"walk_dir","","Returns an iterator that will recursively walk the directory structure\nrooted at `path`. The path given will not be iterated over, and this will\nperform iteration in some top-down order.  The contents of unreadable\nsubdirectories are ignored."],[5,"mkdir_recursive","","Recursively create a directory and all of its parent components if they\nare missing."],[5,"rmdir_recursive","","Removes a directory at this path, after removing all its contents. Use\ncarefully!"],[5,"change_file_times","","Changes the timestamps for a file's last modification and access time.\nThe file at the path specified will have its last access time set to\n`atime` and its modification time set to `mtime`. The times specified should\nbe in milliseconds."],[8,"PathExtensions","","Utility methods for paths."],[10,"stat","","Get information on the file, directory, etc at this path.",357],[10,"lstat","","Get information on the file, directory, etc at this path, not following\nsymlinks.",357],[10,"exists","","Boolean value indicator whether the underlying file exists on the local\nfilesystem. Returns false in exactly the cases where `fs::stat` fails.",357],[10,"is_file","","Whether the underlying implementation (be it a file path, or something\nelse) points at a \"regular file\" on the FS. Will return false for paths\nto non-existent locations or directories or other non-regular files\n(named pipes, etc). Follows links when making this determination.",357],[10,"is_dir","","Whether the underlying implementation (be it a file path, or something\nelse) is pointing at a directory in the underlying FS. Will return\nfalse for paths to non-existent locations or if the item is not a\ndirectory (eg files, named pipes, etc). Follows links when making this\ndetermination.",357],[11,"open_mode","","Open a file at `path` in the mode specified by the `mode` and `access`\narguments",358],[11,"open","","Attempts to open a file in read-only mode. This function is equivalent to\n`File::open_mode(path, Open, Read)`, and will raise all of the same\nerrors that `File::open_mode` does.",358],[11,"create","","Attempts to create a file in write-only mode. This function is\nequivalent to `File::open_mode(path, Truncate, Write)`, and will\nraise all of the same errors that `File::open_mode` does.",358],[11,"path","","Returns the original path that was used to open this file.",358],[11,"fsync","","Synchronizes all modifications to this file to its permanent storage\ndevice. This will flush any internal buffers necessary to perform this\noperation.",358],[11,"datasync","","This function is similar to `fsync`, except that it may not synchronize\nfile metadata to the filesystem. This is intended for use cases that\nmust synchronize content, but don't need the metadata on disk. The goal\nof this method is to reduce disk operations.",358],[11,"truncate","","Either truncates or extends the underlying file, updating the size of\nthis file to become `size`. This is equivalent to unix's `truncate`\nfunction.",358],[11,"eof","","Returns true if the stream has reached the end of the file.",358],[11,"stat","","Queries information about the underlying file.",358],[11,"clone","","",359],[6,"Item","",""],[11,"next","","",359],[11,"read","","",358],[11,"write_all","","",358],[11,"tell","","",358],[11,"seek","","",358],[0,"net","std::old_io","Networking I/O"],[0,"addrinfo","std::old_io::net","Synchronous DNS Resolution"],[3,"Hint","std::old_io::net::addrinfo","This structure is used to provide hints when fetching addresses for a\nremote host to control how the lookup is performed."],[12,"family","","",360],[12,"socktype","","",360],[12,"protocol","","",360],[12,"flags","","",360],[3,"Info","",""],[12,"address","","",361],[12,"family","","",361],[12,"socktype","","",361],[12,"protocol","","",361],[12,"flags","","",361],[4,"SocketType","","Hints to the types of sockets that are desired when looking up hosts"],[13,"Stream","","",362],[13,"Datagram","","",362],[13,"Raw","","",362],[4,"Flag","","Flags which can be or'd into the `flags` field of a `Hint`. These are used\nto manipulate how a query is performed."],[13,"AddrConfig","","",363],[13,"All","","",363],[13,"CanonName","","",363],[13,"NumericHost","","",363],[13,"NumericServ","","",363],[13,"Passive","","",363],[13,"V4Mapped","","",363],[4,"Protocol","","A transport protocol associated with either a hint or a return value of\n`lookup`"],[13,"TCP","","",364],[13,"UDP","","",364],[5,"get_host_addresses","","Easy name resolution. Given a hostname, returns the list of IP addresses for\nthat hostname."],[5,"get_address_name","","Reverse name resolution. Given an address, returns the corresponding\nhostname."],[11,"fmt","","",362],[11,"fmt","","",363],[11,"fmt","","",364],[11,"fmt","","",360],[11,"fmt","","",361],[0,"tcp","std::old_io::net","TCP network connections"],[3,"TcpStream","std::old_io::net::tcp","A structure which represents a TCP stream between a local socket and a\nremote socket."],[3,"TcpListener","","A structure representing a socket server. This listener is used to create a\n`TcpAcceptor` which can be used to accept sockets on a local port."],[3,"TcpAcceptor","","The accepting half of a TCP socket server. This structure is created through\na `TcpListener`'s `listen` method, and this object can be used to accept new\n`TcpStream` instances."],[11,"connect","","Open a TCP connection to a remote host.",365],[11,"connect_timeout","","Creates a TCP connection to a remote socket address, timing out after\nthe specified duration.",365],[11,"peer_name","","Returns the socket address of the remote peer of this TCP connection.",365],[11,"socket_name","","Returns the socket address of the local half of this TCP connection.",365],[11,"set_nodelay","","Sets the nodelay flag on this connection to the boolean specified",365],[11,"set_keepalive","","Sets the keepalive timeout to the timeout specified.",365],[11,"close_read","","Closes the reading half of this connection.",365],[11,"close_write","","Closes the writing half of this connection.",365],[11,"set_timeout","","Sets a timeout, in milliseconds, for blocking operations on this stream.",365],[11,"set_read_timeout","","Sets the timeout for read operations on this stream.",365],[11,"set_write_timeout","","Sets the timeout for write operations on this stream.",365],[11,"clone","","Creates a new handle to this TCP stream, allowing for simultaneous reads\nand writes of this connection.",365],[11,"read","","",365],[11,"write_all","","",365],[11,"bind","","Creates a new `TcpListener` which will be bound to the specified address.\nThis listener is not ready for accepting connections, `listen` must be called\non it before that's possible.",366],[11,"socket_name","","Returns the local socket address of this listener.",366],[11,"listen","","",366],[11,"set_timeout","","Prevents blocking on all future accepts after `ms` milliseconds have\nelapsed.",367],[11,"close_accept","","Closes the accepting capabilities of this acceptor.",367],[11,"accept","","",367],[11,"clone","","Creates a new handle to this TCP acceptor, allowing for simultaneous\naccepts.",367],[0,"udp","std::old_io::net","UDP (User Datagram Protocol) network connections."],[3,"UdpSocket","std::old_io::net::udp","A User Datagram Protocol socket."],[11,"bind","","Creates a UDP socket from the given address.",368],[11,"recv_from","","Receives data from the socket. On success, returns the number of bytes\nread and the address from whence the data came.",368],[11,"send_to","","Sends data on the socket to the given address. Returns nothing on\nsuccess.",368],[11,"socket_name","","Returns the socket address that this socket was created from.",368],[11,"join_multicast","","Joins a multicast IP address (becomes a member of it)",368],[11,"leave_multicast","","Leaves a multicast IP address (drops membership from it)",368],[11,"set_multicast_loop","","Set the multicast loop flag to the specified value",368],[11,"set_multicast_ttl","","Sets the multicast TTL",368],[11,"set_ttl","","Sets this socket's TTL",368],[11,"set_broadcast","","Sets the broadcast flag on or off",368],[11,"set_timeout","","Sets the read/write timeout for this socket.",368],[11,"set_read_timeout","","Sets the read timeout for this socket.",368],[11,"set_write_timeout","","Sets the write timeout for this socket.",368],[11,"clone","","Creates a new handle to this UDP socket, allowing for simultaneous\nreads and writes of the socket.",368],[0,"ip","std::old_io::net","Internet Protocol (IP) addresses."],[3,"SocketAddr","std::old_io::net::ip",""],[12,"ip","","",369],[12,"port","","",369],[3,"ParseError","",""],[4,"IpAddr","",""],[13,"Ipv4Addr","","",370],[13,"Ipv6Addr","","",370],[6,"Port","",""],[8,"ToSocketAddr","","A trait for objects which can be converted or resolved to one or more `SocketAddr` values."],[11,"to_socket_addr","","Converts this object to single socket address value.",371],[11,"to_socket_addr_all","","Converts this object to all available socket address values.",371],[11,"fmt","","",370],[11,"hash","","",370],[11,"clone","","",370],[11,"eq","","",370],[11,"ne","","",370],[11,"fmt","","",370],[11,"fmt","","",369],[11,"hash","","",369],[11,"clone","","",369],[11,"eq","","",369],[11,"ne","","",369],[11,"fmt","","",369],[6,"Err","",""],[11,"from_str","","",370],[6,"Err","",""],[11,"from_str","","",369],[11,"eq","","",372],[11,"ne","","",372],[11,"clone","","",372],[11,"fmt","","",372],[11,"to_socket_addr","","",369],[0,"pipe","std::old_io::net","Named pipes"],[3,"UnixStream","std::old_io::net::pipe","A stream which communicates over a named pipe."],[3,"UnixListener","","A value that can listen for incoming named pipe connection requests."],[3,"UnixAcceptor","","A value that can accept named pipe connections, returned from `listen()`."],[11,"connect","","Connect to a pipe named by `path`. This will attempt to open a\nconnection to the underlying socket.",373],[11,"connect_timeout","","Connect to a pipe named by `path`, timing out if the specified number of\nmilliseconds.",373],[11,"close_read","","Closes the reading half of this connection.",373],[11,"close_write","","Closes the writing half of this connection.",373],[11,"set_timeout","","Sets the read/write timeout for this socket.",373],[11,"set_read_timeout","","Sets the read timeout for this socket.",373],[11,"set_write_timeout","","Sets the write timeout for this socket.",373],[11,"clone","","",373],[11,"read","","",373],[11,"write_all","","",373],[11,"bind","","Creates a new listener, ready to receive incoming connections on the\nspecified socket. The server will be named by `path`.",374],[11,"listen","","",374],[11,"set_timeout","","Sets a timeout for this acceptor, after which accept() will no longer\nblock indefinitely.",375],[11,"close_accept","","Closes the accepting capabilities of this acceptor.",375],[11,"accept","","",375],[11,"clone","","Creates a new handle to this unix acceptor, allowing for simultaneous\naccepts.",375],[0,"pipe","std::old_io","Synchronous, in-memory pipes."],[3,"PipeStream","std::old_io::pipe","A synchronous, in-memory pipe."],[3,"PipePair","",""],[12,"reader","","",376],[12,"writer","","",376],[11,"open","","Consumes a file descriptor to return a pipe stream that will have\nsynchronous, but non-blocking reads/writes. This is useful if the file\ndescriptor is acquired via means other than the standard methods.",377],[11,"pair","","Creates a pair of in-memory OS pipes for a unidirectional communication\nstream.",377],[11,"clone","","",377],[11,"read","","",377],[11,"write_all","","",377],[0,"process","std::old_io","Bindings for executing child processes"],[3,"Process","std::old_io::process","Representation of a running or exited child process."],[12,"stdin","","Handle to the child's stdin, if the `stdin` field of this process's\n`ProcessConfig` was `CreatePipe`. By default, this handle is `Some`.",378],[12,"stdout","","Handle to the child's stdout, if the `stdout` field of this process's\n`ProcessConfig` was `CreatePipe`. By default, this handle is `Some`.",378],[12,"stderr","","Handle to the child's stderr, if the `stderr` field of this process's\n`ProcessConfig` was `CreatePipe`. By default, this handle is `Some`.",378],[3,"Command","","The `Command` type acts as a process builder, providing fine-grained control\nover how a new process should be spawned. A default configuration can be\ngenerated using `Command::new(program)`, where `program` gives a path to the\nprogram to be executed. Additional builder methods allow the configuration\nto be changed (for example, by adding arguments) prior to spawning:"],[3,"ProcessOutput","","The output of a finished process."],[12,"status","","The status (exit code) of the process.",379],[12,"output","","The data that the process wrote to stdout.",379],[12,"error","","The data that the process wrote to stderr.",379],[4,"StdioContainer","","Describes what to do with a standard io stream for a child process."],[13,"Ignored","","This stream will be ignored. This is the equivalent of attaching the\nstream to `/dev/null`",380],[13,"InheritFd","","The specified file descriptor is inherited for the stream which it is\nspecified for. Ownership of the file descriptor is *not* taken, so the\ncaller must clean it up.",380],[13,"CreatePipe","","Creates a pipe for the specified file descriptor which will be created\nwhen the process is spawned.",380],[4,"ProcessExit","","Describes the result of a process after it has terminated.\nNote that Windows have no signals, so the result is usually ExitStatus."],[13,"ExitStatus","","Normal termination with an exit status.",381],[13,"ExitSignal","","Termination by signal, with the signal number.",381],[6,"EnvMap","","A HashMap representation of environment variables."],[17,"PleaseExitSignal","","Signal a process to exit, without forcibly killing it. Corresponds to\nSIGTERM on unix platforms."],[17,"MustDieSignal","","Signal a process to exit immediately, forcibly killing it. Corresponds to\nSIGKILL on unix platforms."],[11,"clone","","",382],[11,"new","","Constructs a new `Command` for launching the program at\npath `program`, with the following default configuration:",382],[11,"arg","","Add an argument to pass to the program.",382],[11,"args","","Add multiple arguments to pass to the program.",382],[11,"env","","Inserts or updates an environment variable mapping.",382],[11,"env_remove","","Removes an environment variable mapping.",382],[11,"env_set_all","","Sets the entire environment map for the child process.",382],[11,"cwd","","Set the working directory for the child process.",382],[11,"stdin","","Configuration for the child process's stdin handle (file descriptor 0).\nDefaults to `CreatePipe(true, false)` so the input can be written to.",382],[11,"stdout","","Configuration for the child process's stdout handle (file descriptor 1).\nDefaults to `CreatePipe(false, true)` so the output can be collected.",382],[11,"stderr","","Configuration for the child process's stderr handle (file descriptor 2).\nDefaults to `CreatePipe(false, true)` so the output can be collected.",382],[11,"uid","","Sets the child process's user id. This translates to a `setuid` call in\nthe child process. Setting this value on windows will cause the spawn to\nfail. Failure in the `setuid` call on unix will also cause the spawn to\nfail.",382],[11,"gid","","Similar to `uid`, but sets the group id of the child process. This has\nthe same semantics as the `uid` field.",382],[11,"detached","","Sets the child process to be spawned in a detached state. On unix, this\nmeans that the child is the leader of a new process group.",382],[11,"spawn","","Executes the command as a child process, which is returned.",382],[11,"output","","Executes the command as a child process, waiting for it to finish and\ncollecting all of its output.",382],[11,"status","","Executes a command as a child process, waiting for it to finish and\ncollecting its exit status.",382],[11,"fmt","","Format the program and arguments of a Command for display. Any\nnon-utf8 data is lossily converted using the utf8 replacement\ncharacter.",382],[11,"clone","","",379],[11,"eq","","",379],[11,"ne","","",379],[11,"clone","","",380],[11,"fmt","","",381],[11,"clone","","",381],[11,"eq","","",381],[11,"ne","","",381],[11,"fmt","","Format a ProcessExit enum, to nicely present the information.",381],[11,"success","","Was termination successful? Signal termination not considered a success,\nand success is defined as a zero exit status.",381],[11,"matches_exit_status","","Checks whether this ProcessExit matches the given exit status.\nTermination by signal will never match an exit code.",381],[11,"kill","","Sends `signal` to another process in the system identified by `id`.",378],[11,"id","","Returns the process id of this child process",378],[11,"signal","","Sends the specified signal to the child process, returning whether the\nsignal could be delivered or not.",378],[11,"signal_exit","","Sends a signal to this child requesting that it exits. This is\nequivalent to sending a SIGTERM on unix platforms.",378],[11,"signal_kill","","Sends a signal to this child forcing it to exit. This is equivalent to\nsending a SIGKILL on unix platforms.",378],[11,"wait","","Wait for the child to exit completely, returning the status that it\nexited with. This function will continue to have the same return value\nafter it has been called at least once.",378],[11,"set_timeout","","Sets a timeout, in milliseconds, for future calls to wait().",378],[11,"wait_with_output","","Simultaneously wait for the child to exit and collect all remaining\noutput on the stdout/stderr handles, returning a `ProcessOutput`\ninstance.",378],[11,"forget","","Forgets this process, allowing it to outlive the parent",378],[11,"drop","","",378],[0,"stdio","std::old_io","Non-blocking access to stdin, stdout, and stderr."],[3,"StdinReader","std::old_io::stdio","A synchronized wrapper around a buffered reader from stdin"],[3,"StdinReaderGuard","","A guard for exclusive access to `StdinReader`'s internal `BufferedReader`."],[3,"StdReader","","Representation of a reader of a standard input stream"],[3,"StdWriter","","Representation of a writer to a standard output stream"],[5,"stdin","","Creates a new handle to the stdin of the current process."],[5,"stdin_raw","","Creates a new non-blocking handle to the stdin of the current process."],[5,"stdout","","Creates a line-buffered handle to the stdout of the current process."],[5,"stdout_raw","","Creates an unbuffered handle to the stdout of the current process"],[5,"stderr","","Creates a line-buffered handle to the stderr of the current process."],[5,"stderr_raw","","Creates an unbuffered handle to the stderr of the current process"],[5,"set_stdout","","Resets the task-local stdout handle to the specified writer"],[5,"set_stderr","","Resets the task-local stderr handle to the specified writer"],[5,"flush","","Flushes the local task's stdout handle."],[5,"print","","Prints a string to the stdout of the current process. No newline is emitted\nafter the string is printed."],[5,"println","","Prints a string to the stdout of the current process. A literal\n`\\n` character is printed to the console after the string."],[5,"print_args","","Similar to `print`, but takes a `fmt::Arguments` structure to be compatible\nwith the `format_args!` macro."],[5,"println_args","","Similar to `println`, but takes a `fmt::Arguments` structure to be\ncompatible with the `format_args!` macro."],[11,"clone","","",383],[6,"Target","",""],[11,"deref","","",384],[11,"deref_mut","","",384],[11,"lock","","Locks the `StdinReader`, granting the calling thread exclusive access\nto the underlying `BufferedReader`.",383],[11,"read_line","","Like `Buffer::read_line`.",383],[11,"read_until","","Like `Buffer::read_until`.",383],[11,"read_char","","Like `Buffer::read_char`.",383],[11,"read","","",383],[11,"read_at_least","","",383],[11,"push_at_least","","",383],[11,"read_to_end","","",383],[11,"read_le_uint_n","","",383],[11,"read_be_uint_n","","",383],[11,"isatty","","Returns whether this stream is attached to a TTY instance or not.",385],[11,"read","","",385],[11,"winsize","","Gets the size of this output window, if possible. This is typically used\nwhen the writer is attached to something like a terminal, this is used\nto fetch the dimensions of the terminal.",386],[11,"set_raw","","Controls whether this output stream is a \"raw stream\" or simply a normal\nstream.",386],[11,"isatty","","Returns whether this stream is attached to a TTY instance or not.",386],[11,"write_all","","",386],[0,"timer","std::old_io","Synchronous Timers"],[3,"Timer","std::old_io::timer","A synchronous timer object"],[5,"sleep","","Sleep the current task for the specified duration."],[11,"new","","Creates a new timer which can be used to put the current task to sleep\nfor a number of milliseconds, or to possibly create channels which will\nget notified after an amount of time has passed.",387],[11,"sleep","","Blocks the current task for the specified duration.",387],[11,"oneshot","","Creates a oneshot receiver which will have a notification sent when\nthe specified duration has elapsed.",387],[11,"periodic","","Creates a receiver which will have a continuous stream of notifications\nbeing sent each time the specified duration has elapsed.",387],[0,"util","std::old_io","Utility implementations of Reader and Writer"],[3,"LimitReader","std::old_io::util","Wraps a `Reader`, limiting the number of bytes that can be read from it."],[3,"NullWriter","","A `Writer` which ignores bytes written to it, like /dev/null."],[3,"ZeroReader","","A `Reader` which returns an infinite stream of 0 bytes, like /dev/zero."],[3,"NullReader","","A `Reader` which is always at EOF, like /dev/null."],[3,"MultiWriter","","A `Writer` which multiplexes writes to a set of `Writer`s."],[3,"ChainedReader","","A `Reader` which chains input from multiple `Reader`s, reading each to\ncompletion before moving onto the next."],[3,"TeeReader","","A `Reader` which forwards input from another `Reader`, passing it along to\na `Writer` as well. Similar to the `tee(1)` command."],[3,"IterReader","","An adaptor converting an `Iterator<u8>` to a `Reader`."],[5,"copy","","Copies all data from a `Reader` to a `Writer`."],[11,"fmt","","",388],[11,"new","","Creates a new `LimitReader`",388],[11,"into_inner","","Consumes the `LimitReader`, returning the underlying `Reader`.",388],[11,"limit","","Returns the number of bytes that can be read before the `LimitReader`\nwill return EOF.",388],[11,"read","","",388],[11,"fill_buf","","",388],[11,"consume","","",388],[11,"fmt","","",389],[11,"write_all","","",389],[11,"fmt","","",390],[11,"read","","",390],[11,"fill_buf","","",390],[11,"consume","","",390],[11,"fmt","","",391],[11,"read","","",391],[11,"fill_buf","","",391],[11,"consume","","",391],[11,"fmt","","",392],[11,"new","","Creates a new `MultiWriter`",392],[11,"write_all","","",392],[11,"flush","","",392],[11,"fmt","","",393],[11,"clone","","",393],[11,"new","","Creates a new `ChainedReader`",393],[11,"read","","",393],[11,"fmt","","",394],[11,"new","","Creates a new `TeeReader`",394],[11,"into_inner","","Consumes the `TeeReader`, returning the underlying `Reader` and\n`Writer`.",394],[11,"read","","",394],[11,"fmt","","",395],[11,"clone","","",395],[11,"new","","Creates a new `IterReader` which will read from the specified\n`Iterator`.",395],[11,"read","","",395],[0,"test","std::old_io","Various utility functions useful for writing I/O tests"],[5,"next_test_port","std::old_io::test","Get a port number, starting at 9600, for use in tests"],[5,"next_test_unix","","Get a temporary path which could be the location of a unix socket"],[5,"next_test_ip4","","Get a unique IPv4 localhost:port pair starting at 9600"],[5,"next_test_ip6","","Get a unique IPv6 localhost:port pair starting at 9600"],[5,"raise_fd_limit","","Raises the file descriptor limit when running tests if necessary"],[6,"IoResult","std::old_io","A convenient typedef of the return value of any I/O action."],[17,"USER_READ","",""],[17,"USER_WRITE","",""],[17,"USER_EXECUTE","",""],[17,"GROUP_READ","",""],[17,"GROUP_WRITE","",""],[17,"GROUP_EXECUTE","",""],[17,"OTHER_READ","",""],[17,"OTHER_WRITE","",""],[17,"OTHER_EXECUTE","",""],[17,"USER_RWX","",""],[17,"GROUP_RWX","",""],[17,"OTHER_RWX","",""],[17,"USER_FILE","","/// Permissions for user owned files, equivalent to 0644 on unix-like\n/// systems."],[17,"USER_DIR","","/// Permissions for user owned directories, equivalent to 0755 on\n/// unix-like systems."],[17,"USER_EXEC","","/// Permissions for user owned executables, equivalent to 0755\n/// on unix-like systems."],[17,"ALL_PERMISSIONS","","/// All possible permissions enabled."],[8,"Reader","","A trait for objects which are byte-oriented streams. Readers are defined by\none method, `read`. This function will block until data is available,\nfilling in the provided buffer with any data read."],[10,"read","","Read bytes, up to the length of `buf` and place them in `buf`.\nReturns the number of bytes read. The number of bytes read may\nbe less than the number requested, even 0. Returns `Err` on EOF.",396],[11,"read_at_least","","Reads at least `min` bytes and places them in `buf`.\nReturns the number of bytes read.",396],[11,"read_byte","","Reads a single byte. Returns `Err` on EOF.",396],[11,"push","","Reads up to `len` bytes and appends them to a vector.\nReturns the number of bytes read. The number of bytes read may be\nless than the number requested, even 0. Returns Err on EOF.",396],[11,"push_at_least","","Reads at least `min` bytes, but no more than `len`, and appends them to\na vector.\nReturns the number of bytes read.",396],[11,"read_exact","","Reads exactly `len` bytes and gives you back a new vector of length\n`len`",396],[11,"read_to_end","","Reads all remaining bytes from the stream.",396],[11,"read_to_string","","Reads all of the remaining bytes of this stream, interpreting them as a\nUTF-8 encoded stream. The corresponding string is returned.",396],[11,"read_le_uint_n","","Reads `n` little-endian unsigned integer bytes.",396],[11,"read_le_int_n","","Reads `n` little-endian signed integer bytes.",396],[11,"read_be_uint_n","","Reads `n` big-endian unsigned integer bytes.",396],[11,"read_be_int_n","","Reads `n` big-endian signed integer bytes.",396],[11,"read_le_uint","","Reads a little-endian unsigned integer.",396],[11,"read_le_int","","Reads a little-endian integer.",396],[11,"read_be_uint","","Reads a big-endian unsigned integer.",396],[11,"read_be_int","","Reads a big-endian integer.",396],[11,"read_be_u64","","Reads a big-endian `u64`.",396],[11,"read_be_u32","","Reads a big-endian `u32`.",396],[11,"read_be_u16","","Reads a big-endian `u16`.",396],[11,"read_be_i64","","Reads a big-endian `i64`.",396],[11,"read_be_i32","","Reads a big-endian `i32`.",396],[11,"read_be_i16","","Reads a big-endian `i16`.",396],[11,"read_be_f64","","Reads a big-endian `f64`.",396],[11,"read_be_f32","","Reads a big-endian `f32`.",396],[11,"read_le_u64","","Reads a little-endian `u64`.",396],[11,"read_le_u32","","Reads a little-endian `u32`.",396],[11,"read_le_u16","","Reads a little-endian `u16`.",396],[11,"read_le_i64","","Reads a little-endian `i64`.",396],[11,"read_le_i32","","Reads a little-endian `i32`.",396],[11,"read_le_i16","","Reads a little-endian `i16`.",396],[11,"read_le_f64","","Reads a little-endian `f64`.",396],[11,"read_le_f32","","Reads a little-endian `f32`.",396],[11,"read_u8","","Read a u8.",396],[11,"read_i8","","Read an i8.",396],[8,"ByRefReader","","A reader which can be converted to a RefReader."],[10,"by_ref","","Creates a wrapper around a mutable reference to the reader.",397],[8,"BytesReader","","A reader which can be converted to bytes."],[10,"bytes","","Create an iterator that reads a single byte on\neach iteration, until EOF.",398],[8,"Writer","","A trait for objects which are byte-oriented streams. Writers are defined by\none method, `write`. This function will block until the provided buffer of\nbytes has been entirely written, and it will return any failures which occur."],[10,"write_all","","Write the entirety of a given buffer",399],[11,"write","","Deprecated, this method was renamed to `write_all`",399],[11,"flush","","Flush this output stream, ensuring that all intermediately buffered\ncontents reach their destination.",399],[11,"write_fmt","","Writes a formatted string into this writer, returning any error\nencountered.",399],[11,"write_str","","Write a rust string into this sink.",399],[11,"write_line","","Writes a string into this sink, and then writes a literal newline (`\\n`)\nbyte afterwards. Note that the writing of the newline is *not* atomic in\nthe sense that the call to `write` is invoked twice (once with the\nstring and once with a newline character).",399],[11,"write_char","","Write a single char, encoded as UTF-8.",399],[11,"write_int","","Write the result of passing n through `int::to_str_bytes`.",399],[11,"write_uint","","Write the result of passing n through `uint::to_str_bytes`.",399],[11,"write_le_uint","","Write a little-endian uint (number of bytes depends on system).",399],[11,"write_le_int","","Write a little-endian int (number of bytes depends on system).",399],[11,"write_be_uint","","Write a big-endian uint (number of bytes depends on system).",399],[11,"write_be_int","","Write a big-endian int (number of bytes depends on system).",399],[11,"write_be_u64","","Write a big-endian u64 (8 bytes).",399],[11,"write_be_u32","","Write a big-endian u32 (4 bytes).",399],[11,"write_be_u16","","Write a big-endian u16 (2 bytes).",399],[11,"write_be_i64","","Write a big-endian i64 (8 bytes).",399],[11,"write_be_i32","","Write a big-endian i32 (4 bytes).",399],[11,"write_be_i16","","Write a big-endian i16 (2 bytes).",399],[11,"write_be_f64","","Write a big-endian IEEE754 double-precision floating-point (8 bytes).",399],[11,"write_be_f32","","Write a big-endian IEEE754 single-precision floating-point (4 bytes).",399],[11,"write_le_u64","","Write a little-endian u64 (8 bytes).",399],[11,"write_le_u32","","Write a little-endian u32 (4 bytes).",399],[11,"write_le_u16","","Write a little-endian u16 (2 bytes).",399],[11,"write_le_i64","","Write a little-endian i64 (8 bytes).",399],[11,"write_le_i32","","Write a little-endian i32 (4 bytes).",399],[11,"write_le_i16","","Write a little-endian i16 (2 bytes).",399],[11,"write_le_f64","","Write a little-endian IEEE754 double-precision floating-point\n(8 bytes).",399],[11,"write_le_f32","","Write a little-endian IEEE754 single-precision floating-point\n(4 bytes).",399],[11,"write_u8","","Write a u8 (1 byte).",399],[11,"write_i8","","Write an i8 (1 byte).",399],[8,"ByRefWriter","","A writer which can be converted to a RefWriter."],[10,"by_ref","","Creates a wrapper around a mutable reference to the writer.",400],[8,"Stream","","A Stream is a readable and a writable object. Data written is typically\nreceived by the object which reads receive data from."],[8,"Buffer","","A Buffer is a type of reader which has some form of internal buffering to\nallow certain kinds of reading operations to be more optimized than others.\nThis type extends the `Reader` trait with a few methods that are not\npossible to reasonably implement with purely a read interface."],[10,"fill_buf","","Fills the internal buffer of this object, returning the buffer contents.\nNote that none of the contents will be \"read\" in the sense that later\ncalling `read` may return the same contents.",401],[10,"consume","","Tells this buffer that `amt` bytes have been consumed from the buffer,\nso they should no longer be returned in calls to `read`.",401],[11,"read_line","","Reads the next line of input, interpreted as a sequence of UTF-8\nencoded Unicode codepoints. If a newline is encountered, then the\nnewline is contained in the returned string.",401],[11,"read_until","","Reads a sequence of bytes leading up to a specified delimiter. Once the\nspecified byte is encountered, reading ceases and the bytes up to and\nincluding the delimiter are returned.",401],[11,"read_char","","Reads the next utf8-encoded character from the underlying stream.",401],[8,"BufferPrelude","","Extension methods for the Buffer trait which are included in the prelude."],[10,"chars","","Create an iterator that reads a utf8-encoded character on each iteration\nuntil EOF.",402],[10,"lines","","Create an iterator that reads a line on each iteration until EOF.",402],[8,"Seek","","An object implementing `Seek` internally has some form of cursor which can\nbe moved within a stream of bytes. The stream typically has a fixed size,\nallowing seeking relative to either end."],[10,"tell","","Return position of file cursor in the stream",403],[10,"seek","","Seek to an offset in a stream",403],[8,"Listener","","A listener is a value that can consume itself to start listening for\nconnections."],[10,"listen","","Spin up the listener and start queuing incoming connections",404],[8,"Acceptor","","An acceptor is a value that presents incoming connections"],[10,"accept","","Wait for and accept an incoming connection",405],[11,"incoming","","Create an iterator over incoming connection attempts.",405],[11,"fmt","","",337],[11,"clone","","",337],[11,"eq","","",337],[11,"ne","","",337],[11,"from_errno","","Convert an `errno` value into an `IoError`.",337],[11,"last_error","","Retrieve the last error to occur as a (detailed) IoError.",337],[11,"fmt","","",337],[11,"description","","",337],[11,"fmt","","",340],[11,"clone","","",340],[11,"eq","","",340],[11,"ne","","",340],[11,"read","std::boxed","",176],[11,"read","std::old_io","",406],[11,"fill_buf","","",406],[11,"consume","","",406],[11,"write_all","std::boxed","",176],[11,"flush","","",176],[11,"write_all","std::old_io","",407],[11,"flush","","",407],[6,"Item","",""],[11,"next","","",408],[6,"Item","",""],[11,"next","","",409],[6,"Item","",""],[11,"next","","",410],[11,"fmt","","",342],[11,"eq","","",342],[11,"ne","","",342],[11,"clone","","",342],[11,"fmt","","",343],[11,"eq","","",343],[11,"ne","","",343],[11,"clone","","",343],[11,"clone","","",344],[11,"hash","","",344],[11,"fmt","","",344],[11,"eq","","",344],[11,"ne","","",344],[11,"hash","","",338],[11,"hash","","",339],[11,"hash","","",411],[11,"cmp","","",411],[11,"partial_cmp","","",411],[11,"lt","","",411],[11,"le","","",411],[11,"gt","","",411],[11,"ge","","",411],[11,"clone","","",411],[11,"eq","","",411],[11,"ne","","",411],[11,"fmt","","",411],[11,"empty","","Returns an empty set of flags.",411],[11,"all","","Returns the set containing all flags.",411],[11,"bits","","Returns the raw value of the flags currently stored.",411],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",411],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",411],[11,"is_empty","","Returns `true` if no flags are currently stored.",411],[11,"is_all","","Returns `true` if all flags are currently set.",411],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",411],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",411],[11,"insert","","Inserts the specified flags in-place.",411],[11,"remove","","Removes the specified flags in-place.",411],[11,"toggle","","Toggles the specified flags in-place.",411],[6,"Output","",""],[11,"bitor","","Returns the union of the two sets of flags.",411],[6,"Output","",""],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",411],[6,"Output","",""],[11,"bitand","","Returns the intersection between the two sets of flags.",411],[6,"Output","",""],[11,"sub","","Returns the set difference of the two sets of flags.",411],[6,"Output","",""],[11,"not","","Returns the complement of this set of flags.",411],[11,"default","","",411],[11,"fmt","","",411],[0,"io","std","Traits, helpers, and type definitions for core I/O functionality."],[3,"BufReader","std::io","Wraps a `Read` and buffers input from it"],[3,"BufWriter","","Wraps a Writer and buffers output to it"],[3,"BufStream","","Wraps a Stream and buffers input and output to and from it."],[3,"LineWriter","","Wraps a Writer and buffers output to it, flushing whenever a newline\n(`0x0a`, `'\\n'`) is detected."],[3,"IntoInnerError","","An error returned by `into_inner` which indicates whether a flush error\nhappened or not."],[3,"Cursor","","A `Cursor` is a type which wraps another I/O object to provide a `Seek`\nimplementation."],[3,"Error","","The error type for I/O operations of the `Read`, `Write`, `Seek`, and\nassociated traits."],[3,"Sink","","A writer which will move data into the void."],[3,"Empty","","A reader which is always at EOF."],[3,"Repeat","","A reader which infinitely yields one byte."],[3,"Stdin","","A handle to the standard input stream of a process."],[3,"Stdout","","A handle to the global standard output stream of the current process."],[3,"Stderr","","A handle to the standard error stream of a process."],[3,"StdoutLock","","A locked reference to the a `Stdout` handle."],[3,"StderrLock","","A locked reference to the a `Stderr` handle."],[3,"StdinLock","","A locked reference to the a `Stdin` handle."],[3,"Broadcast","","A `Write` adaptor which will write data to multiple locations."],[3,"Chain","","Adaptor to chain together two instances of `Read`."],[3,"Take","","Reader adaptor which limits the bytes read from an underlying reader."],[3,"Tee","","An adaptor which will emit all read data to a specified writer as well."],[3,"Bytes","","A bridge from implementations of `Read` to an `Iterator` of `u8`."],[3,"Chars","","A bridge from implementations of `Read` to an `Iterator` of `char`."],[3,"Split","","An iterator over the contents of an instance of `BufRead` split on a\nparticular byte."],[3,"Lines","","An iterator over the lines of an instance of `BufRead` split on a newline\nbyte."],[4,"ErrorKind","","A list specifying general categories of I/O error."],[13,"FileNotFound","","The file was not found.",412],[13,"PermissionDenied","","The file permissions disallowed access to this file.",412],[13,"ConnectionRefused","","The connection was refused by the remote server.",412],[13,"ConnectionReset","","The connection was reset by the remote server.",412],[13,"ConnectionAborted","","The connection was aborted (terminated) by the remote server.",412],[13,"NotConnected","","The network operation failed because it was not connected yet.",412],[13,"BrokenPipe","","The operation failed because a pipe was closed.",412],[13,"PathAlreadyExists","","A file already existed with that name.",412],[13,"PathDoesntExist","","No file exists at that location.",412],[13,"MismatchedFileTypeForOperation","","The path did not specify the type of file that this operation required.\nFor example, attempting to copy a directory with the `fs::copy()`\noperation will fail with this error.",412],[13,"ResourceUnavailable","","The operation temporarily failed (for example, because a signal was\nreceived), and retrying may succeed.",412],[13,"InvalidInput","","A parameter was incorrect in a way that caused an I/O error not part of\nthis list.",412],[13,"TimedOut","","The I/O operation's timeout expired, causing it to be canceled.",412],[13,"WriteZero","","An error returned when an operation could not be completed because a\ncall to `write` returned `Ok(0)`.",412],[13,"Interrupted","","This operation was interrupted",412],[13,"Other","","Any I/O error not part of this list.",412],[4,"SeekFrom","","Enumeration of possible methods to seek within an I/O object."],[13,"Start","","Set the offset to the provided number of bytes.",413],[13,"End","","Set the offset to the size of this object plus the specified number of\nbytes.",413],[13,"Current","","Set the offset to the current position plus the specified number of\nbytes.",413],[4,"CharsError","","An enumeration of possible errors that can be generated from the `Chars`\nadapter."],[13,"NotUtf8","","Variant representing that the underlying stream was read successfully\nbut it did not contain valid utf8 data.",414],[13,"Other","","Variant representing that an I/O error occurred.",414],[5,"copy","","Copies the entire contents of a reader into a writer."],[5,"sink","","Creates an instance of a writer which will successfully consume all data."],[5,"empty","","Creates an instance of an empty reader."],[5,"repeat","","Creates an instance of a reader that infinitely repeats one byte."],[5,"stdin","","Create a new handle to the global standard input stream of this process."],[5,"stdout","","Constructs a new reference to the standard output of the current process."],[5,"stderr","","Constructs a new reference to the standard error stream of a process."],[0,"prelude","","The I/O Prelude"],[11,"new","","Creates a new `BufReader` with a default buffer capacity",415],[11,"with_capacity","","Creates a new `BufReader` with the specified buffer capacity",415],[11,"get_ref","","Gets a reference to the underlying reader.",415],[11,"get_mut","","Gets a mutable reference to the underlying reader.",415],[11,"into_inner","","Unwraps this `BufReader`, returning the underlying reader.",415],[11,"read","","",415],[11,"fill_buf","","",415],[11,"consume","","",415],[11,"fmt","","",415],[11,"fmt","","",416],[11,"new","","Creates a new `BufWriter` with a default buffer capacity",417],[11,"with_capacity","","Creates a new `BufWriter` with the specified buffer capacity",417],[11,"get_ref","","Gets a reference to the underlying writer.",417],[11,"get_mut","","Gets a mutable reference to the underlying write.",417],[11,"into_inner","","Unwraps this `BufWriter`, returning the underlying writer.",417],[11,"write","","",417],[11,"flush","","",417],[11,"fmt","","",417],[11,"drop","","",417],[11,"error","","Returns the error which caused the call to `into_inner` to fail.",416],[11,"into_inner","","Returns the underlying `BufWriter` instance which generated the error.",416],[11,"from_error","","",418],[11,"description","","",416],[11,"fmt","","",416],[11,"new","","Creates a new `LineWriter`",419],[11,"get_ref","","Gets a reference to the underlying writer.",419],[11,"into_inner","","Unwraps this `LineWriter`, returning the underlying writer.",419],[11,"write","","",419],[11,"flush","","",419],[11,"fmt","","",419],[11,"with_capacities","","Creates a new buffered stream with explicitly listed capacities for the\nreader/writer buffer.",420],[11,"new","","Creates a new buffered stream with the default reader/writer buffer\ncapacities.",420],[11,"get_ref","","Gets a reference to the underlying stream.",420],[11,"get_mut","","Gets a mutable reference to the underlying stream.",420],[11,"into_inner","","Unwraps this `BufStream`, returning the underlying stream.",420],[11,"fill_buf","","",420],[11,"consume","","",420],[11,"read","","",420],[11,"write","","",420],[11,"flush","","",420],[11,"fmt","","",420],[11,"new","","Create a new cursor wrapping the provided underlying I/O object.",421],[11,"into_inner","","Consume this cursor, returning the underlying value.",421],[11,"get_ref","","Get a reference to the underlying value in this cursor.",421],[11,"get_mut","","Get a mutable reference to the underlying value in this cursor.",421],[11,"position","","Returns the current value of this cursor",421],[11,"set_position","","Sets the value of this cursor",421],[11,"seek","","",421],[11,"seek","","",421],[11,"seek","","",421],[11,"read","","",421],[11,"read","","",421],[11,"read","","",421],[11,"fill_buf","","",421],[11,"consume","","",421],[11,"fill_buf","","",421],[11,"consume","","",421],[11,"fill_buf","","",421],[11,"consume","","",421],[11,"write","","",421],[11,"flush","","",421],[11,"write","","",421],[11,"flush","","",421],[11,"fmt","","",418],[11,"clone","","",418],[11,"eq","","",418],[11,"ne","","",418],[11,"fmt","","",412],[11,"clone","","",412],[11,"eq","","",412],[11,"ne","","",412],[11,"new","","Creates a new custom error from a specified kind/description/detail.",418],[11,"last_os_error","","Returns an error representing the last OS error which occurred.",418],[11,"from_os_error","","Creates a new instance of an `Error` from a particular OS error code.",418],[11,"kind","","Return the corresponding `ErrorKind` for this error.",418],[11,"description","","Returns a short description for this error message",418],[11,"detail","","Returns a detailed error message for this error (if one is available)",418],[11,"fmt","","",418],[11,"description","","",418],[11,"read","std::boxed","",176],[11,"read_to_end","","",176],[11,"read_to_string","","",176],[11,"write","","",176],[11,"flush","","",176],[11,"write_all","","",176],[11,"write_fmt","","",176],[11,"seek","","",176],[11,"fill_buf","","",176],[11,"consume","","",176],[11,"read_until","","",176],[11,"read_line","","",176],[11,"write","std::vec","",239],[11,"write_all","","",239],[11,"flush","","",239],[11,"read","std::io","",422],[11,"fill_buf","","",422],[11,"consume","","",422],[11,"read","","",423],[11,"write","","",424],[11,"flush","","",424],[11,"lock","","Lock this handle to the standard input stream, returning a readable\nguard.",425],[11,"read","","",425],[11,"read_to_end","","",425],[11,"read_to_string","","",425],[11,"read","","",426],[11,"fill_buf","","",426],[11,"consume","","",426],[11,"lock","","Lock this handle to the standard output stream, returning a writable\nguard.",427],[11,"write","","",427],[11,"flush","","",427],[11,"write_all","","",427],[11,"write_fmt","","",427],[11,"write","","",428],[11,"flush","","",428],[11,"lock","","Lock this handle to the standard error stream, returning a writable\nguard.",429],[11,"write","","",429],[11,"flush","","",429],[11,"write_all","","",429],[11,"write_fmt","","",429],[11,"write","","",430],[11,"flush","","",430],[6,"Result","","A type for results generated by I/O related functions where the `Err` type\nis hard-wired to `io::Error`."],[8,"Read","","A trait for objects which are byte-oriented sources."],[10,"read","","Pull some bytes from this source into the specified buffer, returning\nhow many bytes were read.",431],[11,"read_to_end","","Read all bytes until EOF in this source, placing them into `buf`.",431],[11,"read_to_string","","Read all bytes until EOF in this source, placing them into `buf`.",431],[8,"ReadExt","","Extension methods for all instances of `Read`, typically imported through\n`std::io::prelude::*`."],[11,"by_ref","","Create a \"by reference\" adaptor for this instance of `Read`.",432],[11,"bytes","","Transform this `Read` instance to an `Iterator` over its bytes.",432],[11,"chars","","Transform this `Read` instance to an `Iterator` over `char`s.",432],[11,"chain","","Create an adaptor which will chain this stream with another.",432],[11,"take","","Create an adaptor which will read at most `limit` bytes from it.",432],[11,"tee","","Creates a reader adaptor which will write all read data into the given\noutput stream.",432],[8,"Write","","A trait for objects which are byte-oriented sinks."],[10,"write","","Write a buffer into this object, returning how many bytes were written.",433],[10,"flush","","Flush this output stream, ensuring that all intermediately buffered\ncontents reach their destination.",433],[11,"write_all","","Attempts to write an entire buffer into this write.",433],[11,"write_fmt","","Writes a formatted string into this writer, returning any error\nencountered.",433],[8,"WriteExt","","Extension methods for all instances of `Write`, typically imported through\n`std::io::prelude::*`."],[11,"by_ref","","Create a \"by reference\" adaptor for this instance of `Write`.",434],[11,"broadcast","","Creates a new writer which will write all data to both this writer and\nanother writer.",434],[8,"Seek","","An object implementing `Seek` internally has some form of cursor which can\nbe moved within a stream of bytes."],[10,"seek","","Seek to an offset, in bytes, in a stream",435],[8,"BufRead","","A Buffer is a type of reader which has some form of internal buffering to\nallow certain kinds of reading operations to be more optimized than others."],[10,"fill_buf","","Fills the internal buffer of this object, returning the buffer contents.",436],[10,"consume","","Tells this buffer that `amt` bytes have been consumed from the buffer,\nso they should no longer be returned in calls to `read`.",436],[11,"read_until","","Read all bytes until the delimiter `byte` is reached.",436],[11,"read_line","","Read all bytes until a newline byte (the 0xA byte) is reached.",436],[8,"BufReadExt","","Extension methods for all instances of `BufRead`, typically imported through\n`std::io::prelude::*`."],[11,"split","","Returns an iterator over the contents of this reader split on the byte\n`byte`.",437],[11,"lines","","Returns an iterator over the lines of this reader.",437],[11,"fmt","","",413],[11,"clone","","",413],[11,"eq","","",413],[11,"ne","","",413],[11,"write","","",438],[11,"flush","","",438],[11,"read","","",439],[11,"limit","","Returns the number of bytes that can be read before this instance will\nreturn EOF.",440],[11,"read","","",440],[11,"fill_buf","","",440],[11,"consume","","",440],[11,"read","","",441],[6,"Item","",""],[11,"next","","",442],[11,"fmt","","",414],[11,"clone","","",414],[11,"eq","","",414],[11,"ne","","",414],[6,"Item","",""],[11,"next","","",443],[11,"description","","",414],[11,"cause","","",414],[11,"fmt","","",414],[6,"Item","",""],[11,"next","","",444],[6,"Item","",""],[11,"next","","",445],[0,"fs","std","Filesystem manipulation operations"],[3,"TempDir","std::fs","A wrapper for a path to temporary directory implementing automatic\nscope-based deletion."],[3,"File","","A reference to an open file on the filesystem."],[3,"Metadata","","Metadata information about a file."],[3,"ReadDir","","Iterator over the entries in a directory."],[3,"DirEntry","","Entries returned by the `ReadDir` iterator."],[3,"WalkDir","","An iterator that recursively walks over the contents of a directory."],[3,"OpenOptions","","Options and flags which can be used to configure how a file is opened."],[3,"Permissions","","Representation of the various permissions on a file."],[5,"remove_file","","Remove a file from the underlying filesystem."],[5,"metadata","","Given a path, query the file system to get information about a file,\ndirectory, etc."],[5,"rename","","Rename a file or directory to a new name."],[5,"copy","","Copies the contents of one file to another. This function will also\ncopy the permission bits of the original file to the destination file."],[5,"hard_link","","Creates a new hard link on the filesystem."],[5,"soft_link","","Creates a new soft link on the filesystem."],[5,"read_link","","Reads a soft link, returning the file that the link points to."],[5,"create_dir","","Create a new, empty directory at the provided path"],[5,"create_dir_all","","Recursively create a directory and all of its parent components if they\nare missing."],[5,"remove_dir","","Remove an existing, empty directory"],[5,"remove_dir_all","","Removes a directory at this path, after removing all its contents. Use\ncarefully!"],[5,"read_dir","","Returns an iterator over the entries within a directory."],[5,"walk_dir","","Returns an iterator that will recursively walk the directory structure\nrooted at `path`."],[5,"set_file_times","","Changes the timestamps for a file's last modification and access time."],[5,"set_permissions","","Changes the permissions found on a file or a directory."],[11,"new_in","","Attempts to make a temporary directory inside of `tmpdir` whose name\nwill have the prefix `prefix`. The directory will be automatically\ndeleted once the returned wrapper is destroyed.",446],[11,"new","","Attempts to make a temporary directory inside of `env::temp_dir()` whose\nname will have the prefix `prefix`. The directory will be automatically\ndeleted once the returned wrapper is destroyed.",446],[11,"into_path","","Unwrap the wrapped `std::path::Path` from the `TempDir` wrapper.\nThis discards the wrapper so that the automatic deletion of the\ntemporary directory is prevented.",446],[11,"path","","Access the wrapped `std::path::Path` to the temporary directory.",446],[11,"close","","Close and remove the temporary directory",446],[11,"drop","","",446],[8,"PathExt","","Utility methods for paths."],[10,"metadata","","Get information on the file, directory, etc at this path.",447],[10,"exists","","Boolean value indicator whether the underlying file exists on the local\nfilesystem. Returns false in exactly the cases where `fs::stat` fails.",447],[10,"is_file","","Whether the underlying implementation (be it a file path, or something\nelse) points at a \"regular file\" on the FS. Will return false for paths\nto non-existent locations or directories or other non-regular files\n(named pipes, etc). Follows links when making this determination.",447],[10,"is_dir","","Whether the underlying implementation (be it a file path, or something\nelse) is pointing at a directory in the underlying FS. Will return\nfalse for paths to non-existent locations or if the item is not a\ndirectory (eg files, named pipes, etc). Follows links when making this\ndetermination.",447],[11,"clone","","",448],[11,"fmt","","",449],[11,"eq","","",449],[11,"ne","","",449],[11,"clone","","",449],[11,"open","","Attempts to open a file in read-only mode.",450],[11,"create","","Open a file in write-only mode.",450],[11,"path","","Returns the original path that was used to open this file.",450],[11,"sync_all","","Attempt to sync all OS-internal metadata to disk.",450],[11,"sync_data","","This function is similar to `sync_all`, except that it may not\nsynchronize file metadata to the filesystem.",450],[11,"set_len","","Truncates or extends the underlying file, updating the size of\nthis file to become `size`.",450],[11,"metadata","","Queries metadata about the underlying file.",450],[11,"read","","",450],[11,"write","","",450],[11,"flush","","",450],[11,"seek","","",450],[11,"new","","Creates a blank net set of options ready for configuration.",448],[11,"read","","Set the option for read access.",448],[11,"write","","Set the option for write access.",448],[11,"append","","Set the option for the append mode.",448],[11,"truncate","","Set the option for truncating a previous file.",448],[11,"create","","Set the option for creating a new file.",448],[11,"open","","Open a file at `path` with the options specified by `self`.",448],[11,"is_dir","","Returns whether this metadata is for a directory.",451],[11,"is_file","","Returns whether this metadata is for a regular file.",451],[11,"len","","Returns the size of the file, in bytes, this metadata is for.",451],[11,"permissions","","Returns the permissions of the file this metadata is for.",451],[11,"accessed","","Returns the most recent access time for a file.",451],[11,"modified","","Returns the most recent modification time for a file.",451],[11,"readonly","","Returns whether these permissions describe a readonly file.",449],[11,"set_readonly","","Modify the readonly flag for this set of permissions.",449],[6,"Item","",""],[11,"next","","",452],[11,"path","","Returns the full path to the file that this entry represents.",453],[6,"Item","",""],[11,"next","","",454],[0,"net","std","Networking primitives for TCP/UDP communication"],[3,"Ipv4Addr","std::net","Representation of an IPv4 address."],[3,"Ipv6Addr","","Representation of an IPv6 address."],[3,"SocketAddr","","Representation of a socket address for networking applications"],[3,"TcpStream","","A structure which represents a TCP stream between a local socket and a\nremote socket."],[3,"TcpListener","","A structure representing a socket server."],[3,"UdpSocket","","A User Datagram Protocol socket."],[3,"LookupHost","","An iterator over `SocketAddr` values returned from a host lookup operation."],[4,"IpAddr","","Enumeration of possible IP addresses"],[13,"V4","","An IPv4 address.",455],[13,"V6","","An IPv6 address.",455],[4,"Ipv6MulticastScope","",""],[13,"InterfaceLocal","","",456],[13,"LinkLocal","","",456],[13,"RealmLocal","","",456],[13,"AdminLocal","","",456],[13,"SiteLocal","","",456],[13,"OrganizationLocal","","",456],[13,"Global","","",456],[4,"Shutdown","","Possible values which can be passed to the `shutdown` method of `TcpStream`\nand `UdpSocket`."],[13,"Read","","Indicates that the reading portion of this stream/socket should be shut\ndown. All currently blocked and future reads will return `Ok(0)`.",457],[13,"Write","","Indicates that the writing portion of this stream/socket should be shut\ndown. All currently blocked and future writes will return an error.",457],[13,"Both","","Shut down both the reading and writing portions of this stream.",457],[5,"lookup_host","","Resolve the host specified by `host` as a number of `SocketAddr` instances."],[11,"fmt","","",456],[11,"hash","","",456],[11,"clone","","",456],[11,"eq","","",456],[11,"ne","","",456],[11,"fmt","","",455],[11,"hash","","",455],[11,"clone","","",455],[11,"eq","","",455],[11,"ne","","",455],[11,"new_v4","","Create a new IpAddr that contains an IPv4 address.",455],[11,"new_v6","","Create a new IpAddr that contains an IPv6 address.",455],[11,"fmt","","",455],[11,"new","","Create a new IPv4 address from four eight-bit octets.",458],[11,"octets","","Returns the four eight-bit integers that make up this address",458],[11,"is_unspecified","","Returns true for the special 'unspecified' address 0.0.0.0",458],[11,"is_loopback","","Returns true if this is a loopback address (127.0.0.0/8)",458],[11,"is_private","","Returns true if this is a private address.",458],[11,"is_link_local","","Returns true if the address is link-local (169.254.0.0/16)",458],[11,"is_global","","Returns true if the address appears to be globally routable.",458],[11,"is_multicast","","Returns true if this is a multicast address.",458],[11,"to_ipv6_compatible","","Convert this address to an IPv4-compatible IPv6 address",458],[11,"to_ipv6_mapped","","Convert this address to an IPv4-mapped IPv6 address",458],[11,"fmt","","",458],[11,"fmt","","",458],[11,"clone","","",458],[11,"eq","","",458],[11,"hash","","",458],[11,"partial_cmp","","",458],[11,"cmp","","",458],[11,"new","","Create a new IPv6 address from eight 16-bit segments.",459],[11,"segments","","Return the eight 16-bit segments that make up this address",459],[11,"is_unspecified","","Returns true for the special 'unspecified' address ::",459],[11,"is_loopback","","Returns true if this is a loopback address (::1)",459],[11,"is_global","","Returns true if the address appears to be globally routable.",459],[11,"is_unique_local","","Returns true if this is a unique local address (IPv6)",459],[11,"is_unicast_link_local","","Returns true if the address is unicast and link-local (fe80::/10)",459],[11,"is_unicast_site_local","","Returns true if this is a deprecated unicast site-local address (IPv6\nfec0::/10)",459],[11,"is_unicast_global","","Returns true if the address is a globally routable unicast address",459],[11,"multicast_scope","","Returns the address's multicast scope if the address is multicast.",459],[11,"is_multicast","","Returns true if this is a multicast address.",459],[11,"to_ipv4","","Convert this address to an IPv4 address. Returns None if this address is\nneither IPv4-compatible or IPv4-mapped.",459],[11,"fmt","","",459],[11,"fmt","","",459],[11,"clone","","",459],[11,"eq","","",459],[11,"hash","","",459],[11,"partial_cmp","","",459],[11,"cmp","","",459],[11,"hash","","",460],[11,"eq","","",460],[11,"ne","","",460],[11,"clone","","",460],[11,"new","","Creates a new socket address from the (ip, port) pair.",460],[11,"ip","","Gets the IP address associated with this socket address.",460],[11,"port","","Gets the port number associated with this socket address",460],[11,"fmt","","",460],[11,"fmt","","",460],[11,"to_socket_addrs","","",460],[11,"connect","","Open a TCP connection to a remote host.",461],[11,"peer_addr","","Returns the socket address of the remote peer of this TCP connection.",461],[11,"socket_addr","","Returns the socket address of the local half of this TCP connection.",461],[11,"shutdown","","Shut down the read, write, or both halves of this connection.",461],[11,"try_clone","","Create a new independently owned handle to the underlying socket.",461],[11,"set_nodelay","","Sets the nodelay flag on this connection to the boolean specified",461],[11,"set_keepalive","","Sets the keepalive timeout to the timeout specified.",461],[11,"read","","",461],[11,"write","","",461],[11,"flush","","",461],[11,"bind","","Creates a new `TcpListener` which will be bound to the specified\naddress.",462],[11,"socket_addr","","Returns the local socket address of this listener.",462],[11,"try_clone","","Create a new independently owned handle to the underlying socket.",462],[11,"accept","","Accept a new incoming connection from this listener.",462],[11,"incoming","","Returns an iterator over the connections being received on this\nlistener.",462],[11,"bind","","Creates a UDP socket from the given address.",463],[11,"recv_from","","Receives data from the socket. On success, returns the number of bytes\nread and the address from whence the data came.",463],[11,"send_to","","Sends data on the socket to the given address. Returns nothing on\nsuccess.",463],[11,"socket_addr","","Returns the socket address that this socket was created from.",463],[11,"try_clone","","Create a new independently owned handle to the underlying socket.",463],[11,"set_broadcast","","Sets the broadcast flag on or off",463],[11,"set_multicast_loop","","Set the multicast loop flag to the specified value",463],[11,"join_multicast","","Joins a multicast IP address (becomes a member of it)",463],[11,"leave_multicast","","Leaves a multicast IP address (drops membership from it)",463],[11,"set_multicast_time_to_live","","Sets the multicast TTL",463],[11,"set_time_to_live","","Sets this socket's TTL",463],[11,"from_str","","",455],[11,"from_str","","",458],[11,"from_str","","",459],[11,"from_str","","",460],[8,"ToSocketAddrs","","A trait for objects which can be converted or resolved to one or more\n`SocketAddr` values."],[16,"Iter","std::net::ToSocketAddrs","Returned iterator over socket addresses which this type may correspond\nto."],[10,"to_socket_addrs","std::net","Converts this object to an iterator of resolved `SocketAddr`s.",464],[11,"eq","","",457],[11,"ne","","",457],[11,"clone","","",457],[6,"Item","",""],[11,"next","","",465],[0,"os","std","Higher-level interfaces to libc::* functions and operating system services."],[3,"Pipe","std::os","A low-level OS in-memory pipe."],[12,"reader","","A file descriptor representing the reading end of the pipe. Data written\non the `out` file descriptor can be read from this file descriptor.",466],[12,"writer","","A file descriptor representing the write end of the pipe. Data written\nto this file descriptor can be read from the `input` file descriptor.",466],[3,"MemoryMap","","A memory mapped file or chunk of memory. This is a very system-specific\ninterface to the OS's memory mapping facilities (`mmap` on POSIX,\n`VirtualAlloc`/`CreateFileMapping` on Windows). It makes no attempt at\nabstracting platform differences, besides in error values returned. Consider\nyourself warned."],[4,"MemoryMapKind","","Type of memory map"],[13,"MapFile","","Virtual memory map. Usually used to change the permissions of a given\nchunk of memory.  Corresponds to `VirtualAlloc` on Windows.",467],[13,"MapVirtual","","Virtual memory map. Usually used to change the permissions of a given\nchunk of memory, or for allocation. Corresponds to `VirtualAlloc` on\nWindows.",467],[4,"MapOption","","Options the memory map is created with"],[13,"MapReadable","","The memory should be readable",468],[13,"MapWritable","","The memory should be writable",468],[13,"MapExecutable","","The memory should be executable",468],[13,"MapAddr","","Create a map for a specific address range. Corresponds to `MAP_FIXED` on\nPOSIX.",468],[13,"MapFd","","Create a memory mapping for a file with a given HANDLE.",468],[13,"MapOffset","","When using `MapFd`, the start of the map is `uint` bytes from the start\nof the file.",468],[13,"MapNonStandardFlags","","On POSIX, this can be used to specify the default flags passed to\n`mmap`. By default it uses `MAP_PRIVATE` and, if not using `MapFd`,\n`MAP_ANON`. This will override both of those. This is platform-specific\n(the exact values used) and ignored on Windows.",468],[4,"MapError","","Possible errors when creating a map."],[13,"ErrFdNotAvail","","# The following are POSIX-specific",469],[13,"ErrInvalidFd","","fd was not valid",469],[13,"ErrUnaligned","","Either the address given by `MapAddr` or offset given by `MapOffset` was\nnot a multiple of `MemoryMap::granularity` (unaligned to page size).",469],[13,"ErrNoMapSupport","","With `MapFd`, the fd does not support mapping.",469],[13,"ErrNoMem","","If using `MapAddr`, the address + `min_len` was outside of the process's\naddress space. If using `MapFd`, the target of the fd didn't have enough\nresources to fulfill the request.",469],[13,"ErrZeroLength","","A zero-length map was requested. This is invalid according to\n[POSIX](http://pubs.opengroup.org/onlinepubs/9699919799/functions/mmap.html).\nNot all platforms obey this, but this wrapper does.",469],[13,"ErrUnknown","","Unrecognized error. The inner value is the unrecognized errno.",469],[13,"ErrUnsupProt","","# The following are Windows-specific",469],[13,"ErrUnsupOffset","","When using `MapFd`, `MapOffset` was given (Windows does not support this\nat all)",469],[13,"ErrAlreadyExists","","When using `MapFd`, there was already a mapping to the file.",469],[13,"ErrVirtualAlloc","","Unrecognized error from `VirtualAlloc`. The inner value is the return\nvalue of GetLastError.",469],[13,"ErrCreateFileMappingW","","Unrecognized error from `CreateFileMapping`. The inner value is the\nreturn value of `GetLastError`.",469],[13,"ErrMapViewOfFile","","Unrecognized error from `MapViewOfFile`. The inner value is the return\nvalue of `GetLastError`.",469],[5,"num_cpus","","Get the number of cores available"],[5,"getcwd","","Returns the current working directory as a `Path`."],[5,"env","","Returns a vector of (variable, value) pairs, for all the environment\nvariables of the current process."],[5,"env_as_bytes","","Returns a vector of (variable, value) byte-vector pairs for all the\nenvironment variables of the current process."],[5,"getenv","","Fetches the environment variable `n` from the current process, returning\nNone if the variable isn't set."],[5,"getenv_as_bytes","","Fetches the environment variable `n` byte vector from the current process,\nreturning None if the variable isn't set."],[5,"setenv","","Sets the environment variable `n` to the value `v` for the currently running\nprocess."],[5,"unsetenv","","Remove a variable from the environment entirely."],[5,"split_paths","","Parses input according to platform conventions for the `PATH`\nenvironment variable."],[5,"join_paths","","Joins a collection of `Path`s appropriately for the `PATH`\nenvironment variable."],[5,"pipe","","Creates a new low-level OS in-memory pipe."],[5,"dll_filename","","Returns the proper dll filename for the given basename of a file\nas a String."],[5,"self_exe_name","","Optionally returns the filesystem path to the current executable which is\nrunning but with the executable name."],[5,"self_exe_path","","Optionally returns the filesystem path to the current executable which is\nrunning."],[5,"homedir","","Optionally returns the path to the current user's home directory if known."],[5,"tmpdir","","Returns the path to a temporary directory."],[5,"make_absolute","","Convert a relative path to an absolute path"],[5,"change_dir","","Changes the current working directory to the specified path, returning\nwhether the change was completed successfully or not."],[5,"errno","","Returns the platform-specific value of errno"],[5,"error_string","","Return the string corresponding to an `errno()` value of `errnum`."],[5,"last_os_error","","Get a string representing the platform-dependent last error"],[5,"set_exit_status","","Sets the process exit code"],[5,"get_exit_status","","Fetches the process's current exit code. This defaults to 0 and can change\nby calling `set_exit_status`."],[5,"args","","Returns the arguments which this program was started with (normally passed\nvia the command line)."],[5,"args_as_bytes","","Returns the arguments which this program was started with (normally passed\nvia the command line) as byte vectors."],[5,"page_size","","Returns the page size of the current architecture in bytes."],[0,"windows","","Experimental extensions to `std` for Windows."],[3,"Wtf8Buf","std::os::windows","An owned, growable string of well-formed WTF-8 data."],[3,"EncodeWide","",""],[0,"prelude","","A prelude for conveniently writing platform-specific code."],[6,"Socket","std::os::windows::prelude","Raw SOCKETs."],[6,"Handle","","Raw HANDLEs."],[8,"AsRawSocket","","Extract raw sockets."],[10,"as_raw_socket","","",470],[8,"AsRawHandle","","Extract raw handles."],[10,"as_raw_handle","","Extract the raw handle, without taking any ownership.",471],[8,"OsStrExt","",""],[10,"encode_wide","","",472],[8,"OsStringExt","",""],[10,"from_wide","","Create an `OsString` from a potentially ill-formed UTF-16 slice of 16-bit code units.",473],[8,"OpenOptionsExt","",""],[10,"desired_access","","Override the `dwDesiredAccess` argument to the call to `CreateFile` with\nthe specified value.",474],[10,"creation_disposition","","Override the `dwCreationDisposition` argument to the call to\n`CreateFile` with the specified value.",474],[10,"flags_and_attributes","","Override the `dwFlagsAndAttributes` argument to the call to\n`CreateFile` with the specified value.",474],[10,"share_mode","","Override the `dwShareMode` argument to the call to `CreateFile` with the\nspecified value.",474],[6,"Handle","std::os::windows","Raw HANDLEs."],[6,"Socket","","Raw SOCKETs."],[8,"AsRawHandle","","Extract raw handles."],[10,"as_raw_handle","","Extract the raw handle, without taking any ownership.",471],[8,"AsRawSocket","","Extract raw sockets."],[10,"as_raw_socket","","",470],[8,"OsStringExt","",""],[10,"from_wide","","Create an `OsString` from a potentially ill-formed UTF-16 slice of 16-bit code units.",473],[8,"OsStrExt","",""],[10,"encode_wide","","",472],[8,"OpenOptionsExt","",""],[10,"desired_access","","Override the `dwDesiredAccess` argument to the call to `CreateFile` with\nthe specified value.",474],[10,"creation_disposition","","Override the `dwCreationDisposition` argument to the call to\n`CreateFile` with the specified value.",474],[10,"flags_and_attributes","","Override the `dwFlagsAndAttributes` argument to the call to\n`CreateFile` with the specified value.",474],[10,"share_mode","","Override the `dwShareMode` argument to the call to `CreateFile` with the\nspecified value.",474],[11,"as_raw_handle","std::old_io::fs","",358],[11,"as_raw_handle","std::fs","",450],[11,"as_raw_handle","std::old_io::pipe","",377],[11,"as_raw_handle","std::old_io::net::pipe","",373],[11,"as_raw_handle","","",374],[11,"as_raw_handle","","",375],[11,"as_raw_socket","std::old_io::net::tcp","",365],[11,"as_raw_socket","","",366],[11,"as_raw_socket","","",367],[11,"as_raw_socket","std::old_io::net::udp","",368],[11,"as_raw_socket","std::net","",461],[11,"as_raw_socket","","",462],[11,"as_raw_socket","","",463],[11,"from_wide","std::ffi","",333],[11,"encode_wide","","",334],[11,"desired_access","std::fs","",448],[11,"creation_disposition","","",448],[11,"flags_and_attributes","","",448],[11,"share_mode","","",448],[0,"consts","std::os",""],[17,"ARCH","std::os::consts",""],[17,"FAMILY","",""],[17,"SYSNAME","","A string describing the specific operating system in use: in this\ncase, `windows`."],[17,"DLL_PREFIX","","Specifies the filename prefix used for shared libraries on this\nplatform: in this case, the empty string."],[17,"DLL_SUFFIX","","Specifies the filename suffix used for shared libraries on this\nplatform: in this case, `.dll`."],[17,"DLL_EXTENSION","","Specifies the file extension used for shared libraries on this\nplatform that goes after the dot: in this case, `dll`."],[17,"EXE_SUFFIX","","Specifies the filename suffix used for executable binaries on this\nplatform: in this case, `.exe`."],[17,"EXE_EXTENSION","","Specifies the file extension, if any, used for executable binaries\non this platform: in this case, `exe`."],[17,"TMPBUF_SZ","std::os",""],[11,"fmt","","",469],[11,"fmt","","",469],[11,"description","","",469],[11,"new","","Create a new mapping with the given `options`, at least `min_len` bytes long.",475],[11,"granularity","","Granularity of MapAddr() and MapOffset() parameter values.\nThis may be greater than the value returned by page_size().",475],[11,"drop","","Unmap the mapping. Panics the task if any of `VirtualFree`,\n`UnmapViewOfFile`, or `CloseHandle` fail.",475],[11,"data","","Returns the pointer to the memory created or modified by this map.",475],[11,"len","","Returns the number of bytes this map applies to.",475],[11,"kind","","Returns the type of mapping this represents.",475],[0,"env","std","Inspection and manipulation of the process's environment."],[3,"Vars","std::env","An iterator over a snapshot of the environment variables of this process."],[3,"VarsOs","","An iterator over a snapshot of the environment variables of this process."],[3,"SplitPaths","","An iterator over `Path` instances for parsing an environment variable\naccording to platform-specific conventions."],[3,"JoinPathsError","","Error type returned from `std::env::join_paths` when paths fail to be\njoined."],[3,"Args","","An iterator over the arguments of a process, yielding an `String` value\nfor each argument."],[3,"ArgsOs","","An iterator over the arguments of a process, yielding an `OsString` value\nfor each argument."],[4,"VarError","","Possible errors from the `env::var` method."],[13,"NotPresent","","The specified environment variable was not present in the current\nprocess's environment.",476],[13,"NotUnicode","","The specified environment variable was found, but it did not contain\nvalid unicode data. The found data is returned as a payload of this\nvariant.",476],[5,"current_dir","","Returns the current working directory as a `Path`."],[5,"set_current_dir","","Changes the current working directory to the specified path, returning\nwhether the change was completed successfully or not."],[5,"vars","","Returns an iterator of (variable, value) pairs of strings, for all the\nenvironment variables of the current process."],[5,"vars_os","","Returns an iterator of (variable, value) pairs of OS strings, for all the\nenvironment variables of the current process."],[5,"var","","Fetches the environment variable `key` from the current process."],[5,"var_os","","Fetches the environment variable `key` from the current process, returning\nNone if the variable isn't set."],[5,"set_var","","Sets the environment variable `k` to the value `v` for the currently running\nprocess."],[5,"remove_var","","Remove a variable from the environment entirely."],[5,"split_paths","","Parses input according to platform conventions for the `PATH`\nenvironment variable."],[5,"join_paths","","Joins a collection of `Path`s appropriately for the `PATH`\nenvironment variable."],[5,"home_dir","","Optionally returns the path to the current user's home directory if known."],[5,"temp_dir","","Returns the path to a temporary directory."],[5,"current_exe","","Optionally returns the filesystem path to the current executable which is\nrunning but with the executable name."],[5,"set_exit_status","","Sets the process exit code"],[5,"get_exit_status","","Fetches the process's current exit code. This defaults to 0 and can change\nby calling `set_exit_status`."],[5,"args","","Returns the arguments which this program was started with (normally passed\nvia the command line)."],[5,"args_os","","Returns the arguments which this program was started with (normally passed\nvia the command line)."],[5,"page_size","","Returns the page size of the current architecture in bytes."],[0,"consts","","Constants associated with the current target"],[17,"ARCH","std::env::consts","A string describing the architecture of the CPU that this is currently\nin use."],[17,"FAMILY","",""],[17,"OS","","A string describing the specific operating system in use: in this\ncase, `linux`."],[17,"DLL_PREFIX","","Specifies the filename prefix used for shared libraries on this\nplatform: in this case, `lib`."],[17,"DLL_SUFFIX","","Specifies the filename suffix used for shared libraries on this\nplatform: in this case, `.so`."],[17,"DLL_EXTENSION","","Specifies the file extension used for shared libraries on this\nplatform that goes after the dot: in this case, `so`."],[17,"EXE_SUFFIX","","Specifies the filename suffix used for executable binaries on this\nplatform: in this case, the empty string."],[17,"EXE_EXTENSION","","Specifies the file extension, if any, used for executable binaries\non this platform: in this case, the empty string."],[6,"Item","std::env",""],[11,"next","","",477],[11,"size_hint","","",477],[6,"Item","",""],[11,"next","","",478],[11,"size_hint","","",478],[11,"clone","","",476],[11,"eq","","",476],[11,"ne","","",476],[11,"fmt","","",476],[11,"fmt","","",476],[11,"description","","",476],[6,"Item","",""],[11,"next","","",479],[11,"size_hint","","",479],[11,"fmt","","",480],[11,"fmt","","",480],[11,"description","","",480],[6,"Item","",""],[11,"next","","",481],[11,"size_hint","","",481],[11,"len","","",481],[6,"Item","",""],[11,"next","","",482],[11,"size_hint","","",482],[11,"len","","",482],[0,"path","std","Cross-platform path manipulation."],[3,"Components","std::path","The core iterator giving the components of a path."],[3,"Iter","","An iterator over the components of a path, as `OsStr` slices."],[3,"PathBuf","","An owned, mutable path (akin to `String`)."],[3,"Path","","A slice of a path (akin to `str`)."],[3,"Display","","Helper struct for safely printing paths with `format!()` and `{}`"],[4,"Prefix","","Path prefixes (Windows only)."],[13,"Verbatim","","Prefix `\\\\?\\`, together with the given component immediately following it.",483],[13,"VerbatimUNC","","Prefix `\\\\?\\UNC\\`, with the \"server\" and \"share\" components following it.",483],[13,"VerbatimDisk","","Prefix like `\\\\?\\C:\\`, for the given drive letter",483],[13,"DeviceNS","","Prefix `\\\\.\\`, together with the given component immediately following it.",483],[13,"UNC","","Prefix `\\\\server\\share`, with the given \"server\" and \"share\" components.",483],[13,"Disk","","Prefix `C:` for the given disk drive.",483],[4,"Component","","A single component of a path."],[13,"Prefix","","A Windows path prefix, e.g. `C:` or `\\server\\share`.",484],[12,"raw","std::path::Component","The prefix as an unparsed `OsStr` slice.",484],[12,"parsed","","The parsed prefix data.",484],[13,"Empty","std::path","An empty component. Only used on Windows for the last component of\nverbatim paths ending with a separator (e.g. the last component of\n`\\\\?\\C:\\windows\\` but not `\\\\?\\C:\\windows` or `C:\\windows`).",484],[13,"RootDir","","The root directory component, appears after any prefix and before anything else",484],[13,"CurDir","","A reference to the current directory, i.e. `.`",484],[13,"ParentDir","","A reference to the parent directory, i.e. `..`",484],[13,"Normal","","A normal component, i.e. `a` and `b` in `a/b`",484],[5,"is_separator","","Determine whether the character is one of the permitted path\nseparators for the current platform."],[17,"MAIN_SEPARATOR","","The primary sperator for the current platform"],[8,"AsPath","","Freely convertible to a `Path`."],[10,"as_path","","Convert to a `Path`.",485],[11,"eq","","",483],[11,"ne","","",483],[11,"cmp","","",483],[11,"partial_cmp","","",483],[11,"lt","","",483],[11,"le","","",483],[11,"gt","","",483],[11,"ge","","",483],[11,"hash","","",483],[11,"fmt","","",483],[11,"clone","","",483],[11,"is_verbatim","","Determine if the prefix is verbatim, i.e. begins `\\\\?\\`.",483],[11,"fmt","","",484],[11,"hash","","",484],[11,"cmp","","",484],[11,"partial_cmp","","",484],[11,"lt","","",484],[11,"le","","",484],[11,"gt","","",484],[11,"ge","","",484],[11,"eq","","",484],[11,"ne","","",484],[11,"clone","","",484],[11,"as_os_str","","Extract the underlying `OsStr` slice",484],[11,"clone","","",486],[11,"clone","","",487],[11,"as_path","","Extract a slice corresponding to the portion of the path remaining for iteration.",486],[11,"peek","","Examine the next component without consuming it.",486],[11,"as_path","","Extract a slice corresponding to the portion of the path remaining for iteration.",487],[6,"Item","",""],[11,"next","","",487],[11,"next_back","","",487],[6,"Item","",""],[11,"next","","",486],[11,"next_back","","",486],[11,"eq","","",486],[11,"partial_cmp","","",486],[11,"cmp","","",486],[11,"hash","","",488],[11,"clone","","",488],[11,"new","","Allocate a `PathBuf` with initial contents given by the\nargument.",488],[11,"push","","Extend `self` with `path`.",488],[11,"pop","","Truncate `self` to `self.parent()`.",488],[11,"set_file_name","","Updates `self.file_name()` to `file_name`.",488],[11,"set_extension","","Updates `self.extension()` to `extension`.",488],[11,"into_os_string","","Consume the `PathBuf`, yielding its internal `OsString` storage",488],[11,"from_iter","","",488],[11,"extend","","",488],[11,"fmt","","",488],[6,"Target","",""],[11,"deref","","",488],[11,"borrow","","",488],[11,"into_cow","","",488],[6,"Owned","",""],[11,"to_owned","","",489],[11,"eq","","",488],[11,"partial_cmp","","",488],[11,"cmp","","",488],[11,"as_os_str","","",488],[11,"hash","","",489],[11,"new","","Directly wrap a string slice as a `Path` slice.",489],[11,"to_str","","Yield a `&str` slice if the `Path` is valid unicode.",489],[11,"to_string_lossy","","Convert a `Path` to a `Cow<str>`.",489],[11,"to_path_buf","","Convert a `Path` to an owned `PathBuf`.",489],[11,"is_absolute","","A path is *absolute* if it is independent of the current directory.",489],[11,"is_relative","","A path is *relative* if it is not absolute.",489],[11,"prefix","","Returns the *prefix* of a path, if any.",489],[11,"has_root","","A path has a root if the body of the path begins with the directory separator.",489],[11,"parent","","The path without its final component.",489],[11,"file_name","","The final component of the path, if it is a normal file.",489],[11,"relative_from","","Returns a path that, when joined onto `base`, yields `self`.",489],[11,"starts_with","","Determines whether `base` is a prefix of `self`.",489],[11,"ends_with","","Determines whether `child` is a suffix of `self`.",489],[11,"file_stem","","Extract the stem (non-extension) portion of `self.file()`.",489],[11,"extension","","Extract the extension of `self.file()`, if possible.",489],[11,"join","","Creates an owned `PathBuf` with `path` adjoined to `self`.",489],[11,"with_file_name","","Creates an owned `PathBuf` like `self` but with the given file name.",489],[11,"with_extension","","Creates an owned `PathBuf` like `self` but with the given extension.",489],[11,"components","","Produce an iterator over the components of the path.",489],[11,"iter","","Produce an iterator over the path's components viewed as `OsStr` slices.",489],[11,"display","","Returns an object that implements `Display` for safely printing paths\nthat may contain non-Unicode data.",489],[11,"as_os_str","","",489],[11,"fmt","","",489],[11,"fmt","","",490],[11,"fmt","","",490],[11,"eq","","",489],[11,"partial_cmp","","",489],[11,"cmp","","",489],[0,"old_path","std","Cross-platform path support"],[3,"Display","std::old_path","Helper struct for printing paths with format!()"],[0,"posix","","POSIX file path handling"],[3,"Path","std::old_path::posix","Represents a POSIX file path"],[3,"ParsePathError","","Valuelue indicating that a path could not be parsed from a string."],[5,"is_sep_byte","","Returns whether the given byte is a path separator"],[5,"is_sep","","Returns whether the given char is a path separator"],[6,"Components","","Iterator that yields successive components of a Path as &[u8]"],[6,"StrComponents","","Iterator that yields successive components of a Path as Option<&str>"],[17,"SEP","","The standard path separator character"],[17,"SEP_BYTE","","The standard path separator byte"],[11,"clone","","",491],[11,"fmt","","",491],[11,"eq","","",491],[11,"partial_cmp","","",491],[11,"cmp","","",491],[6,"Err","",""],[11,"from_str","","",491],[11,"eq","","",492],[11,"ne","","",492],[11,"clone","","",492],[11,"fmt","","",492],[11,"hash","","",491],[11,"container_as_bytes","","",491],[11,"new_unchecked","","",491],[11,"set_filename_unchecked","","",491],[11,"push_unchecked","","",491],[11,"as_vec","","",491],[11,"into_vec","","",491],[11,"dirname","","",491],[11,"filename","","",491],[11,"pop","","",491],[11,"root_path","","",491],[11,"is_absolute","","",491],[11,"is_ancestor_of","","",491],[11,"path_relative_from","","",491],[11,"ends_with_path","","",491],[11,"new","","Returns a new Path from a byte vector or string",491],[11,"new_opt","","Returns a new Path from a byte vector or string, if possible",491],[11,"components","","Returns an iterator that yields each component of the path in turn.\nDoes not distinguish between absolute and relative paths, e.g.\n/a/b/c and a/b/c yield the same set of components.\nA path of \"/\" yields no components. A path of \".\" yields one component.",491],[11,"str_components","","Returns an iterator that yields each component of the path as Option<&str>.\nSee components() for details.",491],[0,"windows","std::old_path","Windows file path handling"],[3,"Path","std::old_path::windows","Represents a Windows path"],[3,"ParsePathError","","Value indicating that a path could not be parsed from a string."],[4,"PathPrefix","","Prefix types for Path"],[13,"VerbatimPrefix","","Prefix `\\\\?\\`, uint is the length of the following component",493],[13,"VerbatimUNCPrefix","","Prefix `\\\\?\\UNC\\`, uints are the lengths of the UNC components",493],[13,"VerbatimDiskPrefix","","Prefix `\\\\?\\C:\\` (for any alphabetic character)",493],[13,"DeviceNSPrefix","","Prefix `\\\\.\\`, uint is the length of the following component",493],[13,"UNCPrefix","","UNC prefix `\\\\server\\share`, uints are the lengths of the server/share",493],[13,"DiskPrefix","","Prefix `C:` for any alphabetic character",493],[5,"is_vol_relative","","Returns whether the path is considered \"volume-relative\", which means a path\nthat looks like \"\\foo\". Paths of this form are relative to the current volume,\nbut absolute within that volume."],[5,"is_cwd_relative","","Returns whether the path is considered \"cwd-relative\", which means a path\nwith a volume prefix that is not absolute. This look like \"C:foo.txt\". Paths\nof this form are relative to the cwd on the given volume."],[5,"prefix","","Returns the PathPrefix for this Path"],[5,"is_verbatim","","Returns whether the Path's prefix is a verbatim prefix, i.e. `\\\\?\\`"],[5,"make_non_verbatim","","Returns the non-verbatim equivalent of the input path, if possible.\nIf the input path is a device namespace path, None is returned.\nIf the input path is not verbatim, it is returned as-is.\nIf the input path is verbatim, but the same path can be expressed as\nnon-verbatim, the non-verbatim version is returned.\nOtherwise, None is returned."],[5,"is_sep","","Returns whether the given char is a path separator.\nAllows both the primary separator '\\' and the alternative separator '/'."],[5,"is_sep_verbatim","","Returns whether the given char is a path separator.\nOnly allows the primary separator '\\'; use is_sep to allow '/'."],[5,"is_sep_byte","","Returns whether the given byte is a path separator.\nAllows both the primary separator '\\' and the alternative separator '/'."],[5,"is_sep_byte_verbatim","","Returns whether the given byte is a path separator.\nOnly allows the primary separator '\\'; use is_sep_byte to allow '/'."],[6,"StrComponents","","Iterator that yields successive components of a Path as &str"],[6,"Components","","Iterator that yields successive components of a Path as &[u8]"],[17,"SEP","","The standard path separator character"],[17,"SEP_BYTE","","The standard path separator byte"],[17,"SEP2","","The alternative path separator character"],[17,"SEP2_BYTE","","The alternative path separator character"],[11,"clone","","",494],[11,"fmt","","",494],[11,"eq","","",494],[11,"partial_cmp","","",494],[11,"cmp","","",494],[6,"Err","",""],[11,"from_str","","",494],[11,"eq","","",495],[11,"ne","","",495],[11,"clone","","",495],[11,"fmt","","",495],[11,"hash","","",494],[11,"container_as_bytes","","",494],[11,"container_as_str","","",494],[11,"is_str","","",494],[11,"new_unchecked","","See `GenericPathUnsafe::from_vec_unchecked`.",494],[11,"set_filename_unchecked","","See `GenericPathUnsafe::set_filename_unchecked`.",494],[11,"push_unchecked","","See `GenericPathUnsafe::push_unchecked`.",494],[11,"new_opt","","",494],[11,"as_str","","See `GenericPath::as_str` for info.\nAlways returns a `Some` value.",494],[11,"as_vec","","",494],[11,"into_vec","","",494],[11,"dirname","","",494],[11,"dirname_str","","See `GenericPath::dirname_str` for info.\nAlways returns a `Some` value.",494],[11,"filename","","",494],[11,"filename_str","","See `GenericPath::filename_str` for info.\nAlways returns a `Some` value if `filename` returns a `Some` value.",494],[11,"filestem_str","","See `GenericPath::filestem_str` for info.\nAlways returns a `Some` value if `filestem` returns a `Some` value.",494],[11,"extension_str","","",494],[11,"dir_path","","",494],[11,"pop","","",494],[11,"root_path","","",494],[11,"is_absolute","","See `GenericPath::is_absolute` for info.",494],[11,"is_relative","","",494],[11,"is_ancestor_of","","",494],[11,"path_relative_from","","",494],[11,"ends_with_path","","",494],[11,"new","","Returns a new `Path` from a `BytesContainer`.",494],[11,"new_opt","","Returns a new `Some(Path)` from a `BytesContainer`.",494],[11,"str_components","","Returns an iterator that yields each component of the path in turn as a Option<&str>.\nEvery component is guaranteed to be Some.\nDoes not yield the path prefix (including server/share components in UNC paths).\nDoes not distinguish between volume-relative and relative paths, e.g.\n\\a\\b\\c and a\\b\\c.\nDoes not distinguish between absolute and cwd-relative paths, e.g.\nC:\\foo and C:foo.",494],[11,"components","","Returns an iterator that yields each component of the path in turn as a &[u8].\nSee str_components() for details.",494],[11,"fmt","","",493],[11,"clone","","",493],[11,"eq","","",493],[11,"ne","","",493],[8,"GenericPath","std::old_path","A trait that represents the generic operations available on paths"],[11,"new","","Creates a new Path from a byte vector or string.\nThe resulting Path will always be normalized.",496],[11,"new_opt","","Creates a new Path from a byte vector or string, if possible.\nThe resulting Path will always be normalized.",496],[11,"as_str","","Returns the path as a string, if possible.\nIf the path is not representable in utf-8, this returns None.",496],[10,"as_vec","","Returns the path as a byte vector",496],[10,"into_vec","","Converts the Path into an owned byte vector",496],[11,"display","","Returns an object that implements `Display` for printing paths",496],[11,"filename_display","","Returns an object that implements `Display` for printing filenames",496],[10,"dirname","","Returns the directory component of `self`, as a byte vector (with no trailing separator).\nIf `self` has no directory component, returns ['.'].",496],[11,"dirname_str","","Returns the directory component of `self`, as a string, if possible.\nSee `dirname` for details.",496],[10,"filename","","Returns the file component of `self`, as a byte vector.\nIf `self` represents the root of the file hierarchy, returns None.\nIf `self` is \".\" or \"..\", returns None.",496],[11,"filename_str","","Returns the file component of `self`, as a string, if possible.\nSee `filename` for details.",496],[11,"filestem","","Returns the stem of the filename of `self`, as a byte vector.\nThe stem is the portion of the filename just before the last '.'.\nIf there is no '.', the entire filename is returned.",496],[11,"filestem_str","","Returns the stem of the filename of `self`, as a string, if possible.\nSee `filestem` for details.",496],[11,"extension","","Returns the extension of the filename of `self`, as an optional byte vector.\nThe extension is the portion of the filename just after the last '.'.\nIf there is no extension, None is returned.\nIf the filename ends in '.', the empty vector is returned.",496],[11,"extension_str","","Returns the extension of the filename of `self`, as a string, if possible.\nSee `extension` for details.",496],[11,"set_filename","","Replaces the filename portion of the path with the given byte vector or string.\nIf the replacement name is [], this is equivalent to popping the path.",496],[11,"set_extension","","Replaces the extension with the given byte vector or string.\nIf there is no extension in `self`, this adds one.\nIf the argument is [] or \"\", this removes the extension.\nIf `self` has no filename, this is a no-op.",496],[11,"with_filename","","Returns a new Path constructed by replacing the filename with the given\nbyte vector or string.\nSee `set_filename` for details.",496],[11,"with_extension","","Returns a new Path constructed by setting the extension to the given\nbyte vector or string.\nSee `set_extension` for details.",496],[11,"dir_path","","Returns the directory component of `self`, as a Path.\nIf `self` represents the root of the filesystem hierarchy, returns `self`.",496],[10,"root_path","","Returns a Path that represents the filesystem root that `self` is rooted in.",496],[11,"push","","Pushes a path (as a byte vector or string) onto `self`.\nIf the argument represents an absolute path, it replaces `self`.",496],[11,"push_many","","Pushes multiple paths (as byte vectors or strings) onto `self`.\nSee `push` for details.",496],[10,"pop","","Removes the last path component from the receiver.\nReturns `true` if the receiver was modified, or `false` if it already\nrepresented the root of the file hierarchy.",496],[11,"join","","Returns a new Path constructed by joining `self` with the given path\n(as a byte vector or string).\nIf the given path is absolute, the new Path will represent just that.",496],[11,"join_many","","Returns a new Path constructed by joining `self` with the given paths\n(as byte vectors or strings).\nSee `join` for details.",496],[10,"is_absolute","","Returns whether `self` represents an absolute path.\nAn absolute path is defined as one that, when joined to another path, will\nyield back the same absolute path.",496],[11,"is_relative","","Returns whether `self` represents a relative path.\nTypically this is the inverse of `is_absolute`.\nBut for Windows paths, it also means the path is not volume-relative or\nrelative to the current working directory.",496],[10,"is_ancestor_of","","Returns whether `self` is equal to, or is an ancestor of, the given path.\nIf both paths are relative, they are compared as though they are relative\nto the same parent path.",496],[10,"path_relative_from","","Returns the Path that, were it joined to `base`, would yield `self`.\nIf no such path exists, None is returned.\nIf `self` is absolute and `base` is relative, or on Windows if both\npaths refer to separate drives, an absolute path is returned.",496],[10,"ends_with_path","","Returns whether the relative path `child` is a suffix of `self`.",496],[8,"BytesContainer","","A trait that represents something bytes-like (e.g. a &[u8] or a &str)"],[10,"container_as_bytes","","Returns a &[u8] representing the receiver",497],[11,"container_as_str","","Returns the receiver interpreted as a utf-8 string, if possible",497],[11,"is_str","","Returns whether .container_as_str() is guaranteed to not fail",497],[8,"GenericPathUnsafe","","A trait that represents the unsafe operations on GenericPaths"],[10,"new_unchecked","","Creates a new Path without checking for null bytes.\nThe resulting Path will always be normalized.",498],[10,"set_filename_unchecked","","Replaces the filename portion of the path without checking for null\nbytes.\nSee `set_filename` for details.",498],[10,"push_unchecked","","Pushes a path onto `self` without checking for null bytes.\nSee `push` for details.",498],[11,"fmt","","",499],[11,"fmt","","",499],[11,"as_cow","","Returns the path as a possibly-owned string.",499],[11,"container_as_bytes","std::string","",248],[11,"container_as_str","","",248],[11,"is_str","","",248],[11,"container_as_bytes","std::vec","",239],[11,"container_as_bytes","std::ffi","",330],[0,"process","std","Working with processes."],[3,"Child","std::process","Representation of a running or exited child process."],[12,"stdin","","The handle for writing to the child's stdin, if it has been captured",500],[12,"stdout","","The handle for reading from the child's stdout, if it has been captured",500],[12,"stderr","","The handle for reading from the child's stderr, if it has been captured",500],[3,"ChildStdin","","A handle to a child procesess's stdin"],[3,"ChildStdout","","A handle to a child procesess's stdout"],[3,"ChildStderr","","A handle to a child procesess's stderr"],[3,"Command","","The `Command` type acts as a process builder, providing fine-grained control\nover how a new process should be spawned. A default configuration can be\ngenerated using `Command::new(program)`, where `program` gives a path to the\nprogram to be executed. Additional builder methods allow the configuration\nto be changed (for example, by adding arguments) prior to spawning:"],[3,"Output","","The output of a finished process."],[12,"status","","The status (exit code) of the process.",501],[12,"stdout","","The data that the process wrote to stdout.",501],[12,"stderr","","The data that the process wrote to stderr.",501],[3,"Stdio","","Describes what to do with a standard io stream for a child process."],[3,"ExitStatus","","Describes the result of a process after it has terminated."],[11,"write","","",502],[11,"flush","","",502],[11,"read","","",503],[11,"read","","",504],[11,"new","","Constructs a new `Command` for launching the program at\npath `program`, with the following default configuration:",505],[11,"arg","","Add an argument to pass to the program.",505],[11,"args","","Add multiple arguments to pass to the program.",505],[11,"env","","Inserts or updates an environment variable mapping.",505],[11,"env_remove","","Removes an environment variable mapping.",505],[11,"env_clear","","Clears the entire environment map for the child process.",505],[11,"current_dir","","Set the working directory for the child process.",505],[11,"stdin","","Configuration for the child process's stdin handle (file descriptor 0).\nDefaults to `CreatePipe(true, false)` so the input can be written to.",505],[11,"stdout","","Configuration for the child process's stdout handle (file descriptor 1).\nDefaults to `CreatePipe(false, true)` so the output can be collected.",505],[11,"stderr","","Configuration for the child process's stderr handle (file descriptor 2).\nDefaults to `CreatePipe(false, true)` so the output can be collected.",505],[11,"spawn","","Executes the command as a child process, returning a handle to it.",505],[11,"output","","Executes the command as a child process, waiting for it to finish and\ncollecting all of its output.",505],[11,"status","","Executes a command as a child process, waiting for it to finish and\ncollecting its exit status.",505],[11,"fmt","","Format the program and arguments of a Command for display. Any\nnon-utf8 data is lossily converted using the utf8 replacement\ncharacter.",505],[11,"clone","","",501],[11,"eq","","",501],[11,"ne","","",501],[11,"capture","","A new pipe should be arranged to connect the parent and child processes.",506],[11,"piped","","A new pipe should be arranged to connect the parent and child processes.",506],[11,"inherit","","The child inherits from the corresponding parent descriptor.",506],[11,"null","","This stream will be ignored. This is the equivalent of attaching the\nstream to `/dev/null`",506],[11,"fmt","","",507],[11,"clone","","",507],[11,"eq","","",507],[11,"ne","","",507],[11,"success","","Was termination successful? Signal termination not considered a success,\nand success is defined as a zero exit status.",507],[11,"code","","Return the exit code of the process, if any.",507],[11,"fmt","","",507],[11,"kill","","Forces the child to exit. This is equivalent to sending a\nSIGKILL on unix platforms.",500],[11,"wait","","Wait for the child to exit completely, returning the status that it\nexited with. This function will continue to have the same return value\nafter it has been called at least once.",500],[11,"wait_with_output","","Simultaneously wait for the child to exit and collect all remaining\noutput on the stdout/stderr handles, returning a `Output`\ninstance.",500],[0,"rand","std","Utilities for random number generation"],[8,"Rand","std::rand","A type that can be randomly generated using an `Rng`."],[10,"rand","","Generates a random instance of this type using the specified source of\nrandomness.",508],[8,"Rng","","A random number generator."],[10,"next_u32","","Return the next random u32.",509],[10,"next_u64","","Return the next random u64.",509],[10,"next_f32","","Return the next random f32 selected from the half-open\ninterval `[0, 1)`.",509],[10,"next_f64","","Return the next random f64 selected from the half-open\ninterval `[0, 1)`.",509],[10,"fill_bytes","","Fill `dest` with random data.",509],[10,"gen","","Return a random value of a `Rand` type.",509],[10,"gen_iter","","Return an iterator that will yield an infinite number of randomly\ngenerated items.",509],[10,"gen_range","","Generate a random value in the range [`low`, `high`).",509],[10,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",509],[10,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",509],[10,"choose","","Return a random element from `values`.",509],[10,"shuffle","","Shuffle a mutable slice in place.",509],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce\nthe same stream of randomness multiple times."],[10,"reseed","","Reseed an RNG with the given seed.",510],[10,"from_seed","","Create a new RNG with the given seed.",510],[11,"new","rand::distributions::range","Create a new `Range` instance that samples uniformly from\n`[low, high)`. Panics if `low >= high`.",511],[11,"sample","","",511],[11,"ind_sample","","",511],[11,"new","rand::distributions::gamma","Construct an object representing the `Gamma(shape, scale)`\ndistribution.",512],[11,"sample","","",512],[11,"sample","","",513],[11,"sample","","",514],[11,"ind_sample","","",512],[11,"ind_sample","","",513],[11,"ind_sample","","",514],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom\n`k`. Panics if `k < 0`.",515],[11,"sample","","",515],[11,"ind_sample","","",515],[11,"new","","Create a new `FisherF` distribution, with the given\nparameter. Panics if either `m` or `n` are not positive.",516],[11,"sample","","",516],[11,"ind_sample","","",516],[11,"new","","Create a new Student t distribution with `n` degrees of\nfreedom. Panics if `n <= 0`.",517],[11,"sample","","",517],[11,"ind_sample","","",517],[11,"rand","rand::distributions::normal","",518],[11,"new","","Construct a new `Normal` distribution with the given mean and\nstandard deviation.",519],[11,"sample","","",519],[11,"ind_sample","","",519],[11,"new","","Construct a new `LogNormal` distribution with the given mean\nand standard deviation.",520],[11,"sample","","",520],[11,"ind_sample","","",520],[11,"rand","rand::distributions::exponential","",521],[11,"new","","Construct a new `Exp` with the given shape parameter\n`lambda`. Panics if `lambda <= 0`.",522],[11,"sample","","",522],[11,"ind_sample","","",522],[11,"new","rand::distributions","",523],[11,"sample","","",523],[11,"ind_sample","","",523],[11,"new","","Create a new `WeightedChoice`.",524],[11,"sample","","",524],[11,"ind_sample","","",524],[11,"new_unseeded","rand::isaac","Create an ISAAC random number generator using the default\nfixed seed.",525],[11,"clone","","",525],[11,"next_u32","","",525],[11,"reseed","","",525],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",525],[11,"rand","","",525],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the\ndefault fixed seed.",526],[11,"clone","","",526],[11,"next_u32","","",526],[11,"next_u64","","",526],[11,"reseed","","",526],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",526],[11,"rand","","",526],[11,"clone","rand::chacha","",527],[11,"new_unseeded","","Create an ChaCha random number generator using the default\nfixed key of 8 zero words.",527],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to\na user-provided value. This permits jumping\narbitrarily ahead (or backwards) in the pseudorandom stream.",527],[11,"next_u32","","",527],[11,"reseed","","",527],[11,"from_seed","","Create a ChaCha generator from a seed,\nobtained from a variable-length u32 array.\nOnly up to 8 words are used; if less than 8\nwords are used, the remaining are set to zero.",527],[11,"rand","","",527],[11,"new","rand::reseeding","Create a new `ReseedingRng` with the given parameters.",528],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been\ngenerated exceed the threshold.",528],[11,"next_u32","","",528],[11,"next_u64","","",528],[11,"fill_bytes","","",528],[11,"reseed","","",528],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and\nseed. This uses a default value for `generation_threshold`.",528],[11,"reseed","","",529],[11,"default","","",529],[11,"rand","rand","",530],[11,"rand","","",531],[11,"rand","","",530],[11,"rand","","",531],[11,"rand","std::option","",63],[6,"Item","std::rand",""],[11,"next","rand","",532],[6,"Item","std::rand",""],[11,"next","rand","",533],[11,"clone","","",534],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",534],[11,"next_u32","","",534],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",534],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",534],[11,"rand","","",534],[3,"Open01","std::rand","A wrapper for generating floating point numbers uniformly in the\nopen interval `(0,1)` (not including either endpoint)."],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the\nclosed interval `[0,1]` (including both endpoints)."],[3,"XorShiftRng","","An Xorshift[1] random number\ngenerator."],[3,"IsaacRng","","A random number generator that uses the ISAAC algorithm[1]."],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit\nvariant of the ISAAC algorithm."],[3,"ChaChaRng","","A random number generator that uses the ChaCha20 algorithm [1]."],[0,"distributions","","Sampling from random distributions."],[0,"range","std::rand::distributions","Generating numbers between two others."],[3,"Range","std::rand::distributions::range","Sample values uniformly between two bounds."],[8,"SampleRange","","The helper trait for types that have a sensible way to sample\nuniformly between two values. This should not be used directly,\nand is only to facilitate `Range`."],[10,"construct_range","","Construct the `Range` object that `sample_range`\nrequires. This should not ever be called directly, only via\n`Range::new`, which will check that `low < high`, so this\nfunction doesn't have to repeat the check.",535],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as\na source of randomness.",535],[0,"gamma","std::rand::distributions","The Gamma and derived distributions."],[3,"Gamma","std::rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution."],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of\nfreedom."],[3,"FisherF","","The Fisher F distribution `F(m, n)`."],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of\nfreedom."],[0,"normal","std::rand::distributions","The normal and derived distributions."],[3,"StandardNormal","std::rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers\n(a.k.a.  a standard normal, or Gaussian)."],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`."],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`."],[0,"exponential","std::rand::distributions","The exponential distribution."],[3,"Exp1","std::rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers."],[3,"Exp","","The exponential distribution `Exp(lambda)`."],[8,"Sample","std::rand::distributions","Types that can be used to create a random instance of `Support`."],[10,"sample","","Generate a random value of `Support`, using `rng` as the\nsource of randomness.",536],[8,"IndependentSample","","`Sample`s that do not require keeping track of state."],[10,"ind_sample","","Generate a random value.",537],[3,"RandSample","","A wrapper for generating types that implement `Rand` via the\n`Sample` & `IndependentSample` traits."],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`."],[12,"weight","","The numerical weight of this item",538],[12,"item","","The actual item which is being weighted",538],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items."],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`."],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of\nfreedom."],[3,"FisherF","","The Fisher F distribution `F(m, n)`."],[3,"Gamma","","The Gamma distribution `Gamma(shape, scale)` distribution."],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`."],[3,"Range","","Sample values uniformly between two bounds."],[3,"Exp","","The exponential distribution `Exp(lambda)`."],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of\nfreedom."],[0,"reseeding","std::rand","A wrapper around another RNG that reseeds it after it\ngenerates a certain number of random bytes."],[3,"ReseedingRng","std::rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it\nhas generated a certain number of random bytes."],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",528],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`."],[10,"reseed","","Reseed the given RNG.",539],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by\nreplacing the RNG with the result of a `Default::default` call."],[3,"OsRng","std::rand","A random number generator that retrieves randomness straight from\nthe operating system. Platform sources:"],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current\nplatform."],[3,"ThreadRng","","The thread-local RNG."],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed."],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number\ngenerator, seeded by the system. Intended to be used in method\nchaining style, e.g. `thread_rng().gen::<int>()`."],[5,"random","","Generates a random value using the thread-local random number generator."],[5,"sample","","Randomly sample up to `amount` elements from an iterator."],[0,"os","","Interfaces to the operating system provided random number\ngenerators."],[11,"new","","Create a new `OsRng`.",540],[11,"next_u32","","",540],[11,"next_u64","","",540],[11,"fill_bytes","","",540],[11,"drop","","",540],[0,"reader","","A wrapper around any Reader to treat it as an RNG."],[3,"ReaderRng","std::rand::reader","An RNG that reads random bytes straight from a `Reader`. This will\nwork best with an infinite reader, but this is not required."],[11,"new","","Create a new `ReaderRng` from a `Reader`.",541],[11,"next_u32","","",541],[11,"next_u64","","",541],[11,"fill_bytes","","",541],[11,"clone","std::rand","",542],[11,"new","","Create a randomly seeded instance of `StdRng`.",542],[11,"next_u32","","",542],[11,"next_u64","","",542],[11,"reseed","","",542],[11,"from_seed","","",542],[11,"clone","","",543],[11,"next_u32","","",543],[11,"next_u64","","",543],[11,"fill_bytes","","",543],[0,"time","std","Temporal quantification."],[0,"duration","std::time","Temporal quantification"],[3,"Duration","std::time::duration","ISO 8601 time duration with nanosecond precision.\nThis also allows for the negative duration; see individual methods for details."],[17,"MIN","","The minimum possible `Duration`: `i64::MIN` milliseconds."],[17,"MAX","","The maximum possible `Duration`: `i64::MAX` milliseconds."],[11,"fmt","","",544],[11,"cmp","","",544],[11,"partial_cmp","","",544],[11,"lt","","",544],[11,"le","","",544],[11,"gt","","",544],[11,"ge","","",544],[11,"eq","","",544],[11,"ne","","",544],[11,"clone","","",544],[11,"weeks","","Makes a new `Duration` with given number of weeks.\nEquivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",544],[11,"days","","Makes a new `Duration` with given number of days.\nEquivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",544],[11,"hours","","Makes a new `Duration` with given number of hours.\nEquivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",544],[11,"minutes","","Makes a new `Duration` with given number of minutes.\nEquivalent to `Duration::seconds(minutes * 60)` with overflow checks.\nPanics when the duration is out of bounds.",544],[11,"seconds","","Makes a new `Duration` with given number of seconds.\nPanics when the duration is more than `i64::MAX` milliseconds\nor less than `i64::MIN` milliseconds.",544],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",544],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",544],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",544],[11,"span","","Runs a closure, returning the duration of time it took to run the\nclosure.",544],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",544],[11,"num_days","","Returns the total number of whole days in the duration.",544],[11,"num_hours","","Returns the total number of whole hours in the duration.",544],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",544],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",544],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",544],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration,\nor `None` on overflow (exceeding 2^63 microseconds in either direction).",544],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration,\nor `None` on overflow (exceeding 2^63 nanoseconds in either direction).",544],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",544],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",544],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",544],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",544],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",544],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",544],[6,"Output","",""],[11,"neg","","",544],[6,"Output","",""],[11,"add","","",544],[6,"Output","",""],[11,"sub","","",544],[6,"Output","",""],[11,"mul","","",544],[6,"Output","",""],[11,"div","","",544],[11,"fmt","","",544],[0,"collections","std","Collection types."],[4,"Bound","std::collections","An endpoint of a range of keys."],[13,"Included","","An inclusive bound.",545],[13,"Excluded","","An exclusive bound.",545],[13,"Unbounded","","An infinite endpoint. Indicates that there is no bound in this direction.",545],[3,"BinaryHeap","","A priority queue implemented with a binary heap."],[3,"BitVec","","The bitvector type."],[3,"BitSet","","An implementation of a set using a bit vector as an underlying\nrepresentation for holding unsigned numerical elements."],[3,"BTreeMap","","A map based on a B-Tree."],[3,"BTreeSet","","A set based on a B-Tree."],[3,"LinkedList","","A doubly-linked list."],[3,"VecDeque","","`VecDeque` is a growable ring buffer, which can be used as a\ndouble-ended queue efficiently."],[3,"VecMap","","A map optimized for small integer keys."],[0,"binary_heap","","A priority queue implemented with a binary heap."],[3,"BinaryHeap","std::collections::binary_heap","A priority queue implemented with a binary heap."],[3,"Iter","","`BinaryHeap` iterator."],[3,"IntoIter","","An iterator that moves out of a `BinaryHeap`."],[3,"Drain","","An iterator that drains a `BinaryHeap`."],[0,"bit_vec","std::collections",""],[3,"BitVec","std::collections::bit_vec","The bitvector type."],[3,"BitVec","","The bitvector type."],[3,"Iter","","An iterator for `BitVec`."],[0,"bit_set","std::collections",""],[3,"SymmetricDifference","std::collections::bit_set",""],[3,"Intersection","",""],[3,"Difference","",""],[3,"BitSet","","An implementation of a set using a bit vector as an underlying\nrepresentation for holding unsigned numerical elements."],[3,"Union","",""],[3,"BitSet","","An implementation of a set using a bit vector as an underlying\nrepresentation for holding unsigned numerical elements."],[3,"SetIter","","An iterator for `BitSet`."],[0,"btree_map","std::collections",""],[3,"Iter","std::collections::btree_map","An iterator over a BTreeMap's entries."],[3,"RangeMut","","A mutable iterator over a sub-range of BTreeMap's entries."],[3,"IntoIter","","An owning iterator over a BTreeMap's entries."],[3,"Keys","","An iterator over a BTreeMap's keys."],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied."],[13,"Vacant","","A vacant Entry",220],[13,"Occupied","","An occupied Entry",220],[3,"Values","","An iterator over a BTreeMap's values."],[3,"BTreeMap","","A map based on a B-Tree."],[3,"IterMut","","A mutable iterator over a BTreeMap's entries."],[3,"OccupiedEntry","","An occupied Entry."],[3,"VacantEntry","","A vacant Entry."],[3,"Range","","An iterator over a sub-range of BTreeMap's entries."],[0,"btree_set","std::collections",""],[3,"Union","std::collections::btree_set","A lazy iterator producing elements in the set union (in-order)."],[3,"Range","","An iterator over a sub-range of BTreeSet's items."],[3,"SymmetricDifference","","A lazy iterator producing elements in the set symmetric difference (in-order)."],[3,"BTreeSet","","A set based on a B-Tree."],[3,"Intersection","","A lazy iterator producing elements in the set intersection (in-order)."],[3,"Iter","","An iterator over a BTreeSet's items."],[3,"IntoIter","","An owning iterator over a BTreeSet's items."],[3,"Difference","","A lazy iterator producing elements in the set difference (in-order)."],[0,"linked_list","std::collections","A doubly-linked list with owned nodes."],[3,"LinkedList","std::collections::linked_list","A doubly-linked list."],[3,"Iter","","An iterator over references to the items of a `LinkedList`."],[3,"IterMut","","An iterator over mutable references to the items of a `LinkedList`."],[3,"IntoIter","","An iterator over mutable references to the items of a `LinkedList`."],[3,"LinkedList","","A doubly-linked list."],[0,"vec_deque","std::collections","VecDeque is a double-ended queue, which is implemented with the help of a\ngrowing ring buffer."],[3,"VecDeque","std::collections::vec_deque","`VecDeque` is a growable ring buffer, which can be used as a\ndouble-ended queue efficiently."],[3,"Iter","","`VecDeque` iterator."],[3,"IterMut","","`VecDeque` mutable iterator."],[3,"IntoIter","","A by-value VecDeque iterator"],[3,"Drain","","A draining VecDeque iterator"],[3,"VecDeque","","`VecDeque` is a growable ring buffer, which can be used as a\ndouble-ended queue efficiently."],[0,"vec_map","std::collections","A simple map based on a vector for small integer keys. Space requirements\nare O(highest integer key)."],[3,"VecMap","std::collections::vec_map","A map optimized for small integer keys."],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied."],[13,"Vacant","","A vacant Entry",263],[13,"Occupied","","An occupied Entry",263],[3,"VacantEntry","","A vacant Entry."],[3,"OccupiedEntry","","An occupied Entry."],[3,"Iter","","An iterator over the key-value pairs of a map."],[3,"IterMut","","An iterator over the key-value pairs of a map, with the\nvalues being mutable."],[3,"Keys","","An iterator over the keys of a map."],[3,"Values","","An iterator over the values of a map."],[3,"IntoIter","","A consuming iterator over the key-value pairs of a map."],[3,"Drain","",""],[3,"HashMap","std::collections","A hash map implementation which uses linear probing with Robin\nHood bucket stealing."],[3,"HashSet","","An implementation of a hash set using the underlying representation of a\nHashMap where the value is (). As with the `HashMap` type, a `HashSet`\nrequires that the elements implement the `Eq` and `Hash` traits."],[11,"clone","","",546],[11,"new","","Create an empty HashMap.",546],[11,"with_capacity","","Creates an empty hash map with the given initial capacity.",546],[11,"with_hash_state","","Creates an empty hashmap which will use the given hasher to hash keys.",546],[11,"with_capacity_and_hash_state","","Create an empty HashMap with space for at least `capacity`\nelements, using `hasher` to hash the keys.",546],[11,"capacity","","Returns the number of elements the map can hold without reallocating.",546],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the `HashMap`. The collection may reserve more space to avoid\nfrequent reallocations.",546],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.",546],[11,"keys","","An iterator visiting all keys in arbitrary order.\nIterator element type is `&'a K`.",546],[11,"values","","An iterator visiting all values in arbitrary order.\nIterator element type is `&'a V`.",546],[11,"iter","","An iterator visiting all key-value pairs in arbitrary order.\nIterator element type is `(&'a K, &'a V)`.",546],[11,"iter_mut","","An iterator visiting all key-value pairs in arbitrary order,\nwith mutable references to the values.\nIterator element type is `(&'a K, &'a mut V)`.",546],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each key-value\npair out of the map in arbitrary order. The map cannot be used after\ncalling this.",546],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",546],[11,"len","","Returns the number of elements in the map.",546],[11,"is_empty","","Returns true if the map contains no elements.",546],[11,"drain","","Clears the map, returning all key-value pairs as an iterator. Keeps the\nallocated memory for reuse.",546],[11,"clear","","Clears the map, removing all key-value pairs. Keeps the allocated memory\nfor reuse.",546],[11,"get","","Returns a reference to the value corresponding to the key.",546],[11,"contains_key","","Returns true if the map contains a value for the specified key.",546],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",546],[11,"insert","","Inserts a key-value pair from the map. If the key already had a value\npresent in the map, that value is returned. Otherwise, `None` is returned.",546],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",546],[11,"eq","","",546],[11,"fmt","","",546],[11,"default","","",546],[11,"index","","",546],[11,"index_mut","","",546],[11,"into_iter","","",546],[11,"from_iter","","",546],[11,"extend","","",546],[11,"clone","","",547],[11,"new","","Create an empty HashSet.",547],[11,"with_capacity","","Create an empty HashSet with space for at least `n` elements in\nthe hash table.",547],[11,"with_hash_state","","Creates a new empty hash set which will use the given hasher to hash\nkeys.",547],[11,"with_capacity_and_hash_state","","Create an empty HashSet with space for at least `capacity`\nelements in the hash table, using `hasher` to hash the keys.",547],[11,"capacity","","Returns the number of elements the set can hold without reallocating.",547],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the `HashSet`. The collection may reserve more space to avoid\nfrequent reallocations.",547],[11,"shrink_to_fit","","Shrinks the capacity of the set as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.",547],[11,"iter","","An iterator visiting all elements in arbitrary order.\nIterator element type is &'a T.",547],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out\nof the set in arbitrary order. The set cannot be used after calling\nthis.",547],[11,"difference","","Visit the values representing the difference.",547],[11,"symmetric_difference","","Visit the values representing the symmetric difference.",547],[11,"intersection","","Visit the values representing the intersection.",547],[11,"union","","Visit the values representing the union.",547],[11,"len","","Return the number of elements in the set",547],[11,"is_empty","","Returns true if the set contains no elements",547],[11,"drain","","Clears the set, returning all elements in an iterator.",547],[11,"clear","","Clears the set, removing all values.",547],[11,"contains","","Returns `true` if the set contains a value.",547],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",547],[11,"is_subset","","Returns `true` if the set is a subset of another.",547],[11,"is_superset","","Returns `true` if the set is a superset of another.",547],[11,"insert","","Adds a value to the set. Returns `true` if the value was not already\npresent in the set.",547],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",547],[11,"eq","","",547],[11,"fmt","","",547],[11,"from_iter","","",547],[11,"extend","","",547],[11,"default","","",547],[11,"into_iter","","",547],[0,"hash_map","","A hashmap"],[3,"HashMap","std::collections::hash_map","A hash map implementation which uses linear probing with Robin\nHood bucket stealing."],[3,"Iter","","HashMap iterator."],[3,"IterMut","","HashMap mutable values iterator."],[3,"IntoIter","","HashMap move iterator."],[3,"Keys","","HashMap keys iterator."],[3,"Values","","HashMap values iterator."],[3,"Drain","","HashMap drain iterator."],[3,"OccupiedEntry","","A view into a single occupied location in a HashMap."],[3,"VacantEntry","","A view into a single empty location in a HashMap."],[3,"RandomState","","`RandomState` is the default state for `HashMap` types."],[4,"Entry","","A view into a single location in a map, which may be vacant or occupied."],[13,"Occupied","","An occupied Entry.",548],[13,"Vacant","","A vacant Entry.",548],[17,"INITIAL_CAPACITY","",""],[11,"clone","std::collections","",546],[11,"new","","Create an empty HashMap.",546],[11,"with_capacity","","Creates an empty hash map with the given initial capacity.",546],[11,"with_hash_state","","Creates an empty hashmap which will use the given hasher to hash keys.",546],[11,"with_capacity_and_hash_state","","Create an empty HashMap with space for at least `capacity`\nelements, using `hasher` to hash the keys.",546],[11,"capacity","","Returns the number of elements the map can hold without reallocating.",546],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the `HashMap`. The collection may reserve more space to avoid\nfrequent reallocations.",546],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.",546],[11,"keys","","An iterator visiting all keys in arbitrary order.\nIterator element type is `&'a K`.",546],[11,"values","","An iterator visiting all values in arbitrary order.\nIterator element type is `&'a V`.",546],[11,"iter","","An iterator visiting all key-value pairs in arbitrary order.\nIterator element type is `(&'a K, &'a V)`.",546],[11,"iter_mut","","An iterator visiting all key-value pairs in arbitrary order,\nwith mutable references to the values.\nIterator element type is `(&'a K, &'a mut V)`.",546],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each key-value\npair out of the map in arbitrary order. The map cannot be used after\ncalling this.",546],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",546],[11,"len","","Returns the number of elements in the map.",546],[11,"is_empty","","Returns true if the map contains no elements.",546],[11,"drain","","Clears the map, returning all key-value pairs as an iterator. Keeps the\nallocated memory for reuse.",546],[11,"clear","","Clears the map, removing all key-value pairs. Keeps the allocated memory\nfor reuse.",546],[11,"get","","Returns a reference to the value corresponding to the key.",546],[11,"contains_key","","Returns true if the map contains a value for the specified key.",546],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",546],[11,"insert","","Inserts a key-value pair from the map. If the key already had a value\npresent in the map, that value is returned. Otherwise, `None` is returned.",546],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",546],[11,"eq","","",546],[11,"fmt","","",546],[11,"default","","",546],[6,"Output","std::collections::hash_map",""],[11,"index","std::collections","",546],[11,"index_mut","","",546],[11,"clone","std::collections::hash_map","",549],[11,"clone","","",550],[11,"clone","","",551],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[11,"into_iter","std::collections","",546],[6,"Item","std::collections::hash_map",""],[11,"next","","",549],[11,"size_hint","","",549],[11,"len","","",549],[6,"Item","",""],[11,"next","","",552],[11,"size_hint","","",552],[11,"len","","",552],[6,"Item","",""],[11,"next","","",553],[11,"size_hint","","",553],[11,"len","","",553],[6,"Item","",""],[11,"next","","",550],[11,"size_hint","","",550],[11,"len","","",550],[6,"Item","",""],[11,"next","","",551],[11,"size_hint","","",551],[11,"len","","",551],[6,"Item","",""],[11,"next","","",554],[11,"size_hint","","",554],[11,"len","","",554],[11,"get","","Returns a mutable reference to the entry if occupied, or the VacantEntry if vacant.",548],[11,"get","","Gets a reference to the value in the entry.",555],[11,"get_mut","","Gets a mutable reference to the value in the entry.",555],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to the value in the entry\nwith a lifetime bound to the map itself",555],[11,"insert","","Sets the value of the entry, and returns the entry's old value",555],[11,"remove","","Takes the value out of the entry, and returns it",555],[11,"insert","","Sets the value of the entry with the VacantEntry's key,\nand returns a mutable reference to it",556],[11,"from_iter","std::collections","",546],[11,"extend","","",546],[11,"clone","std::collections::hash_map","",557],[11,"new","","Construct a new `RandomState` that is initialized with random keys.",557],[6,"Hasher","",""],[11,"hasher","","",557],[11,"default","","",557],[0,"hash_set","std::collections","A hashset"],[3,"HashSet","std::collections::hash_set","An implementation of a hash set using the underlying representation of a\nHashMap where the value is (). As with the `HashMap` type, a `HashSet`\nrequires that the elements implement the `Eq` and `Hash` traits."],[3,"Iter","","HashSet iterator"],[3,"IntoIter","","HashSet move iterator"],[3,"Drain","","HashSet drain iterator"],[3,"Intersection","","Intersection iterator"],[3,"Difference","","Difference iterator"],[3,"SymmetricDifference","","Symmetric difference iterator."],[3,"Union","","Set union iterator."],[11,"clone","std::collections","",547],[11,"new","","Create an empty HashSet.",547],[11,"with_capacity","","Create an empty HashSet with space for at least `n` elements in\nthe hash table.",547],[11,"with_hash_state","","Creates a new empty hash set which will use the given hasher to hash\nkeys.",547],[11,"with_capacity_and_hash_state","","Create an empty HashSet with space for at least `capacity`\nelements in the hash table, using `hasher` to hash the keys.",547],[11,"capacity","","Returns the number of elements the set can hold without reallocating.",547],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the `HashSet`. The collection may reserve more space to avoid\nfrequent reallocations.",547],[11,"shrink_to_fit","","Shrinks the capacity of the set as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.",547],[11,"iter","","An iterator visiting all elements in arbitrary order.\nIterator element type is &'a T.",547],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out\nof the set in arbitrary order. The set cannot be used after calling\nthis.",547],[11,"difference","","Visit the values representing the difference.",547],[11,"symmetric_difference","","Visit the values representing the symmetric difference.",547],[11,"intersection","","Visit the values representing the intersection.",547],[11,"union","","Visit the values representing the union.",547],[11,"len","","Return the number of elements in the set",547],[11,"is_empty","","Returns true if the set contains no elements",547],[11,"drain","","Clears the set, returning all elements in an iterator.",547],[11,"clear","","Clears the set, removing all values.",547],[11,"contains","","Returns `true` if the set contains a value.",547],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",547],[11,"is_subset","","Returns `true` if the set is a subset of another.",547],[11,"is_superset","","Returns `true` if the set is a superset of another.",547],[11,"insert","","Adds a value to the set. Returns `true` if the value was not already\npresent in the set.",547],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",547],[11,"eq","","",547],[11,"fmt","","",547],[11,"from_iter","","",547],[11,"extend","","",547],[11,"default","","",547],[6,"Output","std::collections::hash_set",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[6,"IntoIter","",""],[11,"into_iter","std::collections","",547],[6,"Item","std::collections::hash_set",""],[11,"next","","",558],[11,"size_hint","","",558],[11,"len","","",558],[6,"Item","",""],[11,"next","","",559],[11,"size_hint","","",559],[11,"len","","",559],[6,"Item","",""],[11,"next","","",560],[11,"size_hint","","",560],[11,"len","","",560],[6,"Item","",""],[11,"next","","",561],[11,"size_hint","","",561],[6,"Item","",""],[11,"next","","",562],[11,"size_hint","","",562],[6,"Item","",""],[11,"next","","",563],[11,"size_hint","","",563],[6,"Item","",""],[11,"next","","",564],[11,"size_hint","","",564],[0,"hash_state","std::collections","Experimental support for providing custom hash algorithms to a HashMap and\nHashSet."],[3,"DefaultState","std::collections::hash_state","A structure which is a factory for instances of `Hasher` which implement the\ndefault trait."],[8,"HashState","","A trait representing stateful hashes which can be used to hash keys in a\n`HashMap`."],[16,"Hasher","std::collections::hash_state::HashState","Type of the hasher that will be created."],[10,"hasher","std::collections::hash_state","Creates a new hasher based on the given state of this object.",565],[6,"Hasher","",""],[11,"hasher","","",566],[11,"clone","","",566],[11,"default","","",566],[0,"thread","std","Native threads"],[3,"Builder","std::thread","Thread configuration. Provides detailed control over the properties\nand behavior of new threads."],[3,"Thread","","A handle to a thread."],[3,"JoinHandle","","An owned permission to join on a thread (block on its termination)."],[3,"JoinGuard","","An RAII-style guard that will block until thread termination when dropped."],[5,"spawn","","Spawn a new thread, returning a `JoinHandle` for it."],[5,"scoped","","Spawn a new *scoped* thread, returning a `JoinGuard` for it."],[5,"current","","Gets a handle to the thread that invokes it."],[5,"yield_now","","Cooperatively give up a timeslice to the OS scheduler."],[5,"panicking","","Determines whether the current thread is unwinding because of panic."],[5,"park","","Block unless or until the current thread's token is made available (may wake spuriously)."],[5,"park_timeout","","Block unless or until the current thread's token is made available or\nthe specified duration has been reached (may wake spuriously)."],[6,"Result","","Indicates the manner in which a thread exited."],[11,"new","","Generate the base configuration for spawning a thread, from which\nconfiguration methods can be chained.",567],[11,"name","","Name the thread-to-be. Currently the name is used for identification\nonly in panic messages.",567],[11,"stack_size","","Set the size of the stack for the new thread.",567],[11,"stdout","","Redirect thread-local stdout.",567],[11,"stderr","","Redirect thread-local stderr.",567],[11,"spawn","","Spawn a new thread, and return a join handle for it.",567],[11,"scoped","","Spawn a new child thread that must be joined within a given\nscope, and return a `JoinGuard`.",567],[11,"clone","","",568],[11,"spawn","","Deprecated: use module-level free function.",568],[11,"scoped","","Deprecated: use module-level free function.",568],[11,"current","","Deprecated: use module-level free function.",568],[11,"yield_now","","Deprecated: use module-level free function.",568],[11,"panicking","","Deprecated: use module-level free function.",568],[11,"park","","Deprecated: use module-level free function.",568],[11,"park_timeout","","Deprecated: use module-level free function.",568],[11,"unpark","","Atomically makes the handle's token available if it is not already.",568],[11,"name","","Get the thread's name.",568],[11,"fmt","","",568],[11,"new","","",568],[11,"thread","","Extract a handle to the underlying thread",569],[11,"join","","Wait for the associated thread to finish.",569],[11,"drop","","",569],[11,"thread","","Extract a handle to the thread this guard will join on.",570],[11,"join","","Wait for the associated thread to finish, returning the result of the thread's\ncalculation.",570],[11,"detach","","Detaches the child thread, allowing it to outlive its parent.",570],[11,"drop","","",570],[0,"sync","std","Useful synchronization primitives"],[3,"Arc","std::sync","An atomically reference counted wrapper for shared state."],[3,"Weak","","A weak pointer to an `Arc`."],[0,"atomic","","Atomic types"],[3,"AtomicBool","std::sync::atomic","A boolean type which can be safely shared between threads."],[3,"AtomicIsize","","A signed integer type which can be safely shared between threads."],[3,"AtomicUsize","","An unsigned integer type which can be safely shared between threads."],[3,"AtomicPtr","","A raw pointer type which can be safely shared between threads."],[4,"Ordering","","Atomic memory orderings"],[13,"Relaxed","","No ordering constraints, only atomic operations.",571],[13,"Release","","When coupled with a store, all previous writes become visible\nto another thread that performs a load with `Acquire` ordering\non the same value.",571],[13,"Acquire","","When coupled with a load, all subsequent loads will see data\nwritten before a store with `Release` ordering on the same value\nin another thread.",571],[13,"AcqRel","","When coupled with a load, uses `Acquire` ordering, and with a store\n`Release` ordering.",571],[13,"SeqCst","","Like `AcqRel` with the additional guarantee that all threads see all\nsequentially consistent operations in the same order.",571],[17,"ATOMIC_BOOL_INIT","","An `AtomicBool` initialized to `false`."],[17,"ATOMIC_ISIZE_INIT","","An `AtomicIsize` initialized to `0`."],[17,"ATOMIC_USIZE_INIT","","An `AtomicUsize` initialized to `0`."],[5,"fence","","An atomic fence."],[3,"AtomicInt","",""],[3,"AtomicUint","",""],[17,"ATOMIC_INT_INIT","",""],[17,"ATOMIC_UINT_INIT","",""],[3,"Mutex","std::sync","A mutual exclusion primitive useful for protecting shared data"],[3,"MutexGuard","","An RAII implementation of a \"scoped lock\" of a mutex. When this structure is\ndropped (falls out of scope), the lock will be unlocked."],[3,"StaticMutex","","The static mutex type is provided to allow for static allocation of mutexes."],[3,"RwLock","","A reader-writer lock"],[3,"StaticRwLock","","Structure representing a statically allocated RwLock."],[3,"RwLockReadGuard","","RAII structure used to release the shared read access of a lock when\ndropped."],[3,"RwLockWriteGuard","","RAII structure used to release the exclusive write access of a lock when\ndropped."],[3,"Condvar","","A Condition Variable"],[3,"StaticCondvar","","Statically allocated condition variables."],[3,"Once","","A synchronization primitive which can be used to run a one-time global\ninitialization. Useful for one-time initialization for FFI or related\nfunctionality. This type can only be constructed with the `ONCE_INIT`\nvalue."],[3,"Semaphore","","A counting, blocking, semaphore."],[3,"SemaphoreGuard","","An RAII guard which will release a resource acquired from a semaphore when\ndropped."],[3,"Barrier","","A barrier enables multiple tasks to synchronize the beginning\nof some computation."],[3,"BarrierWaitResult","","A result returned from wait."],[3,"PoisonError","","A type of error which can be returned whenever a lock is acquired."],[3,"Future","","A type encapsulating the result of a computation which may not be complete"],[3,"TaskPool","","A thread pool used to execute functions in parallel."],[4,"TryLockError","","An enumeration of possible errors which can occur while calling the\n`try_lock` method."],[13,"Poisoned","","The lock could not be acquired because another task failed while holding\nthe lock.",572],[13,"WouldBlock","","The lock could not be acquired at this time because the operation would\notherwise block.",572],[0,"mpsc","","Multi-producer, single-consumer FIFO queue communication primitives."],[3,"Select","std::sync::mpsc","The \"receiver set\" of the select interface. This structure is used to manage\na set of receivers which are being selected over."],[3,"Handle","","A handle to a receiver which is currently a member of a `Select` set of\nreceivers.  This handle is used to keep the receiver in the set as well as\ninteract with the underlying receiver."],[3,"Receiver","","The receiving-half of Rust's channel type. This half can only be owned by\none task"],[3,"Iter","","An iterator over messages on a receiver, this iterator will block\nwhenever `next` is called, waiting for a new message, and `None` will be\nreturned when the corresponding channel has hung up."],[3,"Sender","","The sending-half of Rust's asynchronous channel type. This half can only be\nowned by one task, but it can be cloned to send to other tasks."],[3,"SyncSender","","The sending-half of Rust's synchronous channel type. This half can only be\nowned by one task, but it can be cloned to send to other tasks."],[3,"SendError","","An error returned from the `send` function on channels."],[3,"RecvError","","An error returned from the `recv` function on a `Receiver`."],[4,"TryRecvError","","This enumeration is the list of the possible reasons that try_recv could not\nreturn data when called."],[13,"Empty","","This channel is currently empty, but the sender(s) have not yet\ndisconnected, so data may yet become available.",573],[13,"Disconnected","","This channel's sending half has become disconnected, and there will\nnever be any more data received on this channel",573],[4,"TrySendError","","This enumeration is the list of the possible error outcomes for the\n`SyncSender::try_send` method."],[13,"Full","","The data could not be sent on the channel because it would require that\nthe callee block to send the data.",574],[13,"Disconnected","","This channel's receiving half has disconnected, so the data could not be\nsent. The data is returned back to the callee in this case.",574],[5,"channel","","Creates a new asynchronous channel, returning the sender/receiver halves."],[5,"sync_channel","","Creates a new synchronous, bounded channel."],[11,"new","","Creates a new selection structure. This set is initially empty.",575],[11,"handle","","Creates a new handle into this receiver set for a new receiver. Note\nthat this does *not* add the receiver to the receiver set, for that you\nmust call the `add` method on the handle itself.",575],[11,"wait","","Waits for an event on this receiver set. The returned value is *not* an\nindex, but rather an id. This id can be queried against any active\n`Handle` structures (each one has an `id` method). The handle with\nthe matching `id` will have some sort of event available on it. The\nevent could either be that data is available or the corresponding\nchannel has been closed.",575],[11,"id","","Retrieve the id of this handle.",576],[11,"recv","","Block to receive a value on the underlying receiver, returning `Some` on\nsuccess or `None` if the channel disconnects. This function has the same\nsemantics as `Receiver.recv`",576],[11,"add","","Adds this handle to the receiver set that the handle was created from. This\nmethod can be called multiple times, but it has no effect if `add` was\ncalled previously.",576],[11,"remove","","Removes this handle from the `Select` set. This method is unsafe because\nit has no guarantee that the `Handle` was not moved since `add` was\ncalled.",576],[11,"drop","","",575],[11,"drop","","",576],[11,"clone","","",577],[11,"eq","","",577],[11,"ne","","",577],[11,"fmt","","",578],[11,"clone","","",578],[11,"eq","","",578],[11,"ne","","",578],[11,"fmt","","",573],[11,"clone","","",573],[11,"eq","","",573],[11,"ne","","",573],[11,"clone","","",574],[11,"eq","","",574],[11,"ne","","",574],[11,"send","","Attempts to send a value on this channel, returning it back if it could\nnot be sent.",579],[11,"clone","","",579],[11,"drop","","",579],[11,"send","","Sends a value on this synchronous channel.",580],[11,"try_send","","Attempts to send a value on this channel without blocking.",580],[11,"clone","","",580],[11,"drop","","",580],[11,"try_recv","","Attempts to return a pending value on this receiver without blocking",581],[11,"recv","","Attempt to wait for a value on this receiver, returning an error if the\ncorresponding channel has hung up.",581],[11,"iter","","Returns an iterator that will block waiting for messages, but never\n`panic!`. It will return `None` when the channel has hung up.",581],[6,"Item","",""],[11,"next","","",582],[11,"drop","","",581],[11,"fmt","","",577],[11,"fmt","","",577],[11,"description","","",577],[11,"cause","","",577],[11,"fmt","","",574],[11,"fmt","","",574],[11,"description","","",574],[11,"cause","","",574],[11,"fmt","","",578],[11,"description","","",578],[11,"cause","","",578],[11,"fmt","","",573],[11,"description","","",573],[11,"cause","","",573],[11,"new","std::sync","Create a new barrier that can block a given number of threads.",583],[11,"wait","","Block the current thread until all threads has rendezvoused here.",583],[11,"is_leader","","Return whether this thread from `wait` is the \"leader thread\".",584],[11,"new","","Creates a new condition variable which is ready to be waited on and\nnotified.",585],[11,"wait","","Block the current thread until this condition variable receives a\nnotification.",585],[11,"wait_timeout","","Wait on this condition variable for a notification, timing out after a\nspecified duration.",585],[11,"wait_timeout_with","","Wait on this condition variable for a notification, timing out after a\nspecified duration.",585],[11,"notify_one","","Wake up one blocked thread on this condvar.",585],[11,"notify_all","","Wake up all blocked threads on this condvar.",585],[11,"drop","","",585],[11,"wait","","Block the current thread until this condition variable receives a\nnotification.",586],[11,"wait_timeout","","Wait on this condition variable for a notification, timing out after a\nspecified duration.",586],[11,"wait_timeout_with","","Wait on this condition variable for a notification, timing out after a\nspecified duration.",586],[11,"notify_one","","Wake up one blocked thread on this condvar.",586],[11,"notify_all","","Wake up all blocked threads on this condvar.",586],[11,"destroy","","Deallocate all resources associated with this static condvar.",586],[11,"get","","Get the value of the future.",587],[11,"into_inner","","Gets the value from this future, forcing evaluation.",587],[11,"get_ref","","Executes the future's closure and then returns a reference\nto the result.  The reference lasts as long as\nthe future.",587],[11,"from_value","","Create a future from a value.",587],[11,"from_fn","","Create a future from a function.",587],[11,"from_receiver","","Create a future from a port",587],[11,"spawn","","Create a future from a unique closure.",587],[11,"new","","Creates a new mutex in an unlocked state ready for use.",588],[11,"lock","","Acquires a mutex, blocking the current task until it is able to do so.",588],[11,"try_lock","","Attempts to acquire this lock.",588],[11,"is_poisoned","","Determine whether the lock is poisoned.",588],[11,"drop","","",588],[11,"fmt","","",588],[11,"lock","","Acquires this lock, see `Mutex::lock`",589],[11,"try_lock","","Attempts to grab this lock, see `Mutex::try_lock`",589],[11,"destroy","","Deallocates resources associated with this static mutex.",589],[11,"deref","","",590],[11,"deref_mut","","",590],[11,"drop","","",590],[11,"call_once","","Perform an initialization routine once and only once. The given closure\nwill be executed if this is the first time `call_once` has been called,\nand otherwise the routine will *not* be invoked.",591],[11,"fmt","","",592],[11,"fmt","","",592],[11,"description","","",592],[11,"new","","Create a `PoisonError`.",592],[11,"into_guard","","Consumes this error indicating that a lock is poisoned, returning the\nunderlying guard to allow access regardless.",592],[11,"into_inner","","Consumes this error indicating that a lock is poisoned, returning the\nunderlying guard to allow access regardless.",592],[11,"get_ref","","Reaches into this error indicating that a lock is poisoned, returning a\nreference to the underlying guard to allow access regardless.",592],[11,"get_mut","","Reaches into this error indicating that a lock is poisoned, returning a\nmutable reference to the underlying guard to allow access regardless.",592],[11,"from_error","","",572],[11,"fmt","","",572],[11,"fmt","","",572],[11,"description","","",572],[11,"cause","","",572],[11,"new","","Creates a new instance of an `RwLock<T>` which is unlocked.",593],[11,"read","","Locks this rwlock with shared read access, blocking the current thread\nuntil it can be acquired.",593],[11,"try_read","","Attempt to acquire this lock with shared read access.",593],[11,"write","","Lock this rwlock with exclusive write access, blocking the current\nthread until it can be acquired.",593],[11,"try_write","","Attempt to lock this rwlock with exclusive write access.",593],[11,"is_poisoned","","Determine whether the lock is poisoned.",593],[11,"drop","","",593],[11,"fmt","","",593],[11,"read","","Locks this rwlock with shared read access, blocking the current thread\nuntil it can be acquired.",594],[11,"try_read","","Attempt to acquire this lock with shared read access.",594],[11,"write","","Lock this rwlock with exclusive write access, blocking the current\nthread until it can be acquired.",594],[11,"try_write","","Attempt to lock this rwlock with exclusive write access.",594],[11,"destroy","","Deallocate all resources associated with this static lock.",594],[11,"deref","","",595],[11,"deref","","",596],[11,"deref_mut","","",596],[11,"drop","","",595],[11,"drop","","",596],[11,"new","","Creates a new semaphore with the initial count specified.",597],[11,"acquire","","Acquires a resource of this semaphore, blocking the current thread until\nit can do so.",597],[11,"release","","Release a resource from this semaphore.",597],[11,"access","","Acquires a resource of this semaphore, returning an RAII guard to\nrelease the semaphore when dropped.",597],[11,"drop","","",598],[11,"new","","Spawns a new thread pool with `threads` threads.",599],[11,"execute","","Executes the function `job` on a thread in the pool.",599],[6,"TryLockResult","","A type alias for the result of a nonblocking locking method."],[6,"LockResult","","A type alias for the result of a lock method which can be poisoned."],[17,"MUTEX_INIT","","Static initialization of a mutex. This constant can be used to initialize\nother mutex constants."],[17,"RW_LOCK_INIT","","Constant initialization for a statically-initialized rwlock."],[17,"CONDVAR_INIT","","Constant initializer for a statically allocated condition variable."],[17,"ONCE_INIT","","Initialization value for static `Once` values."],[11,"as_raw_handle","std::old_io::fs","",358],[11,"as_raw_handle","std::fs","",450],[11,"as_raw_handle","std::old_io::pipe","",377],[11,"as_raw_handle","std::old_io::net::pipe","",373],[11,"as_raw_handle","","",374],[11,"as_raw_handle","","",375],[11,"as_raw_socket","std::old_io::net::tcp","",365],[11,"as_raw_socket","","",366],[11,"as_raw_socket","","",367],[11,"as_raw_socket","std::old_io::net::udp","",368],[11,"as_raw_socket","std::net","",461],[11,"as_raw_socket","","",462],[11,"as_raw_socket","","",463],[11,"from_wide","std::ffi","",333],[11,"encode_wide","","",334],[11,"desired_access","std::fs","",448],[11,"creation_disposition","","",448],[11,"flags_and_attributes","","",448],[11,"share_mode","","",448],[11,"clone","std::os::windows","",600],[11,"partial_cmp","","",600],[11,"lt","","",600],[11,"le","","",600],[11,"gt","","",600],[11,"ge","","",600],[11,"cmp","","",600],[11,"eq","","",600],[11,"ne","","",600],[11,"deref","","",600],[11,"fmt","","",600],[11,"new","","Create an new, empty WTF-8 string.",600],[11,"with_capacity","","Create an new, empty WTF-8 string with pre-allocated capacity for `n` bytes.",600],[11,"from_string","","Create a WTF-8 string from an UTF-8 `String`.",600],[11,"from_str","","Create a WTF-8 string from an UTF-8 `&str` slice.",600],[11,"from_wide","","Create a WTF-8 string from a potentially ill-formed UTF-16 slice of 16-bit code units.",600],[11,"as_slice","","",600],[11,"reserve","","Reserves capacity for at least `additional` more bytes to be inserted\nin the given `Wtf8Buf`.\nThe collection may reserve more space to avoid frequent reallocations.",600],[11,"capacity","","Returns the number of bytes that this string buffer can hold without reallocating.",600],[11,"push_str","","Append an UTF-8 slice at the end of the string.",600],[11,"push_wtf8","","Append a WTF-8 slice at the end of the string.",600],[11,"push_char","","Append a Unicode scalar value at the end of the string.",600],[11,"push","","Append a code point at the end of the string.",600],[11,"truncate","","Shortens a string to the specified length.",600],[11,"into_string","","Consume the WTF-8 string and try to convert it to UTF-8.",600],[11,"into_string_lossy","","Consume the WTF-8 string and convert it lossily to UTF-8.",600],[11,"from_iter","","",600],[11,"extend","","",600],[11,"clone","","",601],[11,"next","","",601],[11,"size_hint","","",601],[11,"hash","","",600],[0,"rt","std","Runtime services"],[0,"heap","std::rt",""],[5,"allocate","std::rt::heap","Return a pointer to `size` bytes of memory aligned to `align`."],[5,"reallocate","","Resize the allocation referenced by `ptr` to `size` bytes."],[5,"reallocate_inplace","","Resize the allocation referenced by `ptr` to `size` bytes."],[5,"deallocate","","Deallocates the memory referenced by `ptr`."],[5,"usable_size","","Returns the usable size of an allocation created with the specified the\n`size` and `align`."],[5,"stats_print","","Prints implementation-defined allocator statistics."],[17,"EMPTY","","An arbitrary non-null address to represent zero-size allocations."],[5,"at_exit","std::rt","Enqueues a procedure to run when the runtime is cleaned up"],[5,"cleanup","","One-time runtime cleanup."],[0,"backtrace","","Simple backtrace functionality (to print on panic)"],[5,"write","std::rt::backtrace",""],[5,"log_enabled","",""],[0,"util","std::rt",""],[3,"Stdio","std::rt::util",""],[5,"running_on_valgrind","","Dynamically inquire about whether we're running under V.\nYou should usually not use this unless your test definitely\ncan't run correctly un-altered. Valgrind is there to help\nyou notice weirdness in normal, un-doctored code paths!"],[5,"limit_thread_creation_due_to_osx_and_valgrind","","Valgrind has a fixed-sized array (size around 2000) of segment descriptors\nwired into it; this is a hard limit and requires rebuilding valgrind if you\nwant to go beyond it. Normally this is not a problem, but in some tests, we\nproduce a lot of threads casually.  Making lots of threads alone might not\nbe a problem _either_, except on OSX, the segments produced for new threads\n_take a while_ to get reclaimed by the OS. Combined with the fact that libuv\nschedulers fork off a separate thread for polling fsevents on OSX, we get a\nperfect storm of creating \"too many mappings\" for valgrind to handle when\nrunning certain stress tests in the runtime."],[5,"min_stack","",""],[5,"default_sched_threads","","Get's the number of scheduler threads requested by the environment\neither `RUST_THREADS` or `num_cpus`."],[5,"dumb_print","",""],[5,"abort","",""],[5,"report_overflow","",""],[17,"ENFORCE_SANITY","",""],[17,"Stdout","",""],[17,"Stderr","",""],[11,"write_bytes","","",602],[11,"write_str","","",602],[0,"unwind","std::rt","Implementation of Rust stack unwinding"],[5,"try","std::rt::unwind","Invoke a closure, capturing the cause of panic if one occurs."],[5,"panicking","","Determines whether the current thread is unwinding because of panic."],[5,"rust_begin_unwind","","Entry point of panic from the libcore crate."],[5,"begin_unwind_fmt","","The entry point for unwinding with a formatted message."],[5,"begin_unwind","","This is the entry point of unwinding for panic!() and assert!()."],[5,"register","","Register a callback to be invoked when a thread unwinds."],[6,"Callback","",""],[0,"args","std::rt","Global storage for command line arguments"],[5,"init","std::rt::args","One-time global initialization."],[5,"cleanup","","One-time global cleanup."],[5,"take","","Take the global arguments from global storage."],[5,"put","","Give the global arguments to global storage."],[5,"clone","","Make a clone of the global arguments."],[17,"DEFAULT_ERROR_CODE","std::rt","The default error code of the rust runtime if the main thread panics instead\nof exiting cleanly."],[11,"write_all","std::rt::util","",602],[14,"assert!","std","Ensure that a boolean expression is `true` at runtime."],[14,"assert_eq!","","Asserts that two expressions are equal to each other, testing equality in\nboth directions."],[14,"debug_assert!","","Ensure that a boolean expression is `true` at runtime."],[14,"debug_assert_eq!","","Asserts that two expressions are equal to each other, testing equality in\nboth directions."],[14,"write!","","Use the `format!` syntax to write data into a buffer of type `&mut Writer`.\nSee `std::fmt` for more information."],[14,"writeln!","","Equivalent to the `write!` macro, except that a newline is appended after\nthe message is written."],[14,"unreachable!","","A utility macro for indicating unreachable code."],[14,"unimplemented!","","A standardised placeholder for marking unfinished code. It panics with the\nmessage `\"not yet implemented\"` when executed."],[14,"vec!","","Creates a `Vec` containing the arguments."],[14,"format!","","Use the syntax described in `std::fmt` to create a value of type `String`.\nSee `std::fmt` for more information."],[14,"panic!","","The entry point for panic of Rust tasks."],[14,"print!","","Equivalent to the `println!` macro except that a newline is not printed at\nthe end of the message."],[14,"println!","","Macro for printing to a task's stdout handle."],[14,"try!","","Helper macro for unwrapping `Result` values while returning early with an\nerror if the value of the expression is `Err`. For more information, see\n`std::io`."],[14,"select!","","A macro to select an event from a number of receivers."],[14,"format_args!","","The core macro for formatted string creation & output."],[14,"env!","","Inspect an environment variable at compile time."],[14,"option_env!","","Optionally inspect an environment variable at compile time."],[14,"concat_idents!","","Concatenate identifiers into one identifier."],[14,"concat!","","Concatenates literals into a static string slice."],[14,"line!","","A macro which expands to the line number on which it was invoked."],[14,"column!","","A macro which expands to the column number on which it was invoked."],[14,"file!","","A macro which expands to the file name from which it was invoked."],[14,"stringify!","","A macro which stringifies its argument."],[14,"include_str!","","Includes a utf8-encoded file as a string."],[14,"include_bytes!","","Includes a file as a byte slice."],[14,"module_path!","","Expands to a string that represents the current module path."],[14,"cfg!","","Boolean evaluation of configuration flags."],[14,"scoped_thread_local!","","Declare a new scoped thread local storage key."],[14,"thread_local!","","Declare a new thread local storage key of type `std::thread_local::Key`."],[15,"slice","","Utilities for slice manipulation"],[15,"str","","Unicode string manipulation (the [`str`](../primitive.str.html) type)."],[15,"char","","Character manipulation (`char` type, Unicode Scalar Value)"],[15,"isize","","Operations and constants for pointer-sized signed integers (`isize` type)"],[15,"i8","","Operations and constants for signed 8-bits integers (`i8` type)"],[15,"i16","","Operations and constants for signed 16-bits integers (`i16` type)"],[15,"i32","","Operations and constants for signed 32-bits integers (`i32` type)"],[15,"i64","","Operations and constants for signed 64-bits integers (`i64` type)"],[15,"usize","","Operations and constants for pointer-sized unsigned integers (`usize` type)"],[15,"u8","","Operations and constants for unsigned 8-bits integers (`u8` type)"],[15,"u16","","Operations and constants for unsigned 16-bits integers (`u16` type)"],[15,"u32","","Operations and constants for unsigned 32-bits integers (`u32` type)"],[15,"u64","","Operations and constants for unsigned 64-bits integer (`u64` type)"],[15,"f32","","Operations and constants for 32-bits floats (`f32` type)"],[15,"f64","","Operations and constants for 64-bits floats (`f64` type)"],[15,"bool","","The boolean type"],[15,"tuple","","Operations on tuples"],[11,"from_error","std::io","",418],[11,"from_error","std::old_io","",337],[11,"as_os_str","std::old_path::windows","",494],[11,"write_all","std::old_io","",603],[11,"flush","","",603],[11,"read","","",603],[11,"tell","","",603],[11,"seek","","",603],[11,"listen","","",603],[11,"accept","","",603],[11,"stat","std::old_path::windows","",494],[11,"lstat","","",494],[11,"exists","","",494],[11,"is_file","","",494],[11,"is_dir","","",494],[11,"metadata","std::path","",489],[11,"exists","","",489],[11,"is_file","","",489],[11,"is_dir","","",489],[11,"clone","std::collections::hash_map","",549],[11,"clone","","",550],[11,"clone","","",551],[11,"next","","",549],[11,"size_hint","","",549],[11,"len","","",549],[11,"next","","",552],[11,"size_hint","","",552],[11,"len","","",552],[11,"next","","",553],[11,"size_hint","","",553],[11,"len","","",553],[11,"next","","",550],[11,"size_hint","","",550],[11,"len","","",550],[11,"next","","",551],[11,"size_hint","","",551],[11,"len","","",551],[11,"next","","",554],[11,"size_hint","","",554],[11,"len","","",554],[11,"get","","Returns a mutable reference to the entry if occupied, or the VacantEntry if vacant.",548],[11,"get","","Gets a reference to the value in the entry.",555],[11,"get_mut","","Gets a mutable reference to the value in the entry.",555],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to the value in the entry\nwith a lifetime bound to the map itself",555],[11,"insert","","Sets the value of the entry, and returns the entry's old value",555],[11,"remove","","Takes the value out of the entry, and returns it",555],[11,"insert","","Sets the value of the entry with the VacantEntry's key,\nand returns a mutable reference to it",556],[11,"clone","","",557],[11,"new","","Construct a new `RandomState` that is initialized with random keys.",557],[11,"hasher","","",557],[11,"default","","",557],[11,"next","std::collections::hash_set","",558],[11,"size_hint","","",558],[11,"len","","",558],[11,"next","","",559],[11,"size_hint","","",559],[11,"len","","",559],[11,"next","","",560],[11,"size_hint","","",560],[11,"len","","",560],[11,"next","","",561],[11,"size_hint","","",561],[11,"next","","",562],[11,"size_hint","","",562],[11,"next","","",563],[11,"size_hint","","",563],[11,"next","","",564],[11,"size_hint","","",564],[11,"hasher","std::collections::hash_state","",566],[11,"clone","","",566],[11,"default","","",566]],"paths":[[8,"Any"],[3,"TypeId"],[3,"Wrapping"],[4,"FpCategory"],[3,"ParseIntError"],[4,"IntErrorKind"],[3,"ParseFloatError"],[4,"FloatErrorKind"],[3,"NonZero"],[3,"Unique"],[3,"NoCopy"],[3,"Managed"],[3,"PhantomData"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"Ordering"],[3,"AtomicBool"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"AtomicPtr"],[3,"AtomicInt"],[3,"AtomicUint"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"BorrowRef"],[3,"Ref"],[3,"BorrowRefMut"],[3,"RefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[4,"EscapeUnicodeState"],[3,"EscapeDefault"],[4,"EscapeDefaultState"],[3,"Finallyalizer"],[3,"Rev"],[4,"MinMaxResult"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"Unfold"],[3,"Counter"],[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"],[3,"Repeat"],[4,"Option"],[3,"Item"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"i8x16"],[3,"i16x8"],[3,"i32x4"],[3,"i64x2"],[3,"u8x16"],[3,"u16x8"],[3,"u32x4"],[3,"u64x2"],[3,"f32x4"],[3,"f64x2"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"GenericSplitN"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[4,"SearchStep"],[3,"CharEqPattern"],[3,"CharEqSearcher"],[3,"StrSearcher"],[3,"ParseBoolError"],[4,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"BytesDeref"],[3,"CharSplits"],[3,"CharSplitsN"],[3,"TwoWaySearcher"],[4,"OldSearcher"],[3,"OldMatchIndices"],[3,"MatchIndices"],[3,"SplitStr"],[3,"Split"],[3,"SplitTerminator"],[3,"SplitN"],[3,"RSplitN"],[3,"Lines"],[3,"LinesAny"],[3,"SipHasher"],[3,"Binary"],[3,"Octal"],[3,"Decimal"],[3,"LowerHex"],[3,"UpperHex"],[3,"Radix"],[3,"RadixFmt"],[4,"Alignment"],[3,"Error"],[3,"Arguments"],[3,"Formatter"],[8,"Clone"],[8,"PartialEq"],[8,"Ord"],[8,"PartialOrd"],[8,"Default"],[8,"Finally"],[8,"Hash"],[8,"Hasher"],[3,"TyDesc"],[8,"Iterator"],[8,"FromIterator"],[8,"IntoIterator"],[8,"Extend"],[8,"IteratorExt"],[8,"DoubleEndedIterator"],[8,"RandomAccessIterator"],[8,"ExactSizeIterator"],[8,"AdditiveIterator"],[8,"MultiplicativeIterator"],[8,"Drop"],[8,"Add"],[8,"Sub"],[8,"Mul"],[8,"Div"],[8,"Rem"],[8,"Neg"],[8,"Not"],[8,"BitAnd"],[8,"BitOr"],[8,"BitXor"],[8,"Shl"],[8,"Shr"],[8,"Index"],[8,"IndexMut"],[8,"Deref"],[8,"DerefMut"],[8,"Fn"],[8,"FnMut"],[8,"FnOnce"],[8,"PtrExt"],[8,"MutPtrExt"],[3,"Slice"],[3,"Closure"],[3,"TraitObject"],[8,"Repr"],[8,"Error"],[8,"FromError"],[3,"Box"],[3,"Weak"],[3,"Arc"],[3,"Rc"],[3,"Weak"],[8,"BoxAny"],[8,"Borrow"],[8,"BorrowMut"],[8,"ToOwned"],[4,"Cow"],[3,"BinaryHeap"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"BitVec"],[3,"Iter"],[3,"BitSet"],[3,"SetIter"],[3,"TwoBitPositions"],[3,"Union"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"],[3,"RawItems"],[3,"Node"],[3,"Handle"],[3,"ElemsAndEdges"],[3,"MoveTraversalImpl"],[3,"AbsTraversal"],[3,"NodeSlice"],[3,"MutNodeSlice"],[3,"BTreeMap"],[3,"IdRef"],[3,"PartialSearchStack"],[3,"Pusher"],[3,"SearchStack"],[3,"AbsIter"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"Range"],[3,"RangeMut"],[4,"Entry"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"BTreeSet"],[3,"Iter"],[3,"IntoIter"],[3,"Range"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Intersection"],[3,"Union"],[3,"EnumSet"],[3,"Iter"],[3,"Iter"],[3,"IntoIter"],[3,"Rawlink"],[3,"LinkedList"],[3,"IterMut"],[3,"ElementSwaps"],[3,"Vec"],[4,"Direction"],[3,"SizeDirection"],[3,"Permutations"],[4,"DecompositionType"],[3,"Decompositions"],[4,"RecompositionState"],[3,"Recompositions"],[3,"Utf16Units"],[3,"String"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[3,"DerefString"],[3,"IntoIter"],[3,"Drain"],[3,"DerefVec"],[3,"PartialVecNonZeroSized"],[3,"PartialVecZeroSized"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[3,"VecMap"],[4,"Entry"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"Iter"],[3,"IterMut"],[3,"Keys"],[3,"Values"],[3,"Drain"],[3,"IntoIter"],[8,"IntoCow"],[8,"Octal"],[8,"Write"],[8,"LowerExp"],[8,"Pointer"],[8,"Display"],[8,"UpperExp"],[8,"UpperHex"],[8,"Binary"],[8,"Debug"],[8,"LowerHex"],[8,"SliceExt"],[8,"SliceConcatExt"],[8,"AsSlice"],[8,"MutableByteVector"],[8,"IntSliceExt"],[8,"StrExt"],[3,"CharRange"],[8,"ReverseSearcher"],[8,"Searcher"],[8,"CharEq"],[8,"Pattern"],[4,"GraphemeCat"],[3,"GraphemeIndices"],[3,"Graphemes"],[4,"GraphemeState"],[3,"Utf16Items"],[4,"Utf16Item"],[3,"Utf16Encoder"],[3,"Words"],[3,"ToLowercase"],[3,"ToUppercase"],[8,"FromStr"],[8,"Str"],[8,"ToString"],[8,"CharExt"],[8,"OwnedAsciiExt"],[8,"AsciiExt"],[3,"EscapeDefault"],[8,"Invoke"],[3,"Thunk"],[8,"Int"],[8,"SignedInt"],[8,"UnsignedInt"],[8,"FromPrimitive"],[8,"NumCast"],[8,"ToPrimitive"],[8,"FromStrRadix"],[8,"WrappingOps"],[8,"OverflowingOps"],[4,"ExponentFormat"],[4,"SignificantDigits"],[4,"SignFormat"],[8,"Float"],[4,"State"],[3,"Key"],[3,"Key"],[3,"DynamicLibrary"],[3,"CString"],[3,"CStr"],[3,"NulError"],[3,"OsString"],[3,"OsStr"],[8,"IntoBytes"],[8,"AsOsStr"],[3,"IoError"],[3,"FileStat"],[3,"UnstableFileStat"],[4,"IoErrorKind"],[4,"SeekStyle"],[4,"FileMode"],[4,"FileAccess"],[4,"FileType"],[3,"BufferedReader"],[3,"BufferedWriter"],[3,"LineBufferedWriter"],[3,"BufferedStream"],[3,"ChanReader"],[3,"ChanWriter"],[3,"MemWriter"],[3,"MemReader"],[3,"BufWriter"],[3,"BufReader"],[3,"TempDir"],[3,"Bytes"],[8,"PathExtensions"],[3,"File"],[3,"Directories"],[3,"Hint"],[3,"Info"],[4,"SocketType"],[4,"Flag"],[4,"Protocol"],[3,"TcpStream"],[3,"TcpListener"],[3,"TcpAcceptor"],[3,"UdpSocket"],[3,"SocketAddr"],[4,"IpAddr"],[8,"ToSocketAddr"],[3,"ParseError"],[3,"UnixStream"],[3,"UnixListener"],[3,"UnixAcceptor"],[3,"PipePair"],[3,"PipeStream"],[3,"Process"],[3,"ProcessOutput"],[4,"StdioContainer"],[4,"ProcessExit"],[3,"Command"],[3,"StdinReader"],[3,"StdinReaderGuard"],[3,"StdReader"],[3,"StdWriter"],[3,"Timer"],[3,"LimitReader"],[3,"NullWriter"],[3,"ZeroReader"],[3,"NullReader"],[3,"MultiWriter"],[3,"ChainedReader"],[3,"TeeReader"],[3,"IterReader"],[8,"Reader"],[8,"ByRefReader"],[8,"BytesReader"],[8,"Writer"],[8,"ByRefWriter"],[8,"Buffer"],[8,"BufferPrelude"],[8,"Seek"],[8,"Listener"],[8,"Acceptor"],[3,"RefReader"],[3,"RefWriter"],[3,"Lines"],[3,"Chars"],[3,"IncomingConnections"],[3,"FilePermission"],[4,"ErrorKind"],[4,"SeekFrom"],[4,"CharsError"],[3,"BufReader"],[3,"IntoInnerError"],[3,"BufWriter"],[3,"Error"],[3,"LineWriter"],[3,"BufStream"],[3,"Cursor"],[3,"Empty"],[3,"Repeat"],[3,"Sink"],[3,"Stdin"],[3,"StdinLock"],[3,"Stdout"],[3,"StdoutLock"],[3,"Stderr"],[3,"StderrLock"],[8,"Read"],[8,"ReadExt"],[8,"Write"],[8,"WriteExt"],[8,"Seek"],[8,"BufRead"],[8,"BufReadExt"],[3,"Broadcast"],[3,"Chain"],[3,"Take"],[3,"Tee"],[3,"Bytes"],[3,"Chars"],[3,"Split"],[3,"Lines"],[3,"TempDir"],[8,"PathExt"],[3,"OpenOptions"],[3,"Permissions"],[3,"File"],[3,"Metadata"],[3,"ReadDir"],[3,"DirEntry"],[3,"WalkDir"],[4,"IpAddr"],[4,"Ipv6MulticastScope"],[4,"Shutdown"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[3,"SocketAddr"],[3,"TcpStream"],[3,"TcpListener"],[3,"UdpSocket"],[8,"ToSocketAddrs"],[3,"LookupHost"],[3,"Pipe"],[4,"MemoryMapKind"],[4,"MapOption"],[4,"MapError"],[8,"AsRawSocket"],[8,"AsRawHandle"],[8,"OsStrExt"],[8,"OsStringExt"],[8,"OpenOptionsExt"],[3,"MemoryMap"],[4,"VarError"],[3,"Vars"],[3,"VarsOs"],[3,"SplitPaths"],[3,"JoinPathsError"],[3,"Args"],[3,"ArgsOs"],[4,"Prefix"],[4,"Component"],[8,"AsPath"],[3,"Components"],[3,"Iter"],[3,"PathBuf"],[3,"Path"],[3,"Display"],[3,"Path"],[3,"ParsePathError"],[4,"PathPrefix"],[3,"Path"],[3,"ParsePathError"],[8,"GenericPath"],[8,"BytesContainer"],[8,"GenericPathUnsafe"],[3,"Display"],[3,"Child"],[3,"Output"],[3,"ChildStdin"],[3,"ChildStdout"],[3,"ChildStderr"],[3,"Command"],[3,"Stdio"],[3,"ExitStatus"],[8,"Rand"],[8,"Rng"],[8,"SeedableRng"],[3,"Range"],[3,"Gamma"],[3,"GammaSmallShape"],[3,"GammaLargeShape"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[3,"RandSample"],[3,"WeightedChoice"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"ChaChaRng"],[3,"ReseedingRng"],[3,"ReseedWithDefault"],[3,"Open01"],[3,"Closed01"],[3,"Generator"],[3,"AsciiGenerator"],[3,"XorShiftRng"],[8,"SampleRange"],[8,"Sample"],[8,"IndependentSample"],[3,"Weighted"],[8,"Reseeder"],[3,"OsRng"],[3,"ReaderRng"],[3,"StdRng"],[3,"ThreadRng"],[3,"Duration"],[4,"Bound"],[3,"HashMap"],[3,"HashSet"],[4,"Entry"],[3,"Iter"],[3,"Keys"],[3,"Values"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"RandomState"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Union"],[8,"HashState"],[3,"DefaultState"],[3,"Builder"],[3,"Thread"],[3,"JoinHandle"],[3,"JoinGuard"],[4,"Ordering"],[4,"TryLockError"],[4,"TryRecvError"],[4,"TrySendError"],[3,"Select"],[3,"Handle"],[3,"SendError"],[3,"RecvError"],[3,"Sender"],[3,"SyncSender"],[3,"Receiver"],[3,"Iter"],[3,"Barrier"],[3,"BarrierWaitResult"],[3,"Condvar"],[3,"StaticCondvar"],[3,"Future"],[3,"Mutex"],[3,"StaticMutex"],[3,"MutexGuard"],[3,"Once"],[3,"PoisonError"],[3,"RwLock"],[3,"StaticRwLock"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"],[3,"Semaphore"],[3,"SemaphoreGuard"],[3,"TaskPool"],[3,"Wtf8Buf"],[3,"EncodeWide"],[3,"Stdio"],[6,"IoResult"]]};
searchIndex['libc'] = {"items":[[0,"","libc","Bindings for the C standard library and other platform libraries"],[0,"types","",""],[0,"common","libc::types",""],[0,"c95","libc::types::common",""],[4,"c_void","libc::types::common::c95","Type used to construct void pointers for use with C."],[13,"__variant1","","",0],[13,"__variant2","","",0],[4,"FILE","",""],[4,"fpos_t","",""],[0,"c99","libc::types::common",""],[6,"int8_t","libc::types::common::c99",""],[6,"int16_t","",""],[6,"int32_t","",""],[6,"int64_t","",""],[6,"uint8_t","",""],[6,"uint16_t","",""],[6,"uint32_t","",""],[6,"uint64_t","",""],[0,"posix88","libc::types::common",""],[4,"DIR","libc::types::common::posix88",""],[4,"dirent_t","",""],[0,"os","libc::types",""],[0,"common","libc::types::os",""],[0,"posix01","libc::types::os::common",""],[3,"stat","libc::types::os::common::posix01",""],[12,"st_dev","","",1],[12,"st_ino","","",1],[12,"st_mode","","",1],[12,"st_nlink","","",1],[12,"st_uid","","",1],[12,"st_gid","","",1],[12,"st_rdev","","",1],[12,"st_size","","",1],[12,"st_atime","","",1],[12,"st_mtime","","",1],[12,"st_ctime","","",1],[3,"utimbuf","",""],[12,"actime","","",2],[12,"modtime","","",2],[3,"timeval","",""],[12,"tv_sec","","",3],[12,"tv_usec","","",3],[3,"timespec","",""],[12,"tv_sec","","",4],[12,"tv_nsec","","",4],[4,"timezone","",""],[0,"bsd44","libc::types::os::common",""],[3,"sockaddr","libc::types::os::common::bsd44",""],[12,"sa_family","","",5],[12,"sa_data","","",5],[3,"sockaddr_storage","",""],[12,"ss_family","","",6],[12,"__ss_pad1","","",6],[12,"__ss_align","","",6],[12,"__ss_pad2","","",6],[3,"sockaddr_in","",""],[12,"sin_family","","",7],[12,"sin_port","","",7],[12,"sin_addr","","",7],[12,"sin_zero","","",7],[3,"in_addr","",""],[12,"s_addr","","",8],[3,"sockaddr_in6","",""],[12,"sin6_family","","",9],[12,"sin6_port","","",9],[12,"sin6_flowinfo","","",9],[12,"sin6_addr","","",9],[12,"sin6_scope_id","","",9],[3,"in6_addr","",""],[12,"s6_addr","","",10],[3,"ip_mreq","",""],[12,"imr_multiaddr","","",11],[12,"imr_interface","","",11],[3,"ip6_mreq","",""],[12,"ipv6mr_multiaddr","","",12],[12,"ipv6mr_interface","","",12],[3,"addrinfo","",""],[12,"ai_flags","","",13],[12,"ai_family","","",13],[12,"ai_socktype","","",13],[12,"ai_protocol","","",13],[12,"ai_addrlen","","",13],[12,"ai_canonname","","",13],[12,"ai_addr","","",13],[12,"ai_next","","",13],[3,"sockaddr_un","",""],[12,"sun_family","","",14],[12,"sun_path","","",14],[6,"SOCKET","",""],[6,"socklen_t","",""],[6,"sa_family_t","",""],[6,"in_port_t","",""],[6,"in_addr_t","",""],[0,"arch","libc::types::os",""],[0,"c95","libc::types::os::arch",""],[6,"c_char","libc::types::os::arch::c95",""],[6,"c_schar","",""],[6,"c_uchar","",""],[6,"c_short","",""],[6,"c_ushort","",""],[6,"c_int","",""],[6,"c_uint","",""],[6,"c_long","",""],[6,"c_ulong","",""],[6,"c_float","",""],[6,"c_double","",""],[6,"size_t","",""],[6,"ptrdiff_t","",""],[6,"clock_t","",""],[6,"time_t","",""],[6,"suseconds_t","",""],[6,"wchar_t","",""],[0,"c99","libc::types::os::arch",""],[6,"c_longlong","libc::types::os::arch::c99",""],[6,"c_ulonglong","",""],[6,"intptr_t","",""],[6,"uintptr_t","",""],[6,"intmax_t","",""],[6,"uintmax_t","",""],[0,"posix88","libc::types::os::arch",""],[6,"off_t","libc::types::os::arch::posix88",""],[6,"dev_t","",""],[6,"ino_t","",""],[6,"pid_t","",""],[6,"useconds_t","",""],[6,"mode_t","",""],[6,"ssize_t","",""],[0,"extra","libc::types::os::arch",""],[3,"SECURITY_ATTRIBUTES","libc::types::os::arch::extra",""],[12,"nLength","","",15],[12,"lpSecurityDescriptor","","",15],[12,"bInheritHandle","","",15],[3,"STARTUPINFO","",""],[12,"cb","","",16],[12,"lpReserved","","",16],[12,"lpDesktop","","",16],[12,"lpTitle","","",16],[12,"dwX","","",16],[12,"dwY","","",16],[12,"dwXSize","","",16],[12,"dwYSize","","",16],[12,"dwXCountChars","","",16],[12,"dwYCountCharts","","",16],[12,"dwFillAttribute","","",16],[12,"dwFlags","","",16],[12,"wShowWindow","","",16],[12,"cbReserved2","","",16],[12,"lpReserved2","","",16],[12,"hStdInput","","",16],[12,"hStdOutput","","",16],[12,"hStdError","","",16],[3,"PROCESS_INFORMATION","",""],[12,"hProcess","","",17],[12,"hThread","","",17],[12,"dwProcessId","","",17],[12,"dwThreadId","","",17],[3,"SYSTEM_INFO","",""],[12,"wProcessorArchitecture","","",18],[12,"wReserved","","",18],[12,"dwPageSize","","",18],[12,"lpMinimumApplicationAddress","","",18],[12,"lpMaximumApplicationAddress","","",18],[12,"dwActiveProcessorMask","","",18],[12,"dwNumberOfProcessors","","",18],[12,"dwProcessorType","","",18],[12,"dwAllocationGranularity","","",18],[12,"wProcessorLevel","","",18],[12,"wProcessorRevision","","",18],[3,"MEMORY_BASIC_INFORMATION","",""],[12,"BaseAddress","","",19],[12,"AllocationBase","","",19],[12,"AllocationProtect","","",19],[12,"RegionSize","","",19],[12,"State","","",19],[12,"Protect","","",19],[12,"Type","","",19],[3,"OVERLAPPED","",""],[12,"Internal","","",20],[12,"InternalHigh","","",20],[12,"Offset","","",20],[12,"OffsetHigh","","",20],[12,"hEvent","","",20],[3,"FILETIME","",""],[12,"dwLowDateTime","","",21],[12,"dwHighDateTime","","",21],[3,"GUID","",""],[12,"Data1","","",22],[12,"Data2","","",22],[12,"Data3","","",22],[12,"Data4","","",22],[3,"WSAPROTOCOLCHAIN","",""],[12,"ChainLen","","",23],[12,"ChainEntries","","",23],[3,"WSAPROTOCOL_INFO","",""],[12,"dwServiceFlags1","","",24],[12,"dwServiceFlags2","","",24],[12,"dwServiceFlags3","","",24],[12,"dwServiceFlags4","","",24],[12,"dwProviderFlags","","",24],[12,"ProviderId","","",24],[12,"dwCatalogEntryId","","",24],[12,"ProtocolChain","","",24],[12,"iVersion","","",24],[12,"iAddressFamily","","",24],[12,"iMaxSockAddr","","",24],[12,"iMinSockAddr","","",24],[12,"iSocketType","","",24],[12,"iProtocol","","",24],[12,"iProtocolMaxOffset","","",24],[12,"iNetworkByteOrder","","",24],[12,"iSecurityScheme","","",24],[12,"dwMessageSize","","",24],[12,"dwProviderReserved","","",24],[12,"szProtocol","","",24],[3,"WIN32_FIND_DATAW","",""],[12,"dwFileAttributes","","",25],[12,"ftCreationTime","","",25],[12,"ftLastAccessTime","","",25],[12,"ftLastWriteTime","","",25],[12,"nFileSizeHigh","","",25],[12,"nFileSizeLow","","",25],[12,"dwReserved0","","",25],[12,"dwReserved1","","",25],[12,"cFileName","","",25],[12,"cAlternateFileName","","",25],[6,"BOOL","",""],[6,"BYTE","",""],[6,"BOOLEAN","",""],[6,"CCHAR","",""],[6,"CHAR","",""],[6,"DWORD","",""],[6,"DWORDLONG","",""],[6,"HANDLE","",""],[6,"HINSTANCE","",""],[6,"HMODULE","",""],[6,"LONG","",""],[6,"PLONG","",""],[6,"LONG_PTR","",""],[6,"LARGE_INTEGER","",""],[6,"PLARGE_INTEGER","",""],[6,"LPCWSTR","",""],[6,"LPCSTR","",""],[6,"LPWSTR","",""],[6,"LPSTR","",""],[6,"LPWCH","",""],[6,"LPCH","",""],[6,"LPSECURITY_ATTRIBUTES","",""],[6,"LPVOID","",""],[6,"LPCVOID","",""],[6,"LPBYTE","",""],[6,"LPWORD","",""],[6,"LPDWORD","",""],[6,"LPHANDLE","",""],[6,"LRESULT","",""],[6,"PBOOL","",""],[6,"WCHAR","",""],[6,"WORD","",""],[6,"SIZE_T","",""],[6,"time64_t","",""],[6,"int64","",""],[6,"LPSTARTUPINFO","",""],[6,"LPPROCESS_INFORMATION","",""],[6,"LPSYSTEM_INFO","",""],[6,"LPMEMORY_BASIC_INFORMATION","",""],[6,"LPOVERLAPPED","",""],[6,"LPFILETIME","",""],[6,"LPWSAPROTOCOLCHAIN","",""],[6,"LPWSAPROTOCOL_INFO","",""],[6,"GROUP","",""],[6,"LPWIN32_FIND_DATAW","",""],[0,"consts","libc",""],[0,"os","libc::consts",""],[0,"c95","libc::consts::os",""],[17,"EXIT_FAILURE","libc::consts::os::c95",""],[17,"EXIT_SUCCESS","",""],[17,"RAND_MAX","",""],[17,"EOF","",""],[17,"SEEK_SET","",""],[17,"SEEK_CUR","",""],[17,"SEEK_END","",""],[17,"_IOFBF","",""],[17,"_IONBF","",""],[17,"_IOLBF","",""],[17,"BUFSIZ","",""],[17,"FOPEN_MAX","",""],[17,"FILENAME_MAX","",""],[17,"L_tmpnam","",""],[17,"TMP_MAX","",""],[17,"WSAEINTR","",""],[17,"WSAEBADF","",""],[17,"WSAEACCES","",""],[17,"WSAEFAULT","",""],[17,"WSAEINVAL","",""],[17,"WSAEMFILE","",""],[17,"WSAEWOULDBLOCK","",""],[17,"WSAEINPROGRESS","",""],[17,"WSAEALREADY","",""],[17,"WSAENOTSOCK","",""],[17,"WSAEDESTADDRREQ","",""],[17,"WSAEMSGSIZE","",""],[17,"WSAEPROTOTYPE","",""],[17,"WSAENOPROTOOPT","",""],[17,"WSAEPROTONOSUPPORT","",""],[17,"WSAESOCKTNOSUPPORT","",""],[17,"WSAEOPNOTSUPP","",""],[17,"WSAEPFNOSUPPORT","",""],[17,"WSAEAFNOSUPPORT","",""],[17,"WSAEADDRINUSE","",""],[17,"WSAEADDRNOTAVAIL","",""],[17,"WSAENETDOWN","",""],[17,"WSAENETUNREACH","",""],[17,"WSAENETRESET","",""],[17,"WSAECONNABORTED","",""],[17,"WSAECONNRESET","",""],[17,"WSAENOBUFS","",""],[17,"WSAEISCONN","",""],[17,"WSAENOTCONN","",""],[17,"WSAESHUTDOWN","",""],[17,"WSAETOOMANYREFS","",""],[17,"WSAETIMEDOUT","",""],[17,"WSAECONNREFUSED","",""],[17,"WSAELOOP","",""],[17,"WSAENAMETOOLONG","",""],[17,"WSAEHOSTDOWN","",""],[17,"WSAEHOSTUNREACH","",""],[17,"WSAENOTEMPTY","",""],[17,"WSAEPROCLIM","",""],[17,"WSAEUSERS","",""],[17,"WSAEDQUOT","",""],[17,"WSAESTALE","",""],[17,"WSAEREMOTE","",""],[17,"WSASYSNOTREADY","",""],[17,"WSAVERNOTSUPPORTED","",""],[17,"WSANOTINITIALISED","",""],[17,"WSAEDISCON","",""],[17,"WSAENOMORE","",""],[17,"WSAECANCELLED","",""],[17,"WSAEINVALIDPROCTABLE","",""],[17,"WSAEINVALIDPROVIDER","",""],[17,"WSAEPROVIDERFAILEDINIT","",""],[0,"posix88","libc::consts::os",""],[17,"O_RDONLY","libc::consts::os::posix88",""],[17,"O_WRONLY","",""],[17,"O_RDWR","",""],[17,"O_APPEND","",""],[17,"O_CREAT","",""],[17,"O_EXCL","",""],[17,"O_TRUNC","",""],[17,"S_IFIFO","",""],[17,"S_IFCHR","",""],[17,"S_IFBLK","",""],[17,"S_IFDIR","",""],[17,"S_IFREG","",""],[17,"S_IFLNK","",""],[17,"S_IFMT","",""],[17,"S_IEXEC","",""],[17,"S_IWRITE","",""],[17,"S_IREAD","",""],[17,"S_IRWXU","",""],[17,"S_IXUSR","",""],[17,"S_IWUSR","",""],[17,"S_IRUSR","",""],[17,"F_OK","",""],[17,"R_OK","",""],[17,"W_OK","",""],[17,"X_OK","",""],[17,"STDIN_FILENO","",""],[17,"STDOUT_FILENO","",""],[17,"STDERR_FILENO","",""],[0,"bsd44","libc::consts::os",""],[17,"AF_INET","libc::consts::os::bsd44",""],[17,"AF_INET6","",""],[17,"SOCK_STREAM","",""],[17,"SOCK_DGRAM","",""],[17,"SOCK_RAW","",""],[17,"IPPROTO_TCP","",""],[17,"IPPROTO_IP","",""],[17,"IPPROTO_IPV6","",""],[17,"IP_MULTICAST_TTL","",""],[17,"IP_MULTICAST_LOOP","",""],[17,"IP_ADD_MEMBERSHIP","",""],[17,"IP_DROP_MEMBERSHIP","",""],[17,"IPV6_ADD_MEMBERSHIP","",""],[17,"IPV6_DROP_MEMBERSHIP","",""],[17,"IP_TTL","",""],[17,"IP_HDRINCL","",""],[17,"TCP_NODELAY","",""],[17,"SOL_SOCKET","",""],[17,"SO_KEEPALIVE","",""],[17,"SO_BROADCAST","",""],[17,"SO_REUSEADDR","",""],[17,"SO_ERROR","",""],[17,"IFF_LOOPBACK","",""],[17,"SHUT_RD","",""],[17,"SHUT_WR","",""],[17,"SHUT_RDWR","",""],[0,"extra","libc::consts::os",""],[17,"TRUE","libc::consts::os::extra",""],[17,"FALSE","",""],[17,"O_TEXT","",""],[17,"O_BINARY","",""],[17,"O_NOINHERIT","",""],[17,"ERROR_SUCCESS","",""],[17,"ERROR_INVALID_FUNCTION","",""],[17,"ERROR_FILE_NOT_FOUND","",""],[17,"ERROR_ACCESS_DENIED","",""],[17,"ERROR_INVALID_HANDLE","",""],[17,"ERROR_BROKEN_PIPE","",""],[17,"ERROR_DISK_FULL","",""],[17,"ERROR_CALL_NOT_IMPLEMENTED","",""],[17,"ERROR_INSUFFICIENT_BUFFER","",""],[17,"ERROR_INVALID_NAME","",""],[17,"ERROR_ALREADY_EXISTS","",""],[17,"ERROR_PIPE_BUSY","",""],[17,"ERROR_NO_DATA","",""],[17,"ERROR_INVALID_ADDRESS","",""],[17,"ERROR_PIPE_CONNECTED","",""],[17,"ERROR_NOTHING_TO_TERMINATE","",""],[17,"ERROR_OPERATION_ABORTED","",""],[17,"ERROR_IO_PENDING","",""],[17,"ERROR_FILE_INVALID","",""],[17,"ERROR_NOT_FOUND","",""],[17,"INVALID_HANDLE_VALUE","",""],[17,"DELETE","",""],[17,"READ_CONTROL","",""],[17,"SYNCHRONIZE","",""],[17,"WRITE_DAC","",""],[17,"WRITE_OWNER","",""],[17,"PROCESS_CREATE_PROCESS","",""],[17,"PROCESS_CREATE_THREAD","",""],[17,"PROCESS_DUP_HANDLE","",""],[17,"PROCESS_QUERY_INFORMATION","",""],[17,"PROCESS_QUERY_LIMITED_INFORMATION","",""],[17,"PROCESS_SET_INFORMATION","",""],[17,"PROCESS_SET_QUOTA","",""],[17,"PROCESS_SUSPEND_RESUME","",""],[17,"PROCESS_TERMINATE","",""],[17,"PROCESS_VM_OPERATION","",""],[17,"PROCESS_VM_READ","",""],[17,"PROCESS_VM_WRITE","",""],[17,"STARTF_FORCEONFEEDBACK","",""],[17,"STARTF_FORCEOFFFEEDBACK","",""],[17,"STARTF_PREVENTPINNING","",""],[17,"STARTF_RUNFULLSCREEN","",""],[17,"STARTF_TITLEISAPPID","",""],[17,"STARTF_TITLEISLINKNAME","",""],[17,"STARTF_USECOUNTCHARS","",""],[17,"STARTF_USEFILLATTRIBUTE","",""],[17,"STARTF_USEHOTKEY","",""],[17,"STARTF_USEPOSITION","",""],[17,"STARTF_USESHOWWINDOW","",""],[17,"STARTF_USESIZE","",""],[17,"STARTF_USESTDHANDLES","",""],[17,"WAIT_ABANDONED","",""],[17,"WAIT_OBJECT_0","",""],[17,"WAIT_TIMEOUT","",""],[17,"WAIT_FAILED","",""],[17,"DUPLICATE_CLOSE_SOURCE","",""],[17,"DUPLICATE_SAME_ACCESS","",""],[17,"INFINITE","",""],[17,"STILL_ACTIVE","",""],[17,"MEM_COMMIT","",""],[17,"MEM_RESERVE","",""],[17,"MEM_DECOMMIT","",""],[17,"MEM_RELEASE","",""],[17,"MEM_RESET","",""],[17,"MEM_RESET_UNDO","",""],[17,"MEM_LARGE_PAGES","",""],[17,"MEM_PHYSICAL","",""],[17,"MEM_TOP_DOWN","",""],[17,"MEM_WRITE_WATCH","",""],[17,"PAGE_EXECUTE","",""],[17,"PAGE_EXECUTE_READ","",""],[17,"PAGE_EXECUTE_READWRITE","",""],[17,"PAGE_EXECUTE_WRITECOPY","",""],[17,"PAGE_NOACCESS","",""],[17,"PAGE_READONLY","",""],[17,"PAGE_READWRITE","",""],[17,"PAGE_WRITECOPY","",""],[17,"PAGE_GUARD","",""],[17,"PAGE_NOCACHE","",""],[17,"PAGE_WRITECOMBINE","",""],[17,"SEC_COMMIT","",""],[17,"SEC_IMAGE","",""],[17,"SEC_IMAGE_NO_EXECUTE","",""],[17,"SEC_LARGE_PAGES","",""],[17,"SEC_NOCACHE","",""],[17,"SEC_RESERVE","",""],[17,"SEC_WRITECOMBINE","",""],[17,"FILE_MAP_ALL_ACCESS","",""],[17,"FILE_MAP_READ","",""],[17,"FILE_MAP_WRITE","",""],[17,"FILE_MAP_COPY","",""],[17,"FILE_MAP_EXECUTE","",""],[17,"PROCESSOR_ARCHITECTURE_INTEL","",""],[17,"PROCESSOR_ARCHITECTURE_ARM","",""],[17,"PROCESSOR_ARCHITECTURE_IA64","",""],[17,"PROCESSOR_ARCHITECTURE_AMD64","",""],[17,"PROCESSOR_ARCHITECTURE_UNKNOWN","",""],[17,"MOVEFILE_COPY_ALLOWED","",""],[17,"MOVEFILE_CREATE_HARDLINK","",""],[17,"MOVEFILE_DELAY_UNTIL_REBOOT","",""],[17,"MOVEFILE_FAIL_IF_NOT_TRACKABLE","",""],[17,"MOVEFILE_REPLACE_EXISTING","",""],[17,"MOVEFILE_WRITE_THROUGH","",""],[17,"SYMBOLIC_LINK_FLAG_DIRECTORY","",""],[17,"FILE_SHARE_DELETE","",""],[17,"FILE_SHARE_READ","",""],[17,"FILE_SHARE_WRITE","",""],[17,"CREATE_ALWAYS","",""],[17,"CREATE_NEW","",""],[17,"OPEN_ALWAYS","",""],[17,"OPEN_EXISTING","",""],[17,"TRUNCATE_EXISTING","",""],[17,"FILE_APPEND_DATA","",""],[17,"FILE_READ_DATA","",""],[17,"FILE_WRITE_DATA","",""],[17,"FILE_ATTRIBUTE_ARCHIVE","",""],[17,"FILE_ATTRIBUTE_COMPRESSED","",""],[17,"FILE_ATTRIBUTE_DEVICE","",""],[17,"FILE_ATTRIBUTE_DIRECTORY","",""],[17,"FILE_ATTRIBUTE_ENCRYPTED","",""],[17,"FILE_ATTRIBUTE_HIDDEN","",""],[17,"FILE_ATTRIBUTE_INTEGRITY_STREAM","",""],[17,"FILE_ATTRIBUTE_NORMAL","",""],[17,"FILE_ATTRIBUTE_NOT_CONTENT_INDEXED","",""],[17,"FILE_ATTRIBUTE_NO_SCRUB_DATA","",""],[17,"FILE_ATTRIBUTE_OFFLINE","",""],[17,"FILE_ATTRIBUTE_READONLY","",""],[17,"FILE_ATTRIBUTE_REPARSE_POINT","",""],[17,"FILE_ATTRIBUTE_SPARSE_FILE","",""],[17,"FILE_ATTRIBUTE_SYSTEM","",""],[17,"FILE_ATTRIBUTE_TEMPORARY","",""],[17,"FILE_ATTRIBUTE_VIRTUAL","",""],[17,"FILE_FLAG_BACKUP_SEMANTICS","",""],[17,"FILE_FLAG_DELETE_ON_CLOSE","",""],[17,"FILE_FLAG_NO_BUFFERING","",""],[17,"FILE_FLAG_OPEN_NO_RECALL","",""],[17,"FILE_FLAG_OPEN_REPARSE_POINT","",""],[17,"FILE_FLAG_OVERLAPPED","",""],[17,"FILE_FLAG_POSIX_SEMANTICS","",""],[17,"FILE_FLAG_RANDOM_ACCESS","",""],[17,"FILE_FLAG_SESSION_AWARE","",""],[17,"FILE_FLAG_SEQUENTIAL_SCAN","",""],[17,"FILE_FLAG_WRITE_THROUGH","",""],[17,"FILE_FLAG_FIRST_PIPE_INSTANCE","",""],[17,"FILE_NAME_NORMALIZED","",""],[17,"FILE_NAME_OPENED","",""],[17,"VOLUME_NAME_DOS","",""],[17,"VOLUME_NAME_GUID","",""],[17,"VOLUME_NAME_NONE","",""],[17,"VOLUME_NAME_NT","",""],[17,"GENERIC_READ","",""],[17,"GENERIC_WRITE","",""],[17,"GENERIC_EXECUTE","",""],[17,"GENERIC_ALL","",""],[17,"FILE_WRITE_ATTRIBUTES","",""],[17,"FILE_READ_ATTRIBUTES","",""],[17,"STANDARD_RIGHTS_READ","",""],[17,"STANDARD_RIGHTS_WRITE","",""],[17,"FILE_WRITE_EA","",""],[17,"FILE_READ_EA","",""],[17,"FILE_GENERIC_READ","",""],[17,"FILE_GENERIC_WRITE","",""],[17,"FILE_BEGIN","",""],[17,"FILE_CURRENT","",""],[17,"FILE_END","",""],[17,"MAX_PROTOCOL_CHAIN","",""],[17,"WSAPROTOCOL_LEN","",""],[17,"INVALID_SOCKET","",""],[17,"DETACHED_PROCESS","",""],[17,"CREATE_NEW_PROCESS_GROUP","",""],[17,"CREATE_UNICODE_ENVIRONMENT","",""],[17,"PIPE_ACCESS_DUPLEX","",""],[17,"PIPE_ACCESS_INBOUND","",""],[17,"PIPE_ACCESS_OUTBOUND","",""],[17,"PIPE_TYPE_BYTE","",""],[17,"PIPE_TYPE_MESSAGE","",""],[17,"PIPE_READMODE_BYTE","",""],[17,"PIPE_READMODE_MESSAGE","",""],[17,"PIPE_WAIT","",""],[17,"PIPE_NOWAIT","",""],[17,"PIPE_ACCEPT_REMOTE_CLIENTS","",""],[17,"PIPE_REJECT_REMOTE_CLIENTS","",""],[17,"PIPE_UNLIMITED_INSTANCES","",""],[17,"IPPROTO_RAW","",""],[17,"FIONBIO","",""],[0,"funcs","libc",""],[0,"c95","libc::funcs",""],[0,"ctype","libc::funcs::c95",""],[5,"isalnum","libc::funcs::c95::ctype",""],[5,"isalpha","",""],[5,"iscntrl","",""],[5,"isdigit","",""],[5,"isgraph","",""],[5,"islower","",""],[5,"isprint","",""],[5,"ispunct","",""],[5,"isspace","",""],[5,"isupper","",""],[5,"isxdigit","",""],[5,"tolower","",""],[5,"toupper","",""],[0,"stdio","libc::funcs::c95",""],[5,"fopen","libc::funcs::c95::stdio",""],[5,"freopen","",""],[5,"fflush","",""],[5,"fclose","",""],[5,"remove","",""],[5,"rename","",""],[5,"tmpfile","",""],[5,"setvbuf","",""],[5,"setbuf","",""],[5,"fgetc","",""],[5,"fgets","",""],[5,"fputc","",""],[5,"fputs","",""],[5,"puts","",""],[5,"ungetc","",""],[5,"fread","",""],[5,"fwrite","",""],[5,"fseek","",""],[5,"ftell","",""],[5,"rewind","",""],[5,"fgetpos","",""],[5,"fsetpos","",""],[5,"feof","",""],[5,"ferror","",""],[5,"perror","",""],[0,"stdlib","libc::funcs::c95",""],[5,"abs","libc::funcs::c95::stdlib",""],[5,"labs","",""],[5,"atof","",""],[5,"atoi","",""],[5,"strtod","",""],[5,"strtol","",""],[5,"strtoul","",""],[5,"calloc","",""],[5,"malloc","",""],[5,"realloc","",""],[5,"free","",""],[5,"exit","","Exits the running program in a possibly dangerous manner."],[5,"_exit","",""],[5,"atexit","",""],[5,"system","",""],[5,"getenv","",""],[5,"rand","",""],[5,"srand","",""],[0,"string","libc::funcs::c95",""],[5,"strcpy","libc::funcs::c95::string",""],[5,"strncpy","",""],[5,"strcat","",""],[5,"strncat","",""],[5,"strcmp","",""],[5,"strncmp","",""],[5,"strcoll","",""],[5,"strchr","",""],[5,"strrchr","",""],[5,"strspn","",""],[5,"strcspn","",""],[5,"strpbrk","",""],[5,"strstr","",""],[5,"strlen","",""],[5,"strerror","",""],[5,"strtok","",""],[5,"strxfrm","",""],[5,"wcslen","",""],[5,"memcmp","",""],[5,"memchr","",""],[0,"posix88","libc::funcs",""],[0,"stat_","libc::funcs::posix88",""],[5,"chmod","libc::funcs::posix88::stat_",""],[5,"wchmod","",""],[5,"mkdir","",""],[5,"wrmdir","",""],[5,"fstat","",""],[5,"stat","",""],[5,"wstat","",""],[5,"wutime","",""],[0,"stdio","libc::funcs::posix88",""],[5,"popen","libc::funcs::posix88::stdio",""],[5,"pclose","",""],[5,"fdopen","",""],[5,"fileno","",""],[0,"fcntl","libc::funcs::posix88",""],[5,"open","libc::funcs::posix88::fcntl",""],[5,"wopen","",""],[5,"creat","",""],[0,"unistd","libc::funcs::posix88",""],[5,"access","libc::funcs::posix88::unistd",""],[5,"chdir","",""],[5,"close","",""],[5,"dup","",""],[5,"dup2","",""],[5,"execv","",""],[5,"execve","",""],[5,"execvp","",""],[5,"execvpe","",""],[5,"getcwd","",""],[5,"getpid","",""],[5,"isatty","",""],[5,"lseek","",""],[5,"pipe","",""],[5,"read","",""],[5,"rmdir","",""],[5,"unlink","",""],[5,"write","",""],[0,"bsd43","libc::funcs",""],[5,"socket","libc::funcs::bsd43",""],[5,"connect","",""],[5,"bind","",""],[5,"listen","",""],[5,"accept","",""],[5,"getpeername","",""],[5,"getsockname","",""],[5,"setsockopt","",""],[5,"closesocket","",""],[5,"recv","",""],[5,"send","",""],[5,"recvfrom","",""],[5,"sendto","",""],[5,"shutdown","",""],[0,"extra","libc::funcs",""],[0,"kernel32","libc::funcs::extra",""],[5,"GetEnvironmentVariableW","libc::funcs::extra::kernel32",""],[5,"SetEnvironmentVariableW","",""],[5,"GetEnvironmentStringsW","",""],[5,"FreeEnvironmentStringsW","",""],[5,"GetModuleFileNameW","",""],[5,"CreateDirectoryW","",""],[5,"CopyFileW","",""],[5,"DeleteFileW","",""],[5,"RemoveDirectoryW","",""],[5,"GetCurrentDirectoryW","",""],[5,"SetCurrentDirectoryW","",""],[5,"GetLastError","",""],[5,"FindFirstFileW","",""],[5,"FindNextFileW","",""],[5,"FindClose","",""],[5,"DuplicateHandle","",""],[5,"CloseHandle","",""],[5,"OpenProcess","",""],[5,"GetCurrentProcess","",""],[5,"CreateProcessW","",""],[5,"WaitForSingleObject","",""],[5,"TerminateProcess","",""],[5,"GetExitCodeProcess","",""],[5,"GetSystemInfo","",""],[5,"VirtualAlloc","",""],[5,"VirtualFree","",""],[5,"VirtualLock","",""],[5,"VirtualUnlock","",""],[5,"VirtualProtect","",""],[5,"VirtualQuery","",""],[5,"CreateFileMappingW","",""],[5,"MapViewOfFile","",""],[5,"UnmapViewOfFile","",""],[5,"MoveFileExW","",""],[5,"CreateHardLinkW","",""],[5,"FlushFileBuffers","",""],[5,"CreateFileW","",""],[5,"ReadFile","",""],[5,"WriteFile","",""],[5,"SetFilePointerEx","",""],[5,"SetEndOfFile","",""],[5,"GetSystemTimeAsFileTime","",""],[5,"QueryPerformanceFrequency","",""],[5,"QueryPerformanceCounter","",""],[5,"GetCurrentProcessId","",""],[5,"CreateNamedPipeW","",""],[5,"ConnectNamedPipe","",""],[5,"WaitNamedPipeW","",""],[5,"SetNamedPipeHandleState","",""],[5,"CreateEventW","",""],[5,"GetOverlappedResult","",""],[5,"DisconnectNamedPipe","",""],[0,"msvcrt","libc::funcs::extra",""],[5,"commit","libc::funcs::extra::msvcrt",""],[5,"get_osfhandle","",""],[5,"open_osfhandle","",""],[0,"winsock","libc::funcs::extra",""],[5,"ioctlsocket","libc::funcs::extra::winsock",""]],"paths":[[4,"c_void"],[3,"stat"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"sockaddr"],[3,"sockaddr_storage"],[3,"sockaddr_in"],[3,"in_addr"],[3,"sockaddr_in6"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ip6_mreq"],[3,"addrinfo"],[3,"sockaddr_un"],[3,"SECURITY_ATTRIBUTES"],[3,"STARTUPINFO"],[3,"PROCESS_INFORMATION"],[3,"SYSTEM_INFO"],[3,"MEMORY_BASIC_INFORMATION"],[3,"OVERLAPPED"],[3,"FILETIME"],[3,"GUID"],[3,"WSAPROTOCOLCHAIN"],[3,"WSAPROTOCOL_INFO"],[3,"WIN32_FIND_DATAW"]]};
searchIndex['fmt_macros'] = {"items":[[0,"","fmt_macros","Macro support for format strings"],[3,"Argument","","Representation of an argument specification."],[12,"position","","Where to find this argument",0],[12,"format","","How to format the argument",0],[3,"FormatSpec","","Specification for the formatting of an argument in the format string."],[12,"fill","","Optionally specified character to fill alignment with",1],[12,"align","","Optionally specified alignment",1],[12,"flags","","Packed version of various flags provided",1],[12,"precision","","The integer precision to use",1],[12,"width","","The string width requested for the resulting format",1],[12,"ty","","The descriptor string representing the name of the format desired for\nthis argument, this can be empty or any number of characters, although\nit is required to be one word.",1],[3,"Parser","","The parser structure for interpreting the input format string. This is\nmodelled as an iterator over `Piece` structures to form a stream of tokens\nbeing output."],[12,"errors","","Error messages accumulated during parsing",2],[4,"Piece","","A piece is a portion of the format string which represents the next part\nto emit. These are emitted as a stream by the `Parser` class."],[13,"String","","A literal string which should directly be emitted",3],[13,"NextArgument","","This describes that formatting should process the next argument (as\nspecified inside) for emission.",3],[4,"Position","","Enum describing where an argument for a format can be located."],[13,"ArgumentNext","","The argument will be in the next position. This is the default.",4],[13,"ArgumentIs","","The argument is located at a specific index.",4],[13,"ArgumentNamed","","The argument has a name.",4],[4,"Alignment","","Enum of alignments which are supported."],[13,"AlignLeft","","The value will be aligned to the left.",5],[13,"AlignRight","","The value will be aligned to the right.",5],[13,"AlignCenter","","The value will be aligned in the center.",5],[13,"AlignUnknown","","The value will take on a default alignment.",5],[4,"Flag","","Various flags which can be applied to format strings. The meaning of these\nflags is defined by the formatters themselves."],[13,"FlagSignPlus","","A `+` will be used to denote positive numbers.",6],[13,"FlagSignMinus","","A `-` will be used to denote negative numbers. This is the default.",6],[13,"FlagAlternate","","An alternate form will be used for the value. In the case of numbers,\nthis means that the number will be prefixed with the supplied string.",6],[13,"FlagSignAwareZeroPad","","For numbers, this means that the number will be padded with zeroes,\nand the sign (`+` or `-`) will precede them.",6],[4,"Count","","A count is used for the precision and width parameters of an integer, and\ncan reference either an argument or a literal integer."],[13,"CountIs","","The count is specified explicitly.",7],[13,"CountIsName","","The count is specified by the argument with the given name.",7],[13,"CountIsParam","","The count is specified by the argument at the given index.",7],[13,"CountIsNextParam","","The count is specified by the next parameter.",7],[13,"CountImplied","","The count is implied and cannot be explicitly specified.",7],[11,"eq","","",3],[11,"ne","","",3],[11,"eq","","",0],[11,"ne","","",0],[11,"eq","","",1],[11,"ne","","",1],[11,"eq","","",4],[11,"ne","","",4],[11,"eq","","",5],[11,"ne","","",5],[11,"eq","","",6],[11,"ne","","",6],[11,"eq","","",7],[11,"ne","","",7],[6,"Item","",""],[11,"next","","",2],[11,"new","","Creates a new parser for the given format string",2]],"paths":[[3,"Argument"],[3,"FormatSpec"],[3,"Parser"],[4,"Piece"],[4,"Position"],[4,"Alignment"],[4,"Flag"],[4,"Count"]]};
searchIndex['rustc_bitflags'] = {"items":[[0,"","rustc_bitflags","A typesafe bitmask flag generator."],[14,"bitflags!","","The `bitflags!` macro generates a `struct` that holds a set of C-style\nbitmask flags. It is useful for creating typesafe wrappers for C APIs."]],"paths":[]};
initSearch(searchIndex);
